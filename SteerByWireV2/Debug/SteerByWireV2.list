
SteerByWireV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c24  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004d30  08004d30  00005d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d70  08004d70  0000605c  2**0
                  CONTENTS
  4 .ARM          00000000  08004d70  08004d70  0000605c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004d70  08004d70  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08004d70  08004d70  00005d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  08004d78  08004d78  00005d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004d80  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  2000005c  08004ddc  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002bc  08004ddc  000062bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000183ab  00000000  00000000  00006085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031f4  00000000  00000000  0001e430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001248  00000000  00000000  00021628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dea  00000000  00000000  00022870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b135  00000000  00000000  0002365a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011f78  00000000  00000000  0003e78f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000989b4  00000000  00000000  00050707  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e90bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052ac  00000000  00000000  000e9100  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000ee3ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004d18 	.word	0x08004d18

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08004d18 	.word	0x08004d18

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ba:	2afd      	cmp	r2, #253	@ 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	@ 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	@ 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	@ 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2iz>:
 80006f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80006fc:	d30f      	bcc.n	800071e <__aeabi_f2iz+0x2a>
 80006fe:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d90d      	bls.n	8000724 <__aeabi_f2iz+0x30>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000710:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000714:	fa23 f002 	lsr.w	r0, r3, r2
 8000718:	bf18      	it	ne
 800071a:	4240      	negne	r0, r0
 800071c:	4770      	bx	lr
 800071e:	f04f 0000 	mov.w	r0, #0
 8000722:	4770      	bx	lr
 8000724:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000728:	d101      	bne.n	800072e <__aeabi_f2iz+0x3a>
 800072a:	0242      	lsls	r2, r0, #9
 800072c:	d105      	bne.n	800073a <__aeabi_f2iz+0x46>
 800072e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000732:	bf08      	it	eq
 8000734:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000738:	4770      	bx	lr
 800073a:	f04f 0000 	mov.w	r0, #0
 800073e:	4770      	bx	lr

08000740 <_ZNSt12_Vector_baseImSaImEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	4618      	mov	r0, r3
 800074c:	f000 f903 	bl	8000956 <_ZNSt12_Vector_baseImSaImEE12_Vector_implC1Ev>
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	4618      	mov	r0, r3
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}

0800075a <_ZNSt6vectorImSaImEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 800075a:	b580      	push	{r7, lr}
 800075c:	b082      	sub	sp, #8
 800075e:	af00      	add	r7, sp, #0
 8000760:	6078      	str	r0, [r7, #4]
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	4618      	mov	r0, r3
 8000766:	f7ff ffeb 	bl	8000740 <_ZNSt12_Vector_baseImSaImEEC1Ev>
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	4618      	mov	r0, r3
 800076e:	3708      	adds	r7, #8
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <_ZNSt12_Vector_baseIySaIyEEC1Ev>:
      _Vector_base() = default;
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	4618      	mov	r0, r3
 8000780:	f000 f8f9 	bl	8000976 <_ZNSt12_Vector_baseIySaIyEE12_Vector_implC1Ev>
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	4618      	mov	r0, r3
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}

0800078e <_ZNSt6vectorIySaIyEEC1Ev>:
      vector() = default;
 800078e:	b580      	push	{r7, lr}
 8000790:	b082      	sub	sp, #8
 8000792:	af00      	add	r7, sp, #0
 8000794:	6078      	str	r0, [r7, #4]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff ffeb 	bl	8000774 <_ZNSt12_Vector_baseIySaIyEEC1Ev>
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	4618      	mov	r0, r3
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <_ZN6CANBusC1Ev>:
 *      Author: Rolan van Bommel
 */

#include "CAN_bus.hpp"

CANBus::CANBus() {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	331c      	adds	r3, #28
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff ffd0 	bl	800075a <_ZNSt6vectorImSaImEEC1Ev>
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	3328      	adds	r3, #40	@ 0x28
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff ffe5 	bl	800078e <_ZNSt6vectorIySaIyEEC1Ev>
    // Constructor implementation (if needed)
}
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	4618      	mov	r0, r3
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}

080007ce <_ZN6CANBus5startEP17CAN_HandleTypeDefh>:

void CANBus::start(CAN_HandleTypeDef* hcan, uint8_t LIDEE){
 80007ce:	b580      	push	{r7, lr}
 80007d0:	b084      	sub	sp, #16
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	60f8      	str	r0, [r7, #12]
 80007d6:	60b9      	str	r1, [r7, #8]
 80007d8:	4613      	mov	r3, r2
 80007da:	71fb      	strb	r3, [r7, #7]

	// Start CAN bus
    HAL_CAN_Start(hcan);
 80007dc:	68b8      	ldr	r0, [r7, #8]
 80007de:	f002 f81c 	bl	800281a <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80007e2:	2102      	movs	r1, #2
 80007e4:	68b8      	ldr	r0, [r7, #8]
 80007e6:	f002 fa4c 	bl	8002c82 <HAL_CAN_ActivateNotification>

    if(LIDEE == CAN_ID_STD){
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d107      	bne.n	8000800 <_ZN6CANBus5startEP17CAN_HandleTypeDefh+0x32>
        TxHeader.ExtId = 0;		// 0 is standaard ID , 4 is extended ID
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	2200      	movs	r2, #0
 80007f4:	605a      	str	r2, [r3, #4]
        TxHeader.StdId = 2047;  // Set CAN ID to 2047
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	e006      	b.n	800080e <_ZN6CANBus5startEP17CAN_HandleTypeDefh+0x40>
    }
    else{
        TxHeader.ExtId = 2047;		// 0 is standaard ID , 4 is extended ID
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000806:	605a      	str	r2, [r3, #4]
        TxHeader.StdId = 0;  // Set CAN ID to 2047
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
    }
    // Initialize default values for CAN headers
    TxHeader.DLC = 8;
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	2208      	movs	r2, #8
 8000812:	611a      	str	r2, [r3, #16]
    TxHeader.IDE = LIDEE;    // standaard ID = CAN_ID_STD, extended ID = CAN_ID_EXT
 8000814:	79fa      	ldrb	r2, [r7, #7]
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	609a      	str	r2, [r3, #8]
    TxHeader.RTR = CAN_RTR_DATA;
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	2200      	movs	r2, #0
 800081e:	60da      	str	r2, [r3, #12]
    TxHeader.TransmitGlobalTime = DISABLE;
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	2200      	movs	r2, #0
 8000824:	751a      	strb	r2, [r3, #20]

}
 8000826:	bf00      	nop
 8000828:	3710      	adds	r7, #16
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}

0800082e <_ZN6CANBus8transmitEP17CAN_HandleTypeDefPht>:

// Transmit data
void CANBus::transmit(CAN_HandleTypeDef* hcan, uint8_t* TxData, uint16_t id) {
 800082e:	b580      	push	{r7, lr}
 8000830:	b084      	sub	sp, #16
 8000832:	af00      	add	r7, sp, #0
 8000834:	60f8      	str	r0, [r7, #12]
 8000836:	60b9      	str	r1, [r7, #8]
 8000838:	607a      	str	r2, [r7, #4]
 800083a:	807b      	strh	r3, [r7, #2]
    if (TxHeader.IDE == CAN_ID_STD){
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	689b      	ldr	r3, [r3, #8]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d103      	bne.n	800084c <_ZN6CANBus8transmitEP17CAN_HandleTypeDefPht+0x1e>
    	TxHeader.StdId = id;
 8000844:	887a      	ldrh	r2, [r7, #2]
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	e002      	b.n	8000852 <_ZN6CANBus8transmitEP17CAN_HandleTypeDefPht+0x24>
    }
    else{
    	TxHeader.ExtId = id;
 800084c:	887a      	ldrh	r2, [r7, #2]
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	605a      	str	r2, [r3, #4]
    }
	TxHeader.DLC = 8;
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	2208      	movs	r2, #8
 8000856:	611a      	str	r2, [r3, #16]
    HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox);
 8000858:	68f9      	ldr	r1, [r7, #12]
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	3318      	adds	r3, #24
 800085e:	687a      	ldr	r2, [r7, #4]
 8000860:	68b8      	ldr	r0, [r7, #8]
 8000862:	f002 f81e 	bl	80028a2 <HAL_CAN_AddTxMessage>
}
 8000866:	bf00      	nop
 8000868:	3710      	adds	r7, #16
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <_ZN6CANBus15configureFilterEP17CAN_HandleTypeDeftthh>:

void CANBus::configureFilter(CAN_HandleTypeDef* hcan, uint16_t ID, uint16_t Mask, uint8_t filterBank, uint8_t slaveFilterBank){
 800086e:	b580      	push	{r7, lr}
 8000870:	b08e      	sub	sp, #56	@ 0x38
 8000872:	af00      	add	r7, sp, #0
 8000874:	60f8      	str	r0, [r7, #12]
 8000876:	60b9      	str	r1, [r7, #8]
 8000878:	4611      	mov	r1, r2
 800087a:	461a      	mov	r2, r3
 800087c:	460b      	mov	r3, r1
 800087e:	80fb      	strh	r3, [r7, #6]
 8000880:	4613      	mov	r3, r2
 8000882:	80bb      	strh	r3, [r7, #4]

	  CAN_FilterTypeDef canFilterConfig;

	  canFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8000884:	2301      	movs	r3, #1
 8000886:	633b      	str	r3, [r7, #48]	@ 0x30
	  canFilterConfig.FilterBank = filterBank;
 8000888:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800088c:	627b      	str	r3, [r7, #36]	@ 0x24
	  canFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800088e:	2300      	movs	r3, #0
 8000890:	623b      	str	r3, [r7, #32]
	  canFilterConfig.FilterIdHigh = 0 << 5;
 8000892:	2300      	movs	r3, #0
 8000894:	613b      	str	r3, [r7, #16]
	  canFilterConfig.FilterIdLow = 0x0000;
 8000896:	2300      	movs	r3, #0
 8000898:	617b      	str	r3, [r7, #20]
	  canFilterConfig.FilterMaskIdHigh = 0 << 5;
 800089a:	2300      	movs	r3, #0
 800089c:	61bb      	str	r3, [r7, #24]
	  canFilterConfig.FilterMaskIdLow = 0x0000;
 800089e:	2300      	movs	r3, #0
 80008a0:	61fb      	str	r3, [r7, #28]
	  canFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80008a2:	2300      	movs	r3, #0
 80008a4:	62bb      	str	r3, [r7, #40]	@ 0x28
	  canFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80008a6:	2301      	movs	r3, #1
 80008a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  canFilterConfig.SlaveStartFilterBank = slaveFilterBank;
 80008aa:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80008ae:	637b      	str	r3, [r7, #52]	@ 0x34

	  HAL_CAN_ConfigFilter(hcan, &canFilterConfig);
 80008b0:	f107 0310 	add.w	r3, r7, #16
 80008b4:	4619      	mov	r1, r3
 80008b6:	68b8      	ldr	r0, [r7, #8]
 80008b8:	f001 fee6 	bl	8002688 <HAL_CAN_ConfigFilter>
}
 80008bc:	bf00      	nop
 80008be:	3738      	adds	r7, #56	@ 0x38
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <_ZN6CANBus12dataSplitterEmPh>:
void CANBus::storeCAN(uint32_t can_id, uint64_t Data){
	can_IDs.push_back(can_id);
    can_DATA.push_back(Data);
}

void CANBus::dataSplitter(uint32_t data, uint8_t* bytes) {
 80008c4:	b480      	push	{r7}
 80008c6:	b085      	sub	sp, #20
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	60f8      	str	r0, [r7, #12]
 80008cc:	60b9      	str	r1, [r7, #8]
 80008ce:	607a      	str	r2, [r7, #4]
    // Split the 32-bit integer into 4 bytes
    bytes[0] = (data >> 24) & 0xFF; // Most significant byte
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	0e1b      	lsrs	r3, r3, #24
 80008d4:	b2da      	uxtb	r2, r3
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	701a      	strb	r2, [r3, #0]
    bytes[1] = (data >> 16) & 0xFF;
 80008da:	68bb      	ldr	r3, [r7, #8]
 80008dc:	0c1a      	lsrs	r2, r3, #16
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	3301      	adds	r3, #1
 80008e2:	b2d2      	uxtb	r2, r2
 80008e4:	701a      	strb	r2, [r3, #0]
    bytes[2] = (data >> 8) & 0xFF;
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	0a1a      	lsrs	r2, r3, #8
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	3302      	adds	r3, #2
 80008ee:	b2d2      	uxtb	r2, r2
 80008f0:	701a      	strb	r2, [r3, #0]
    bytes[3] = data & 0xFF;         // Least significant byte
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	3303      	adds	r3, #3
 80008f6:	68ba      	ldr	r2, [r7, #8]
 80008f8:	b2d2      	uxtb	r2, r2
 80008fa:	701a      	strb	r2, [r3, #0]
}
 80008fc:	bf00      	nop
 80008fe:	3714      	adds	r7, #20
 8000900:	46bd      	mov	sp, r7
 8000902:	bc80      	pop	{r7}
 8000904:	4770      	bx	lr

08000906 <_ZN6CANBus10dataMergerEPh>:

uint32_t CANBus::dataMerger(uint8_t *data) {
 8000906:	b480      	push	{r7}
 8000908:	b085      	sub	sp, #20
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
 800090e:	6039      	str	r1, [r7, #0]
    uint32_t extracted_value = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	60fb      	str	r3, [r7, #12]
    extracted_value |= (uint32_t)data[0] << 24; // Most significant byte
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	061b      	lsls	r3, r3, #24
 800091a:	68fa      	ldr	r2, [r7, #12]
 800091c:	4313      	orrs	r3, r2
 800091e:	60fb      	str	r3, [r7, #12]
    extracted_value |= (uint32_t)data[1] << 16;
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	3301      	adds	r3, #1
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	041b      	lsls	r3, r3, #16
 8000928:	68fa      	ldr	r2, [r7, #12]
 800092a:	4313      	orrs	r3, r2
 800092c:	60fb      	str	r3, [r7, #12]
    extracted_value |= (uint32_t)data[2] << 8;
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	3302      	adds	r3, #2
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	021b      	lsls	r3, r3, #8
 8000936:	68fa      	ldr	r2, [r7, #12]
 8000938:	4313      	orrs	r3, r2
 800093a:	60fb      	str	r3, [r7, #12]
    extracted_value |= (uint32_t)data[3];      // Least significant byte
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	3303      	adds	r3, #3
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	461a      	mov	r2, r3
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	4313      	orrs	r3, r2
 8000948:	60fb      	str	r3, [r7, #12]
    return extracted_value;
 800094a:	68fb      	ldr	r3, [r7, #12]
}
 800094c:	4618      	mov	r0, r3
 800094e:	3714      	adds	r7, #20
 8000950:	46bd      	mov	sp, r7
 8000952:	bc80      	pop	{r7}
 8000954:	4770      	bx	lr

08000956 <_ZNSt12_Vector_baseImSaImEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8000956:	b580      	push	{r7, lr}
 8000958:	b082      	sub	sp, #8
 800095a:	af00      	add	r7, sp, #0
 800095c:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800095e:	6878      	ldr	r0, [r7, #4]
 8000960:	f000 f819 	bl	8000996 <_ZNSaImEC1Ev>
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	4618      	mov	r0, r3
 8000968:	f000 f821 	bl	80009ae <_ZNSt12_Vector_baseImSaImEE17_Vector_impl_dataC1Ev>
	{ }
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	4618      	mov	r0, r3
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}

08000976 <_ZNSt12_Vector_baseIySaIyEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8000976:	b580      	push	{r7, lr}
 8000978:	b082      	sub	sp, #8
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800097e:	6878      	ldr	r0, [r7, #4]
 8000980:	f000 f853 	bl	8000a2a <_ZNSaIyEC1Ev>
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	4618      	mov	r0, r3
 8000988:	f000 f85b 	bl	8000a42 <_ZNSt12_Vector_baseIySaIyEE17_Vector_impl_dataC1Ev>
	{ }
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	4618      	mov	r0, r3
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}

08000996 <_ZNSaImEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 8000996:	b580      	push	{r7, lr}
 8000998:	b082      	sub	sp, #8
 800099a:	af00      	add	r7, sp, #0
 800099c:	6078      	str	r0, [r7, #4]
 800099e:	6878      	ldr	r0, [r7, #4]
 80009a0:	f000 f88d 	bl	8000abe <_ZNSt15__new_allocatorImEC1Ev>
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	4618      	mov	r0, r3
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}

080009ae <_ZNSt12_Vector_baseImSaImEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80009ae:	b480      	push	{r7}
 80009b0:	b083      	sub	sp, #12
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2200      	movs	r2, #0
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
	{ }
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	4618      	mov	r0, r3
 80009cc:	370c      	adds	r7, #12
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bc80      	pop	{r7}
 80009d2:	4770      	bx	lr

080009d4 <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj>:
      _M_deallocate(pointer __p, size_t __n)
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	60f8      	str	r0, [r7, #12]
 80009dc:	60b9      	str	r1, [r7, #8]
 80009de:	607a      	str	r2, [r7, #4]
	if (__p)
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d005      	beq.n	80009f2 <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	687a      	ldr	r2, [r7, #4]
 80009ea:	68b9      	ldr	r1, [r7, #8]
 80009ec:	4618      	mov	r0, r3
 80009ee:	f000 f870 	bl	8000ad2 <_ZNSt16allocator_traitsISaImEE10deallocateERS0_Pmj>
      }
 80009f2:	bf00      	nop
 80009f4:	3710      	adds	r7, #16
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80009fa:	b480      	push	{r7}
 80009fc:	b083      	sub	sp, #12
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4618      	mov	r0, r3
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bc80      	pop	{r7}
 8000a0c:	4770      	bx	lr

08000a0e <_ZSt8_DestroyIPmmEvT_S1_RSaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	b084      	sub	sp, #16
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	60f8      	str	r0, [r7, #12]
 8000a16:	60b9      	str	r1, [r7, #8]
 8000a18:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8000a1a:	68b9      	ldr	r1, [r7, #8]
 8000a1c:	68f8      	ldr	r0, [r7, #12]
 8000a1e:	f000 f867 	bl	8000af0 <_ZSt8_DestroyIPmEvT_S1_>
    }
 8000a22:	bf00      	nop
 8000a24:	3710      	adds	r7, #16
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <_ZNSaIyEC1Ev>:
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	b082      	sub	sp, #8
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	6078      	str	r0, [r7, #4]
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f000 f869 	bl	8000b0a <_ZNSt15__new_allocatorIyEC1Ev>
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <_ZNSt12_Vector_baseIySaIyEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8000a42:	b480      	push	{r7}
 8000a44:	b083      	sub	sp, #12
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2200      	movs	r2, #0
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
	{ }
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	4618      	mov	r0, r3
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bc80      	pop	{r7}
 8000a66:	4770      	bx	lr

08000a68 <_ZNSt12_Vector_baseIySaIyEE13_M_deallocateEPyj>:
      _M_deallocate(pointer __p, size_t __n)
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	60b9      	str	r1, [r7, #8]
 8000a72:	607a      	str	r2, [r7, #4]
	if (__p)
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d005      	beq.n	8000a86 <_ZNSt12_Vector_baseIySaIyEE13_M_deallocateEPyj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	687a      	ldr	r2, [r7, #4]
 8000a7e:	68b9      	ldr	r1, [r7, #8]
 8000a80:	4618      	mov	r0, r3
 8000a82:	f000 f84c 	bl	8000b1e <_ZNSt16allocator_traitsISaIyEE10deallocateERS0_Pyj>
      }
 8000a86:	bf00      	nop
 8000a88:	3710      	adds	r7, #16
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <_ZNSt12_Vector_baseIySaIyEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8000a8e:	b480      	push	{r7}
 8000a90:	b083      	sub	sp, #12
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bc80      	pop	{r7}
 8000aa0:	4770      	bx	lr

08000aa2 <_ZSt8_DestroyIPyyEvT_S1_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b084      	sub	sp, #16
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	60f8      	str	r0, [r7, #12]
 8000aaa:	60b9      	str	r1, [r7, #8]
 8000aac:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8000aae:	68b9      	ldr	r1, [r7, #8]
 8000ab0:	68f8      	ldr	r0, [r7, #12]
 8000ab2:	f000 f843 	bl	8000b3c <_ZSt8_DestroyIPyEvT_S1_>
    }
 8000ab6:	bf00      	nop
 8000ab8:	3710      	adds	r7, #16
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}

08000abe <_ZNSt15__new_allocatorImEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000abe:	b480      	push	{r7}
 8000ac0:	b083      	sub	sp, #12
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bc80      	pop	{r7}
 8000ad0:	4770      	bx	lr

08000ad2 <_ZNSt16allocator_traitsISaImEE10deallocateERS0_Pmj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	b084      	sub	sp, #16
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	60f8      	str	r0, [r7, #12]
 8000ada:	60b9      	str	r1, [r7, #8]
 8000adc:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	68b9      	ldr	r1, [r7, #8]
 8000ae2:	68f8      	ldr	r0, [r7, #12]
 8000ae4:	f000 f837 	bl	8000b56 <_ZNSt15__new_allocatorImE10deallocateEPmj>
 8000ae8:	bf00      	nop
 8000aea:	3710      	adds	r7, #16
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <_ZSt8_DestroyIPmEvT_S1_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	6039      	str	r1, [r7, #0]
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8000afa:	6839      	ldr	r1, [r7, #0]
 8000afc:	6878      	ldr	r0, [r7, #4]
 8000afe:	f000 f83a 	bl	8000b76 <_ZNSt12_Destroy_auxILb1EE9__destroyIPmEEvT_S3_>
    }
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <_ZNSt15__new_allocatorIyEC1Ev>:
 8000b0a:	b480      	push	{r7}
 8000b0c:	b083      	sub	sp, #12
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4618      	mov	r0, r3
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bc80      	pop	{r7}
 8000b1c:	4770      	bx	lr

08000b1e <_ZNSt16allocator_traitsISaIyEE10deallocateERS0_Pyj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b084      	sub	sp, #16
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	60f8      	str	r0, [r7, #12]
 8000b26:	60b9      	str	r1, [r7, #8]
 8000b28:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8000b2a:	687a      	ldr	r2, [r7, #4]
 8000b2c:	68b9      	ldr	r1, [r7, #8]
 8000b2e:	68f8      	ldr	r0, [r7, #12]
 8000b30:	f000 f82b 	bl	8000b8a <_ZNSt15__new_allocatorIyE10deallocateEPyj>
 8000b34:	bf00      	nop
 8000b36:	3710      	adds	r7, #16
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <_ZSt8_DestroyIPyEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8000b46:	6839      	ldr	r1, [r7, #0]
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f000 f82e 	bl	8000baa <_ZNSt12_Destroy_auxILb1EE9__destroyIPyEEvT_S3_>
    }
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <_ZNSt15__new_allocatorImE10deallocateEPmj>:
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b084      	sub	sp, #16
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	60f8      	str	r0, [r7, #12]
 8000b5e:	60b9      	str	r1, [r7, #8]
 8000b60:	607a      	str	r2, [r7, #4]
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	4619      	mov	r1, r3
 8000b68:	68b8      	ldr	r0, [r7, #8]
 8000b6a:	f004 f847 	bl	8004bfc <_ZdlPvj>
      }
 8000b6e:	bf00      	nop
 8000b70:	3710      	adds	r7, #16
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <_ZNSt12_Destroy_auxILb1EE9__destroyIPmEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8000b76:	b480      	push	{r7}
 8000b78:	b083      	sub	sp, #12
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
 8000b7e:	6039      	str	r1, [r7, #0]
 8000b80:	bf00      	nop
 8000b82:	370c      	adds	r7, #12
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bc80      	pop	{r7}
 8000b88:	4770      	bx	lr

08000b8a <_ZNSt15__new_allocatorIyE10deallocateEPyj>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b084      	sub	sp, #16
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	60f8      	str	r0, [r7, #12]
 8000b92:	60b9      	str	r1, [r7, #8]
 8000b94:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	00db      	lsls	r3, r3, #3
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	68b8      	ldr	r0, [r7, #8]
 8000b9e:	f004 f82d 	bl	8004bfc <_ZdlPvj>
      }
 8000ba2:	bf00      	nop
 8000ba4:	3710      	adds	r7, #16
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <_ZNSt12_Destroy_auxILb1EE9__destroyIPyEEvT_S3_>:
 8000baa:	b480      	push	{r7}
 8000bac:	b083      	sub	sp, #12
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
 8000bb2:	6039      	str	r1, [r7, #0]
 8000bb4:	bf00      	nop
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bc80      	pop	{r7}
 8000bbc:	4770      	bx	lr

08000bbe <_ZN13CurrentSensorC1EP19__ADC_HandleTypeDeffff>:
 */

#include "CurrentSensor.hpp"

// Constructor: Initializes the ADC instance for the current sensor
CurrentSensor::CurrentSensor(ADC_HandleTypeDef* hadc, float refVoltage, float sensitivity, float offset)
 8000bbe:	b480      	push	{r7}
 8000bc0:	b085      	sub	sp, #20
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	60f8      	str	r0, [r7, #12]
 8000bc6:	60b9      	str	r1, [r7, #8]
 8000bc8:	607a      	str	r2, [r7, #4]
 8000bca:	603b      	str	r3, [r7, #0]
    : hadc(hadc), vRef(refVoltage), sensitivity(sensitivity), offset(offset) {}
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	68ba      	ldr	r2, [r7, #8]
 8000bd0:	601a      	str	r2, [r3, #0]
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	687a      	ldr	r2, [r7, #4]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	683a      	ldr	r2, [r7, #0]
 8000bdc:	609a      	str	r2, [r3, #8]
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	69ba      	ldr	r2, [r7, #24]
 8000be2:	60da      	str	r2, [r3, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	4618      	mov	r0, r3
 8000be8:	3714      	adds	r7, #20
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bc80      	pop	{r7}
 8000bee:	4770      	bx	lr

08000bf0 <_ZN13CurrentSensor10getCurrentEv>:

float CurrentSensor::getCurrent(){
 8000bf0:	b590      	push	{r4, r7, lr}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
	HAL_ADC_PollForConversion(hadc, 10);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	210a      	movs	r1, #10
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f001 f9a2 	bl	8001f48 <HAL_ADC_PollForConversion>
	float adcValue = HAL_ADC_GetValue(hadc);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f001 faa3 	bl	8002154 <HAL_ADC_GetValue>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fb51 	bl	80002b8 <__aeabi_ui2f>
 8000c16:	4603      	mov	r3, r0
 8000c18:	60fb      	str	r3, [r7, #12]

	return (offset - (adcValue * (vRef/4095)))/sensitivity;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	68dc      	ldr	r4, [r3, #12]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	490d      	ldr	r1, [pc, #52]	@ (8000c58 <_ZN13CurrentSensor10getCurrentEv+0x68>)
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff fc53 	bl	80004d0 <__aeabi_fdiv>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	68f9      	ldr	r1, [r7, #12]
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff fb9a 	bl	8000368 <__aeabi_fmul>
 8000c34:	4603      	mov	r3, r0
 8000c36:	4619      	mov	r1, r3
 8000c38:	4620      	mov	r0, r4
 8000c3a:	f7ff fa8b 	bl	8000154 <__aeabi_fsub>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	461a      	mov	r2, r3
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	689b      	ldr	r3, [r3, #8]
 8000c46:	4619      	mov	r1, r3
 8000c48:	4610      	mov	r0, r2
 8000c4a:	f7ff fc41 	bl	80004d0 <__aeabi_fdiv>
 8000c4e:	4603      	mov	r3, r0
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3714      	adds	r7, #20
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd90      	pop	{r4, r7, pc}
 8000c58:	457ff000 	.word	0x457ff000

08000c5c <_ZN7EncoderC1EP12MotorControlP17TIM_HandleTypeDefS3_tf>:
 */
 
#include "encoder.hpp"
#include "cmath"

Encoder::Encoder(MotorControl* motorControl, TIM_HandleTypeDef* enc1, TIM_HandleTypeDef* enc2, uint16_t maxCount, float countsPerRevolution)
 8000c5c:	b480      	push	{r7}
 8000c5e:	b085      	sub	sp, #20
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60f8      	str	r0, [r7, #12]
 8000c64:	60b9      	str	r1, [r7, #8]
 8000c66:	607a      	str	r2, [r7, #4]
 8000c68:	603b      	str	r3, [r7, #0]
    : motorControl(motorControl), encoder1(enc1), encoder2(enc2), maxEncoderCount(maxCount), countsPerRev(countsPerRevolution) {
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	68ba      	ldr	r2, [r7, #8]
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	687a      	ldr	r2, [r7, #4]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	683a      	ldr	r2, [r7, #0]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	8b3a      	ldrh	r2, [r7, #24]
 8000c80:	819a      	strh	r2, [r3, #12]
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	69fa      	ldr	r2, [r7, #28]
 8000c86:	611a      	str	r2, [r3, #16]
    // Constructor
};
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3714      	adds	r7, #20
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bc80      	pop	{r7}
 8000c92:	4770      	bx	lr

08000c94 <_ZN7Encoder11readEncoderEP17TIM_HandleTypeDef>:

uint32_t Encoder::readEncoder(TIM_HandleTypeDef* enc) {
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	6039      	str	r1, [r7, #0]
    // Reads encoder data
    return __HAL_TIM_GET_COUNTER(enc);
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bc80      	pop	{r7}
 8000cac:	4770      	bx	lr

08000cae <_ZN7Encoder17resetEncoderCountEP17TIM_HandleTypeDef>:

void Encoder::resetEncoderCount(TIM_HandleTypeDef* enc){
 8000cae:	b480      	push	{r7}
 8000cb0:	b083      	sub	sp, #12
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
 8000cb6:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SET_COUNTER(enc, 0);
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000cc0:	bf00      	nop
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bc80      	pop	{r7}
 8000cc8:	4770      	bx	lr
	...

08000ccc <_ZN7Encoder16calibrateEncoderEP17TIM_HandleTypeDefff>:

void Encoder::calibrateEncoder(TIM_HandleTypeDef* enc, float motorCurrent, float stallCurrent){
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60f8      	str	r0, [r7, #12]
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	607a      	str	r2, [r7, #4]
 8000cd8:	603b      	str	r3, [r7, #0]


	bool stalling = false; //Checks if the steering motor is stalled. We need this to know when the steering system has reached full lock
 8000cda:	2300      	movs	r3, #0
 8000cdc:	75fb      	strb	r3, [r7, #23]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ce4:	482a      	ldr	r0, [pc, #168]	@ (8000d90 <_ZN7Encoder16calibrateEncoderEP17TIM_HandleTypeDefff+0xc4>)
 8000ce6:	f002 fc9f 	bl	8003628 <HAL_GPIO_WritePin>

	while(!stalling){
 8000cea:	e01a      	b.n	8000d22 <_ZN7Encoder16calibrateEncoderEP17TIM_HandleTypeDefff+0x56>
		motorControl->setDutyCycle(3000);
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f000 fc6e 	bl	80015d6 <_ZN12MotorControl12setDutyCycleEt>

		if (motorCurrent >= stallCurrent) {
 8000cfa:	6839      	ldr	r1, [r7, #0]
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f7ff fce5 	bl	80006cc <__aeabi_fcmpge>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d100      	bne.n	8000d0a <_ZN7Encoder16calibrateEncoderEP17TIM_HandleTypeDefff+0x3e>
 8000d08:	e00b      	b.n	8000d22 <_ZN7Encoder16calibrateEncoderEP17TIM_HandleTypeDefff+0x56>
			resetEncoderCount(enc);
 8000d0a:	68b9      	ldr	r1, [r7, #8]
 8000d0c:	68f8      	ldr	r0, [r7, #12]
 8000d0e:	f7ff ffce 	bl	8000cae <_ZN7Encoder17resetEncoderCountEP17TIM_HandleTypeDef>
			motorControl->setDutyCycle(0);
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	2100      	movs	r1, #0
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f000 fc5c 	bl	80015d6 <_ZN12MotorControl12setDutyCycleEt>
			stalling = true;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	75fb      	strb	r3, [r7, #23]
	while(!stalling){
 8000d22:	7dfb      	ldrb	r3, [r7, #23]
 8000d24:	f083 0301 	eor.w	r3, r3, #1
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d1de      	bne.n	8000cec <_ZN7Encoder16calibrateEncoderEP17TIM_HandleTypeDefff+0x20>
		}
	}

	stalling = false;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	75fb      	strb	r3, [r7, #23]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000d32:	2200      	movs	r2, #0
 8000d34:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d38:	4815      	ldr	r0, [pc, #84]	@ (8000d90 <_ZN7Encoder16calibrateEncoderEP17TIM_HandleTypeDefff+0xc4>)
 8000d3a:	f002 fc75 	bl	8003628 <HAL_GPIO_WritePin>

	while(!stalling){
 8000d3e:	e01c      	b.n	8000d7a <_ZN7Encoder16calibrateEncoderEP17TIM_HandleTypeDefff+0xae>
		motorControl->setDutyCycle(3000);
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f000 fc44 	bl	80015d6 <_ZN12MotorControl12setDutyCycleEt>
		if (motorCurrent >= stallCurrent) {
 8000d4e:	6839      	ldr	r1, [r7, #0]
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	f7ff fcbb 	bl	80006cc <__aeabi_fcmpge>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d100      	bne.n	8000d5e <_ZN7Encoder16calibrateEncoderEP17TIM_HandleTypeDefff+0x92>
 8000d5c:	e00d      	b.n	8000d7a <_ZN7Encoder16calibrateEncoderEP17TIM_HandleTypeDefff+0xae>
			maxEncoderCount = __HAL_TIM_GET_COUNTER(enc);
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d64:	b29a      	uxth	r2, r3
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	819a      	strh	r2, [r3, #12]
			motorControl->setDutyCycle(0);
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	2100      	movs	r1, #0
 8000d70:	4618      	mov	r0, r3
 8000d72:	f000 fc30 	bl	80015d6 <_ZN12MotorControl12setDutyCycleEt>
			stalling = true;
 8000d76:	2301      	movs	r3, #1
 8000d78:	75fb      	strb	r3, [r7, #23]
	while(!stalling){
 8000d7a:	7dfb      	ldrb	r3, [r7, #23]
 8000d7c:	f083 0301 	eor.w	r3, r3, #1
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d1dc      	bne.n	8000d40 <_ZN7Encoder16calibrateEncoderEP17TIM_HandleTypeDefff+0x74>
		}
	}
}
 8000d86:	bf00      	nop
 8000d88:	bf00      	nop
 8000d8a:	3718      	adds	r7, #24
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	40010c00 	.word	0x40010c00

08000d94 <_ZN7Encoder14calculateAngleEt>:

int16_t Encoder::calculateAngle(uint16_t count) {
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	807b      	strh	r3, [r7, #2]
    // Converts encoder count into a tenth of a degree in steer angle
	// Map count to angle within -300 to +300 (tenths of a degree)
	int32_t scaledCount = static_cast<int32_t>(count) * 600; // Scale by total range (60.0 degrees * 10)
 8000da0:	887b      	ldrh	r3, [r7, #2]
 8000da2:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8000da6:	fb02 f303 	mul.w	r3, r2, r3
 8000daa:	60fb      	str	r3, [r7, #12]
	int32_t angle = scaledCount / maxEncoderCount - 300;     // Subtract 300 to map to range [-300, +300]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	899b      	ldrh	r3, [r3, #12]
 8000db0:	461a      	mov	r2, r3
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	fb93 f3f2 	sdiv	r3, r3, r2
 8000db8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000dbc:	60bb      	str	r3, [r7, #8]
	return static_cast<int16_t>(angle);
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	b21b      	sxth	r3, r3
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3714      	adds	r7, #20
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bc80      	pop	{r7}
 8000dca:	4770      	bx	lr

08000dcc <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8000dd4:	4b15      	ldr	r3, [pc, #84]	@ (8000e2c <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8000dd6:	4a16      	ldr	r2, [pc, #88]	@ (8000e30 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8000dd8:	2100      	movs	r1, #0
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	f001 fe30 	bl	8002a40 <HAL_CAN_GetRxMessage>
	if (RxHeader.StdId == 446) {
 8000de0:	4b13      	ldr	r3, [pc, #76]	@ (8000e30 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f5b3 7fdf 	cmp.w	r3, #446	@ 0x1be
 8000de8:	d10c      	bne.n	8000e04 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>
		received_value = globalcanbus.dataMerger(RxData);
 8000dea:	4910      	ldr	r1, [pc, #64]	@ (8000e2c <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8000dec:	4811      	ldr	r0, [pc, #68]	@ (8000e34 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 8000dee:	f7ff fd8a 	bl	8000906 <_ZN6CANBus10dataMergerEPh>
 8000df2:	4603      	mov	r3, r0
 8000df4:	4a10      	ldr	r2, [pc, #64]	@ (8000e38 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8000df6:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000df8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000dfc:	480f      	ldr	r0, [pc, #60]	@ (8000e3c <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8000dfe:	f002 fc2b 	bl	8003658 <HAL_GPIO_TogglePin>
	}
	else{
		Error_Handler();
	}

}
 8000e02:	e00e      	b.n	8000e22 <HAL_CAN_RxFifo0MsgPendingCallback+0x56>
	else if(RxHeader.StdId == 300) {
 8000e04:	4b0a      	ldr	r3, [pc, #40]	@ (8000e30 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000e0c:	d107      	bne.n	8000e1e <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
		received_value2 = globalcanbus.dataMerger(RxData);
 8000e0e:	4907      	ldr	r1, [pc, #28]	@ (8000e2c <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8000e10:	4808      	ldr	r0, [pc, #32]	@ (8000e34 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 8000e12:	f7ff fd78 	bl	8000906 <_ZN6CANBus10dataMergerEPh>
 8000e16:	4603      	mov	r3, r0
 8000e18:	4a09      	ldr	r2, [pc, #36]	@ (8000e40 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000e1a:	6013      	str	r3, [r2, #0]
}
 8000e1c:	e001      	b.n	8000e22 <HAL_CAN_RxFifo0MsgPendingCallback+0x56>
		Error_Handler();
 8000e1e:	f000 fab5 	bl	800138c <Error_Handler>
}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000168 	.word	0x20000168
 8000e30:	2000014c 	.word	0x2000014c
 8000e34:	20000078 	.word	0x20000078
 8000e38:	20000170 	.word	0x20000170
 8000e3c:	40011000 	.word	0x40011000
 8000e40:	20000174 	.word	0x20000174

08000e44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b09e      	sub	sp, #120	@ 0x78
 8000e48:	af02      	add	r7, sp, #8


  /* USER CODE BEGIN 1 */
	float offset = 1.65f; // Voltage at 0 Amps
 8000e4a:	4b48      	ldr	r3, [pc, #288]	@ (8000f6c <main+0x128>)
 8000e4c:	66fb      	str	r3, [r7, #108]	@ 0x6c
	float vRef = 3.3f; // Voltage of microcontroller
 8000e4e:	4b48      	ldr	r3, [pc, #288]	@ (8000f70 <main+0x12c>)
 8000e50:	66bb      	str	r3, [r7, #104]	@ 0x68
	float sensitivity = 0.185f;// mV between Amps
 8000e52:	4b48      	ldr	r3, [pc, #288]	@ (8000f74 <main+0x130>)
 8000e54:	667b      	str	r3, [r7, #100]	@ 0x64

	CurrentSensor currentSensor(&hadc1, vRef, sensitivity, offset);
 8000e56:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8000e5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000e5c:	9300      	str	r3, [sp, #0]
 8000e5e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000e60:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000e62:	4945      	ldr	r1, [pc, #276]	@ (8000f78 <main+0x134>)
 8000e64:	f7ff feab 	bl	8000bbe <_ZN13CurrentSensorC1EP19__ADC_HandleTypeDeffff>
	CAN_ErrorFlags error_flags;
	MotorControl motorControl(&htim2, TIM_CHANNEL_3);
 8000e68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e6c:	2208      	movs	r2, #8
 8000e6e:	4943      	ldr	r1, [pc, #268]	@ (8000f7c <main+0x138>)
 8000e70:	4618      	mov	r0, r3
 8000e72:	f000 fb83 	bl	800157c <_ZN12MotorControlC1EP17TIM_HandleTypeDefm>
	Encoder encoder(&motorControl, &htim2, &htim2, 65535, 1000);
 8000e76:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000e7a:	f107 0010 	add.w	r0, r7, #16
 8000e7e:	4b40      	ldr	r3, [pc, #256]	@ (8000f80 <main+0x13c>)
 8000e80:	9301      	str	r3, [sp, #4]
 8000e82:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e86:	9300      	str	r3, [sp, #0]
 8000e88:	4b3c      	ldr	r3, [pc, #240]	@ (8000f7c <main+0x138>)
 8000e8a:	4a3c      	ldr	r2, [pc, #240]	@ (8000f7c <main+0x138>)
 8000e8c:	f7ff fee6 	bl	8000c5c <_ZN7EncoderC1EP12MotorControlP17TIM_HandleTypeDefS3_tf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e90:	f000 fe4e 	bl	8001b30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e94:	f000 f87e 	bl	8000f94 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e98:	f000 fa0a 	bl	80012b0 <_ZL12MX_GPIO_Initv>
  MX_CAN_Init();
 8000e9c:	f000 f92c 	bl	80010f8 <_ZL11MX_CAN_Initv>
  MX_TIM2_Init();
 8000ea0:	f000 f976 	bl	8001190 <_ZL12MX_TIM2_Initv>
  MX_ADC1_Init();
 8000ea4:	f000 f8e0 	bl	8001068 <_ZL12MX_ADC1_Initv>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000ea8:	213c      	movs	r1, #60	@ 0x3c
 8000eaa:	4834      	ldr	r0, [pc, #208]	@ (8000f7c <main+0x138>)
 8000eac:	f003 faed 	bl	800448a <HAL_TIM_Encoder_Start>
  HAL_ADC_Start(&hadc1);
 8000eb0:	4831      	ldr	r0, [pc, #196]	@ (8000f78 <main+0x134>)
 8000eb2:	f000 ff9b 	bl	8001dec <HAL_ADC_Start>

  //Temporary variables for development and testing ------------------------------*/
  uint8_t canAngle[8];
  uint32_t counter = 978324;
 8000eb6:	4b33      	ldr	r3, [pc, #204]	@ (8000f84 <main+0x140>)
 8000eb8:	663b      	str	r3, [r7, #96]	@ 0x60
  uint8_t desiredAngle[8];
  uint32_t counter2 = 9999999;
 8000eba:	4b33      	ldr	r3, [pc, #204]	@ (8000f88 <main+0x144>)
 8000ebc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  //---------------------------------------------------------------------------*/
  globalcanbus.start(&hcan, CAN_ID_STD);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	4932      	ldr	r1, [pc, #200]	@ (8000f8c <main+0x148>)
 8000ec2:	4833      	ldr	r0, [pc, #204]	@ (8000f90 <main+0x14c>)
 8000ec4:	f7ff fc83 	bl	80007ce <_ZN6CANBus5startEP17CAN_HandleTypeDefh>
  motorControl.start();
 8000ec8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f000 fb72 	bl	80015b6 <_ZN12MotorControl5startEv>

  float motorCurrent = currentSensor.getCurrent();
 8000ed2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff fe8a 	bl	8000bf0 <_ZN13CurrentSensor10getCurrentEv>
 8000edc:	65b8      	str	r0, [r7, #88]	@ 0x58
  encoder.calibrateEncoder(&htim2, motorCurrent, 1.0f);
 8000ede:	f107 0010 	add.w	r0, r7, #16
 8000ee2:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000ee6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000ee8:	4924      	ldr	r1, [pc, #144]	@ (8000f7c <main+0x138>)
 8000eea:	f7ff feef 	bl	8000ccc <_ZN7Encoder16calibrateEncoderEP17TIM_HandleTypeDefff>
	  /*
	   * Fix this shit
	   * Its fucking ugly and poorly written.
	   */

	  uint16_t currentCount = encoder.readEncoder(&htim2);
 8000eee:	f107 0310 	add.w	r3, r7, #16
 8000ef2:	4922      	ldr	r1, [pc, #136]	@ (8000f7c <main+0x138>)
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff fecd 	bl	8000c94 <_ZN7Encoder11readEncoderEP17TIM_HandleTypeDef>
 8000efa:	4603      	mov	r3, r0
 8000efc:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
	  int16_t currentAngle = encoder.calculateAngle(currentCount);
 8000f00:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 8000f04:	f107 0310 	add.w	r3, r7, #16
 8000f08:	4611      	mov	r1, r2
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff ff42 	bl	8000d94 <_ZN7Encoder14calculateAngleEt>
 8000f10:	4603      	mov	r3, r0
 8000f12:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
	  motorControl.steerToAngle(currentAngle, 50);
 8000f16:	f8b7 1054 	ldrh.w	r1, [r7, #84]	@ 0x54
 8000f1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f1e:	2232      	movs	r2, #50	@ 0x32
 8000f20:	4618      	mov	r0, r3
 8000f22:	f000 fc0f 	bl	8001744 <_ZN12MotorControl12steerToAngleEtt>

	  globalcanbus.dataSplitter(counter, canAngle);
 8000f26:	f107 0308 	add.w	r3, r7, #8
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8000f2e:	4818      	ldr	r0, [pc, #96]	@ (8000f90 <main+0x14c>)
 8000f30:	f7ff fcc8 	bl	80008c4 <_ZN6CANBus12dataSplitterEmPh>
	  globalcanbus.dataSplitter(counter2, desiredAngle);
 8000f34:	463b      	mov	r3, r7
 8000f36:	461a      	mov	r2, r3
 8000f38:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8000f3a:	4815      	ldr	r0, [pc, #84]	@ (8000f90 <main+0x14c>)
 8000f3c:	f7ff fcc2 	bl	80008c4 <_ZN6CANBus12dataSplitterEmPh>

	  globalcanbus.transmit(&hcan, canAngle, 446);
 8000f40:	f107 0208 	add.w	r2, r7, #8
 8000f44:	f44f 73df 	mov.w	r3, #446	@ 0x1be
 8000f48:	4910      	ldr	r1, [pc, #64]	@ (8000f8c <main+0x148>)
 8000f4a:	4811      	ldr	r0, [pc, #68]	@ (8000f90 <main+0x14c>)
 8000f4c:	f7ff fc6f 	bl	800082e <_ZN6CANBus8transmitEP17CAN_HandleTypeDefPht>
	  globalcanbus.transmit(&hcan, desiredAngle, 300);
 8000f50:	463a      	mov	r2, r7
 8000f52:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000f56:	490d      	ldr	r1, [pc, #52]	@ (8000f8c <main+0x148>)
 8000f58:	480d      	ldr	r0, [pc, #52]	@ (8000f90 <main+0x14c>)
 8000f5a:	f7ff fc68 	bl	800082e <_ZN6CANBus8transmitEP17CAN_HandleTypeDefPht>
	  //	  int length = sizeof(canAngle)/sizeof(canAngle[0]);
	  HAL_Delay(300);
 8000f5e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000f62:	f000 fe47 	bl	8001bf4 <HAL_Delay>
	  /* USER CODE END WHILE */

	  /* USER CODE BEGIN 3 */
	}
 8000f66:	bf00      	nop
 8000f68:	e7c1      	b.n	8000eee <main+0xaa>
 8000f6a:	bf00      	nop
 8000f6c:	3fd33333 	.word	0x3fd33333
 8000f70:	40533333 	.word	0x40533333
 8000f74:	3e3d70a4 	.word	0x3e3d70a4
 8000f78:	200000ac 	.word	0x200000ac
 8000f7c:	20000104 	.word	0x20000104
 8000f80:	447a0000 	.word	0x447a0000
 8000f84:	000eed94 	.word	0x000eed94
 8000f88:	0098967f 	.word	0x0098967f
 8000f8c:	200000dc 	.word	0x200000dc
 8000f90:	20000078 	.word	0x20000078

08000f94 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b094      	sub	sp, #80	@ 0x50
 8000f98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f9a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f9e:	2228      	movs	r2, #40	@ 0x28
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f003 fe42 	bl	8004c2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa8:	f107 0314 	add.w	r3, r7, #20
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]
 8000fb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fb8:	1d3b      	adds	r3, r7, #4
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	605a      	str	r2, [r3, #4]
 8000fc0:	609a      	str	r2, [r3, #8]
 8000fc2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fc8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fda:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fde:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fe0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000fe4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fea:	4618      	mov	r0, r3
 8000fec:	f002 fb4e 	bl	800368c <HAL_RCC_OscConfig>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	bf14      	ite	ne
 8000ff6:	2301      	movne	r3, #1
 8000ff8:	2300      	moveq	r3, #0
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8001000:	f000 f9c4 	bl	800138c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001004:	230f      	movs	r3, #15
 8001006:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001008:	2302      	movs	r3, #2
 800100a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800100c:	2300      	movs	r3, #0
 800100e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001010:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001014:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001016:	2300      	movs	r3, #0
 8001018:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800101a:	f107 0314 	add.w	r3, r7, #20
 800101e:	2102      	movs	r1, #2
 8001020:	4618      	mov	r0, r3
 8001022:	f002 fdb5 	bl	8003b90 <HAL_RCC_ClockConfig>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	bf14      	ite	ne
 800102c:	2301      	movne	r3, #1
 800102e:	2300      	moveq	r3, #0
 8001030:	b2db      	uxtb	r3, r3
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 8001036:	f000 f9a9 	bl	800138c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800103a:	2302      	movs	r3, #2
 800103c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800103e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001042:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001044:	1d3b      	adds	r3, r7, #4
 8001046:	4618      	mov	r0, r3
 8001048:	f002 ff1c 	bl	8003e84 <HAL_RCCEx_PeriphCLKConfig>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	bf14      	ite	ne
 8001052:	2301      	movne	r3, #1
 8001054:	2300      	moveq	r3, #0
 8001056:	b2db      	uxtb	r3, r3
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <_Z18SystemClock_Configv+0xcc>
  {
    Error_Handler();
 800105c:	f000 f996 	bl	800138c <Error_Handler>
  }
}
 8001060:	bf00      	nop
 8001062:	3750      	adds	r7, #80	@ 0x50
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001078:	4b1d      	ldr	r3, [pc, #116]	@ (80010f0 <_ZL12MX_ADC1_Initv+0x88>)
 800107a:	4a1e      	ldr	r2, [pc, #120]	@ (80010f4 <_ZL12MX_ADC1_Initv+0x8c>)
 800107c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800107e:	4b1c      	ldr	r3, [pc, #112]	@ (80010f0 <_ZL12MX_ADC1_Initv+0x88>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001084:	4b1a      	ldr	r3, [pc, #104]	@ (80010f0 <_ZL12MX_ADC1_Initv+0x88>)
 8001086:	2200      	movs	r2, #0
 8001088:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800108a:	4b19      	ldr	r3, [pc, #100]	@ (80010f0 <_ZL12MX_ADC1_Initv+0x88>)
 800108c:	2200      	movs	r2, #0
 800108e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001090:	4b17      	ldr	r3, [pc, #92]	@ (80010f0 <_ZL12MX_ADC1_Initv+0x88>)
 8001092:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001096:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001098:	4b15      	ldr	r3, [pc, #84]	@ (80010f0 <_ZL12MX_ADC1_Initv+0x88>)
 800109a:	2200      	movs	r2, #0
 800109c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800109e:	4b14      	ldr	r3, [pc, #80]	@ (80010f0 <_ZL12MX_ADC1_Initv+0x88>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010a4:	4812      	ldr	r0, [pc, #72]	@ (80010f0 <_ZL12MX_ADC1_Initv+0x88>)
 80010a6:	f000 fdc9 	bl	8001c3c <HAL_ADC_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	bf14      	ite	ne
 80010b0:	2301      	movne	r3, #1
 80010b2:	2300      	moveq	r3, #0
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <_ZL12MX_ADC1_Initv+0x56>
  {
    Error_Handler();
 80010ba:	f000 f967 	bl	800138c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80010be:	2307      	movs	r3, #7
 80010c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010c2:	2301      	movs	r3, #1
 80010c4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	4619      	mov	r1, r3
 80010ce:	4808      	ldr	r0, [pc, #32]	@ (80010f0 <_ZL12MX_ADC1_Initv+0x88>)
 80010d0:	f001 f84c 	bl	800216c <HAL_ADC_ConfigChannel>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	bf14      	ite	ne
 80010da:	2301      	movne	r3, #1
 80010dc:	2300      	moveq	r3, #0
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <_ZL12MX_ADC1_Initv+0x80>
  {
    Error_Handler();
 80010e4:	f000 f952 	bl	800138c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010e8:	bf00      	nop
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	200000ac 	.word	0x200000ac
 80010f4:	40012400 	.word	0x40012400

080010f8 <_ZL11MX_CAN_Initv>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af02      	add	r7, sp, #8
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80010fe:	4b21      	ldr	r3, [pc, #132]	@ (8001184 <_ZL11MX_CAN_Initv+0x8c>)
 8001100:	4a21      	ldr	r2, [pc, #132]	@ (8001188 <_ZL11MX_CAN_Initv+0x90>)
 8001102:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 36;
 8001104:	4b1f      	ldr	r3, [pc, #124]	@ (8001184 <_ZL11MX_CAN_Initv+0x8c>)
 8001106:	2224      	movs	r2, #36	@ 0x24
 8001108:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 800110a:	4b1e      	ldr	r3, [pc, #120]	@ (8001184 <_ZL11MX_CAN_Initv+0x8c>)
 800110c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001110:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001112:	4b1c      	ldr	r3, [pc, #112]	@ (8001184 <_ZL11MX_CAN_Initv+0x8c>)
 8001114:	2200      	movs	r2, #0
 8001116:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001118:	4b1a      	ldr	r3, [pc, #104]	@ (8001184 <_ZL11MX_CAN_Initv+0x8c>)
 800111a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800111e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001120:	4b18      	ldr	r3, [pc, #96]	@ (8001184 <_ZL11MX_CAN_Initv+0x8c>)
 8001122:	2200      	movs	r2, #0
 8001124:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001126:	4b17      	ldr	r3, [pc, #92]	@ (8001184 <_ZL11MX_CAN_Initv+0x8c>)
 8001128:	2200      	movs	r2, #0
 800112a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800112c:	4b15      	ldr	r3, [pc, #84]	@ (8001184 <_ZL11MX_CAN_Initv+0x8c>)
 800112e:	2200      	movs	r2, #0
 8001130:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001132:	4b14      	ldr	r3, [pc, #80]	@ (8001184 <_ZL11MX_CAN_Initv+0x8c>)
 8001134:	2200      	movs	r2, #0
 8001136:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001138:	4b12      	ldr	r3, [pc, #72]	@ (8001184 <_ZL11MX_CAN_Initv+0x8c>)
 800113a:	2200      	movs	r2, #0
 800113c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800113e:	4b11      	ldr	r3, [pc, #68]	@ (8001184 <_ZL11MX_CAN_Initv+0x8c>)
 8001140:	2200      	movs	r2, #0
 8001142:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001144:	4b0f      	ldr	r3, [pc, #60]	@ (8001184 <_ZL11MX_CAN_Initv+0x8c>)
 8001146:	2200      	movs	r2, #0
 8001148:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800114a:	480e      	ldr	r0, [pc, #56]	@ (8001184 <_ZL11MX_CAN_Initv+0x8c>)
 800114c:	f001 f9a1 	bl	8002492 <HAL_CAN_Init>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	bf14      	ite	ne
 8001156:	2301      	movne	r3, #1
 8001158:	2300      	moveq	r3, #0
 800115a:	b2db      	uxtb	r3, r3
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <_ZL11MX_CAN_Initv+0x6c>
  {
    Error_Handler();
 8001160:	f000 f914 	bl	800138c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  globalcanbus.configureFilter(&hcan, 0b00100010000, 0b00110110000, 10, 0);
 8001164:	2300      	movs	r3, #0
 8001166:	9301      	str	r3, [sp, #4]
 8001168:	230a      	movs	r3, #10
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 8001170:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8001174:	4903      	ldr	r1, [pc, #12]	@ (8001184 <_ZL11MX_CAN_Initv+0x8c>)
 8001176:	4805      	ldr	r0, [pc, #20]	@ (800118c <_ZL11MX_CAN_Initv+0x94>)
 8001178:	f7ff fb79 	bl	800086e <_ZN6CANBus15configureFilterEP17CAN_HandleTypeDeftthh>

  /* USER CODE END CAN_Init 2 */

}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	200000dc 	.word	0x200000dc
 8001188:	40006400 	.word	0x40006400
 800118c:	20000078 	.word	0x20000078

08001190 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b092      	sub	sp, #72	@ 0x48
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001196:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800119a:	2224      	movs	r2, #36	@ 0x24
 800119c:	2100      	movs	r1, #0
 800119e:	4618      	mov	r0, r3
 80011a0:	f003 fd44 	bl	8004c2c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a4:	f107 031c 	add.w	r3, r7, #28
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ae:	463b      	mov	r3, r7
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
 80011bc:	615a      	str	r2, [r3, #20]
 80011be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011c0:	4b3a      	ldr	r3, [pc, #232]	@ (80012ac <_ZL12MX_TIM2_Initv+0x11c>)
 80011c2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80011c8:	4b38      	ldr	r3, [pc, #224]	@ (80012ac <_ZL12MX_TIM2_Initv+0x11c>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ce:	4b37      	ldr	r3, [pc, #220]	@ (80012ac <_ZL12MX_TIM2_Initv+0x11c>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80011d4:	4b35      	ldr	r3, [pc, #212]	@ (80012ac <_ZL12MX_TIM2_Initv+0x11c>)
 80011d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011dc:	4b33      	ldr	r3, [pc, #204]	@ (80012ac <_ZL12MX_TIM2_Initv+0x11c>)
 80011de:	2200      	movs	r2, #0
 80011e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e2:	4b32      	ldr	r3, [pc, #200]	@ (80012ac <_ZL12MX_TIM2_Initv+0x11c>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011e8:	4830      	ldr	r0, [pc, #192]	@ (80012ac <_ZL12MX_TIM2_Initv+0x11c>)
 80011ea:	f002 ffb7 	bl	800415c <HAL_TIM_PWM_Init>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	bf14      	ite	ne
 80011f4:	2301      	movne	r3, #1
 80011f6:	2300      	moveq	r3, #0
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <_ZL12MX_TIM2_Initv+0x72>
  {
    Error_Handler();
 80011fe:	f000 f8c5 	bl	800138c <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001202:	2303      	movs	r3, #3
 8001204:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001206:	2300      	movs	r3, #0
 8001208:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800120a:	2301      	movs	r3, #1
 800120c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800120e:	2300      	movs	r3, #0
 8001210:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfig.IC1Filter = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001216:	2300      	movs	r3, #0
 8001218:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800121a:	2301      	movs	r3, #1
 800121c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800121e:	2300      	movs	r3, #0
 8001220:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.IC2Filter = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001226:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800122a:	4619      	mov	r1, r3
 800122c:	481f      	ldr	r0, [pc, #124]	@ (80012ac <_ZL12MX_TIM2_Initv+0x11c>)
 800122e:	f003 f881 	bl	8004334 <HAL_TIM_Encoder_Init>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	bf14      	ite	ne
 8001238:	2301      	movne	r3, #1
 800123a:	2300      	moveq	r3, #0
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <_ZL12MX_TIM2_Initv+0xb6>
  {
    Error_Handler();
 8001242:	f000 f8a3 	bl	800138c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001246:	2300      	movs	r3, #0
 8001248:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800124a:	2300      	movs	r3, #0
 800124c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800124e:	f107 031c 	add.w	r3, r7, #28
 8001252:	4619      	mov	r1, r3
 8001254:	4815      	ldr	r0, [pc, #84]	@ (80012ac <_ZL12MX_TIM2_Initv+0x11c>)
 8001256:	f003 fc79 	bl	8004b4c <HAL_TIMEx_MasterConfigSynchronization>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	bf14      	ite	ne
 8001260:	2301      	movne	r3, #1
 8001262:	2300      	moveq	r3, #0
 8001264:	b2db      	uxtb	r3, r3
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <_ZL12MX_TIM2_Initv+0xde>
  {
    Error_Handler();
 800126a:	f000 f88f 	bl	800138c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800126e:	2360      	movs	r3, #96	@ 0x60
 8001270:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001272:	2300      	movs	r3, #0
 8001274:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001276:	2300      	movs	r3, #0
 8001278:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800127e:	463b      	mov	r3, r7
 8001280:	2208      	movs	r2, #8
 8001282:	4619      	mov	r1, r3
 8001284:	4809      	ldr	r0, [pc, #36]	@ (80012ac <_ZL12MX_TIM2_Initv+0x11c>)
 8001286:	f003 f98f 	bl	80045a8 <HAL_TIM_PWM_ConfigChannel>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	bf14      	ite	ne
 8001290:	2301      	movne	r3, #1
 8001292:	2300      	moveq	r3, #0
 8001294:	b2db      	uxtb	r3, r3
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <_ZL12MX_TIM2_Initv+0x10e>
  {
    Error_Handler();
 800129a:	f000 f877 	bl	800138c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800129e:	4803      	ldr	r0, [pc, #12]	@ (80012ac <_ZL12MX_TIM2_Initv+0x11c>)
 80012a0:	f000 fbaa 	bl	80019f8 <HAL_TIM_MspPostInit>

}
 80012a4:	bf00      	nop
 80012a6:	3748      	adds	r7, #72	@ 0x48
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20000104 	.word	0x20000104

080012b0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b088      	sub	sp, #32
 80012b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b6:	f107 0310 	add.w	r3, r7, #16
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]
 80012c0:	609a      	str	r2, [r3, #8]
 80012c2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c4:	4b2e      	ldr	r3, [pc, #184]	@ (8001380 <_ZL12MX_GPIO_Initv+0xd0>)
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	4a2d      	ldr	r2, [pc, #180]	@ (8001380 <_ZL12MX_GPIO_Initv+0xd0>)
 80012ca:	f043 0310 	orr.w	r3, r3, #16
 80012ce:	6193      	str	r3, [r2, #24]
 80012d0:	4b2b      	ldr	r3, [pc, #172]	@ (8001380 <_ZL12MX_GPIO_Initv+0xd0>)
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	f003 0310 	and.w	r3, r3, #16
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012dc:	4b28      	ldr	r3, [pc, #160]	@ (8001380 <_ZL12MX_GPIO_Initv+0xd0>)
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	4a27      	ldr	r2, [pc, #156]	@ (8001380 <_ZL12MX_GPIO_Initv+0xd0>)
 80012e2:	f043 0320 	orr.w	r3, r3, #32
 80012e6:	6193      	str	r3, [r2, #24]
 80012e8:	4b25      	ldr	r3, [pc, #148]	@ (8001380 <_ZL12MX_GPIO_Initv+0xd0>)
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	f003 0320 	and.w	r3, r3, #32
 80012f0:	60bb      	str	r3, [r7, #8]
 80012f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f4:	4b22      	ldr	r3, [pc, #136]	@ (8001380 <_ZL12MX_GPIO_Initv+0xd0>)
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	4a21      	ldr	r2, [pc, #132]	@ (8001380 <_ZL12MX_GPIO_Initv+0xd0>)
 80012fa:	f043 0304 	orr.w	r3, r3, #4
 80012fe:	6193      	str	r3, [r2, #24]
 8001300:	4b1f      	ldr	r3, [pc, #124]	@ (8001380 <_ZL12MX_GPIO_Initv+0xd0>)
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	f003 0304 	and.w	r3, r3, #4
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800130c:	4b1c      	ldr	r3, [pc, #112]	@ (8001380 <_ZL12MX_GPIO_Initv+0xd0>)
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	4a1b      	ldr	r2, [pc, #108]	@ (8001380 <_ZL12MX_GPIO_Initv+0xd0>)
 8001312:	f043 0308 	orr.w	r3, r3, #8
 8001316:	6193      	str	r3, [r2, #24]
 8001318:	4b19      	ldr	r3, [pc, #100]	@ (8001380 <_ZL12MX_GPIO_Initv+0xd0>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	f003 0308 	and.w	r3, r3, #8
 8001320:	603b      	str	r3, [r7, #0]
 8001322:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001324:	2201      	movs	r2, #1
 8001326:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800132a:	4816      	ldr	r0, [pc, #88]	@ (8001384 <_ZL12MX_GPIO_Initv+0xd4>)
 800132c:	f002 f97c 	bl	8003628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8001330:	2200      	movs	r2, #0
 8001332:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001336:	4814      	ldr	r0, [pc, #80]	@ (8001388 <_ZL12MX_GPIO_Initv+0xd8>)
 8001338:	f002 f976 	bl	8003628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800133c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001340:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001342:	2301      	movs	r3, #1
 8001344:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001346:	2301      	movs	r3, #1
 8001348:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800134a:	2301      	movs	r3, #1
 800134c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800134e:	f107 0310 	add.w	r3, r7, #16
 8001352:	4619      	mov	r1, r3
 8001354:	480b      	ldr	r0, [pc, #44]	@ (8001384 <_ZL12MX_GPIO_Initv+0xd4>)
 8001356:	f001 ffeb 	bl	8003330 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800135a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800135e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001360:	2301      	movs	r3, #1
 8001362:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001368:	2302      	movs	r3, #2
 800136a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800136c:	f107 0310 	add.w	r3, r7, #16
 8001370:	4619      	mov	r1, r3
 8001372:	4805      	ldr	r0, [pc, #20]	@ (8001388 <_ZL12MX_GPIO_Initv+0xd8>)
 8001374:	f001 ffdc 	bl	8003330 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001378:	bf00      	nop
 800137a:	3720      	adds	r7, #32
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40021000 	.word	0x40021000
 8001384:	40011000 	.word	0x40011000
 8001388:	40010c00 	.word	0x40010c00

0800138c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001390:	b672      	cpsid	i
}
 8001392:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001394:	bf00      	nop
 8001396:	e7fd      	b.n	8001394 <Error_Handler+0x8>

08001398 <_ZN6CANBusD1Ev>:
#include "stm32f1xx_hal.h"
#include "main.hpp"
#include <vector>
#include <cstdint>

class CANBus {
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3328      	adds	r3, #40	@ 0x28
 80013a4:	4618      	mov	r0, r3
 80013a6:	f000 f848 	bl	800143a <_ZNSt6vectorIySaIyEED1Ev>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	331c      	adds	r3, #28
 80013ae:	4618      	mov	r0, r3
 80013b0:	f000 f828 	bl	8001404 <_ZNSt6vectorImSaImEED1Ev>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4618      	mov	r0, r3
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d107      	bne.n	80013e0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d102      	bne.n	80013e0 <_Z41__static_initialization_and_destruction_0ii+0x20>
CANBus globalcanbus;
 80013da:	4809      	ldr	r0, [pc, #36]	@ (8001400 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80013dc:	f7ff f9e4 	bl	80007a8 <_ZN6CANBusC1Ev>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d107      	bne.n	80013f6 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d102      	bne.n	80013f6 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80013f0:	4803      	ldr	r0, [pc, #12]	@ (8001400 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80013f2:	f7ff ffd1 	bl	8001398 <_ZN6CANBusD1Ev>
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20000078 	.word	0x20000078

08001404 <_ZNSt6vectorImSaImEED1Ev>:
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      _GLIBCXX20_CONSTEXPR
      ~vector() _GLIBCXX_NOEXCEPT
 8001404:	b5b0      	push	{r4, r5, r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681c      	ldr	r4, [r3, #0]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff faef 	bl	80009fa <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 800141c:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800141e:	461a      	mov	r2, r3
 8001420:	4629      	mov	r1, r5
 8001422:	4620      	mov	r0, r4
 8001424:	f7ff faf3 	bl	8000a0e <_ZSt8_DestroyIPmmEvT_S1_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4618      	mov	r0, r3
 800142c:	f000 f82c 	bl	8001488 <_ZNSt12_Vector_baseImSaImEED1Ev>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4618      	mov	r0, r3
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bdb0      	pop	{r4, r5, r7, pc}

0800143a <_ZNSt6vectorIySaIyEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800143a:	b5b0      	push	{r4, r5, r7, lr}
 800143c:	b082      	sub	sp, #8
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681c      	ldr	r4, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff fb1e 	bl	8000a8e <_ZNSt12_Vector_baseIySaIyEE19_M_get_Tp_allocatorEv>
 8001452:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001454:	461a      	mov	r2, r3
 8001456:	4629      	mov	r1, r5
 8001458:	4620      	mov	r0, r4
 800145a:	f7ff fb22 	bl	8000aa2 <_ZSt8_DestroyIPyyEvT_S1_RSaIT0_E>
      }
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4618      	mov	r0, r3
 8001462:	f000 f836 	bl	80014d2 <_ZNSt12_Vector_baseIySaIyEED1Ev>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4618      	mov	r0, r3
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bdb0      	pop	{r4, r5, r7, pc}

08001470 <_ZNSt12_Vector_baseImSaImEE12_Vector_implD1Ev>:
      struct _Vector_impl
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f000 f843 	bl	8001504 <_ZNSaImED1Ev>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4618      	mov	r0, r3
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}

08001488 <_ZNSt12_Vector_baseImSaImEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689a      	ldr	r2, [r3, #8]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 80014a0:	461a      	mov	r2, r3
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f7ff fa96 	bl	80009d4 <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj>
      }
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff ffe0 	bl	8001470 <_ZNSt12_Vector_baseImSaImEE12_Vector_implD1Ev>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4618      	mov	r0, r3
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <_ZNSt12_Vector_baseIySaIyEE12_Vector_implD1Ev>:
      struct _Vector_impl
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b082      	sub	sp, #8
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f000 f82a 	bl	800151c <_ZNSaIyED1Ev>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	4618      	mov	r0, r3
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <_ZNSt12_Vector_baseIySaIyEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b082      	sub	sp, #8
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	689a      	ldr	r2, [r3, #8]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	10db      	asrs	r3, r3, #3
	_M_deallocate(_M_impl._M_start,
 80014ea:	461a      	mov	r2, r3
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f7ff fabb 	bl	8000a68 <_ZNSt12_Vector_baseIySaIyEE13_M_deallocateEPyj>
      }
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff ffe0 	bl	80014ba <_ZNSt12_Vector_baseIySaIyEE12_Vector_implD1Ev>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4618      	mov	r0, r3
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <_ZNSaImED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f000 f811 	bl	8001534 <_ZNSt15__new_allocatorImED1Ev>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4618      	mov	r0, r3
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <_ZNSaIyED1Ev>:
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f000 f80f 	bl	8001548 <_ZNSt15__new_allocatorIyED1Ev>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4618      	mov	r0, r3
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <_ZNSt15__new_allocatorImED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4618      	mov	r0, r3
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr

08001548 <_ZNSt15__new_allocatorIyED1Ev>:
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4618      	mov	r0, r3
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr

0800155c <_GLOBAL__sub_I_globalcanbus>:
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
 8001560:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001564:	2001      	movs	r0, #1
 8001566:	f7ff ff2b 	bl	80013c0 <_Z41__static_initialization_and_destruction_0ii>
 800156a:	bd80      	pop	{r7, pc}

0800156c <_GLOBAL__sub_D_globalcanbus>:
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
 8001570:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001574:	2000      	movs	r0, #0
 8001576:	f7ff ff23 	bl	80013c0 <_Z41__static_initialization_and_destruction_0ii>
 800157a:	bd80      	pop	{r7, pc}

0800157c <_ZN12MotorControlC1EP17TIM_HandleTypeDefm>:

#include "motorControl.hpp"
#include <cmath>

// Constructor
MotorControl::MotorControl(TIM_HandleTypeDef* timer, uint32_t channel)
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
    : htim(timer), channel(channel), lastDirection(GPIO_PIN_SET),
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	68ba      	ldr	r2, [r7, #8]
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	605a      	str	r2, [r3, #4]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	2201      	movs	r2, #1
 8001598:	721a      	strb	r2, [r3, #8]
      integral(0.0f), previousError(0.0f) {}
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	f04f 0200 	mov.w	r2, #0
 80015a0:	60da      	str	r2, [r3, #12]
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	f04f 0200 	mov.w	r2, #0
 80015a8:	611a      	str	r2, [r3, #16]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	4618      	mov	r0, r3
 80015ae:	3714      	adds	r7, #20
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bc80      	pop	{r7}
 80015b4:	4770      	bx	lr

080015b6 <_ZN12MotorControl5startEv>:

// Starts PWM
void MotorControl::start() {
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b082      	sub	sp, #8
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Start(htim, channel);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	4619      	mov	r1, r3
 80015c8:	4610      	mov	r0, r2
 80015ca:	f002 fe17 	bl	80041fc <HAL_TIM_PWM_Start>
}
 80015ce:	bf00      	nop
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <_ZN12MotorControl12setDutyCycleEt>:

// Sets steer speed (duty cycle)
void MotorControl::setDutyCycle(uint16_t dutyCycle) {
 80015d6:	b480      	push	{r7}
 80015d8:	b083      	sub	sp, #12
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
 80015de:	460b      	mov	r3, r1
 80015e0:	807b      	strh	r3, [r7, #2]
    __HAL_TIM_SET_COMPARE(htim, channel, dutyCycle);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d105      	bne.n	80015f6 <_ZN12MotorControl12setDutyCycleEt+0x20>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	887a      	ldrh	r2, [r7, #2]
 80015f2:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80015f4:	e018      	b.n	8001628 <_ZN12MotorControl12setDutyCycleEt+0x52>
    __HAL_TIM_SET_COMPARE(htim, channel, dutyCycle);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	2b04      	cmp	r3, #4
 80015fc:	d105      	bne.n	800160a <_ZN12MotorControl12setDutyCycleEt+0x34>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	887a      	ldrh	r2, [r7, #2]
 8001606:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001608:	e00e      	b.n	8001628 <_ZN12MotorControl12setDutyCycleEt+0x52>
    __HAL_TIM_SET_COMPARE(htim, channel, dutyCycle);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	2b08      	cmp	r3, #8
 8001610:	d105      	bne.n	800161e <_ZN12MotorControl12setDutyCycleEt+0x48>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	887a      	ldrh	r2, [r7, #2]
 800161a:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800161c:	e004      	b.n	8001628 <_ZN12MotorControl12setDutyCycleEt+0x52>
    __HAL_TIM_SET_COMPARE(htim, channel, dutyCycle);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	887a      	ldrh	r2, [r7, #2]
 8001626:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	bc80      	pop	{r7}
 8001630:	4770      	bx	lr
	...

08001634 <_ZN12MotorControl12calculatePIDEtt>:
void MotorControl::toggleDirection() {
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
}

// PID controller implementation
int16_t MotorControl::calculatePID(uint16_t targetAngle, uint16_t currentAngle) {
 8001634:	b590      	push	{r4, r7, lr}
 8001636:	b087      	sub	sp, #28
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	460b      	mov	r3, r1
 800163e:	807b      	strh	r3, [r7, #2]
 8001640:	4613      	mov	r3, r2
 8001642:	803b      	strh	r3, [r7, #0]
    const float dt = 0.01f; // Fixed dt in seconds (10ms)
 8001644:	4b3a      	ldr	r3, [pc, #232]	@ (8001730 <_ZN12MotorControl12calculatePIDEtt+0xfc>)
 8001646:	613b      	str	r3, [r7, #16]

    // Error calculation
    float error = static_cast<float>(targetAngle - currentAngle);
 8001648:	887a      	ldrh	r2, [r7, #2]
 800164a:	883b      	ldrh	r3, [r7, #0]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	4618      	mov	r0, r3
 8001650:	f7fe fe36 	bl	80002c0 <__aeabi_i2f>
 8001654:	4603      	mov	r3, r0
 8001656:	60fb      	str	r3, [r7, #12]

    // Integral windup prevention
    integral += error * dt;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	68dc      	ldr	r4, [r3, #12]
 800165c:	4934      	ldr	r1, [pc, #208]	@ (8001730 <_ZN12MotorControl12calculatePIDEtt+0xfc>)
 800165e:	68f8      	ldr	r0, [r7, #12]
 8001660:	f7fe fe82 	bl	8000368 <__aeabi_fmul>
 8001664:	4603      	mov	r3, r0
 8001666:	4619      	mov	r1, r3
 8001668:	4620      	mov	r0, r4
 800166a:	f7fe fd75 	bl	8000158 <__addsf3>
 800166e:	4603      	mov	r3, r0
 8001670:	461a      	mov	r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	60da      	str	r2, [r3, #12]
    if (integral > MAX_INTEGRAL) integral = MAX_INTEGRAL;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	492e      	ldr	r1, [pc, #184]	@ (8001734 <_ZN12MotorControl12calculatePIDEtt+0x100>)
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff f82f 	bl	80006e0 <__aeabi_fcmpgt>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d002      	beq.n	800168e <_ZN12MotorControl12calculatePIDEtt+0x5a>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4a2a      	ldr	r2, [pc, #168]	@ (8001734 <_ZN12MotorControl12calculatePIDEtt+0x100>)
 800168c:	60da      	str	r2, [r3, #12]
    if (integral < MIN_INTEGRAL) integral = MIN_INTEGRAL;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	4929      	ldr	r1, [pc, #164]	@ (8001738 <_ZN12MotorControl12calculatePIDEtt+0x104>)
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff f805 	bl	80006a4 <__aeabi_fcmplt>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d002      	beq.n	80016a6 <_ZN12MotorControl12calculatePIDEtt+0x72>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4a25      	ldr	r2, [pc, #148]	@ (8001738 <_ZN12MotorControl12calculatePIDEtt+0x104>)
 80016a4:	60da      	str	r2, [r3, #12]

    // Derivative calculation
    float derivative = (error - previousError) / dt;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	691b      	ldr	r3, [r3, #16]
 80016aa:	4619      	mov	r1, r3
 80016ac:	68f8      	ldr	r0, [r7, #12]
 80016ae:	f7fe fd51 	bl	8000154 <__aeabi_fsub>
 80016b2:	4603      	mov	r3, r0
 80016b4:	491e      	ldr	r1, [pc, #120]	@ (8001730 <_ZN12MotorControl12calculatePIDEtt+0xfc>)
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7fe ff0a 	bl	80004d0 <__aeabi_fdiv>
 80016bc:	4603      	mov	r3, r0
 80016be:	60bb      	str	r3, [r7, #8]

    // PID calculations
    float output = (KP * error) + (KI * integral) + (KD * derivative);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	491d      	ldr	r1, [pc, #116]	@ (800173c <_ZN12MotorControl12calculatePIDEtt+0x108>)
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7fe fe4e 	bl	8000368 <__aeabi_fmul>
 80016cc:	4603      	mov	r3, r0
 80016ce:	68f9      	ldr	r1, [r7, #12]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7fe fd41 	bl	8000158 <__addsf3>
 80016d6:	4603      	mov	r3, r0
 80016d8:	461c      	mov	r4, r3
 80016da:	4915      	ldr	r1, [pc, #84]	@ (8001730 <_ZN12MotorControl12calculatePIDEtt+0xfc>)
 80016dc:	68b8      	ldr	r0, [r7, #8]
 80016de:	f7fe fe43 	bl	8000368 <__aeabi_fmul>
 80016e2:	4603      	mov	r3, r0
 80016e4:	4619      	mov	r1, r3
 80016e6:	4620      	mov	r0, r4
 80016e8:	f7fe fd36 	bl	8000158 <__addsf3>
 80016ec:	4603      	mov	r3, r0
 80016ee:	617b      	str	r3, [r7, #20]

    // Constrain output to valid range
    if (output > MAX_OUTPUT) output = MAX_OUTPUT;
 80016f0:	4913      	ldr	r1, [pc, #76]	@ (8001740 <_ZN12MotorControl12calculatePIDEtt+0x10c>)
 80016f2:	6978      	ldr	r0, [r7, #20]
 80016f4:	f7fe fff4 	bl	80006e0 <__aeabi_fcmpgt>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <_ZN12MotorControl12calculatePIDEtt+0xce>
 80016fe:	4b10      	ldr	r3, [pc, #64]	@ (8001740 <_ZN12MotorControl12calculatePIDEtt+0x10c>)
 8001700:	617b      	str	r3, [r7, #20]
    if (output < MIN_OUTPUT) output = MIN_OUTPUT;
 8001702:	f04f 0100 	mov.w	r1, #0
 8001706:	6978      	ldr	r0, [r7, #20]
 8001708:	f7fe ffcc 	bl	80006a4 <__aeabi_fcmplt>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d002      	beq.n	8001718 <_ZN12MotorControl12calculatePIDEtt+0xe4>
 8001712:	f04f 0300 	mov.w	r3, #0
 8001716:	617b      	str	r3, [r7, #20]


    // Update previous error for the next iteration
    previousError = error;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	611a      	str	r2, [r3, #16]

    return static_cast<int16_t>(output);
 800171e:	6978      	ldr	r0, [r7, #20]
 8001720:	f7fe ffe8 	bl	80006f4 <__aeabi_f2iz>
 8001724:	4603      	mov	r3, r0
 8001726:	b21b      	sxth	r3, r3
}
 8001728:	4618      	mov	r0, r3
 800172a:	371c      	adds	r7, #28
 800172c:	46bd      	mov	sp, r7
 800172e:	bd90      	pop	{r4, r7, pc}
 8001730:	3c23d70a 	.word	0x3c23d70a
 8001734:	43fa0000 	.word	0x43fa0000
 8001738:	c3fa0000 	.word	0xc3fa0000
 800173c:	3dcccccd 	.word	0x3dcccccd
 8001740:	477fff00 	.word	0x477fff00

08001744 <_ZN12MotorControl12steerToAngleEtt>:

// Steers to target angle using PID
void MotorControl::steerToAngle(uint16_t currentAngle, uint16_t targetAngle) {
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	460b      	mov	r3, r1
 800174e:	807b      	strh	r3, [r7, #2]
 8001750:	4613      	mov	r3, r2
 8001752:	803b      	strh	r3, [r7, #0]
    int16_t pidOutput = calculatePID(targetAngle, currentAngle);
 8001754:	887a      	ldrh	r2, [r7, #2]
 8001756:	883b      	ldrh	r3, [r7, #0]
 8001758:	4619      	mov	r1, r3
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f7ff ff6a 	bl	8001634 <_ZN12MotorControl12calculatePIDEtt>
 8001760:	4603      	mov	r3, r0
 8001762:	81fb      	strh	r3, [r7, #14]

    // Apply dead zone
    if (std::abs(pidOutput) < DEAD_ZONE_THRESHOLD) {
 8001764:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001768:	2b00      	cmp	r3, #0
 800176a:	bfb8      	it	lt
 800176c:	425b      	neglt	r3, r3
 800176e:	b29b      	uxth	r3, r3
 8001770:	2b09      	cmp	r3, #9
 8001772:	d804      	bhi.n	800177e <_ZN12MotorControl12steerToAngleEtt+0x3a>
        setDutyCycle(0);
 8001774:	2100      	movs	r1, #0
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f7ff ff2d 	bl	80015d6 <_ZN12MotorControl12setDutyCycleEt>
        return;
 800177c:	e01c      	b.n	80017b8 <_ZN12MotorControl12steerToAngleEtt+0x74>
    }

    // Determine direction and apply PWM
    if (pidOutput < 0) {
 800177e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001782:	2b00      	cmp	r3, #0
 8001784:	da0d      	bge.n	80017a2 <_ZN12MotorControl12steerToAngleEtt+0x5e>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); // Reverse direction
 8001786:	2200      	movs	r2, #0
 8001788:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800178c:	480c      	ldr	r0, [pc, #48]	@ (80017c0 <_ZN12MotorControl12steerToAngleEtt+0x7c>)
 800178e:	f001 ff4b 	bl	8003628 <HAL_GPIO_WritePin>
        setDutyCycle(static_cast<uint16_t>(-pidOutput));      // Positive duty cycle
 8001792:	89fb      	ldrh	r3, [r7, #14]
 8001794:	425b      	negs	r3, r3
 8001796:	b29b      	uxth	r3, r3
 8001798:	4619      	mov	r1, r3
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f7ff ff1b 	bl	80015d6 <_ZN12MotorControl12setDutyCycleEt>
 80017a0:	e00a      	b.n	80017b8 <_ZN12MotorControl12steerToAngleEtt+0x74>
    } else {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);   // Forward direction
 80017a2:	2201      	movs	r2, #1
 80017a4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80017a8:	4805      	ldr	r0, [pc, #20]	@ (80017c0 <_ZN12MotorControl12steerToAngleEtt+0x7c>)
 80017aa:	f001 ff3d 	bl	8003628 <HAL_GPIO_WritePin>
        setDutyCycle(static_cast<uint16_t>(pidOutput));
 80017ae:	89fb      	ldrh	r3, [r7, #14]
 80017b0:	4619      	mov	r1, r3
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f7ff ff0f 	bl	80015d6 <_ZN12MotorControl12setDutyCycleEt>
    }
}
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40010800 	.word	0x40010800

080017c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017ca:	4b15      	ldr	r3, [pc, #84]	@ (8001820 <HAL_MspInit+0x5c>)
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	4a14      	ldr	r2, [pc, #80]	@ (8001820 <HAL_MspInit+0x5c>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	6193      	str	r3, [r2, #24]
 80017d6:	4b12      	ldr	r3, [pc, #72]	@ (8001820 <HAL_MspInit+0x5c>)
 80017d8:	699b      	ldr	r3, [r3, #24]
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	60bb      	str	r3, [r7, #8]
 80017e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001820 <HAL_MspInit+0x5c>)
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	4a0e      	ldr	r2, [pc, #56]	@ (8001820 <HAL_MspInit+0x5c>)
 80017e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017ec:	61d3      	str	r3, [r2, #28]
 80017ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001820 <HAL_MspInit+0x5c>)
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017f6:	607b      	str	r3, [r7, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001824 <HAL_MspInit+0x60>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	4a04      	ldr	r2, [pc, #16]	@ (8001824 <HAL_MspInit+0x60>)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001816:	bf00      	nop
 8001818:	3714      	adds	r7, #20
 800181a:	46bd      	mov	sp, r7
 800181c:	bc80      	pop	{r7}
 800181e:	4770      	bx	lr
 8001820:	40021000 	.word	0x40021000
 8001824:	40010000 	.word	0x40010000

08001828 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b088      	sub	sp, #32
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001830:	f107 0310 	add.w	r3, r7, #16
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a14      	ldr	r2, [pc, #80]	@ (8001894 <HAL_ADC_MspInit+0x6c>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d121      	bne.n	800188c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001848:	4b13      	ldr	r3, [pc, #76]	@ (8001898 <HAL_ADC_MspInit+0x70>)
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	4a12      	ldr	r2, [pc, #72]	@ (8001898 <HAL_ADC_MspInit+0x70>)
 800184e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001852:	6193      	str	r3, [r2, #24]
 8001854:	4b10      	ldr	r3, [pc, #64]	@ (8001898 <HAL_ADC_MspInit+0x70>)
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800185c:	60fb      	str	r3, [r7, #12]
 800185e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001860:	4b0d      	ldr	r3, [pc, #52]	@ (8001898 <HAL_ADC_MspInit+0x70>)
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	4a0c      	ldr	r2, [pc, #48]	@ (8001898 <HAL_ADC_MspInit+0x70>)
 8001866:	f043 0304 	orr.w	r3, r3, #4
 800186a:	6193      	str	r3, [r2, #24]
 800186c:	4b0a      	ldr	r3, [pc, #40]	@ (8001898 <HAL_ADC_MspInit+0x70>)
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	f003 0304 	and.w	r3, r3, #4
 8001874:	60bb      	str	r3, [r7, #8]
 8001876:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001878:	2380      	movs	r3, #128	@ 0x80
 800187a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800187c:	2303      	movs	r3, #3
 800187e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001880:	f107 0310 	add.w	r3, r7, #16
 8001884:	4619      	mov	r1, r3
 8001886:	4805      	ldr	r0, [pc, #20]	@ (800189c <HAL_ADC_MspInit+0x74>)
 8001888:	f001 fd52 	bl	8003330 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800188c:	bf00      	nop
 800188e:	3720      	adds	r7, #32
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	40012400 	.word	0x40012400
 8001898:	40021000 	.word	0x40021000
 800189c:	40010800 	.word	0x40010800

080018a0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b08a      	sub	sp, #40	@ 0x28
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a8:	f107 0314 	add.w	r3, r7, #20
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a2d      	ldr	r2, [pc, #180]	@ (8001970 <HAL_CAN_MspInit+0xd0>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d153      	bne.n	8001968 <HAL_CAN_MspInit+0xc8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80018c0:	4b2c      	ldr	r3, [pc, #176]	@ (8001974 <HAL_CAN_MspInit+0xd4>)
 80018c2:	69db      	ldr	r3, [r3, #28]
 80018c4:	4a2b      	ldr	r2, [pc, #172]	@ (8001974 <HAL_CAN_MspInit+0xd4>)
 80018c6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80018ca:	61d3      	str	r3, [r2, #28]
 80018cc:	4b29      	ldr	r3, [pc, #164]	@ (8001974 <HAL_CAN_MspInit+0xd4>)
 80018ce:	69db      	ldr	r3, [r3, #28]
 80018d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018d4:	613b      	str	r3, [r7, #16]
 80018d6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d8:	4b26      	ldr	r3, [pc, #152]	@ (8001974 <HAL_CAN_MspInit+0xd4>)
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	4a25      	ldr	r2, [pc, #148]	@ (8001974 <HAL_CAN_MspInit+0xd4>)
 80018de:	f043 0308 	orr.w	r3, r3, #8
 80018e2:	6193      	str	r3, [r2, #24]
 80018e4:	4b23      	ldr	r3, [pc, #140]	@ (8001974 <HAL_CAN_MspInit+0xd4>)
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	f003 0308 	and.w	r3, r3, #8
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80018f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018f6:	2300      	movs	r3, #0
 80018f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018fe:	f107 0314 	add.w	r3, r7, #20
 8001902:	4619      	mov	r1, r3
 8001904:	481c      	ldr	r0, [pc, #112]	@ (8001978 <HAL_CAN_MspInit+0xd8>)
 8001906:	f001 fd13 	bl	8003330 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800190a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800190e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001910:	2302      	movs	r3, #2
 8001912:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001914:	2303      	movs	r3, #3
 8001916:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001918:	f107 0314 	add.w	r3, r7, #20
 800191c:	4619      	mov	r1, r3
 800191e:	4816      	ldr	r0, [pc, #88]	@ (8001978 <HAL_CAN_MspInit+0xd8>)
 8001920:	f001 fd06 	bl	8003330 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8001924:	4b15      	ldr	r3, [pc, #84]	@ (800197c <HAL_CAN_MspInit+0xdc>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	627b      	str	r3, [r7, #36]	@ 0x24
 800192a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800192c:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8001930:	627b      	str	r3, [r7, #36]	@ 0x24
 8001932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001934:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001938:	627b      	str	r3, [r7, #36]	@ 0x24
 800193a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800193c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001940:	627b      	str	r3, [r7, #36]	@ 0x24
 8001942:	4a0e      	ldr	r2, [pc, #56]	@ (800197c <HAL_CAN_MspInit+0xdc>)
 8001944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001946:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8001948:	2200      	movs	r2, #0
 800194a:	2100      	movs	r1, #0
 800194c:	2014      	movs	r0, #20
 800194e:	f001 fcb8 	bl	80032c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001952:	2014      	movs	r0, #20
 8001954:	f001 fcd1 	bl	80032fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001958:	2200      	movs	r2, #0
 800195a:	2100      	movs	r1, #0
 800195c:	2015      	movs	r0, #21
 800195e:	f001 fcb0 	bl	80032c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001962:	2015      	movs	r0, #21
 8001964:	f001 fcc9 	bl	80032fa <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001968:	bf00      	nop
 800196a:	3728      	adds	r7, #40	@ 0x28
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40006400 	.word	0x40006400
 8001974:	40021000 	.word	0x40021000
 8001978:	40010c00 	.word	0x40010c00
 800197c:	40010000 	.word	0x40010000

08001980 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b088      	sub	sp, #32
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001988:	f107 0310 	add.w	r3, r7, #16
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	60da      	str	r2, [r3, #12]
  if(htim_pwm->Instance==TIM2)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800199e:	d123      	bne.n	80019e8 <HAL_TIM_PWM_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019a0:	4b13      	ldr	r3, [pc, #76]	@ (80019f0 <HAL_TIM_PWM_MspInit+0x70>)
 80019a2:	69db      	ldr	r3, [r3, #28]
 80019a4:	4a12      	ldr	r2, [pc, #72]	@ (80019f0 <HAL_TIM_PWM_MspInit+0x70>)
 80019a6:	f043 0301 	orr.w	r3, r3, #1
 80019aa:	61d3      	str	r3, [r2, #28]
 80019ac:	4b10      	ldr	r3, [pc, #64]	@ (80019f0 <HAL_TIM_PWM_MspInit+0x70>)
 80019ae:	69db      	ldr	r3, [r3, #28]
 80019b0:	f003 0301 	and.w	r3, r3, #1
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b8:	4b0d      	ldr	r3, [pc, #52]	@ (80019f0 <HAL_TIM_PWM_MspInit+0x70>)
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	4a0c      	ldr	r2, [pc, #48]	@ (80019f0 <HAL_TIM_PWM_MspInit+0x70>)
 80019be:	f043 0304 	orr.w	r3, r3, #4
 80019c2:	6193      	str	r3, [r2, #24]
 80019c4:	4b0a      	ldr	r3, [pc, #40]	@ (80019f0 <HAL_TIM_PWM_MspInit+0x70>)
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	f003 0304 	and.w	r3, r3, #4
 80019cc:	60bb      	str	r3, [r7, #8]
 80019ce:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80019d0:	2303      	movs	r3, #3
 80019d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019d4:	2300      	movs	r3, #0
 80019d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019dc:	f107 0310 	add.w	r3, r7, #16
 80019e0:	4619      	mov	r1, r3
 80019e2:	4804      	ldr	r0, [pc, #16]	@ (80019f4 <HAL_TIM_PWM_MspInit+0x74>)
 80019e4:	f001 fca4 	bl	8003330 <HAL_GPIO_Init>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80019e8:	bf00      	nop
 80019ea:	3720      	adds	r7, #32
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40021000 	.word	0x40021000
 80019f4:	40010800 	.word	0x40010800

080019f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b088      	sub	sp, #32
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a00:	f107 0310 	add.w	r3, r7, #16
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	605a      	str	r2, [r3, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
 8001a0c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a16:	d117      	bne.n	8001a48 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a18:	4b0d      	ldr	r3, [pc, #52]	@ (8001a50 <HAL_TIM_MspPostInit+0x58>)
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	4a0c      	ldr	r2, [pc, #48]	@ (8001a50 <HAL_TIM_MspPostInit+0x58>)
 8001a1e:	f043 0304 	orr.w	r3, r3, #4
 8001a22:	6193      	str	r3, [r2, #24]
 8001a24:	4b0a      	ldr	r3, [pc, #40]	@ (8001a50 <HAL_TIM_MspPostInit+0x58>)
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	f003 0304 	and.w	r3, r3, #4
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a30:	2304      	movs	r3, #4
 8001a32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a34:	2302      	movs	r3, #2
 8001a36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a3c:	f107 0310 	add.w	r3, r7, #16
 8001a40:	4619      	mov	r1, r3
 8001a42:	4804      	ldr	r0, [pc, #16]	@ (8001a54 <HAL_TIM_MspPostInit+0x5c>)
 8001a44:	f001 fc74 	bl	8003330 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001a48:	bf00      	nop
 8001a4a:	3720      	adds	r7, #32
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40021000 	.word	0x40021000
 8001a54:	40010800 	.word	0x40010800

08001a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a5c:	bf00      	nop
 8001a5e:	e7fd      	b.n	8001a5c <NMI_Handler+0x4>

08001a60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a64:	bf00      	nop
 8001a66:	e7fd      	b.n	8001a64 <HardFault_Handler+0x4>

08001a68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a6c:	bf00      	nop
 8001a6e:	e7fd      	b.n	8001a6c <MemManage_Handler+0x4>

08001a70 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a74:	bf00      	nop
 8001a76:	e7fd      	b.n	8001a74 <BusFault_Handler+0x4>

08001a78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a7c:	bf00      	nop
 8001a7e:	e7fd      	b.n	8001a7c <UsageFault_Handler+0x4>

08001a80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a84:	bf00      	nop
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bc80      	pop	{r7}
 8001a8a:	4770      	bx	lr

08001a8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bc80      	pop	{r7}
 8001a96:	4770      	bx	lr

08001a98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a9c:	bf00      	nop
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr

08001aa4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aa8:	f000 f888 	bl	8001bbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aac:	bf00      	nop
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001ab4:	4802      	ldr	r0, [pc, #8]	@ (8001ac0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001ab6:	f001 f909 	bl	8002ccc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	200000dc 	.word	0x200000dc

08001ac4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001ac8:	4802      	ldr	r0, [pc, #8]	@ (8001ad4 <CAN1_RX1_IRQHandler+0x10>)
 8001aca:	f001 f8ff 	bl	8002ccc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	200000dc 	.word	0x200000dc

08001ad8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001adc:	bf00      	nop
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr

08001ae4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ae4:	f7ff fff8 	bl	8001ad8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ae8:	480b      	ldr	r0, [pc, #44]	@ (8001b18 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001aea:	490c      	ldr	r1, [pc, #48]	@ (8001b1c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001aec:	4a0c      	ldr	r2, [pc, #48]	@ (8001b20 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001aee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001af0:	e002      	b.n	8001af8 <LoopCopyDataInit>

08001af2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001af2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001af4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001af6:	3304      	adds	r3, #4

08001af8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001af8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001afa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001afc:	d3f9      	bcc.n	8001af2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001afe:	4a09      	ldr	r2, [pc, #36]	@ (8001b24 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b00:	4c09      	ldr	r4, [pc, #36]	@ (8001b28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b04:	e001      	b.n	8001b0a <LoopFillZerobss>

08001b06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b08:	3204      	adds	r2, #4

08001b0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b0c:	d3fb      	bcc.n	8001b06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b0e:	f003 f895 	bl	8004c3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b12:	f7ff f997 	bl	8000e44 <main>
  bx lr
 8001b16:	4770      	bx	lr
  ldr r0, =_sdata
 8001b18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b1c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001b20:	08004d80 	.word	0x08004d80
  ldr r2, =_sbss
 8001b24:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001b28:	200002bc 	.word	0x200002bc

08001b2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b2c:	e7fe      	b.n	8001b2c <ADC1_2_IRQHandler>
	...

08001b30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b34:	4b08      	ldr	r3, [pc, #32]	@ (8001b58 <HAL_Init+0x28>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a07      	ldr	r2, [pc, #28]	@ (8001b58 <HAL_Init+0x28>)
 8001b3a:	f043 0310 	orr.w	r3, r3, #16
 8001b3e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b40:	2003      	movs	r0, #3
 8001b42:	f001 fbb3 	bl	80032ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b46:	200f      	movs	r0, #15
 8001b48:	f000 f808 	bl	8001b5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b4c:	f7ff fe3a 	bl	80017c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40022000 	.word	0x40022000

08001b5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b64:	4b12      	ldr	r3, [pc, #72]	@ (8001bb0 <HAL_InitTick+0x54>)
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	4b12      	ldr	r3, [pc, #72]	@ (8001bb4 <HAL_InitTick+0x58>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f001 fbcb 	bl	8003316 <HAL_SYSTICK_Config>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e00e      	b.n	8001ba8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2b0f      	cmp	r3, #15
 8001b8e:	d80a      	bhi.n	8001ba6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b90:	2200      	movs	r2, #0
 8001b92:	6879      	ldr	r1, [r7, #4]
 8001b94:	f04f 30ff 	mov.w	r0, #4294967295
 8001b98:	f001 fb93 	bl	80032c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b9c:	4a06      	ldr	r2, [pc, #24]	@ (8001bb8 <HAL_InitTick+0x5c>)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	e000      	b.n	8001ba8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	20000000 	.word	0x20000000
 8001bb4:	20000008 	.word	0x20000008
 8001bb8:	20000004 	.word	0x20000004

08001bbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bc0:	4b05      	ldr	r3, [pc, #20]	@ (8001bd8 <HAL_IncTick+0x1c>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	4b05      	ldr	r3, [pc, #20]	@ (8001bdc <HAL_IncTick+0x20>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4413      	add	r3, r2
 8001bcc:	4a03      	ldr	r2, [pc, #12]	@ (8001bdc <HAL_IncTick+0x20>)
 8001bce:	6013      	str	r3, [r2, #0]
}
 8001bd0:	bf00      	nop
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bc80      	pop	{r7}
 8001bd6:	4770      	bx	lr
 8001bd8:	20000008 	.word	0x20000008
 8001bdc:	20000178 	.word	0x20000178

08001be0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  return uwTick;
 8001be4:	4b02      	ldr	r3, [pc, #8]	@ (8001bf0 <HAL_GetTick+0x10>)
 8001be6:	681b      	ldr	r3, [r3, #0]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bc80      	pop	{r7}
 8001bee:	4770      	bx	lr
 8001bf0:	20000178 	.word	0x20000178

08001bf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bfc:	f7ff fff0 	bl	8001be0 <HAL_GetTick>
 8001c00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c0c:	d005      	beq.n	8001c1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c38 <HAL_Delay+0x44>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	461a      	mov	r2, r3
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	4413      	add	r3, r2
 8001c18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c1a:	bf00      	nop
 8001c1c:	f7ff ffe0 	bl	8001be0 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d8f7      	bhi.n	8001c1c <HAL_Delay+0x28>
  {
  }
}
 8001c2c:	bf00      	nop
 8001c2e:	bf00      	nop
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000008 	.word	0x20000008

08001c3c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c44:	2300      	movs	r3, #0
 8001c46:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001c50:	2300      	movs	r3, #0
 8001c52:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e0be      	b.n	8001ddc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d109      	bne.n	8001c80 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f7ff fdd4 	bl	8001828 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f000 fbc5 	bl	8002410 <ADC_ConversionStop_Disable>
 8001c86:	4603      	mov	r3, r0
 8001c88:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c8e:	f003 0310 	and.w	r3, r3, #16
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	f040 8099 	bne.w	8001dca <HAL_ADC_Init+0x18e>
 8001c98:	7dfb      	ldrb	r3, [r7, #23]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f040 8095 	bne.w	8001dca <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ca4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001ca8:	f023 0302 	bic.w	r3, r3, #2
 8001cac:	f043 0202 	orr.w	r2, r3, #2
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001cbc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	7b1b      	ldrb	r3, [r3, #12]
 8001cc2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001cc4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001cc6:	68ba      	ldr	r2, [r7, #8]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001cd4:	d003      	beq.n	8001cde <HAL_ADC_Init+0xa2>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d102      	bne.n	8001ce4 <HAL_ADC_Init+0xa8>
 8001cde:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ce2:	e000      	b.n	8001ce6 <HAL_ADC_Init+0xaa>
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	7d1b      	ldrb	r3, [r3, #20]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d119      	bne.n	8001d28 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	7b1b      	ldrb	r3, [r3, #12]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d109      	bne.n	8001d10 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	3b01      	subs	r3, #1
 8001d02:	035a      	lsls	r2, r3, #13
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001d0c:	613b      	str	r3, [r7, #16]
 8001d0e:	e00b      	b.n	8001d28 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d14:	f043 0220 	orr.w	r2, r3, #32
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d20:	f043 0201 	orr.w	r2, r3, #1
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	689a      	ldr	r2, [r3, #8]
 8001d42:	4b28      	ldr	r3, [pc, #160]	@ (8001de4 <HAL_ADC_Init+0x1a8>)
 8001d44:	4013      	ands	r3, r2
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	6812      	ldr	r2, [r2, #0]
 8001d4a:	68b9      	ldr	r1, [r7, #8]
 8001d4c:	430b      	orrs	r3, r1
 8001d4e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d58:	d003      	beq.n	8001d62 <HAL_ADC_Init+0x126>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d104      	bne.n	8001d6c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	691b      	ldr	r3, [r3, #16]
 8001d66:	3b01      	subs	r3, #1
 8001d68:	051b      	lsls	r3, r3, #20
 8001d6a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d72:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	689a      	ldr	r2, [r3, #8]
 8001d86:	4b18      	ldr	r3, [pc, #96]	@ (8001de8 <HAL_ADC_Init+0x1ac>)
 8001d88:	4013      	ands	r3, r2
 8001d8a:	68ba      	ldr	r2, [r7, #8]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d10b      	bne.n	8001da8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d9a:	f023 0303 	bic.w	r3, r3, #3
 8001d9e:	f043 0201 	orr.w	r2, r3, #1
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001da6:	e018      	b.n	8001dda <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dac:	f023 0312 	bic.w	r3, r3, #18
 8001db0:	f043 0210 	orr.w	r2, r3, #16
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dbc:	f043 0201 	orr.w	r2, r3, #1
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001dc8:	e007      	b.n	8001dda <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dce:	f043 0210 	orr.w	r2, r3, #16
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001dda:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3718      	adds	r7, #24
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	ffe1f7fd 	.word	0xffe1f7fd
 8001de8:	ff1f0efe 	.word	0xff1f0efe

08001dec <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001df4:	2300      	movs	r3, #0
 8001df6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d101      	bne.n	8001e06 <HAL_ADC_Start+0x1a>
 8001e02:	2302      	movs	r3, #2
 8001e04:	e098      	b.n	8001f38 <HAL_ADC_Start+0x14c>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 faa4 	bl	800235c <ADC_Enable>
 8001e14:	4603      	mov	r3, r0
 8001e16:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001e18:	7bfb      	ldrb	r3, [r7, #15]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f040 8087 	bne.w	8001f2e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e28:	f023 0301 	bic.w	r3, r3, #1
 8001e2c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a41      	ldr	r2, [pc, #260]	@ (8001f40 <HAL_ADC_Start+0x154>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d105      	bne.n	8001e4a <HAL_ADC_Start+0x5e>
 8001e3e:	4b41      	ldr	r3, [pc, #260]	@ (8001f44 <HAL_ADC_Start+0x158>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d115      	bne.n	8001e76 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e4e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d026      	beq.n	8001eb2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e68:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001e6c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e74:	e01d      	b.n	8001eb2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e7a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a2f      	ldr	r2, [pc, #188]	@ (8001f44 <HAL_ADC_Start+0x158>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d004      	beq.n	8001e96 <HAL_ADC_Start+0xaa>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a2b      	ldr	r2, [pc, #172]	@ (8001f40 <HAL_ADC_Start+0x154>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d10d      	bne.n	8001eb2 <HAL_ADC_Start+0xc6>
 8001e96:	4b2b      	ldr	r3, [pc, #172]	@ (8001f44 <HAL_ADC_Start+0x158>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d007      	beq.n	8001eb2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ea6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001eaa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eb6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d006      	beq.n	8001ecc <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ec2:	f023 0206 	bic.w	r2, r3, #6
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001eca:	e002      	b.n	8001ed2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f06f 0202 	mvn.w	r2, #2
 8001ee2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001eee:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001ef2:	d113      	bne.n	8001f1c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001ef8:	4a11      	ldr	r2, [pc, #68]	@ (8001f40 <HAL_ADC_Start+0x154>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d105      	bne.n	8001f0a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001efe:	4b11      	ldr	r3, [pc, #68]	@ (8001f44 <HAL_ADC_Start+0x158>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d108      	bne.n	8001f1c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	689a      	ldr	r2, [r3, #8]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001f18:	609a      	str	r2, [r3, #8]
 8001f1a:	e00c      	b.n	8001f36 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	689a      	ldr	r2, [r3, #8]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001f2a:	609a      	str	r2, [r3, #8]
 8001f2c:	e003      	b.n	8001f36 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3710      	adds	r7, #16
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40012800 	.word	0x40012800
 8001f44:	40012400 	.word	0x40012400

08001f48 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001f48:	b590      	push	{r4, r7, lr}
 8001f4a:	b087      	sub	sp, #28
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f52:	2300      	movs	r3, #0
 8001f54:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001f56:	2300      	movs	r3, #0
 8001f58:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001f5e:	f7ff fe3f 	bl	8001be0 <HAL_GetTick>
 8001f62:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00b      	beq.n	8001f8a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f76:	f043 0220 	orr.w	r2, r3, #32
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e0d3      	b.n	8002132 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d131      	bne.n	8001ffc <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f9e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d12a      	bne.n	8001ffc <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001fa6:	e021      	b.n	8001fec <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fae:	d01d      	beq.n	8001fec <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d007      	beq.n	8001fc6 <HAL_ADC_PollForConversion+0x7e>
 8001fb6:	f7ff fe13 	bl	8001be0 <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	683a      	ldr	r2, [r7, #0]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d212      	bcs.n	8001fec <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d10b      	bne.n	8001fec <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fd8:	f043 0204 	orr.w	r2, r3, #4
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e0a2      	b.n	8002132 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d0d6      	beq.n	8001fa8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001ffa:	e070      	b.n	80020de <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001ffc:	4b4f      	ldr	r3, [pc, #316]	@ (800213c <HAL_ADC_PollForConversion+0x1f4>)
 8001ffe:	681c      	ldr	r4, [r3, #0]
 8002000:	2002      	movs	r0, #2
 8002002:	f001 fff5 	bl	8003ff0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002006:	4603      	mov	r3, r0
 8002008:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	6919      	ldr	r1, [r3, #16]
 8002012:	4b4b      	ldr	r3, [pc, #300]	@ (8002140 <HAL_ADC_PollForConversion+0x1f8>)
 8002014:	400b      	ands	r3, r1
 8002016:	2b00      	cmp	r3, #0
 8002018:	d118      	bne.n	800204c <HAL_ADC_PollForConversion+0x104>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68d9      	ldr	r1, [r3, #12]
 8002020:	4b48      	ldr	r3, [pc, #288]	@ (8002144 <HAL_ADC_PollForConversion+0x1fc>)
 8002022:	400b      	ands	r3, r1
 8002024:	2b00      	cmp	r3, #0
 8002026:	d111      	bne.n	800204c <HAL_ADC_PollForConversion+0x104>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	6919      	ldr	r1, [r3, #16]
 800202e:	4b46      	ldr	r3, [pc, #280]	@ (8002148 <HAL_ADC_PollForConversion+0x200>)
 8002030:	400b      	ands	r3, r1
 8002032:	2b00      	cmp	r3, #0
 8002034:	d108      	bne.n	8002048 <HAL_ADC_PollForConversion+0x100>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68d9      	ldr	r1, [r3, #12]
 800203c:	4b43      	ldr	r3, [pc, #268]	@ (800214c <HAL_ADC_PollForConversion+0x204>)
 800203e:	400b      	ands	r3, r1
 8002040:	2b00      	cmp	r3, #0
 8002042:	d101      	bne.n	8002048 <HAL_ADC_PollForConversion+0x100>
 8002044:	2314      	movs	r3, #20
 8002046:	e020      	b.n	800208a <HAL_ADC_PollForConversion+0x142>
 8002048:	2329      	movs	r3, #41	@ 0x29
 800204a:	e01e      	b.n	800208a <HAL_ADC_PollForConversion+0x142>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6919      	ldr	r1, [r3, #16]
 8002052:	4b3d      	ldr	r3, [pc, #244]	@ (8002148 <HAL_ADC_PollForConversion+0x200>)
 8002054:	400b      	ands	r3, r1
 8002056:	2b00      	cmp	r3, #0
 8002058:	d106      	bne.n	8002068 <HAL_ADC_PollForConversion+0x120>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68d9      	ldr	r1, [r3, #12]
 8002060:	4b3a      	ldr	r3, [pc, #232]	@ (800214c <HAL_ADC_PollForConversion+0x204>)
 8002062:	400b      	ands	r3, r1
 8002064:	2b00      	cmp	r3, #0
 8002066:	d00d      	beq.n	8002084 <HAL_ADC_PollForConversion+0x13c>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6919      	ldr	r1, [r3, #16]
 800206e:	4b38      	ldr	r3, [pc, #224]	@ (8002150 <HAL_ADC_PollForConversion+0x208>)
 8002070:	400b      	ands	r3, r1
 8002072:	2b00      	cmp	r3, #0
 8002074:	d108      	bne.n	8002088 <HAL_ADC_PollForConversion+0x140>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	68d9      	ldr	r1, [r3, #12]
 800207c:	4b34      	ldr	r3, [pc, #208]	@ (8002150 <HAL_ADC_PollForConversion+0x208>)
 800207e:	400b      	ands	r3, r1
 8002080:	2b00      	cmp	r3, #0
 8002082:	d101      	bne.n	8002088 <HAL_ADC_PollForConversion+0x140>
 8002084:	2354      	movs	r3, #84	@ 0x54
 8002086:	e000      	b.n	800208a <HAL_ADC_PollForConversion+0x142>
 8002088:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800208a:	fb02 f303 	mul.w	r3, r2, r3
 800208e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002090:	e021      	b.n	80020d6 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002098:	d01a      	beq.n	80020d0 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d007      	beq.n	80020b0 <HAL_ADC_PollForConversion+0x168>
 80020a0:	f7ff fd9e 	bl	8001be0 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d20f      	bcs.n	80020d0 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d90b      	bls.n	80020d0 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020bc:	f043 0204 	orr.w	r2, r3, #4
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e030      	b.n	8002132 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	3301      	adds	r3, #1
 80020d4:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	693a      	ldr	r2, [r7, #16]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d8d9      	bhi.n	8002092 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f06f 0212 	mvn.w	r2, #18
 80020e6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ec:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80020fe:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002102:	d115      	bne.n	8002130 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002108:	2b00      	cmp	r3, #0
 800210a:	d111      	bne.n	8002130 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002110:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800211c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d105      	bne.n	8002130 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002128:	f043 0201 	orr.w	r2, r3, #1
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	371c      	adds	r7, #28
 8002136:	46bd      	mov	sp, r7
 8002138:	bd90      	pop	{r4, r7, pc}
 800213a:	bf00      	nop
 800213c:	20000000 	.word	0x20000000
 8002140:	24924924 	.word	0x24924924
 8002144:	00924924 	.word	0x00924924
 8002148:	12492492 	.word	0x12492492
 800214c:	00492492 	.word	0x00492492
 8002150:	00249249 	.word	0x00249249

08002154 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002162:	4618      	mov	r0, r3
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	bc80      	pop	{r7}
 800216a:	4770      	bx	lr

0800216c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002176:	2300      	movs	r3, #0
 8002178:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800217a:	2300      	movs	r3, #0
 800217c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002184:	2b01      	cmp	r3, #1
 8002186:	d101      	bne.n	800218c <HAL_ADC_ConfigChannel+0x20>
 8002188:	2302      	movs	r3, #2
 800218a:	e0dc      	b.n	8002346 <HAL_ADC_ConfigChannel+0x1da>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	2b06      	cmp	r3, #6
 800219a:	d81c      	bhi.n	80021d6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685a      	ldr	r2, [r3, #4]
 80021a6:	4613      	mov	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4413      	add	r3, r2
 80021ac:	3b05      	subs	r3, #5
 80021ae:	221f      	movs	r2, #31
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	43db      	mvns	r3, r3
 80021b6:	4019      	ands	r1, r3
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	6818      	ldr	r0, [r3, #0]
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685a      	ldr	r2, [r3, #4]
 80021c0:	4613      	mov	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4413      	add	r3, r2
 80021c6:	3b05      	subs	r3, #5
 80021c8:	fa00 f203 	lsl.w	r2, r0, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	430a      	orrs	r2, r1
 80021d2:	635a      	str	r2, [r3, #52]	@ 0x34
 80021d4:	e03c      	b.n	8002250 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	2b0c      	cmp	r3, #12
 80021dc:	d81c      	bhi.n	8002218 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685a      	ldr	r2, [r3, #4]
 80021e8:	4613      	mov	r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4413      	add	r3, r2
 80021ee:	3b23      	subs	r3, #35	@ 0x23
 80021f0:	221f      	movs	r2, #31
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	43db      	mvns	r3, r3
 80021f8:	4019      	ands	r1, r3
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	6818      	ldr	r0, [r3, #0]
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685a      	ldr	r2, [r3, #4]
 8002202:	4613      	mov	r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	4413      	add	r3, r2
 8002208:	3b23      	subs	r3, #35	@ 0x23
 800220a:	fa00 f203 	lsl.w	r2, r0, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	430a      	orrs	r2, r1
 8002214:	631a      	str	r2, [r3, #48]	@ 0x30
 8002216:	e01b      	b.n	8002250 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	4613      	mov	r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	4413      	add	r3, r2
 8002228:	3b41      	subs	r3, #65	@ 0x41
 800222a:	221f      	movs	r2, #31
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	43db      	mvns	r3, r3
 8002232:	4019      	ands	r1, r3
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	6818      	ldr	r0, [r3, #0]
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685a      	ldr	r2, [r3, #4]
 800223c:	4613      	mov	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4413      	add	r3, r2
 8002242:	3b41      	subs	r3, #65	@ 0x41
 8002244:	fa00 f203 	lsl.w	r2, r0, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	430a      	orrs	r2, r1
 800224e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2b09      	cmp	r3, #9
 8002256:	d91c      	bls.n	8002292 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68d9      	ldr	r1, [r3, #12]
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	4613      	mov	r3, r2
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	4413      	add	r3, r2
 8002268:	3b1e      	subs	r3, #30
 800226a:	2207      	movs	r2, #7
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	43db      	mvns	r3, r3
 8002272:	4019      	ands	r1, r3
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	6898      	ldr	r0, [r3, #8]
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	4613      	mov	r3, r2
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	4413      	add	r3, r2
 8002282:	3b1e      	subs	r3, #30
 8002284:	fa00 f203 	lsl.w	r2, r0, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	430a      	orrs	r2, r1
 800228e:	60da      	str	r2, [r3, #12]
 8002290:	e019      	b.n	80022c6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6919      	ldr	r1, [r3, #16]
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	4613      	mov	r3, r2
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	4413      	add	r3, r2
 80022a2:	2207      	movs	r2, #7
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	43db      	mvns	r3, r3
 80022aa:	4019      	ands	r1, r3
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	6898      	ldr	r0, [r3, #8]
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	4613      	mov	r3, r2
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	4413      	add	r3, r2
 80022ba:	fa00 f203 	lsl.w	r2, r0, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	430a      	orrs	r2, r1
 80022c4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2b10      	cmp	r3, #16
 80022cc:	d003      	beq.n	80022d6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80022d2:	2b11      	cmp	r3, #17
 80022d4:	d132      	bne.n	800233c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a1d      	ldr	r2, [pc, #116]	@ (8002350 <HAL_ADC_ConfigChannel+0x1e4>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d125      	bne.n	800232c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d126      	bne.n	800233c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	689a      	ldr	r2, [r3, #8]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80022fc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2b10      	cmp	r3, #16
 8002304:	d11a      	bne.n	800233c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002306:	4b13      	ldr	r3, [pc, #76]	@ (8002354 <HAL_ADC_ConfigChannel+0x1e8>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a13      	ldr	r2, [pc, #76]	@ (8002358 <HAL_ADC_ConfigChannel+0x1ec>)
 800230c:	fba2 2303 	umull	r2, r3, r2, r3
 8002310:	0c9a      	lsrs	r2, r3, #18
 8002312:	4613      	mov	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	4413      	add	r3, r2
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800231c:	e002      	b.n	8002324 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	3b01      	subs	r3, #1
 8002322:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1f9      	bne.n	800231e <HAL_ADC_ConfigChannel+0x1b2>
 800232a:	e007      	b.n	800233c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002330:	f043 0220 	orr.w	r2, r3, #32
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002344:	7bfb      	ldrb	r3, [r7, #15]
}
 8002346:	4618      	mov	r0, r3
 8002348:	3714      	adds	r7, #20
 800234a:	46bd      	mov	sp, r7
 800234c:	bc80      	pop	{r7}
 800234e:	4770      	bx	lr
 8002350:	40012400 	.word	0x40012400
 8002354:	20000000 	.word	0x20000000
 8002358:	431bde83 	.word	0x431bde83

0800235c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002364:	2300      	movs	r3, #0
 8002366:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002368:	2300      	movs	r3, #0
 800236a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	2b01      	cmp	r3, #1
 8002378:	d040      	beq.n	80023fc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f042 0201 	orr.w	r2, r2, #1
 8002388:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800238a:	4b1f      	ldr	r3, [pc, #124]	@ (8002408 <ADC_Enable+0xac>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a1f      	ldr	r2, [pc, #124]	@ (800240c <ADC_Enable+0xb0>)
 8002390:	fba2 2303 	umull	r2, r3, r2, r3
 8002394:	0c9b      	lsrs	r3, r3, #18
 8002396:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002398:	e002      	b.n	80023a0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	3b01      	subs	r3, #1
 800239e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d1f9      	bne.n	800239a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80023a6:	f7ff fc1b 	bl	8001be0 <HAL_GetTick>
 80023aa:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80023ac:	e01f      	b.n	80023ee <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80023ae:	f7ff fc17 	bl	8001be0 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d918      	bls.n	80023ee <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d011      	beq.n	80023ee <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ce:	f043 0210 	orr.w	r2, r3, #16
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023da:	f043 0201 	orr.w	r2, r3, #1
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e007      	b.n	80023fe <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f003 0301 	and.w	r3, r3, #1
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d1d8      	bne.n	80023ae <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3710      	adds	r7, #16
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	20000000 	.word	0x20000000
 800240c:	431bde83 	.word	0x431bde83

08002410 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002418:	2300      	movs	r3, #0
 800241a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b01      	cmp	r3, #1
 8002428:	d12e      	bne.n	8002488 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	689a      	ldr	r2, [r3, #8]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f022 0201 	bic.w	r2, r2, #1
 8002438:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800243a:	f7ff fbd1 	bl	8001be0 <HAL_GetTick>
 800243e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002440:	e01b      	b.n	800247a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002442:	f7ff fbcd 	bl	8001be0 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d914      	bls.n	800247a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	2b01      	cmp	r3, #1
 800245c:	d10d      	bne.n	800247a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002462:	f043 0210 	orr.w	r2, r3, #16
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800246e:	f043 0201 	orr.w	r2, r3, #1
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e007      	b.n	800248a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	2b01      	cmp	r3, #1
 8002486:	d0dc      	beq.n	8002442 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b084      	sub	sp, #16
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d101      	bne.n	80024a4 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e0ed      	b.n	8002680 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d102      	bne.n	80024b6 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f7ff f9f5 	bl	80018a0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f042 0201 	orr.w	r2, r2, #1
 80024c4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024c6:	f7ff fb8b 	bl	8001be0 <HAL_GetTick>
 80024ca:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80024cc:	e012      	b.n	80024f4 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80024ce:	f7ff fb87 	bl	8001be0 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b0a      	cmp	r3, #10
 80024da:	d90b      	bls.n	80024f4 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2205      	movs	r2, #5
 80024ec:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e0c5      	b.n	8002680 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d0e5      	beq.n	80024ce <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f022 0202 	bic.w	r2, r2, #2
 8002510:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002512:	f7ff fb65 	bl	8001be0 <HAL_GetTick>
 8002516:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002518:	e012      	b.n	8002540 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800251a:	f7ff fb61 	bl	8001be0 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b0a      	cmp	r3, #10
 8002526:	d90b      	bls.n	8002540 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800252c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2205      	movs	r2, #5
 8002538:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e09f      	b.n	8002680 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1e5      	bne.n	800251a <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	7e1b      	ldrb	r3, [r3, #24]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d108      	bne.n	8002568 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002564:	601a      	str	r2, [r3, #0]
 8002566:	e007      	b.n	8002578 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002576:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	7e5b      	ldrb	r3, [r3, #25]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d108      	bne.n	8002592 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	e007      	b.n	80025a2 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80025a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	7e9b      	ldrb	r3, [r3, #26]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d108      	bne.n	80025bc <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f042 0220 	orr.w	r2, r2, #32
 80025b8:	601a      	str	r2, [r3, #0]
 80025ba:	e007      	b.n	80025cc <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f022 0220 	bic.w	r2, r2, #32
 80025ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	7edb      	ldrb	r3, [r3, #27]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d108      	bne.n	80025e6 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f022 0210 	bic.w	r2, r2, #16
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	e007      	b.n	80025f6 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f042 0210 	orr.w	r2, r2, #16
 80025f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	7f1b      	ldrb	r3, [r3, #28]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d108      	bne.n	8002610 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f042 0208 	orr.w	r2, r2, #8
 800260c:	601a      	str	r2, [r3, #0]
 800260e:	e007      	b.n	8002620 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f022 0208 	bic.w	r2, r2, #8
 800261e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	7f5b      	ldrb	r3, [r3, #29]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d108      	bne.n	800263a <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f042 0204 	orr.w	r2, r2, #4
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	e007      	b.n	800264a <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 0204 	bic.w	r2, r2, #4
 8002648:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	689a      	ldr	r2, [r3, #8]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	431a      	orrs	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	431a      	orrs	r2, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	ea42 0103 	orr.w	r1, r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	1e5a      	subs	r2, r3, #1
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	430a      	orrs	r2, r1
 800266e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2201      	movs	r2, #1
 800267a:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800267e:	2300      	movs	r3, #0
}
 8002680:	4618      	mov	r0, r3
 8002682:	3710      	adds	r7, #16
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002688:	b480      	push	{r7}
 800268a:	b087      	sub	sp, #28
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800269e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80026a0:	7cfb      	ldrb	r3, [r7, #19]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d003      	beq.n	80026ae <HAL_CAN_ConfigFilter+0x26>
 80026a6:	7cfb      	ldrb	r3, [r7, #19]
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	f040 80aa 	bne.w	8002802 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80026b4:	f043 0201 	orr.w	r2, r3, #1
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	f003 031f 	and.w	r3, r3, #31
 80026c6:	2201      	movs	r2, #1
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	43db      	mvns	r3, r3
 80026d8:	401a      	ands	r2, r3
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	69db      	ldr	r3, [r3, #28]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d123      	bne.n	8002730 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	43db      	mvns	r3, r3
 80026f2:	401a      	ands	r2, r3
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002706:	683a      	ldr	r2, [r7, #0]
 8002708:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800270a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	3248      	adds	r2, #72	@ 0x48
 8002710:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002724:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002726:	6979      	ldr	r1, [r7, #20]
 8002728:	3348      	adds	r3, #72	@ 0x48
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	440b      	add	r3, r1
 800272e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	69db      	ldr	r3, [r3, #28]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d122      	bne.n	800277e <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	431a      	orrs	r2, r3
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002758:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	3248      	adds	r2, #72	@ 0x48
 800275e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002772:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002774:	6979      	ldr	r1, [r7, #20]
 8002776:	3348      	adds	r3, #72	@ 0x48
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	440b      	add	r3, r1
 800277c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d109      	bne.n	800279a <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	43db      	mvns	r3, r3
 8002790:	401a      	ands	r2, r3
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002798:	e007      	b.n	80027aa <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	431a      	orrs	r2, r3
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d109      	bne.n	80027c6 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	43db      	mvns	r3, r3
 80027bc:	401a      	ands	r2, r3
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80027c4:	e007      	b.n	80027d6 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	431a      	orrs	r2, r3
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	6a1b      	ldr	r3, [r3, #32]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d107      	bne.n	80027ee <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	431a      	orrs	r2, r3
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80027f4:	f023 0201 	bic.w	r2, r3, #1
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80027fe:	2300      	movs	r3, #0
 8002800:	e006      	b.n	8002810 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002806:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
  }
}
 8002810:	4618      	mov	r0, r3
 8002812:	371c      	adds	r7, #28
 8002814:	46bd      	mov	sp, r7
 8002816:	bc80      	pop	{r7}
 8002818:	4770      	bx	lr

0800281a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b084      	sub	sp, #16
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2b01      	cmp	r3, #1
 800282c:	d12e      	bne.n	800288c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2202      	movs	r2, #2
 8002832:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 0201 	bic.w	r2, r2, #1
 8002844:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002846:	f7ff f9cb 	bl	8001be0 <HAL_GetTick>
 800284a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800284c:	e012      	b.n	8002874 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800284e:	f7ff f9c7 	bl	8001be0 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b0a      	cmp	r3, #10
 800285a:	d90b      	bls.n	8002874 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002860:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2205      	movs	r2, #5
 800286c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e012      	b.n	800289a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1e5      	bne.n	800284e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002888:	2300      	movs	r3, #0
 800288a:	e006      	b.n	800289a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002890:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
  }
}
 800289a:	4618      	mov	r0, r3
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80028a2:	b480      	push	{r7}
 80028a4:	b089      	sub	sp, #36	@ 0x24
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	60f8      	str	r0, [r7, #12]
 80028aa:	60b9      	str	r1, [r7, #8]
 80028ac:	607a      	str	r2, [r7, #4]
 80028ae:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80028c0:	7ffb      	ldrb	r3, [r7, #31]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d003      	beq.n	80028ce <HAL_CAN_AddTxMessage+0x2c>
 80028c6:	7ffb      	ldrb	r3, [r7, #31]
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	f040 80ad 	bne.w	8002a28 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d10a      	bne.n	80028ee <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d105      	bne.n	80028ee <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f000 8095 	beq.w	8002a18 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	0e1b      	lsrs	r3, r3, #24
 80028f2:	f003 0303 	and.w	r3, r3, #3
 80028f6:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80028f8:	2201      	movs	r2, #1
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	409a      	lsls	r2, r3
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d10d      	bne.n	8002926 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002914:	68f9      	ldr	r1, [r7, #12]
 8002916:	6809      	ldr	r1, [r1, #0]
 8002918:	431a      	orrs	r2, r3
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	3318      	adds	r3, #24
 800291e:	011b      	lsls	r3, r3, #4
 8002920:	440b      	add	r3, r1
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	e00f      	b.n	8002946 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002930:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002936:	68f9      	ldr	r1, [r7, #12]
 8002938:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800293a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	3318      	adds	r3, #24
 8002940:	011b      	lsls	r3, r3, #4
 8002942:	440b      	add	r3, r1
 8002944:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6819      	ldr	r1, [r3, #0]
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	691a      	ldr	r2, [r3, #16]
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	3318      	adds	r3, #24
 8002952:	011b      	lsls	r3, r3, #4
 8002954:	440b      	add	r3, r1
 8002956:	3304      	adds	r3, #4
 8002958:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	7d1b      	ldrb	r3, [r3, #20]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d111      	bne.n	8002986 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	3318      	adds	r3, #24
 800296a:	011b      	lsls	r3, r3, #4
 800296c:	4413      	add	r3, r2
 800296e:	3304      	adds	r3, #4
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	6811      	ldr	r1, [r2, #0]
 8002976:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	3318      	adds	r3, #24
 800297e:	011b      	lsls	r3, r3, #4
 8002980:	440b      	add	r3, r1
 8002982:	3304      	adds	r3, #4
 8002984:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	3307      	adds	r3, #7
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	061a      	lsls	r2, r3, #24
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	3306      	adds	r3, #6
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	041b      	lsls	r3, r3, #16
 8002996:	431a      	orrs	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	3305      	adds	r3, #5
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	021b      	lsls	r3, r3, #8
 80029a0:	4313      	orrs	r3, r2
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	3204      	adds	r2, #4
 80029a6:	7812      	ldrb	r2, [r2, #0]
 80029a8:	4610      	mov	r0, r2
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	6811      	ldr	r1, [r2, #0]
 80029ae:	ea43 0200 	orr.w	r2, r3, r0
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	011b      	lsls	r3, r3, #4
 80029b6:	440b      	add	r3, r1
 80029b8:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80029bc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	3303      	adds	r3, #3
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	061a      	lsls	r2, r3, #24
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	3302      	adds	r3, #2
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	041b      	lsls	r3, r3, #16
 80029ce:	431a      	orrs	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	3301      	adds	r3, #1
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	021b      	lsls	r3, r3, #8
 80029d8:	4313      	orrs	r3, r2
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	7812      	ldrb	r2, [r2, #0]
 80029de:	4610      	mov	r0, r2
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	6811      	ldr	r1, [r2, #0]
 80029e4:	ea43 0200 	orr.w	r2, r3, r0
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	011b      	lsls	r3, r3, #4
 80029ec:	440b      	add	r3, r1
 80029ee:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80029f2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	3318      	adds	r3, #24
 80029fc:	011b      	lsls	r3, r3, #4
 80029fe:	4413      	add	r3, r2
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	6811      	ldr	r1, [r2, #0]
 8002a06:	f043 0201 	orr.w	r2, r3, #1
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	3318      	adds	r3, #24
 8002a0e:	011b      	lsls	r3, r3, #4
 8002a10:	440b      	add	r3, r1
 8002a12:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002a14:	2300      	movs	r3, #0
 8002a16:	e00e      	b.n	8002a36 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a1c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e006      	b.n	8002a36 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a2c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
  }
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3724      	adds	r7, #36	@ 0x24
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bc80      	pop	{r7}
 8002a3e:	4770      	bx	lr

08002a40 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002a40:	b480      	push	{r7}
 8002a42:	b087      	sub	sp, #28
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
 8002a4c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a54:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002a56:	7dfb      	ldrb	r3, [r7, #23]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d003      	beq.n	8002a64 <HAL_CAN_GetRxMessage+0x24>
 8002a5c:	7dfb      	ldrb	r3, [r7, #23]
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	f040 8103 	bne.w	8002c6a <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10e      	bne.n	8002a88 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	f003 0303 	and.w	r3, r3, #3
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d116      	bne.n	8002aa6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a7c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e0f7      	b.n	8002c78 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	f003 0303 	and.w	r3, r3, #3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d107      	bne.n	8002aa6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a9a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e0e8      	b.n	8002c78 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	331b      	adds	r3, #27
 8002aae:	011b      	lsls	r3, r3, #4
 8002ab0:	4413      	add	r3, r2
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0204 	and.w	r2, r3, #4
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d10c      	bne.n	8002ade <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	331b      	adds	r3, #27
 8002acc:	011b      	lsls	r3, r3, #4
 8002ace:	4413      	add	r3, r2
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	0d5b      	lsrs	r3, r3, #21
 8002ad4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	e00b      	b.n	8002af6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	331b      	adds	r3, #27
 8002ae6:	011b      	lsls	r3, r3, #4
 8002ae8:	4413      	add	r3, r2
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	08db      	lsrs	r3, r3, #3
 8002aee:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	331b      	adds	r3, #27
 8002afe:	011b      	lsls	r3, r3, #4
 8002b00:	4413      	add	r3, r2
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0202 	and.w	r2, r3, #2
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	331b      	adds	r3, #27
 8002b14:	011b      	lsls	r3, r3, #4
 8002b16:	4413      	add	r3, r2
 8002b18:	3304      	adds	r3, #4
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0308 	and.w	r3, r3, #8
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d003      	beq.n	8002b2c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2208      	movs	r2, #8
 8002b28:	611a      	str	r2, [r3, #16]
 8002b2a:	e00b      	b.n	8002b44 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	331b      	adds	r3, #27
 8002b34:	011b      	lsls	r3, r3, #4
 8002b36:	4413      	add	r3, r2
 8002b38:	3304      	adds	r3, #4
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 020f 	and.w	r2, r3, #15
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	331b      	adds	r3, #27
 8002b4c:	011b      	lsls	r3, r3, #4
 8002b4e:	4413      	add	r3, r2
 8002b50:	3304      	adds	r3, #4
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	0a1b      	lsrs	r3, r3, #8
 8002b56:	b2da      	uxtb	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	331b      	adds	r3, #27
 8002b64:	011b      	lsls	r3, r3, #4
 8002b66:	4413      	add	r3, r2
 8002b68:	3304      	adds	r3, #4
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	0c1b      	lsrs	r3, r3, #16
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	011b      	lsls	r3, r3, #4
 8002b7c:	4413      	add	r3, r2
 8002b7e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	011b      	lsls	r3, r3, #4
 8002b92:	4413      	add	r3, r2
 8002b94:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	0a1a      	lsrs	r2, r3, #8
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	b2d2      	uxtb	r2, r2
 8002ba2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	011b      	lsls	r3, r3, #4
 8002bac:	4413      	add	r3, r2
 8002bae:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	0c1a      	lsrs	r2, r3, #16
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	3302      	adds	r3, #2
 8002bba:	b2d2      	uxtb	r2, r2
 8002bbc:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	011b      	lsls	r3, r3, #4
 8002bc6:	4413      	add	r3, r2
 8002bc8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	0e1a      	lsrs	r2, r3, #24
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	3303      	adds	r3, #3
 8002bd4:	b2d2      	uxtb	r2, r2
 8002bd6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	011b      	lsls	r3, r3, #4
 8002be0:	4413      	add	r3, r2
 8002be2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	3304      	adds	r3, #4
 8002bec:	b2d2      	uxtb	r2, r2
 8002bee:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	011b      	lsls	r3, r3, #4
 8002bf8:	4413      	add	r3, r2
 8002bfa:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	0a1a      	lsrs	r2, r3, #8
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	3305      	adds	r3, #5
 8002c06:	b2d2      	uxtb	r2, r2
 8002c08:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	011b      	lsls	r3, r3, #4
 8002c12:	4413      	add	r3, r2
 8002c14:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	0c1a      	lsrs	r2, r3, #16
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	3306      	adds	r3, #6
 8002c20:	b2d2      	uxtb	r2, r2
 8002c22:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	011b      	lsls	r3, r3, #4
 8002c2c:	4413      	add	r3, r2
 8002c2e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	0e1a      	lsrs	r2, r3, #24
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	3307      	adds	r3, #7
 8002c3a:	b2d2      	uxtb	r2, r2
 8002c3c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d108      	bne.n	8002c56 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68da      	ldr	r2, [r3, #12]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f042 0220 	orr.w	r2, r2, #32
 8002c52:	60da      	str	r2, [r3, #12]
 8002c54:	e007      	b.n	8002c66 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	691a      	ldr	r2, [r3, #16]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f042 0220 	orr.w	r2, r2, #32
 8002c64:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002c66:	2300      	movs	r3, #0
 8002c68:	e006      	b.n	8002c78 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c6e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
  }
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	371c      	adds	r7, #28
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bc80      	pop	{r7}
 8002c80:	4770      	bx	lr

08002c82 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002c82:	b480      	push	{r7}
 8002c84:	b085      	sub	sp, #20
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
 8002c8a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c92:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002c94:	7bfb      	ldrb	r3, [r7, #15]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d002      	beq.n	8002ca0 <HAL_CAN_ActivateNotification+0x1e>
 8002c9a:	7bfb      	ldrb	r3, [r7, #15]
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d109      	bne.n	8002cb4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6959      	ldr	r1, [r3, #20]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	683a      	ldr	r2, [r7, #0]
 8002cac:	430a      	orrs	r2, r1
 8002cae:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	e006      	b.n	8002cc2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
  }
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3714      	adds	r7, #20
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bc80      	pop	{r7}
 8002cca:	4770      	bx	lr

08002ccc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b08a      	sub	sp, #40	@ 0x28
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002d08:	6a3b      	ldr	r3, [r7, #32]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d07c      	beq.n	8002e0c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d023      	beq.n	8002d64 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2201      	movs	r2, #1
 8002d22:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d003      	beq.n	8002d36 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 f983 	bl	800303a <HAL_CAN_TxMailbox0CompleteCallback>
 8002d34:	e016      	b.n	8002d64 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	f003 0304 	and.w	r3, r3, #4
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d004      	beq.n	8002d4a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d42:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002d46:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d48:	e00c      	b.n	8002d64 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	f003 0308 	and.w	r3, r3, #8
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d004      	beq.n	8002d5e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d56:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002d5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d5c:	e002      	b.n	8002d64 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 f986 	bl	8003070 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d024      	beq.n	8002db8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d76:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 f962 	bl	800304c <HAL_CAN_TxMailbox1CompleteCallback>
 8002d88:	e016      	b.n	8002db8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d004      	beq.n	8002d9e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d96:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002d9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d9c:	e00c      	b.n	8002db8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d004      	beq.n	8002db2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002daa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002dae:	627b      	str	r3, [r7, #36]	@ 0x24
 8002db0:	e002      	b.n	8002db8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 f965 	bl	8003082 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d024      	beq.n	8002e0c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002dca:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d003      	beq.n	8002dde <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 f941 	bl	800305e <HAL_CAN_TxMailbox2CompleteCallback>
 8002ddc:	e016      	b.n	8002e0c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d004      	beq.n	8002df2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002dee:	627b      	str	r3, [r7, #36]	@ 0x24
 8002df0:	e00c      	b.n	8002e0c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d004      	beq.n	8002e06 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e02:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e04:	e002      	b.n	8002e0c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 f944 	bl	8003094 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002e0c:	6a3b      	ldr	r3, [r7, #32]
 8002e0e:	f003 0308 	and.w	r3, r3, #8
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00c      	beq.n	8002e30 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	f003 0310 	and.w	r3, r3, #16
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d007      	beq.n	8002e30 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e26:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2210      	movs	r2, #16
 8002e2e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002e30:	6a3b      	ldr	r3, [r7, #32]
 8002e32:	f003 0304 	and.w	r3, r3, #4
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00b      	beq.n	8002e52 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	f003 0308 	and.w	r3, r3, #8
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d006      	beq.n	8002e52 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2208      	movs	r2, #8
 8002e4a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f000 f92a 	bl	80030a6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002e52:	6a3b      	ldr	r3, [r7, #32]
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d009      	beq.n	8002e70 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	f003 0303 	and.w	r3, r3, #3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d002      	beq.n	8002e70 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7fd ffae 	bl	8000dcc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002e70:	6a3b      	ldr	r3, [r7, #32]
 8002e72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00c      	beq.n	8002e94 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	f003 0310 	and.w	r3, r3, #16
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d007      	beq.n	8002e94 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e86:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002e8a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2210      	movs	r2, #16
 8002e92:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002e94:	6a3b      	ldr	r3, [r7, #32]
 8002e96:	f003 0320 	and.w	r3, r3, #32
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00b      	beq.n	8002eb6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	f003 0308 	and.w	r3, r3, #8
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d006      	beq.n	8002eb6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2208      	movs	r2, #8
 8002eae:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 f90a 	bl	80030ca <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002eb6:	6a3b      	ldr	r3, [r7, #32]
 8002eb8:	f003 0310 	and.w	r3, r3, #16
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d009      	beq.n	8002ed4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	f003 0303 	and.w	r3, r3, #3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d002      	beq.n	8002ed4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 f8f2 	bl	80030b8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002ed4:	6a3b      	ldr	r3, [r7, #32]
 8002ed6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00b      	beq.n	8002ef6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	f003 0310 	and.w	r3, r3, #16
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d006      	beq.n	8002ef6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2210      	movs	r2, #16
 8002eee:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f000 f8f3 	bl	80030dc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002ef6:	6a3b      	ldr	r3, [r7, #32]
 8002ef8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00b      	beq.n	8002f18 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	f003 0308 	and.w	r3, r3, #8
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d006      	beq.n	8002f18 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2208      	movs	r2, #8
 8002f10:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 f8eb 	bl	80030ee <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002f18:	6a3b      	ldr	r3, [r7, #32]
 8002f1a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d07b      	beq.n	800301a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	f003 0304 	and.w	r3, r3, #4
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d072      	beq.n	8003012 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002f2c:	6a3b      	ldr	r3, [r7, #32]
 8002f2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d008      	beq.n	8002f48 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d003      	beq.n	8002f48 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f42:	f043 0301 	orr.w	r3, r3, #1
 8002f46:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002f48:	6a3b      	ldr	r3, [r7, #32]
 8002f4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d008      	beq.n	8002f64 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d003      	beq.n	8002f64 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f5e:	f043 0302 	orr.w	r3, r3, #2
 8002f62:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002f64:	6a3b      	ldr	r3, [r7, #32]
 8002f66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d008      	beq.n	8002f80 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d003      	beq.n	8002f80 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f7a:	f043 0304 	orr.w	r3, r3, #4
 8002f7e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002f80:	6a3b      	ldr	r3, [r7, #32]
 8002f82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d043      	beq.n	8003012 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d03e      	beq.n	8003012 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f9a:	2b60      	cmp	r3, #96	@ 0x60
 8002f9c:	d02b      	beq.n	8002ff6 <HAL_CAN_IRQHandler+0x32a>
 8002f9e:	2b60      	cmp	r3, #96	@ 0x60
 8002fa0:	d82e      	bhi.n	8003000 <HAL_CAN_IRQHandler+0x334>
 8002fa2:	2b50      	cmp	r3, #80	@ 0x50
 8002fa4:	d022      	beq.n	8002fec <HAL_CAN_IRQHandler+0x320>
 8002fa6:	2b50      	cmp	r3, #80	@ 0x50
 8002fa8:	d82a      	bhi.n	8003000 <HAL_CAN_IRQHandler+0x334>
 8002faa:	2b40      	cmp	r3, #64	@ 0x40
 8002fac:	d019      	beq.n	8002fe2 <HAL_CAN_IRQHandler+0x316>
 8002fae:	2b40      	cmp	r3, #64	@ 0x40
 8002fb0:	d826      	bhi.n	8003000 <HAL_CAN_IRQHandler+0x334>
 8002fb2:	2b30      	cmp	r3, #48	@ 0x30
 8002fb4:	d010      	beq.n	8002fd8 <HAL_CAN_IRQHandler+0x30c>
 8002fb6:	2b30      	cmp	r3, #48	@ 0x30
 8002fb8:	d822      	bhi.n	8003000 <HAL_CAN_IRQHandler+0x334>
 8002fba:	2b10      	cmp	r3, #16
 8002fbc:	d002      	beq.n	8002fc4 <HAL_CAN_IRQHandler+0x2f8>
 8002fbe:	2b20      	cmp	r3, #32
 8002fc0:	d005      	beq.n	8002fce <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002fc2:	e01d      	b.n	8003000 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc6:	f043 0308 	orr.w	r3, r3, #8
 8002fca:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002fcc:	e019      	b.n	8003002 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd0:	f043 0310 	orr.w	r3, r3, #16
 8002fd4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002fd6:	e014      	b.n	8003002 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fda:	f043 0320 	orr.w	r3, r3, #32
 8002fde:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002fe0:	e00f      	b.n	8003002 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002fe8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002fea:	e00a      	b.n	8003002 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ff2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002ff4:	e005      	b.n	8003002 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ffc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002ffe:	e000      	b.n	8003002 <HAL_CAN_IRQHandler+0x336>
            break;
 8003000:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	699a      	ldr	r2, [r3, #24]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003010:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2204      	movs	r2, #4
 8003018:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800301a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800301c:	2b00      	cmp	r3, #0
 800301e:	d008      	beq.n	8003032 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003026:	431a      	orrs	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 f867 	bl	8003100 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003032:	bf00      	nop
 8003034:	3728      	adds	r7, #40	@ 0x28
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800303a:	b480      	push	{r7}
 800303c:	b083      	sub	sp, #12
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003042:	bf00      	nop
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	bc80      	pop	{r7}
 800304a:	4770      	bx	lr

0800304c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	bc80      	pop	{r7}
 800305c:	4770      	bx	lr

0800305e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800305e:	b480      	push	{r7}
 8003060:	b083      	sub	sp, #12
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003066:	bf00      	nop
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	bc80      	pop	{r7}
 800306e:	4770      	bx	lr

08003070 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003078:	bf00      	nop
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	bc80      	pop	{r7}
 8003080:	4770      	bx	lr

08003082 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003082:	b480      	push	{r7}
 8003084:	b083      	sub	sp, #12
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800308a:	bf00      	nop
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	bc80      	pop	{r7}
 8003092:	4770      	bx	lr

08003094 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bc80      	pop	{r7}
 80030a4:	4770      	bx	lr

080030a6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80030a6:	b480      	push	{r7}
 80030a8:	b083      	sub	sp, #12
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80030ae:	bf00      	nop
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bc80      	pop	{r7}
 80030b6:	4770      	bx	lr

080030b8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bc80      	pop	{r7}
 80030c8:	4770      	bx	lr

080030ca <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80030ca:	b480      	push	{r7}
 80030cc:	b083      	sub	sp, #12
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80030d2:	bf00      	nop
 80030d4:	370c      	adds	r7, #12
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bc80      	pop	{r7}
 80030da:	4770      	bx	lr

080030dc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bc80      	pop	{r7}
 80030ec:	4770      	bx	lr

080030ee <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80030ee:	b480      	push	{r7}
 80030f0:	b083      	sub	sp, #12
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80030f6:	bf00      	nop
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bc80      	pop	{r7}
 80030fe:	4770      	bx	lr

08003100 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003108:	bf00      	nop
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	bc80      	pop	{r7}
 8003110:	4770      	bx	lr
	...

08003114 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f003 0307 	and.w	r3, r3, #7
 8003122:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003124:	4b0c      	ldr	r3, [pc, #48]	@ (8003158 <__NVIC_SetPriorityGrouping+0x44>)
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800312a:	68ba      	ldr	r2, [r7, #8]
 800312c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003130:	4013      	ands	r3, r2
 8003132:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800313c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003140:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003144:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003146:	4a04      	ldr	r2, [pc, #16]	@ (8003158 <__NVIC_SetPriorityGrouping+0x44>)
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	60d3      	str	r3, [r2, #12]
}
 800314c:	bf00      	nop
 800314e:	3714      	adds	r7, #20
 8003150:	46bd      	mov	sp, r7
 8003152:	bc80      	pop	{r7}
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	e000ed00 	.word	0xe000ed00

0800315c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003160:	4b04      	ldr	r3, [pc, #16]	@ (8003174 <__NVIC_GetPriorityGrouping+0x18>)
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	0a1b      	lsrs	r3, r3, #8
 8003166:	f003 0307 	and.w	r3, r3, #7
}
 800316a:	4618      	mov	r0, r3
 800316c:	46bd      	mov	sp, r7
 800316e:	bc80      	pop	{r7}
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	e000ed00 	.word	0xe000ed00

08003178 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	4603      	mov	r3, r0
 8003180:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003186:	2b00      	cmp	r3, #0
 8003188:	db0b      	blt.n	80031a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800318a:	79fb      	ldrb	r3, [r7, #7]
 800318c:	f003 021f 	and.w	r2, r3, #31
 8003190:	4906      	ldr	r1, [pc, #24]	@ (80031ac <__NVIC_EnableIRQ+0x34>)
 8003192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003196:	095b      	lsrs	r3, r3, #5
 8003198:	2001      	movs	r0, #1
 800319a:	fa00 f202 	lsl.w	r2, r0, r2
 800319e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031a2:	bf00      	nop
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bc80      	pop	{r7}
 80031aa:	4770      	bx	lr
 80031ac:	e000e100 	.word	0xe000e100

080031b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	4603      	mov	r3, r0
 80031b8:	6039      	str	r1, [r7, #0]
 80031ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	db0a      	blt.n	80031da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	b2da      	uxtb	r2, r3
 80031c8:	490c      	ldr	r1, [pc, #48]	@ (80031fc <__NVIC_SetPriority+0x4c>)
 80031ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ce:	0112      	lsls	r2, r2, #4
 80031d0:	b2d2      	uxtb	r2, r2
 80031d2:	440b      	add	r3, r1
 80031d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031d8:	e00a      	b.n	80031f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	b2da      	uxtb	r2, r3
 80031de:	4908      	ldr	r1, [pc, #32]	@ (8003200 <__NVIC_SetPriority+0x50>)
 80031e0:	79fb      	ldrb	r3, [r7, #7]
 80031e2:	f003 030f 	and.w	r3, r3, #15
 80031e6:	3b04      	subs	r3, #4
 80031e8:	0112      	lsls	r2, r2, #4
 80031ea:	b2d2      	uxtb	r2, r2
 80031ec:	440b      	add	r3, r1
 80031ee:	761a      	strb	r2, [r3, #24]
}
 80031f0:	bf00      	nop
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bc80      	pop	{r7}
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	e000e100 	.word	0xe000e100
 8003200:	e000ed00 	.word	0xe000ed00

08003204 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003204:	b480      	push	{r7}
 8003206:	b089      	sub	sp, #36	@ 0x24
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f003 0307 	and.w	r3, r3, #7
 8003216:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	f1c3 0307 	rsb	r3, r3, #7
 800321e:	2b04      	cmp	r3, #4
 8003220:	bf28      	it	cs
 8003222:	2304      	movcs	r3, #4
 8003224:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	3304      	adds	r3, #4
 800322a:	2b06      	cmp	r3, #6
 800322c:	d902      	bls.n	8003234 <NVIC_EncodePriority+0x30>
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	3b03      	subs	r3, #3
 8003232:	e000      	b.n	8003236 <NVIC_EncodePriority+0x32>
 8003234:	2300      	movs	r3, #0
 8003236:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003238:	f04f 32ff 	mov.w	r2, #4294967295
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	fa02 f303 	lsl.w	r3, r2, r3
 8003242:	43da      	mvns	r2, r3
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	401a      	ands	r2, r3
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800324c:	f04f 31ff 	mov.w	r1, #4294967295
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	fa01 f303 	lsl.w	r3, r1, r3
 8003256:	43d9      	mvns	r1, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800325c:	4313      	orrs	r3, r2
         );
}
 800325e:	4618      	mov	r0, r3
 8003260:	3724      	adds	r7, #36	@ 0x24
 8003262:	46bd      	mov	sp, r7
 8003264:	bc80      	pop	{r7}
 8003266:	4770      	bx	lr

08003268 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	3b01      	subs	r3, #1
 8003274:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003278:	d301      	bcc.n	800327e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800327a:	2301      	movs	r3, #1
 800327c:	e00f      	b.n	800329e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800327e:	4a0a      	ldr	r2, [pc, #40]	@ (80032a8 <SysTick_Config+0x40>)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	3b01      	subs	r3, #1
 8003284:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003286:	210f      	movs	r1, #15
 8003288:	f04f 30ff 	mov.w	r0, #4294967295
 800328c:	f7ff ff90 	bl	80031b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003290:	4b05      	ldr	r3, [pc, #20]	@ (80032a8 <SysTick_Config+0x40>)
 8003292:	2200      	movs	r2, #0
 8003294:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003296:	4b04      	ldr	r3, [pc, #16]	@ (80032a8 <SysTick_Config+0x40>)
 8003298:	2207      	movs	r2, #7
 800329a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3708      	adds	r7, #8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	e000e010 	.word	0xe000e010

080032ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f7ff ff2d 	bl	8003114 <__NVIC_SetPriorityGrouping>
}
 80032ba:	bf00      	nop
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b086      	sub	sp, #24
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	4603      	mov	r3, r0
 80032ca:	60b9      	str	r1, [r7, #8]
 80032cc:	607a      	str	r2, [r7, #4]
 80032ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032d0:	2300      	movs	r3, #0
 80032d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032d4:	f7ff ff42 	bl	800315c <__NVIC_GetPriorityGrouping>
 80032d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	68b9      	ldr	r1, [r7, #8]
 80032de:	6978      	ldr	r0, [r7, #20]
 80032e0:	f7ff ff90 	bl	8003204 <NVIC_EncodePriority>
 80032e4:	4602      	mov	r2, r0
 80032e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032ea:	4611      	mov	r1, r2
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7ff ff5f 	bl	80031b0 <__NVIC_SetPriority>
}
 80032f2:	bf00      	nop
 80032f4:	3718      	adds	r7, #24
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b082      	sub	sp, #8
 80032fe:	af00      	add	r7, sp, #0
 8003300:	4603      	mov	r3, r0
 8003302:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003308:	4618      	mov	r0, r3
 800330a:	f7ff ff35 	bl	8003178 <__NVIC_EnableIRQ>
}
 800330e:	bf00      	nop
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}

08003316 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003316:	b580      	push	{r7, lr}
 8003318:	b082      	sub	sp, #8
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f7ff ffa2 	bl	8003268 <SysTick_Config>
 8003324:	4603      	mov	r3, r0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3708      	adds	r7, #8
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
	...

08003330 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003330:	b480      	push	{r7}
 8003332:	b08b      	sub	sp, #44	@ 0x2c
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800333a:	2300      	movs	r3, #0
 800333c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800333e:	2300      	movs	r3, #0
 8003340:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003342:	e161      	b.n	8003608 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003344:	2201      	movs	r2, #1
 8003346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003348:	fa02 f303 	lsl.w	r3, r2, r3
 800334c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	69fa      	ldr	r2, [r7, #28]
 8003354:	4013      	ands	r3, r2
 8003356:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	429a      	cmp	r2, r3
 800335e:	f040 8150 	bne.w	8003602 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	4a97      	ldr	r2, [pc, #604]	@ (80035c4 <HAL_GPIO_Init+0x294>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d05e      	beq.n	800342a <HAL_GPIO_Init+0xfa>
 800336c:	4a95      	ldr	r2, [pc, #596]	@ (80035c4 <HAL_GPIO_Init+0x294>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d875      	bhi.n	800345e <HAL_GPIO_Init+0x12e>
 8003372:	4a95      	ldr	r2, [pc, #596]	@ (80035c8 <HAL_GPIO_Init+0x298>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d058      	beq.n	800342a <HAL_GPIO_Init+0xfa>
 8003378:	4a93      	ldr	r2, [pc, #588]	@ (80035c8 <HAL_GPIO_Init+0x298>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d86f      	bhi.n	800345e <HAL_GPIO_Init+0x12e>
 800337e:	4a93      	ldr	r2, [pc, #588]	@ (80035cc <HAL_GPIO_Init+0x29c>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d052      	beq.n	800342a <HAL_GPIO_Init+0xfa>
 8003384:	4a91      	ldr	r2, [pc, #580]	@ (80035cc <HAL_GPIO_Init+0x29c>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d869      	bhi.n	800345e <HAL_GPIO_Init+0x12e>
 800338a:	4a91      	ldr	r2, [pc, #580]	@ (80035d0 <HAL_GPIO_Init+0x2a0>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d04c      	beq.n	800342a <HAL_GPIO_Init+0xfa>
 8003390:	4a8f      	ldr	r2, [pc, #572]	@ (80035d0 <HAL_GPIO_Init+0x2a0>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d863      	bhi.n	800345e <HAL_GPIO_Init+0x12e>
 8003396:	4a8f      	ldr	r2, [pc, #572]	@ (80035d4 <HAL_GPIO_Init+0x2a4>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d046      	beq.n	800342a <HAL_GPIO_Init+0xfa>
 800339c:	4a8d      	ldr	r2, [pc, #564]	@ (80035d4 <HAL_GPIO_Init+0x2a4>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d85d      	bhi.n	800345e <HAL_GPIO_Init+0x12e>
 80033a2:	2b12      	cmp	r3, #18
 80033a4:	d82a      	bhi.n	80033fc <HAL_GPIO_Init+0xcc>
 80033a6:	2b12      	cmp	r3, #18
 80033a8:	d859      	bhi.n	800345e <HAL_GPIO_Init+0x12e>
 80033aa:	a201      	add	r2, pc, #4	@ (adr r2, 80033b0 <HAL_GPIO_Init+0x80>)
 80033ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b0:	0800342b 	.word	0x0800342b
 80033b4:	08003405 	.word	0x08003405
 80033b8:	08003417 	.word	0x08003417
 80033bc:	08003459 	.word	0x08003459
 80033c0:	0800345f 	.word	0x0800345f
 80033c4:	0800345f 	.word	0x0800345f
 80033c8:	0800345f 	.word	0x0800345f
 80033cc:	0800345f 	.word	0x0800345f
 80033d0:	0800345f 	.word	0x0800345f
 80033d4:	0800345f 	.word	0x0800345f
 80033d8:	0800345f 	.word	0x0800345f
 80033dc:	0800345f 	.word	0x0800345f
 80033e0:	0800345f 	.word	0x0800345f
 80033e4:	0800345f 	.word	0x0800345f
 80033e8:	0800345f 	.word	0x0800345f
 80033ec:	0800345f 	.word	0x0800345f
 80033f0:	0800345f 	.word	0x0800345f
 80033f4:	0800340d 	.word	0x0800340d
 80033f8:	08003421 	.word	0x08003421
 80033fc:	4a76      	ldr	r2, [pc, #472]	@ (80035d8 <HAL_GPIO_Init+0x2a8>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d013      	beq.n	800342a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003402:	e02c      	b.n	800345e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	623b      	str	r3, [r7, #32]
          break;
 800340a:	e029      	b.n	8003460 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	3304      	adds	r3, #4
 8003412:	623b      	str	r3, [r7, #32]
          break;
 8003414:	e024      	b.n	8003460 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	3308      	adds	r3, #8
 800341c:	623b      	str	r3, [r7, #32]
          break;
 800341e:	e01f      	b.n	8003460 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	330c      	adds	r3, #12
 8003426:	623b      	str	r3, [r7, #32]
          break;
 8003428:	e01a      	b.n	8003460 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d102      	bne.n	8003438 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003432:	2304      	movs	r3, #4
 8003434:	623b      	str	r3, [r7, #32]
          break;
 8003436:	e013      	b.n	8003460 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d105      	bne.n	800344c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003440:	2308      	movs	r3, #8
 8003442:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	69fa      	ldr	r2, [r7, #28]
 8003448:	611a      	str	r2, [r3, #16]
          break;
 800344a:	e009      	b.n	8003460 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800344c:	2308      	movs	r3, #8
 800344e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	69fa      	ldr	r2, [r7, #28]
 8003454:	615a      	str	r2, [r3, #20]
          break;
 8003456:	e003      	b.n	8003460 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003458:	2300      	movs	r3, #0
 800345a:	623b      	str	r3, [r7, #32]
          break;
 800345c:	e000      	b.n	8003460 <HAL_GPIO_Init+0x130>
          break;
 800345e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	2bff      	cmp	r3, #255	@ 0xff
 8003464:	d801      	bhi.n	800346a <HAL_GPIO_Init+0x13a>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	e001      	b.n	800346e <HAL_GPIO_Init+0x13e>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	3304      	adds	r3, #4
 800346e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	2bff      	cmp	r3, #255	@ 0xff
 8003474:	d802      	bhi.n	800347c <HAL_GPIO_Init+0x14c>
 8003476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	e002      	b.n	8003482 <HAL_GPIO_Init+0x152>
 800347c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800347e:	3b08      	subs	r3, #8
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	210f      	movs	r1, #15
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	fa01 f303 	lsl.w	r3, r1, r3
 8003490:	43db      	mvns	r3, r3
 8003492:	401a      	ands	r2, r3
 8003494:	6a39      	ldr	r1, [r7, #32]
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	fa01 f303 	lsl.w	r3, r1, r3
 800349c:	431a      	orrs	r2, r3
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f000 80a9 	beq.w	8003602 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80034b0:	4b4a      	ldr	r3, [pc, #296]	@ (80035dc <HAL_GPIO_Init+0x2ac>)
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	4a49      	ldr	r2, [pc, #292]	@ (80035dc <HAL_GPIO_Init+0x2ac>)
 80034b6:	f043 0301 	orr.w	r3, r3, #1
 80034ba:	6193      	str	r3, [r2, #24]
 80034bc:	4b47      	ldr	r3, [pc, #284]	@ (80035dc <HAL_GPIO_Init+0x2ac>)
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	f003 0301 	and.w	r3, r3, #1
 80034c4:	60bb      	str	r3, [r7, #8]
 80034c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80034c8:	4a45      	ldr	r2, [pc, #276]	@ (80035e0 <HAL_GPIO_Init+0x2b0>)
 80034ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034cc:	089b      	lsrs	r3, r3, #2
 80034ce:	3302      	adds	r3, #2
 80034d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80034d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d8:	f003 0303 	and.w	r3, r3, #3
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	220f      	movs	r2, #15
 80034e0:	fa02 f303 	lsl.w	r3, r2, r3
 80034e4:	43db      	mvns	r3, r3
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	4013      	ands	r3, r2
 80034ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a3d      	ldr	r2, [pc, #244]	@ (80035e4 <HAL_GPIO_Init+0x2b4>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d00d      	beq.n	8003510 <HAL_GPIO_Init+0x1e0>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a3c      	ldr	r2, [pc, #240]	@ (80035e8 <HAL_GPIO_Init+0x2b8>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d007      	beq.n	800350c <HAL_GPIO_Init+0x1dc>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a3b      	ldr	r2, [pc, #236]	@ (80035ec <HAL_GPIO_Init+0x2bc>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d101      	bne.n	8003508 <HAL_GPIO_Init+0x1d8>
 8003504:	2302      	movs	r3, #2
 8003506:	e004      	b.n	8003512 <HAL_GPIO_Init+0x1e2>
 8003508:	2303      	movs	r3, #3
 800350a:	e002      	b.n	8003512 <HAL_GPIO_Init+0x1e2>
 800350c:	2301      	movs	r3, #1
 800350e:	e000      	b.n	8003512 <HAL_GPIO_Init+0x1e2>
 8003510:	2300      	movs	r3, #0
 8003512:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003514:	f002 0203 	and.w	r2, r2, #3
 8003518:	0092      	lsls	r2, r2, #2
 800351a:	4093      	lsls	r3, r2
 800351c:	68fa      	ldr	r2, [r7, #12]
 800351e:	4313      	orrs	r3, r2
 8003520:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003522:	492f      	ldr	r1, [pc, #188]	@ (80035e0 <HAL_GPIO_Init+0x2b0>)
 8003524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003526:	089b      	lsrs	r3, r3, #2
 8003528:	3302      	adds	r3, #2
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d006      	beq.n	800354a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800353c:	4b2c      	ldr	r3, [pc, #176]	@ (80035f0 <HAL_GPIO_Init+0x2c0>)
 800353e:	689a      	ldr	r2, [r3, #8]
 8003540:	492b      	ldr	r1, [pc, #172]	@ (80035f0 <HAL_GPIO_Init+0x2c0>)
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	4313      	orrs	r3, r2
 8003546:	608b      	str	r3, [r1, #8]
 8003548:	e006      	b.n	8003558 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800354a:	4b29      	ldr	r3, [pc, #164]	@ (80035f0 <HAL_GPIO_Init+0x2c0>)
 800354c:	689a      	ldr	r2, [r3, #8]
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	43db      	mvns	r3, r3
 8003552:	4927      	ldr	r1, [pc, #156]	@ (80035f0 <HAL_GPIO_Init+0x2c0>)
 8003554:	4013      	ands	r3, r2
 8003556:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d006      	beq.n	8003572 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003564:	4b22      	ldr	r3, [pc, #136]	@ (80035f0 <HAL_GPIO_Init+0x2c0>)
 8003566:	68da      	ldr	r2, [r3, #12]
 8003568:	4921      	ldr	r1, [pc, #132]	@ (80035f0 <HAL_GPIO_Init+0x2c0>)
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	4313      	orrs	r3, r2
 800356e:	60cb      	str	r3, [r1, #12]
 8003570:	e006      	b.n	8003580 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003572:	4b1f      	ldr	r3, [pc, #124]	@ (80035f0 <HAL_GPIO_Init+0x2c0>)
 8003574:	68da      	ldr	r2, [r3, #12]
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	43db      	mvns	r3, r3
 800357a:	491d      	ldr	r1, [pc, #116]	@ (80035f0 <HAL_GPIO_Init+0x2c0>)
 800357c:	4013      	ands	r3, r2
 800357e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d006      	beq.n	800359a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800358c:	4b18      	ldr	r3, [pc, #96]	@ (80035f0 <HAL_GPIO_Init+0x2c0>)
 800358e:	685a      	ldr	r2, [r3, #4]
 8003590:	4917      	ldr	r1, [pc, #92]	@ (80035f0 <HAL_GPIO_Init+0x2c0>)
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	4313      	orrs	r3, r2
 8003596:	604b      	str	r3, [r1, #4]
 8003598:	e006      	b.n	80035a8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800359a:	4b15      	ldr	r3, [pc, #84]	@ (80035f0 <HAL_GPIO_Init+0x2c0>)
 800359c:	685a      	ldr	r2, [r3, #4]
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	43db      	mvns	r3, r3
 80035a2:	4913      	ldr	r1, [pc, #76]	@ (80035f0 <HAL_GPIO_Init+0x2c0>)
 80035a4:	4013      	ands	r3, r2
 80035a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d01f      	beq.n	80035f4 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80035b4:	4b0e      	ldr	r3, [pc, #56]	@ (80035f0 <HAL_GPIO_Init+0x2c0>)
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	490d      	ldr	r1, [pc, #52]	@ (80035f0 <HAL_GPIO_Init+0x2c0>)
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	4313      	orrs	r3, r2
 80035be:	600b      	str	r3, [r1, #0]
 80035c0:	e01f      	b.n	8003602 <HAL_GPIO_Init+0x2d2>
 80035c2:	bf00      	nop
 80035c4:	10320000 	.word	0x10320000
 80035c8:	10310000 	.word	0x10310000
 80035cc:	10220000 	.word	0x10220000
 80035d0:	10210000 	.word	0x10210000
 80035d4:	10120000 	.word	0x10120000
 80035d8:	10110000 	.word	0x10110000
 80035dc:	40021000 	.word	0x40021000
 80035e0:	40010000 	.word	0x40010000
 80035e4:	40010800 	.word	0x40010800
 80035e8:	40010c00 	.word	0x40010c00
 80035ec:	40011000 	.word	0x40011000
 80035f0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80035f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003624 <HAL_GPIO_Init+0x2f4>)
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	43db      	mvns	r3, r3
 80035fc:	4909      	ldr	r1, [pc, #36]	@ (8003624 <HAL_GPIO_Init+0x2f4>)
 80035fe:	4013      	ands	r3, r2
 8003600:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003604:	3301      	adds	r3, #1
 8003606:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800360e:	fa22 f303 	lsr.w	r3, r2, r3
 8003612:	2b00      	cmp	r3, #0
 8003614:	f47f ae96 	bne.w	8003344 <HAL_GPIO_Init+0x14>
  }
}
 8003618:	bf00      	nop
 800361a:	bf00      	nop
 800361c:	372c      	adds	r7, #44	@ 0x2c
 800361e:	46bd      	mov	sp, r7
 8003620:	bc80      	pop	{r7}
 8003622:	4770      	bx	lr
 8003624:	40010400 	.word	0x40010400

08003628 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	460b      	mov	r3, r1
 8003632:	807b      	strh	r3, [r7, #2]
 8003634:	4613      	mov	r3, r2
 8003636:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003638:	787b      	ldrb	r3, [r7, #1]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d003      	beq.n	8003646 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800363e:	887a      	ldrh	r2, [r7, #2]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003644:	e003      	b.n	800364e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003646:	887b      	ldrh	r3, [r7, #2]
 8003648:	041a      	lsls	r2, r3, #16
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	611a      	str	r2, [r3, #16]
}
 800364e:	bf00      	nop
 8003650:	370c      	adds	r7, #12
 8003652:	46bd      	mov	sp, r7
 8003654:	bc80      	pop	{r7}
 8003656:	4770      	bx	lr

08003658 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	460b      	mov	r3, r1
 8003662:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800366a:	887a      	ldrh	r2, [r7, #2]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	4013      	ands	r3, r2
 8003670:	041a      	lsls	r2, r3, #16
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	43d9      	mvns	r1, r3
 8003676:	887b      	ldrh	r3, [r7, #2]
 8003678:	400b      	ands	r3, r1
 800367a:	431a      	orrs	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	611a      	str	r2, [r3, #16]
}
 8003680:	bf00      	nop
 8003682:	3714      	adds	r7, #20
 8003684:	46bd      	mov	sp, r7
 8003686:	bc80      	pop	{r7}
 8003688:	4770      	bx	lr
	...

0800368c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b086      	sub	sp, #24
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d101      	bne.n	800369e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e272      	b.n	8003b84 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f000 8087 	beq.w	80037ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036ac:	4b92      	ldr	r3, [pc, #584]	@ (80038f8 <HAL_RCC_OscConfig+0x26c>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f003 030c 	and.w	r3, r3, #12
 80036b4:	2b04      	cmp	r3, #4
 80036b6:	d00c      	beq.n	80036d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80036b8:	4b8f      	ldr	r3, [pc, #572]	@ (80038f8 <HAL_RCC_OscConfig+0x26c>)
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f003 030c 	and.w	r3, r3, #12
 80036c0:	2b08      	cmp	r3, #8
 80036c2:	d112      	bne.n	80036ea <HAL_RCC_OscConfig+0x5e>
 80036c4:	4b8c      	ldr	r3, [pc, #560]	@ (80038f8 <HAL_RCC_OscConfig+0x26c>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036d0:	d10b      	bne.n	80036ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036d2:	4b89      	ldr	r3, [pc, #548]	@ (80038f8 <HAL_RCC_OscConfig+0x26c>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d06c      	beq.n	80037b8 <HAL_RCC_OscConfig+0x12c>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d168      	bne.n	80037b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e24c      	b.n	8003b84 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036f2:	d106      	bne.n	8003702 <HAL_RCC_OscConfig+0x76>
 80036f4:	4b80      	ldr	r3, [pc, #512]	@ (80038f8 <HAL_RCC_OscConfig+0x26c>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a7f      	ldr	r2, [pc, #508]	@ (80038f8 <HAL_RCC_OscConfig+0x26c>)
 80036fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036fe:	6013      	str	r3, [r2, #0]
 8003700:	e02e      	b.n	8003760 <HAL_RCC_OscConfig+0xd4>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10c      	bne.n	8003724 <HAL_RCC_OscConfig+0x98>
 800370a:	4b7b      	ldr	r3, [pc, #492]	@ (80038f8 <HAL_RCC_OscConfig+0x26c>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a7a      	ldr	r2, [pc, #488]	@ (80038f8 <HAL_RCC_OscConfig+0x26c>)
 8003710:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003714:	6013      	str	r3, [r2, #0]
 8003716:	4b78      	ldr	r3, [pc, #480]	@ (80038f8 <HAL_RCC_OscConfig+0x26c>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a77      	ldr	r2, [pc, #476]	@ (80038f8 <HAL_RCC_OscConfig+0x26c>)
 800371c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003720:	6013      	str	r3, [r2, #0]
 8003722:	e01d      	b.n	8003760 <HAL_RCC_OscConfig+0xd4>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800372c:	d10c      	bne.n	8003748 <HAL_RCC_OscConfig+0xbc>
 800372e:	4b72      	ldr	r3, [pc, #456]	@ (80038f8 <HAL_RCC_OscConfig+0x26c>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a71      	ldr	r2, [pc, #452]	@ (80038f8 <HAL_RCC_OscConfig+0x26c>)
 8003734:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003738:	6013      	str	r3, [r2, #0]
 800373a:	4b6f      	ldr	r3, [pc, #444]	@ (80038f8 <HAL_RCC_OscConfig+0x26c>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a6e      	ldr	r2, [pc, #440]	@ (80038f8 <HAL_RCC_OscConfig+0x26c>)
 8003740:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003744:	6013      	str	r3, [r2, #0]
 8003746:	e00b      	b.n	8003760 <HAL_RCC_OscConfig+0xd4>
 8003748:	4b6b      	ldr	r3, [pc, #428]	@ (80038f8 <HAL_RCC_OscConfig+0x26c>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a6a      	ldr	r2, [pc, #424]	@ (80038f8 <HAL_RCC_OscConfig+0x26c>)
 800374e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003752:	6013      	str	r3, [r2, #0]
 8003754:	4b68      	ldr	r3, [pc, #416]	@ (80038f8 <HAL_RCC_OscConfig+0x26c>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a67      	ldr	r2, [pc, #412]	@ (80038f8 <HAL_RCC_OscConfig+0x26c>)
 800375a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800375e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d013      	beq.n	8003790 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003768:	f7fe fa3a 	bl	8001be0 <HAL_GetTick>
 800376c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800376e:	e008      	b.n	8003782 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003770:	f7fe fa36 	bl	8001be0 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b64      	cmp	r3, #100	@ 0x64
 800377c:	d901      	bls.n	8003782 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e200      	b.n	8003b84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003782:	4b5d      	ldr	r3, [pc, #372]	@ (80038f8 <HAL_RCC_OscConfig+0x26c>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d0f0      	beq.n	8003770 <HAL_RCC_OscConfig+0xe4>
 800378e:	e014      	b.n	80037ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003790:	f7fe fa26 	bl	8001be0 <HAL_GetTick>
 8003794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003796:	e008      	b.n	80037aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003798:	f7fe fa22 	bl	8001be0 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b64      	cmp	r3, #100	@ 0x64
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e1ec      	b.n	8003b84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037aa:	4b53      	ldr	r3, [pc, #332]	@ (80038f8 <HAL_RCC_OscConfig+0x26c>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1f0      	bne.n	8003798 <HAL_RCC_OscConfig+0x10c>
 80037b6:	e000      	b.n	80037ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d063      	beq.n	800388e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037c6:	4b4c      	ldr	r3, [pc, #304]	@ (80038f8 <HAL_RCC_OscConfig+0x26c>)
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f003 030c 	and.w	r3, r3, #12
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00b      	beq.n	80037ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80037d2:	4b49      	ldr	r3, [pc, #292]	@ (80038f8 <HAL_RCC_OscConfig+0x26c>)
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f003 030c 	and.w	r3, r3, #12
 80037da:	2b08      	cmp	r3, #8
 80037dc:	d11c      	bne.n	8003818 <HAL_RCC_OscConfig+0x18c>
 80037de:	4b46      	ldr	r3, [pc, #280]	@ (80038f8 <HAL_RCC_OscConfig+0x26c>)
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d116      	bne.n	8003818 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ea:	4b43      	ldr	r3, [pc, #268]	@ (80038f8 <HAL_RCC_OscConfig+0x26c>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d005      	beq.n	8003802 <HAL_RCC_OscConfig+0x176>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d001      	beq.n	8003802 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e1c0      	b.n	8003b84 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003802:	4b3d      	ldr	r3, [pc, #244]	@ (80038f8 <HAL_RCC_OscConfig+0x26c>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	00db      	lsls	r3, r3, #3
 8003810:	4939      	ldr	r1, [pc, #228]	@ (80038f8 <HAL_RCC_OscConfig+0x26c>)
 8003812:	4313      	orrs	r3, r2
 8003814:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003816:	e03a      	b.n	800388e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d020      	beq.n	8003862 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003820:	4b36      	ldr	r3, [pc, #216]	@ (80038fc <HAL_RCC_OscConfig+0x270>)
 8003822:	2201      	movs	r2, #1
 8003824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003826:	f7fe f9db 	bl	8001be0 <HAL_GetTick>
 800382a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800382c:	e008      	b.n	8003840 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800382e:	f7fe f9d7 	bl	8001be0 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	2b02      	cmp	r3, #2
 800383a:	d901      	bls.n	8003840 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e1a1      	b.n	8003b84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003840:	4b2d      	ldr	r3, [pc, #180]	@ (80038f8 <HAL_RCC_OscConfig+0x26c>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d0f0      	beq.n	800382e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800384c:	4b2a      	ldr	r3, [pc, #168]	@ (80038f8 <HAL_RCC_OscConfig+0x26c>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	695b      	ldr	r3, [r3, #20]
 8003858:	00db      	lsls	r3, r3, #3
 800385a:	4927      	ldr	r1, [pc, #156]	@ (80038f8 <HAL_RCC_OscConfig+0x26c>)
 800385c:	4313      	orrs	r3, r2
 800385e:	600b      	str	r3, [r1, #0]
 8003860:	e015      	b.n	800388e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003862:	4b26      	ldr	r3, [pc, #152]	@ (80038fc <HAL_RCC_OscConfig+0x270>)
 8003864:	2200      	movs	r2, #0
 8003866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003868:	f7fe f9ba 	bl	8001be0 <HAL_GetTick>
 800386c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800386e:	e008      	b.n	8003882 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003870:	f7fe f9b6 	bl	8001be0 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b02      	cmp	r3, #2
 800387c:	d901      	bls.n	8003882 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e180      	b.n	8003b84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003882:	4b1d      	ldr	r3, [pc, #116]	@ (80038f8 <HAL_RCC_OscConfig+0x26c>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1f0      	bne.n	8003870 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0308 	and.w	r3, r3, #8
 8003896:	2b00      	cmp	r3, #0
 8003898:	d03a      	beq.n	8003910 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d019      	beq.n	80038d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038a2:	4b17      	ldr	r3, [pc, #92]	@ (8003900 <HAL_RCC_OscConfig+0x274>)
 80038a4:	2201      	movs	r2, #1
 80038a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038a8:	f7fe f99a 	bl	8001be0 <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038ae:	e008      	b.n	80038c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038b0:	f7fe f996 	bl	8001be0 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e160      	b.n	8003b84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038c2:	4b0d      	ldr	r3, [pc, #52]	@ (80038f8 <HAL_RCC_OscConfig+0x26c>)
 80038c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d0f0      	beq.n	80038b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80038ce:	2001      	movs	r0, #1
 80038d0:	f000 faba 	bl	8003e48 <RCC_Delay>
 80038d4:	e01c      	b.n	8003910 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038d6:	4b0a      	ldr	r3, [pc, #40]	@ (8003900 <HAL_RCC_OscConfig+0x274>)
 80038d8:	2200      	movs	r2, #0
 80038da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038dc:	f7fe f980 	bl	8001be0 <HAL_GetTick>
 80038e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038e2:	e00f      	b.n	8003904 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038e4:	f7fe f97c 	bl	8001be0 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d908      	bls.n	8003904 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e146      	b.n	8003b84 <HAL_RCC_OscConfig+0x4f8>
 80038f6:	bf00      	nop
 80038f8:	40021000 	.word	0x40021000
 80038fc:	42420000 	.word	0x42420000
 8003900:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003904:	4b92      	ldr	r3, [pc, #584]	@ (8003b50 <HAL_RCC_OscConfig+0x4c4>)
 8003906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1e9      	bne.n	80038e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0304 	and.w	r3, r3, #4
 8003918:	2b00      	cmp	r3, #0
 800391a:	f000 80a6 	beq.w	8003a6a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800391e:	2300      	movs	r3, #0
 8003920:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003922:	4b8b      	ldr	r3, [pc, #556]	@ (8003b50 <HAL_RCC_OscConfig+0x4c4>)
 8003924:	69db      	ldr	r3, [r3, #28]
 8003926:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d10d      	bne.n	800394a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800392e:	4b88      	ldr	r3, [pc, #544]	@ (8003b50 <HAL_RCC_OscConfig+0x4c4>)
 8003930:	69db      	ldr	r3, [r3, #28]
 8003932:	4a87      	ldr	r2, [pc, #540]	@ (8003b50 <HAL_RCC_OscConfig+0x4c4>)
 8003934:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003938:	61d3      	str	r3, [r2, #28]
 800393a:	4b85      	ldr	r3, [pc, #532]	@ (8003b50 <HAL_RCC_OscConfig+0x4c4>)
 800393c:	69db      	ldr	r3, [r3, #28]
 800393e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003942:	60bb      	str	r3, [r7, #8]
 8003944:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003946:	2301      	movs	r3, #1
 8003948:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800394a:	4b82      	ldr	r3, [pc, #520]	@ (8003b54 <HAL_RCC_OscConfig+0x4c8>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003952:	2b00      	cmp	r3, #0
 8003954:	d118      	bne.n	8003988 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003956:	4b7f      	ldr	r3, [pc, #508]	@ (8003b54 <HAL_RCC_OscConfig+0x4c8>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a7e      	ldr	r2, [pc, #504]	@ (8003b54 <HAL_RCC_OscConfig+0x4c8>)
 800395c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003960:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003962:	f7fe f93d 	bl	8001be0 <HAL_GetTick>
 8003966:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003968:	e008      	b.n	800397c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800396a:	f7fe f939 	bl	8001be0 <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	2b64      	cmp	r3, #100	@ 0x64
 8003976:	d901      	bls.n	800397c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e103      	b.n	8003b84 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800397c:	4b75      	ldr	r3, [pc, #468]	@ (8003b54 <HAL_RCC_OscConfig+0x4c8>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003984:	2b00      	cmp	r3, #0
 8003986:	d0f0      	beq.n	800396a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	2b01      	cmp	r3, #1
 800398e:	d106      	bne.n	800399e <HAL_RCC_OscConfig+0x312>
 8003990:	4b6f      	ldr	r3, [pc, #444]	@ (8003b50 <HAL_RCC_OscConfig+0x4c4>)
 8003992:	6a1b      	ldr	r3, [r3, #32]
 8003994:	4a6e      	ldr	r2, [pc, #440]	@ (8003b50 <HAL_RCC_OscConfig+0x4c4>)
 8003996:	f043 0301 	orr.w	r3, r3, #1
 800399a:	6213      	str	r3, [r2, #32]
 800399c:	e02d      	b.n	80039fa <HAL_RCC_OscConfig+0x36e>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d10c      	bne.n	80039c0 <HAL_RCC_OscConfig+0x334>
 80039a6:	4b6a      	ldr	r3, [pc, #424]	@ (8003b50 <HAL_RCC_OscConfig+0x4c4>)
 80039a8:	6a1b      	ldr	r3, [r3, #32]
 80039aa:	4a69      	ldr	r2, [pc, #420]	@ (8003b50 <HAL_RCC_OscConfig+0x4c4>)
 80039ac:	f023 0301 	bic.w	r3, r3, #1
 80039b0:	6213      	str	r3, [r2, #32]
 80039b2:	4b67      	ldr	r3, [pc, #412]	@ (8003b50 <HAL_RCC_OscConfig+0x4c4>)
 80039b4:	6a1b      	ldr	r3, [r3, #32]
 80039b6:	4a66      	ldr	r2, [pc, #408]	@ (8003b50 <HAL_RCC_OscConfig+0x4c4>)
 80039b8:	f023 0304 	bic.w	r3, r3, #4
 80039bc:	6213      	str	r3, [r2, #32]
 80039be:	e01c      	b.n	80039fa <HAL_RCC_OscConfig+0x36e>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	2b05      	cmp	r3, #5
 80039c6:	d10c      	bne.n	80039e2 <HAL_RCC_OscConfig+0x356>
 80039c8:	4b61      	ldr	r3, [pc, #388]	@ (8003b50 <HAL_RCC_OscConfig+0x4c4>)
 80039ca:	6a1b      	ldr	r3, [r3, #32]
 80039cc:	4a60      	ldr	r2, [pc, #384]	@ (8003b50 <HAL_RCC_OscConfig+0x4c4>)
 80039ce:	f043 0304 	orr.w	r3, r3, #4
 80039d2:	6213      	str	r3, [r2, #32]
 80039d4:	4b5e      	ldr	r3, [pc, #376]	@ (8003b50 <HAL_RCC_OscConfig+0x4c4>)
 80039d6:	6a1b      	ldr	r3, [r3, #32]
 80039d8:	4a5d      	ldr	r2, [pc, #372]	@ (8003b50 <HAL_RCC_OscConfig+0x4c4>)
 80039da:	f043 0301 	orr.w	r3, r3, #1
 80039de:	6213      	str	r3, [r2, #32]
 80039e0:	e00b      	b.n	80039fa <HAL_RCC_OscConfig+0x36e>
 80039e2:	4b5b      	ldr	r3, [pc, #364]	@ (8003b50 <HAL_RCC_OscConfig+0x4c4>)
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	4a5a      	ldr	r2, [pc, #360]	@ (8003b50 <HAL_RCC_OscConfig+0x4c4>)
 80039e8:	f023 0301 	bic.w	r3, r3, #1
 80039ec:	6213      	str	r3, [r2, #32]
 80039ee:	4b58      	ldr	r3, [pc, #352]	@ (8003b50 <HAL_RCC_OscConfig+0x4c4>)
 80039f0:	6a1b      	ldr	r3, [r3, #32]
 80039f2:	4a57      	ldr	r2, [pc, #348]	@ (8003b50 <HAL_RCC_OscConfig+0x4c4>)
 80039f4:	f023 0304 	bic.w	r3, r3, #4
 80039f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d015      	beq.n	8003a2e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a02:	f7fe f8ed 	bl	8001be0 <HAL_GetTick>
 8003a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a08:	e00a      	b.n	8003a20 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a0a:	f7fe f8e9 	bl	8001be0 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d901      	bls.n	8003a20 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e0b1      	b.n	8003b84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a20:	4b4b      	ldr	r3, [pc, #300]	@ (8003b50 <HAL_RCC_OscConfig+0x4c4>)
 8003a22:	6a1b      	ldr	r3, [r3, #32]
 8003a24:	f003 0302 	and.w	r3, r3, #2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d0ee      	beq.n	8003a0a <HAL_RCC_OscConfig+0x37e>
 8003a2c:	e014      	b.n	8003a58 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a2e:	f7fe f8d7 	bl	8001be0 <HAL_GetTick>
 8003a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a34:	e00a      	b.n	8003a4c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a36:	f7fe f8d3 	bl	8001be0 <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d901      	bls.n	8003a4c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e09b      	b.n	8003b84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a4c:	4b40      	ldr	r3, [pc, #256]	@ (8003b50 <HAL_RCC_OscConfig+0x4c4>)
 8003a4e:	6a1b      	ldr	r3, [r3, #32]
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1ee      	bne.n	8003a36 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a58:	7dfb      	ldrb	r3, [r7, #23]
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d105      	bne.n	8003a6a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a5e:	4b3c      	ldr	r3, [pc, #240]	@ (8003b50 <HAL_RCC_OscConfig+0x4c4>)
 8003a60:	69db      	ldr	r3, [r3, #28]
 8003a62:	4a3b      	ldr	r2, [pc, #236]	@ (8003b50 <HAL_RCC_OscConfig+0x4c4>)
 8003a64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a68:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	69db      	ldr	r3, [r3, #28]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	f000 8087 	beq.w	8003b82 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a74:	4b36      	ldr	r3, [pc, #216]	@ (8003b50 <HAL_RCC_OscConfig+0x4c4>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f003 030c 	and.w	r3, r3, #12
 8003a7c:	2b08      	cmp	r3, #8
 8003a7e:	d061      	beq.n	8003b44 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	69db      	ldr	r3, [r3, #28]
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d146      	bne.n	8003b16 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a88:	4b33      	ldr	r3, [pc, #204]	@ (8003b58 <HAL_RCC_OscConfig+0x4cc>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a8e:	f7fe f8a7 	bl	8001be0 <HAL_GetTick>
 8003a92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a94:	e008      	b.n	8003aa8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a96:	f7fe f8a3 	bl	8001be0 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d901      	bls.n	8003aa8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e06d      	b.n	8003b84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003aa8:	4b29      	ldr	r3, [pc, #164]	@ (8003b50 <HAL_RCC_OscConfig+0x4c4>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1f0      	bne.n	8003a96 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a1b      	ldr	r3, [r3, #32]
 8003ab8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003abc:	d108      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003abe:	4b24      	ldr	r3, [pc, #144]	@ (8003b50 <HAL_RCC_OscConfig+0x4c4>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	4921      	ldr	r1, [pc, #132]	@ (8003b50 <HAL_RCC_OscConfig+0x4c4>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ad0:	4b1f      	ldr	r3, [pc, #124]	@ (8003b50 <HAL_RCC_OscConfig+0x4c4>)
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a19      	ldr	r1, [r3, #32]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae0:	430b      	orrs	r3, r1
 8003ae2:	491b      	ldr	r1, [pc, #108]	@ (8003b50 <HAL_RCC_OscConfig+0x4c4>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ae8:	4b1b      	ldr	r3, [pc, #108]	@ (8003b58 <HAL_RCC_OscConfig+0x4cc>)
 8003aea:	2201      	movs	r2, #1
 8003aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aee:	f7fe f877 	bl	8001be0 <HAL_GetTick>
 8003af2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003af4:	e008      	b.n	8003b08 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003af6:	f7fe f873 	bl	8001be0 <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d901      	bls.n	8003b08 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e03d      	b.n	8003b84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b08:	4b11      	ldr	r3, [pc, #68]	@ (8003b50 <HAL_RCC_OscConfig+0x4c4>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d0f0      	beq.n	8003af6 <HAL_RCC_OscConfig+0x46a>
 8003b14:	e035      	b.n	8003b82 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b16:	4b10      	ldr	r3, [pc, #64]	@ (8003b58 <HAL_RCC_OscConfig+0x4cc>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b1c:	f7fe f860 	bl	8001be0 <HAL_GetTick>
 8003b20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b22:	e008      	b.n	8003b36 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b24:	f7fe f85c 	bl	8001be0 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e026      	b.n	8003b84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b36:	4b06      	ldr	r3, [pc, #24]	@ (8003b50 <HAL_RCC_OscConfig+0x4c4>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1f0      	bne.n	8003b24 <HAL_RCC_OscConfig+0x498>
 8003b42:	e01e      	b.n	8003b82 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	69db      	ldr	r3, [r3, #28]
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d107      	bne.n	8003b5c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e019      	b.n	8003b84 <HAL_RCC_OscConfig+0x4f8>
 8003b50:	40021000 	.word	0x40021000
 8003b54:	40007000 	.word	0x40007000
 8003b58:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b8c <HAL_RCC_OscConfig+0x500>)
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a1b      	ldr	r3, [r3, #32]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d106      	bne.n	8003b7e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d001      	beq.n	8003b82 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e000      	b.n	8003b84 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3718      	adds	r7, #24
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	40021000 	.word	0x40021000

08003b90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d101      	bne.n	8003ba4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e0d0      	b.n	8003d46 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ba4:	4b6a      	ldr	r3, [pc, #424]	@ (8003d50 <HAL_RCC_ClockConfig+0x1c0>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0307 	and.w	r3, r3, #7
 8003bac:	683a      	ldr	r2, [r7, #0]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d910      	bls.n	8003bd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bb2:	4b67      	ldr	r3, [pc, #412]	@ (8003d50 <HAL_RCC_ClockConfig+0x1c0>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f023 0207 	bic.w	r2, r3, #7
 8003bba:	4965      	ldr	r1, [pc, #404]	@ (8003d50 <HAL_RCC_ClockConfig+0x1c0>)
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bc2:	4b63      	ldr	r3, [pc, #396]	@ (8003d50 <HAL_RCC_ClockConfig+0x1c0>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0307 	and.w	r3, r3, #7
 8003bca:	683a      	ldr	r2, [r7, #0]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d001      	beq.n	8003bd4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e0b8      	b.n	8003d46 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0302 	and.w	r3, r3, #2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d020      	beq.n	8003c22 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0304 	and.w	r3, r3, #4
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d005      	beq.n	8003bf8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bec:	4b59      	ldr	r3, [pc, #356]	@ (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	4a58      	ldr	r2, [pc, #352]	@ (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003bf2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003bf6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0308 	and.w	r3, r3, #8
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d005      	beq.n	8003c10 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c04:	4b53      	ldr	r3, [pc, #332]	@ (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	4a52      	ldr	r2, [pc, #328]	@ (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003c0a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003c0e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c10:	4b50      	ldr	r3, [pc, #320]	@ (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	494d      	ldr	r1, [pc, #308]	@ (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d040      	beq.n	8003cb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d107      	bne.n	8003c46 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c36:	4b47      	ldr	r3, [pc, #284]	@ (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d115      	bne.n	8003c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e07f      	b.n	8003d46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d107      	bne.n	8003c5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c4e:	4b41      	ldr	r3, [pc, #260]	@ (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d109      	bne.n	8003c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e073      	b.n	8003d46 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c5e:	4b3d      	ldr	r3, [pc, #244]	@ (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0302 	and.w	r3, r3, #2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d101      	bne.n	8003c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e06b      	b.n	8003d46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c6e:	4b39      	ldr	r3, [pc, #228]	@ (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f023 0203 	bic.w	r2, r3, #3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	4936      	ldr	r1, [pc, #216]	@ (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c80:	f7fd ffae 	bl	8001be0 <HAL_GetTick>
 8003c84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c86:	e00a      	b.n	8003c9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c88:	f7fd ffaa 	bl	8001be0 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e053      	b.n	8003d46 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c9e:	4b2d      	ldr	r3, [pc, #180]	@ (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f003 020c 	and.w	r2, r3, #12
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d1eb      	bne.n	8003c88 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cb0:	4b27      	ldr	r3, [pc, #156]	@ (8003d50 <HAL_RCC_ClockConfig+0x1c0>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0307 	and.w	r3, r3, #7
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d210      	bcs.n	8003ce0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cbe:	4b24      	ldr	r3, [pc, #144]	@ (8003d50 <HAL_RCC_ClockConfig+0x1c0>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f023 0207 	bic.w	r2, r3, #7
 8003cc6:	4922      	ldr	r1, [pc, #136]	@ (8003d50 <HAL_RCC_ClockConfig+0x1c0>)
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cce:	4b20      	ldr	r3, [pc, #128]	@ (8003d50 <HAL_RCC_ClockConfig+0x1c0>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0307 	and.w	r3, r3, #7
 8003cd6:	683a      	ldr	r2, [r7, #0]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d001      	beq.n	8003ce0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e032      	b.n	8003d46 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0304 	and.w	r3, r3, #4
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d008      	beq.n	8003cfe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cec:	4b19      	ldr	r3, [pc, #100]	@ (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	4916      	ldr	r1, [pc, #88]	@ (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0308 	and.w	r3, r3, #8
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d009      	beq.n	8003d1e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d0a:	4b12      	ldr	r3, [pc, #72]	@ (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	00db      	lsls	r3, r3, #3
 8003d18:	490e      	ldr	r1, [pc, #56]	@ (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d1e:	f000 f821 	bl	8003d64 <HAL_RCC_GetSysClockFreq>
 8003d22:	4602      	mov	r2, r0
 8003d24:	4b0b      	ldr	r3, [pc, #44]	@ (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	091b      	lsrs	r3, r3, #4
 8003d2a:	f003 030f 	and.w	r3, r3, #15
 8003d2e:	490a      	ldr	r1, [pc, #40]	@ (8003d58 <HAL_RCC_ClockConfig+0x1c8>)
 8003d30:	5ccb      	ldrb	r3, [r1, r3]
 8003d32:	fa22 f303 	lsr.w	r3, r2, r3
 8003d36:	4a09      	ldr	r2, [pc, #36]	@ (8003d5c <HAL_RCC_ClockConfig+0x1cc>)
 8003d38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d3a:	4b09      	ldr	r3, [pc, #36]	@ (8003d60 <HAL_RCC_ClockConfig+0x1d0>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7fd ff0c 	bl	8001b5c <HAL_InitTick>

  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3710      	adds	r7, #16
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	40022000 	.word	0x40022000
 8003d54:	40021000 	.word	0x40021000
 8003d58:	08004d30 	.word	0x08004d30
 8003d5c:	20000000 	.word	0x20000000
 8003d60:	20000004 	.word	0x20000004

08003d64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b087      	sub	sp, #28
 8003d68:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	60fb      	str	r3, [r7, #12]
 8003d6e:	2300      	movs	r3, #0
 8003d70:	60bb      	str	r3, [r7, #8]
 8003d72:	2300      	movs	r3, #0
 8003d74:	617b      	str	r3, [r7, #20]
 8003d76:	2300      	movs	r3, #0
 8003d78:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003d7e:	4b1e      	ldr	r3, [pc, #120]	@ (8003df8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f003 030c 	and.w	r3, r3, #12
 8003d8a:	2b04      	cmp	r3, #4
 8003d8c:	d002      	beq.n	8003d94 <HAL_RCC_GetSysClockFreq+0x30>
 8003d8e:	2b08      	cmp	r3, #8
 8003d90:	d003      	beq.n	8003d9a <HAL_RCC_GetSysClockFreq+0x36>
 8003d92:	e027      	b.n	8003de4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d94:	4b19      	ldr	r3, [pc, #100]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0x98>)
 8003d96:	613b      	str	r3, [r7, #16]
      break;
 8003d98:	e027      	b.n	8003dea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	0c9b      	lsrs	r3, r3, #18
 8003d9e:	f003 030f 	and.w	r3, r3, #15
 8003da2:	4a17      	ldr	r2, [pc, #92]	@ (8003e00 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003da4:	5cd3      	ldrb	r3, [r2, r3]
 8003da6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d010      	beq.n	8003dd4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003db2:	4b11      	ldr	r3, [pc, #68]	@ (8003df8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	0c5b      	lsrs	r3, r3, #17
 8003db8:	f003 0301 	and.w	r3, r3, #1
 8003dbc:	4a11      	ldr	r2, [pc, #68]	@ (8003e04 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003dbe:	5cd3      	ldrb	r3, [r2, r3]
 8003dc0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a0d      	ldr	r2, [pc, #52]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0x98>)
 8003dc6:	fb03 f202 	mul.w	r2, r3, r2
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd0:	617b      	str	r3, [r7, #20]
 8003dd2:	e004      	b.n	8003dde <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a0c      	ldr	r2, [pc, #48]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003dd8:	fb02 f303 	mul.w	r3, r2, r3
 8003ddc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	613b      	str	r3, [r7, #16]
      break;
 8003de2:	e002      	b.n	8003dea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003de4:	4b05      	ldr	r3, [pc, #20]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0x98>)
 8003de6:	613b      	str	r3, [r7, #16]
      break;
 8003de8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dea:	693b      	ldr	r3, [r7, #16]
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	371c      	adds	r7, #28
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bc80      	pop	{r7}
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	40021000 	.word	0x40021000
 8003dfc:	007a1200 	.word	0x007a1200
 8003e00:	08004d48 	.word	0x08004d48
 8003e04:	08004d58 	.word	0x08004d58
 8003e08:	003d0900 	.word	0x003d0900

08003e0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e10:	4b02      	ldr	r3, [pc, #8]	@ (8003e1c <HAL_RCC_GetHCLKFreq+0x10>)
 8003e12:	681b      	ldr	r3, [r3, #0]
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bc80      	pop	{r7}
 8003e1a:	4770      	bx	lr
 8003e1c:	20000000 	.word	0x20000000

08003e20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e24:	f7ff fff2 	bl	8003e0c <HAL_RCC_GetHCLKFreq>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	4b05      	ldr	r3, [pc, #20]	@ (8003e40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	0adb      	lsrs	r3, r3, #11
 8003e30:	f003 0307 	and.w	r3, r3, #7
 8003e34:	4903      	ldr	r1, [pc, #12]	@ (8003e44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e36:	5ccb      	ldrb	r3, [r1, r3]
 8003e38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	40021000 	.word	0x40021000
 8003e44:	08004d40 	.word	0x08004d40

08003e48 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003e50:	4b0a      	ldr	r3, [pc, #40]	@ (8003e7c <RCC_Delay+0x34>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a0a      	ldr	r2, [pc, #40]	@ (8003e80 <RCC_Delay+0x38>)
 8003e56:	fba2 2303 	umull	r2, r3, r2, r3
 8003e5a:	0a5b      	lsrs	r3, r3, #9
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	fb02 f303 	mul.w	r3, r2, r3
 8003e62:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003e64:	bf00      	nop
  }
  while (Delay --);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	1e5a      	subs	r2, r3, #1
 8003e6a:	60fa      	str	r2, [r7, #12]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d1f9      	bne.n	8003e64 <RCC_Delay+0x1c>
}
 8003e70:	bf00      	nop
 8003e72:	bf00      	nop
 8003e74:	3714      	adds	r7, #20
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bc80      	pop	{r7}
 8003e7a:	4770      	bx	lr
 8003e7c:	20000000 	.word	0x20000000
 8003e80:	10624dd3 	.word	0x10624dd3

08003e84 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b086      	sub	sp, #24
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	613b      	str	r3, [r7, #16]
 8003e90:	2300      	movs	r3, #0
 8003e92:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0301 	and.w	r3, r3, #1
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d07d      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ea4:	4b4f      	ldr	r3, [pc, #316]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ea6:	69db      	ldr	r3, [r3, #28]
 8003ea8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d10d      	bne.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eb0:	4b4c      	ldr	r3, [pc, #304]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eb2:	69db      	ldr	r3, [r3, #28]
 8003eb4:	4a4b      	ldr	r2, [pc, #300]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003eba:	61d3      	str	r3, [r2, #28]
 8003ebc:	4b49      	ldr	r3, [pc, #292]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ebe:	69db      	ldr	r3, [r3, #28]
 8003ec0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ec4:	60bb      	str	r3, [r7, #8]
 8003ec6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ecc:	4b46      	ldr	r3, [pc, #280]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d118      	bne.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ed8:	4b43      	ldr	r3, [pc, #268]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a42      	ldr	r2, [pc, #264]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ede:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ee2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ee4:	f7fd fe7c 	bl	8001be0 <HAL_GetTick>
 8003ee8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eea:	e008      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eec:	f7fd fe78 	bl	8001be0 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	2b64      	cmp	r3, #100	@ 0x64
 8003ef8:	d901      	bls.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e06d      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003efe:	4b3a      	ldr	r3, [pc, #232]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d0f0      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f0a:	4b36      	ldr	r3, [pc, #216]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f12:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d02e      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d027      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f28:	4b2e      	ldr	r3, [pc, #184]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f2a:	6a1b      	ldr	r3, [r3, #32]
 8003f2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f30:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f32:	4b2e      	ldr	r3, [pc, #184]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003f34:	2201      	movs	r2, #1
 8003f36:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f38:	4b2c      	ldr	r3, [pc, #176]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003f3e:	4a29      	ldr	r2, [pc, #164]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d014      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f4e:	f7fd fe47 	bl	8001be0 <HAL_GetTick>
 8003f52:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f54:	e00a      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f56:	f7fd fe43 	bl	8001be0 <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d901      	bls.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e036      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f6c:	4b1d      	ldr	r3, [pc, #116]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f6e:	6a1b      	ldr	r3, [r3, #32]
 8003f70:	f003 0302 	and.w	r3, r3, #2
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d0ee      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f78:	4b1a      	ldr	r3, [pc, #104]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f7a:	6a1b      	ldr	r3, [r3, #32]
 8003f7c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	4917      	ldr	r1, [pc, #92]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f8a:	7dfb      	ldrb	r3, [r7, #23]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d105      	bne.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f90:	4b14      	ldr	r3, [pc, #80]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f92:	69db      	ldr	r3, [r3, #28]
 8003f94:	4a13      	ldr	r2, [pc, #76]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f9a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0302 	and.w	r3, r3, #2
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d008      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003fa8:	4b0e      	ldr	r3, [pc, #56]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	490b      	ldr	r1, [pc, #44]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0310 	and.w	r3, r3, #16
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d008      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003fc6:	4b07      	ldr	r3, [pc, #28]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	4904      	ldr	r1, [pc, #16]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3718      	adds	r7, #24
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	40021000 	.word	0x40021000
 8003fe8:	40007000 	.word	0x40007000
 8003fec:	42420440 	.word	0x42420440

08003ff0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b088      	sub	sp, #32
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	617b      	str	r3, [r7, #20]
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	61fb      	str	r3, [r7, #28]
 8004000:	2300      	movs	r3, #0
 8004002:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004004:	2300      	movs	r3, #0
 8004006:	60fb      	str	r3, [r7, #12]
 8004008:	2300      	movs	r3, #0
 800400a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b10      	cmp	r3, #16
 8004010:	d00a      	beq.n	8004028 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2b10      	cmp	r3, #16
 8004016:	f200 808a 	bhi.w	800412e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d045      	beq.n	80040ac <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2b02      	cmp	r3, #2
 8004024:	d075      	beq.n	8004112 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004026:	e082      	b.n	800412e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004028:	4b46      	ldr	r3, [pc, #280]	@ (8004144 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800402e:	4b45      	ldr	r3, [pc, #276]	@ (8004144 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d07b      	beq.n	8004132 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	0c9b      	lsrs	r3, r3, #18
 800403e:	f003 030f 	and.w	r3, r3, #15
 8004042:	4a41      	ldr	r2, [pc, #260]	@ (8004148 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004044:	5cd3      	ldrb	r3, [r2, r3]
 8004046:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d015      	beq.n	800407e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004052:	4b3c      	ldr	r3, [pc, #240]	@ (8004144 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	0c5b      	lsrs	r3, r3, #17
 8004058:	f003 0301 	and.w	r3, r3, #1
 800405c:	4a3b      	ldr	r2, [pc, #236]	@ (800414c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800405e:	5cd3      	ldrb	r3, [r2, r3]
 8004060:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00d      	beq.n	8004088 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800406c:	4a38      	ldr	r2, [pc, #224]	@ (8004150 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	fbb2 f2f3 	udiv	r2, r2, r3
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	fb02 f303 	mul.w	r3, r2, r3
 800407a:	61fb      	str	r3, [r7, #28]
 800407c:	e004      	b.n	8004088 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	4a34      	ldr	r2, [pc, #208]	@ (8004154 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004082:	fb02 f303 	mul.w	r3, r2, r3
 8004086:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004088:	4b2e      	ldr	r3, [pc, #184]	@ (8004144 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004090:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004094:	d102      	bne.n	800409c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	61bb      	str	r3, [r7, #24]
      break;
 800409a:	e04a      	b.n	8004132 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	005b      	lsls	r3, r3, #1
 80040a0:	4a2d      	ldr	r2, [pc, #180]	@ (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80040a2:	fba2 2303 	umull	r2, r3, r2, r3
 80040a6:	085b      	lsrs	r3, r3, #1
 80040a8:	61bb      	str	r3, [r7, #24]
      break;
 80040aa:	e042      	b.n	8004132 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80040ac:	4b25      	ldr	r3, [pc, #148]	@ (8004144 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80040ae:	6a1b      	ldr	r3, [r3, #32]
 80040b0:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040bc:	d108      	bne.n	80040d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d003      	beq.n	80040d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80040c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040cc:	61bb      	str	r3, [r7, #24]
 80040ce:	e01f      	b.n	8004110 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040da:	d109      	bne.n	80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80040dc:	4b19      	ldr	r3, [pc, #100]	@ (8004144 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80040de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e0:	f003 0302 	and.w	r3, r3, #2
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d003      	beq.n	80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80040e8:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80040ec:	61bb      	str	r3, [r7, #24]
 80040ee:	e00f      	b.n	8004110 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040fa:	d11c      	bne.n	8004136 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80040fc:	4b11      	ldr	r3, [pc, #68]	@ (8004144 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d016      	beq.n	8004136 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004108:	f24f 4324 	movw	r3, #62500	@ 0xf424
 800410c:	61bb      	str	r3, [r7, #24]
      break;
 800410e:	e012      	b.n	8004136 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004110:	e011      	b.n	8004136 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004112:	f7ff fe85 	bl	8003e20 <HAL_RCC_GetPCLK2Freq>
 8004116:	4602      	mov	r2, r0
 8004118:	4b0a      	ldr	r3, [pc, #40]	@ (8004144 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	0b9b      	lsrs	r3, r3, #14
 800411e:	f003 0303 	and.w	r3, r3, #3
 8004122:	3301      	adds	r3, #1
 8004124:	005b      	lsls	r3, r3, #1
 8004126:	fbb2 f3f3 	udiv	r3, r2, r3
 800412a:	61bb      	str	r3, [r7, #24]
      break;
 800412c:	e004      	b.n	8004138 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800412e:	bf00      	nop
 8004130:	e002      	b.n	8004138 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004132:	bf00      	nop
 8004134:	e000      	b.n	8004138 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004136:	bf00      	nop
    }
  }
  return (frequency);
 8004138:	69bb      	ldr	r3, [r7, #24]
}
 800413a:	4618      	mov	r0, r3
 800413c:	3720      	adds	r7, #32
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	40021000 	.word	0x40021000
 8004148:	08004d5c 	.word	0x08004d5c
 800414c:	08004d6c 	.word	0x08004d6c
 8004150:	007a1200 	.word	0x007a1200
 8004154:	003d0900 	.word	0x003d0900
 8004158:	aaaaaaab 	.word	0xaaaaaaab

0800415c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e041      	b.n	80041f2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d106      	bne.n	8004188 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f7fd fbfc 	bl	8001980 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2202      	movs	r2, #2
 800418c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	3304      	adds	r3, #4
 8004198:	4619      	mov	r1, r3
 800419a:	4610      	mov	r0, r2
 800419c:	f000 fac6 	bl	800472c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3708      	adds	r7, #8
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
	...

080041fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d109      	bne.n	8004220 <HAL_TIM_PWM_Start+0x24>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004212:	b2db      	uxtb	r3, r3
 8004214:	2b01      	cmp	r3, #1
 8004216:	bf14      	ite	ne
 8004218:	2301      	movne	r3, #1
 800421a:	2300      	moveq	r3, #0
 800421c:	b2db      	uxtb	r3, r3
 800421e:	e022      	b.n	8004266 <HAL_TIM_PWM_Start+0x6a>
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	2b04      	cmp	r3, #4
 8004224:	d109      	bne.n	800423a <HAL_TIM_PWM_Start+0x3e>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b01      	cmp	r3, #1
 8004230:	bf14      	ite	ne
 8004232:	2301      	movne	r3, #1
 8004234:	2300      	moveq	r3, #0
 8004236:	b2db      	uxtb	r3, r3
 8004238:	e015      	b.n	8004266 <HAL_TIM_PWM_Start+0x6a>
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	2b08      	cmp	r3, #8
 800423e:	d109      	bne.n	8004254 <HAL_TIM_PWM_Start+0x58>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004246:	b2db      	uxtb	r3, r3
 8004248:	2b01      	cmp	r3, #1
 800424a:	bf14      	ite	ne
 800424c:	2301      	movne	r3, #1
 800424e:	2300      	moveq	r3, #0
 8004250:	b2db      	uxtb	r3, r3
 8004252:	e008      	b.n	8004266 <HAL_TIM_PWM_Start+0x6a>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800425a:	b2db      	uxtb	r3, r3
 800425c:	2b01      	cmp	r3, #1
 800425e:	bf14      	ite	ne
 8004260:	2301      	movne	r3, #1
 8004262:	2300      	moveq	r3, #0
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d001      	beq.n	800426e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e059      	b.n	8004322 <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d104      	bne.n	800427e <HAL_TIM_PWM_Start+0x82>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2202      	movs	r2, #2
 8004278:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800427c:	e013      	b.n	80042a6 <HAL_TIM_PWM_Start+0xaa>
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	2b04      	cmp	r3, #4
 8004282:	d104      	bne.n	800428e <HAL_TIM_PWM_Start+0x92>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2202      	movs	r2, #2
 8004288:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800428c:	e00b      	b.n	80042a6 <HAL_TIM_PWM_Start+0xaa>
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	2b08      	cmp	r3, #8
 8004292:	d104      	bne.n	800429e <HAL_TIM_PWM_Start+0xa2>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2202      	movs	r2, #2
 8004298:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800429c:	e003      	b.n	80042a6 <HAL_TIM_PWM_Start+0xaa>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2202      	movs	r2, #2
 80042a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2201      	movs	r2, #1
 80042ac:	6839      	ldr	r1, [r7, #0]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f000 fc28 	bl	8004b04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a1c      	ldr	r2, [pc, #112]	@ (800432c <HAL_TIM_PWM_Start+0x130>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d107      	bne.n	80042ce <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80042cc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a16      	ldr	r2, [pc, #88]	@ (800432c <HAL_TIM_PWM_Start+0x130>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d009      	beq.n	80042ec <HAL_TIM_PWM_Start+0xf0>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042e0:	d004      	beq.n	80042ec <HAL_TIM_PWM_Start+0xf0>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a12      	ldr	r2, [pc, #72]	@ (8004330 <HAL_TIM_PWM_Start+0x134>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d111      	bne.n	8004310 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f003 0307 	and.w	r3, r3, #7
 80042f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2b06      	cmp	r3, #6
 80042fc:	d010      	beq.n	8004320 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f042 0201 	orr.w	r2, r2, #1
 800430c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800430e:	e007      	b.n	8004320 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f042 0201 	orr.w	r2, r2, #1
 800431e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3710      	adds	r7, #16
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	40012c00 	.word	0x40012c00
 8004330:	40000400 	.word	0x40000400

08004334 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b086      	sub	sp, #24
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d101      	bne.n	8004348 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e093      	b.n	8004470 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800434e:	b2db      	uxtb	r3, r3
 8004350:	2b00      	cmp	r3, #0
 8004352:	d106      	bne.n	8004362 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 f88b 	bl	8004478 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2202      	movs	r2, #2
 8004366:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	6812      	ldr	r2, [r2, #0]
 8004374:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004378:	f023 0307 	bic.w	r3, r3, #7
 800437c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	3304      	adds	r3, #4
 8004386:	4619      	mov	r1, r3
 8004388:	4610      	mov	r0, r2
 800438a:	f000 f9cf 	bl	800472c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	6a1b      	ldr	r3, [r3, #32]
 80043a4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	697a      	ldr	r2, [r7, #20]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043b6:	f023 0303 	bic.w	r3, r3, #3
 80043ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	689a      	ldr	r2, [r3, #8]
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	021b      	lsls	r3, r3, #8
 80043c6:	4313      	orrs	r3, r2
 80043c8:	693a      	ldr	r2, [r7, #16]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80043d4:	f023 030c 	bic.w	r3, r3, #12
 80043d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80043e0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80043e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	68da      	ldr	r2, [r3, #12]
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	69db      	ldr	r3, [r3, #28]
 80043ee:	021b      	lsls	r3, r3, #8
 80043f0:	4313      	orrs	r3, r2
 80043f2:	693a      	ldr	r2, [r7, #16]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	011a      	lsls	r2, r3, #4
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	031b      	lsls	r3, r3, #12
 8004404:	4313      	orrs	r3, r2
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	4313      	orrs	r3, r2
 800440a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004412:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	685a      	ldr	r2, [r3, #4]
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	695b      	ldr	r3, [r3, #20]
 800441c:	011b      	lsls	r3, r3, #4
 800441e:	4313      	orrs	r3, r2
 8004420:	68fa      	ldr	r2, [r7, #12]
 8004422:	4313      	orrs	r3, r2
 8004424:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	693a      	ldr	r2, [r7, #16]
 8004434:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2201      	movs	r2, #1
 8004442:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2201      	movs	r2, #1
 800444a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2201      	movs	r2, #1
 8004452:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2201      	movs	r2, #1
 800445a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2201      	movs	r2, #1
 8004462:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2201      	movs	r2, #1
 800446a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	3718      	adds	r7, #24
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <HAL_TIM_Encoder_MspInit>:
  * @brief  Initializes the TIM Encoder Interface MSP.
  * @param  htim TIM Encoder Interface handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspInit could be implemented in the user file
   */
}
 8004480:	bf00      	nop
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	bc80      	pop	{r7}
 8004488:	4770      	bx	lr

0800448a <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800448a:	b580      	push	{r7, lr}
 800448c:	b084      	sub	sp, #16
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
 8004492:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800449a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80044a2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80044aa:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80044b2:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d110      	bne.n	80044dc <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80044ba:	7bfb      	ldrb	r3, [r7, #15]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d102      	bne.n	80044c6 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80044c0:	7b7b      	ldrb	r3, [r7, #13]
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d001      	beq.n	80044ca <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e069      	b.n	800459e <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2202      	movs	r2, #2
 80044ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2202      	movs	r2, #2
 80044d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044da:	e031      	b.n	8004540 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	2b04      	cmp	r3, #4
 80044e0:	d110      	bne.n	8004504 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80044e2:	7bbb      	ldrb	r3, [r7, #14]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d102      	bne.n	80044ee <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80044e8:	7b3b      	ldrb	r3, [r7, #12]
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d001      	beq.n	80044f2 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e055      	b.n	800459e <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2202      	movs	r2, #2
 80044f6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2202      	movs	r2, #2
 80044fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004502:	e01d      	b.n	8004540 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004504:	7bfb      	ldrb	r3, [r7, #15]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d108      	bne.n	800451c <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800450a:	7bbb      	ldrb	r3, [r7, #14]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d105      	bne.n	800451c <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004510:	7b7b      	ldrb	r3, [r7, #13]
 8004512:	2b01      	cmp	r3, #1
 8004514:	d102      	bne.n	800451c <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004516:	7b3b      	ldrb	r3, [r7, #12]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d001      	beq.n	8004520 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e03e      	b.n	800459e <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2202      	movs	r2, #2
 8004524:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2202      	movs	r2, #2
 800452c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2202      	movs	r2, #2
 8004534:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2202      	movs	r2, #2
 800453c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d003      	beq.n	800454e <HAL_TIM_Encoder_Start+0xc4>
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	2b04      	cmp	r3, #4
 800454a:	d008      	beq.n	800455e <HAL_TIM_Encoder_Start+0xd4>
 800454c:	e00f      	b.n	800456e <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2201      	movs	r2, #1
 8004554:	2100      	movs	r1, #0
 8004556:	4618      	mov	r0, r3
 8004558:	f000 fad4 	bl	8004b04 <TIM_CCxChannelCmd>
      break;
 800455c:	e016      	b.n	800458c <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2201      	movs	r2, #1
 8004564:	2104      	movs	r1, #4
 8004566:	4618      	mov	r0, r3
 8004568:	f000 facc 	bl	8004b04 <TIM_CCxChannelCmd>
      break;
 800456c:	e00e      	b.n	800458c <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2201      	movs	r2, #1
 8004574:	2100      	movs	r1, #0
 8004576:	4618      	mov	r0, r3
 8004578:	f000 fac4 	bl	8004b04 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2201      	movs	r2, #1
 8004582:	2104      	movs	r1, #4
 8004584:	4618      	mov	r0, r3
 8004586:	f000 fabd 	bl	8004b04 <TIM_CCxChannelCmd>
      break;
 800458a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f042 0201 	orr.w	r2, r2, #1
 800459a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3710      	adds	r7, #16
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
	...

080045a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b086      	sub	sp, #24
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045b4:	2300      	movs	r3, #0
 80045b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d101      	bne.n	80045c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80045c2:	2302      	movs	r3, #2
 80045c4:	e0ae      	b.n	8004724 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2201      	movs	r2, #1
 80045ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2b0c      	cmp	r3, #12
 80045d2:	f200 809f 	bhi.w	8004714 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80045d6:	a201      	add	r2, pc, #4	@ (adr r2, 80045dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80045d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045dc:	08004611 	.word	0x08004611
 80045e0:	08004715 	.word	0x08004715
 80045e4:	08004715 	.word	0x08004715
 80045e8:	08004715 	.word	0x08004715
 80045ec:	08004651 	.word	0x08004651
 80045f0:	08004715 	.word	0x08004715
 80045f4:	08004715 	.word	0x08004715
 80045f8:	08004715 	.word	0x08004715
 80045fc:	08004693 	.word	0x08004693
 8004600:	08004715 	.word	0x08004715
 8004604:	08004715 	.word	0x08004715
 8004608:	08004715 	.word	0x08004715
 800460c:	080046d3 	.word	0x080046d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68b9      	ldr	r1, [r7, #8]
 8004616:	4618      	mov	r0, r3
 8004618:	f000 f8ec 	bl	80047f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	699a      	ldr	r2, [r3, #24]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f042 0208 	orr.w	r2, r2, #8
 800462a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	699a      	ldr	r2, [r3, #24]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f022 0204 	bic.w	r2, r2, #4
 800463a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	6999      	ldr	r1, [r3, #24]
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	691a      	ldr	r2, [r3, #16]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	430a      	orrs	r2, r1
 800464c:	619a      	str	r2, [r3, #24]
      break;
 800464e:	e064      	b.n	800471a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68b9      	ldr	r1, [r7, #8]
 8004656:	4618      	mov	r0, r3
 8004658:	f000 f932 	bl	80048c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	699a      	ldr	r2, [r3, #24]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800466a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	699a      	ldr	r2, [r3, #24]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800467a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	6999      	ldr	r1, [r3, #24]
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	021a      	lsls	r2, r3, #8
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	430a      	orrs	r2, r1
 800468e:	619a      	str	r2, [r3, #24]
      break;
 8004690:	e043      	b.n	800471a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68b9      	ldr	r1, [r7, #8]
 8004698:	4618      	mov	r0, r3
 800469a:	f000 f97b 	bl	8004994 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	69da      	ldr	r2, [r3, #28]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f042 0208 	orr.w	r2, r2, #8
 80046ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	69da      	ldr	r2, [r3, #28]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f022 0204 	bic.w	r2, r2, #4
 80046bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	69d9      	ldr	r1, [r3, #28]
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	691a      	ldr	r2, [r3, #16]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	430a      	orrs	r2, r1
 80046ce:	61da      	str	r2, [r3, #28]
      break;
 80046d0:	e023      	b.n	800471a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68b9      	ldr	r1, [r7, #8]
 80046d8:	4618      	mov	r0, r3
 80046da:	f000 f9c5 	bl	8004a68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	69da      	ldr	r2, [r3, #28]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80046ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	69da      	ldr	r2, [r3, #28]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	69d9      	ldr	r1, [r3, #28]
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	021a      	lsls	r2, r3, #8
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	430a      	orrs	r2, r1
 8004710:	61da      	str	r2, [r3, #28]
      break;
 8004712:	e002      	b.n	800471a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	75fb      	strb	r3, [r7, #23]
      break;
 8004718:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004722:	7dfb      	ldrb	r3, [r7, #23]
}
 8004724:	4618      	mov	r0, r3
 8004726:	3718      	adds	r7, #24
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}

0800472c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800472c:	b480      	push	{r7}
 800472e:	b085      	sub	sp, #20
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a2b      	ldr	r2, [pc, #172]	@ (80047ec <TIM_Base_SetConfig+0xc0>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d007      	beq.n	8004754 <TIM_Base_SetConfig+0x28>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800474a:	d003      	beq.n	8004754 <TIM_Base_SetConfig+0x28>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a28      	ldr	r2, [pc, #160]	@ (80047f0 <TIM_Base_SetConfig+0xc4>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d108      	bne.n	8004766 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800475a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	4313      	orrs	r3, r2
 8004764:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a20      	ldr	r2, [pc, #128]	@ (80047ec <TIM_Base_SetConfig+0xc0>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d007      	beq.n	800477e <TIM_Base_SetConfig+0x52>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004774:	d003      	beq.n	800477e <TIM_Base_SetConfig+0x52>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a1d      	ldr	r2, [pc, #116]	@ (80047f0 <TIM_Base_SetConfig+0xc4>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d108      	bne.n	8004790 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004784:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	4313      	orrs	r3, r2
 800478e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	4313      	orrs	r3, r2
 800479c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	689a      	ldr	r2, [r3, #8]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a0d      	ldr	r2, [pc, #52]	@ (80047ec <TIM_Base_SetConfig+0xc0>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d103      	bne.n	80047c4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	691a      	ldr	r2, [r3, #16]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	f003 0301 	and.w	r3, r3, #1
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d005      	beq.n	80047e2 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	f023 0201 	bic.w	r2, r3, #1
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	611a      	str	r2, [r3, #16]
  }
}
 80047e2:	bf00      	nop
 80047e4:	3714      	adds	r7, #20
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bc80      	pop	{r7}
 80047ea:	4770      	bx	lr
 80047ec:	40012c00 	.word	0x40012c00
 80047f0:	40000400 	.word	0x40000400

080047f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b087      	sub	sp, #28
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a1b      	ldr	r3, [r3, #32]
 8004802:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a1b      	ldr	r3, [r3, #32]
 8004808:	f023 0201 	bic.w	r2, r3, #1
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004822:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f023 0303 	bic.w	r3, r3, #3
 800482a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	4313      	orrs	r3, r2
 8004834:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	f023 0302 	bic.w	r3, r3, #2
 800483c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	4313      	orrs	r3, r2
 8004846:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a1c      	ldr	r2, [pc, #112]	@ (80048bc <TIM_OC1_SetConfig+0xc8>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d10c      	bne.n	800486a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	f023 0308 	bic.w	r3, r3, #8
 8004856:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	697a      	ldr	r2, [r7, #20]
 800485e:	4313      	orrs	r3, r2
 8004860:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	f023 0304 	bic.w	r3, r3, #4
 8004868:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a13      	ldr	r2, [pc, #76]	@ (80048bc <TIM_OC1_SetConfig+0xc8>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d111      	bne.n	8004896 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004878:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004880:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	695b      	ldr	r3, [r3, #20]
 8004886:	693a      	ldr	r2, [r7, #16]
 8004888:	4313      	orrs	r3, r2
 800488a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	699b      	ldr	r3, [r3, #24]
 8004890:	693a      	ldr	r2, [r7, #16]
 8004892:	4313      	orrs	r3, r2
 8004894:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	693a      	ldr	r2, [r7, #16]
 800489a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	685a      	ldr	r2, [r3, #4]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	697a      	ldr	r2, [r7, #20]
 80048ae:	621a      	str	r2, [r3, #32]
}
 80048b0:	bf00      	nop
 80048b2:	371c      	adds	r7, #28
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bc80      	pop	{r7}
 80048b8:	4770      	bx	lr
 80048ba:	bf00      	nop
 80048bc:	40012c00 	.word	0x40012c00

080048c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b087      	sub	sp, #28
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a1b      	ldr	r3, [r3, #32]
 80048ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a1b      	ldr	r3, [r3, #32]
 80048d4:	f023 0210 	bic.w	r2, r3, #16
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	021b      	lsls	r3, r3, #8
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	4313      	orrs	r3, r2
 8004902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	f023 0320 	bic.w	r3, r3, #32
 800490a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	011b      	lsls	r3, r3, #4
 8004912:	697a      	ldr	r2, [r7, #20]
 8004914:	4313      	orrs	r3, r2
 8004916:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a1d      	ldr	r2, [pc, #116]	@ (8004990 <TIM_OC2_SetConfig+0xd0>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d10d      	bne.n	800493c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004926:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	011b      	lsls	r3, r3, #4
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	4313      	orrs	r3, r2
 8004932:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800493a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a14      	ldr	r2, [pc, #80]	@ (8004990 <TIM_OC2_SetConfig+0xd0>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d113      	bne.n	800496c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800494a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004952:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	695b      	ldr	r3, [r3, #20]
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	693a      	ldr	r2, [r7, #16]
 800495c:	4313      	orrs	r3, r2
 800495e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	699b      	ldr	r3, [r3, #24]
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	693a      	ldr	r2, [r7, #16]
 8004968:	4313      	orrs	r3, r2
 800496a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	693a      	ldr	r2, [r7, #16]
 8004970:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	685a      	ldr	r2, [r3, #4]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	697a      	ldr	r2, [r7, #20]
 8004984:	621a      	str	r2, [r3, #32]
}
 8004986:	bf00      	nop
 8004988:	371c      	adds	r7, #28
 800498a:	46bd      	mov	sp, r7
 800498c:	bc80      	pop	{r7}
 800498e:	4770      	bx	lr
 8004990:	40012c00 	.word	0x40012c00

08004994 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004994:	b480      	push	{r7}
 8004996:	b087      	sub	sp, #28
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a1b      	ldr	r3, [r3, #32]
 80049a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a1b      	ldr	r3, [r3, #32]
 80049a8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	69db      	ldr	r3, [r3, #28]
 80049ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f023 0303 	bic.w	r3, r3, #3
 80049ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80049dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	021b      	lsls	r3, r3, #8
 80049e4:	697a      	ldr	r2, [r7, #20]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a1d      	ldr	r2, [pc, #116]	@ (8004a64 <TIM_OC3_SetConfig+0xd0>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d10d      	bne.n	8004a0e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80049f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	021b      	lsls	r3, r3, #8
 8004a00:	697a      	ldr	r2, [r7, #20]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004a0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a14      	ldr	r2, [pc, #80]	@ (8004a64 <TIM_OC3_SetConfig+0xd0>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d113      	bne.n	8004a3e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004a24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	695b      	ldr	r3, [r3, #20]
 8004a2a:	011b      	lsls	r3, r3, #4
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	011b      	lsls	r3, r3, #4
 8004a38:	693a      	ldr	r2, [r7, #16]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	685a      	ldr	r2, [r3, #4]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	697a      	ldr	r2, [r7, #20]
 8004a56:	621a      	str	r2, [r3, #32]
}
 8004a58:	bf00      	nop
 8004a5a:	371c      	adds	r7, #28
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bc80      	pop	{r7}
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	40012c00 	.word	0x40012c00

08004a68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b087      	sub	sp, #28
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a1b      	ldr	r3, [r3, #32]
 8004a76:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a1b      	ldr	r3, [r3, #32]
 8004a7c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	69db      	ldr	r3, [r3, #28]
 8004a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	021b      	lsls	r3, r3, #8
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004ab2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	031b      	lsls	r3, r3, #12
 8004aba:	693a      	ldr	r2, [r7, #16]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4a0f      	ldr	r2, [pc, #60]	@ (8004b00 <TIM_OC4_SetConfig+0x98>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d109      	bne.n	8004adc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ace:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	695b      	ldr	r3, [r3, #20]
 8004ad4:	019b      	lsls	r3, r3, #6
 8004ad6:	697a      	ldr	r2, [r7, #20]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	697a      	ldr	r2, [r7, #20]
 8004ae0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	685a      	ldr	r2, [r3, #4]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	693a      	ldr	r2, [r7, #16]
 8004af4:	621a      	str	r2, [r3, #32]
}
 8004af6:	bf00      	nop
 8004af8:	371c      	adds	r7, #28
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bc80      	pop	{r7}
 8004afe:	4770      	bx	lr
 8004b00:	40012c00 	.word	0x40012c00

08004b04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b087      	sub	sp, #28
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	f003 031f 	and.w	r3, r3, #31
 8004b16:	2201      	movs	r2, #1
 8004b18:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6a1a      	ldr	r2, [r3, #32]
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	43db      	mvns	r3, r3
 8004b26:	401a      	ands	r2, r3
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6a1a      	ldr	r2, [r3, #32]
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	f003 031f 	and.w	r3, r3, #31
 8004b36:	6879      	ldr	r1, [r7, #4]
 8004b38:	fa01 f303 	lsl.w	r3, r1, r3
 8004b3c:	431a      	orrs	r2, r3
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	621a      	str	r2, [r3, #32]
}
 8004b42:	bf00      	nop
 8004b44:	371c      	adds	r7, #28
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bc80      	pop	{r7}
 8004b4a:	4770      	bx	lr

08004b4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d101      	bne.n	8004b64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b60:	2302      	movs	r3, #2
 8004b62:	e041      	b.n	8004be8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2202      	movs	r2, #2
 8004b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a14      	ldr	r2, [pc, #80]	@ (8004bf4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d009      	beq.n	8004bbc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bb0:	d004      	beq.n	8004bbc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a10      	ldr	r2, [pc, #64]	@ (8004bf8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d10c      	bne.n	8004bd6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004bc2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	68ba      	ldr	r2, [r7, #8]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68ba      	ldr	r2, [r7, #8]
 8004bd4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004be6:	2300      	movs	r3, #0
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3714      	adds	r7, #20
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bc80      	pop	{r7}
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	40012c00 	.word	0x40012c00
 8004bf8:	40000400 	.word	0x40000400

08004bfc <_ZdlPvj>:
 8004bfc:	f000 b800 	b.w	8004c00 <_ZdlPv>

08004c00 <_ZdlPv>:
 8004c00:	f000 b800 	b.w	8004c04 <free>

08004c04 <free>:
 8004c04:	4b02      	ldr	r3, [pc, #8]	@ (8004c10 <free+0xc>)
 8004c06:	4601      	mov	r1, r0
 8004c08:	6818      	ldr	r0, [r3, #0]
 8004c0a:	f000 b83d 	b.w	8004c88 <_free_r>
 8004c0e:	bf00      	nop
 8004c10:	2000000c 	.word	0x2000000c

08004c14 <__malloc_lock>:
 8004c14:	4801      	ldr	r0, [pc, #4]	@ (8004c1c <__malloc_lock+0x8>)
 8004c16:	f000 b835 	b.w	8004c84 <__retarget_lock_acquire_recursive>
 8004c1a:	bf00      	nop
 8004c1c:	200002b8 	.word	0x200002b8

08004c20 <__malloc_unlock>:
 8004c20:	4801      	ldr	r0, [pc, #4]	@ (8004c28 <__malloc_unlock+0x8>)
 8004c22:	f000 b830 	b.w	8004c86 <__retarget_lock_release_recursive>
 8004c26:	bf00      	nop
 8004c28:	200002b8 	.word	0x200002b8

08004c2c <memset>:
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	4402      	add	r2, r0
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d100      	bne.n	8004c36 <memset+0xa>
 8004c34:	4770      	bx	lr
 8004c36:	f803 1b01 	strb.w	r1, [r3], #1
 8004c3a:	e7f9      	b.n	8004c30 <memset+0x4>

08004c3c <__libc_init_array>:
 8004c3c:	b570      	push	{r4, r5, r6, lr}
 8004c3e:	2600      	movs	r6, #0
 8004c40:	4d0c      	ldr	r5, [pc, #48]	@ (8004c74 <__libc_init_array+0x38>)
 8004c42:	4c0d      	ldr	r4, [pc, #52]	@ (8004c78 <__libc_init_array+0x3c>)
 8004c44:	1b64      	subs	r4, r4, r5
 8004c46:	10a4      	asrs	r4, r4, #2
 8004c48:	42a6      	cmp	r6, r4
 8004c4a:	d109      	bne.n	8004c60 <__libc_init_array+0x24>
 8004c4c:	f000 f864 	bl	8004d18 <_init>
 8004c50:	2600      	movs	r6, #0
 8004c52:	4d0a      	ldr	r5, [pc, #40]	@ (8004c7c <__libc_init_array+0x40>)
 8004c54:	4c0a      	ldr	r4, [pc, #40]	@ (8004c80 <__libc_init_array+0x44>)
 8004c56:	1b64      	subs	r4, r4, r5
 8004c58:	10a4      	asrs	r4, r4, #2
 8004c5a:	42a6      	cmp	r6, r4
 8004c5c:	d105      	bne.n	8004c6a <__libc_init_array+0x2e>
 8004c5e:	bd70      	pop	{r4, r5, r6, pc}
 8004c60:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c64:	4798      	blx	r3
 8004c66:	3601      	adds	r6, #1
 8004c68:	e7ee      	b.n	8004c48 <__libc_init_array+0xc>
 8004c6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c6e:	4798      	blx	r3
 8004c70:	3601      	adds	r6, #1
 8004c72:	e7f2      	b.n	8004c5a <__libc_init_array+0x1e>
 8004c74:	08004d70 	.word	0x08004d70
 8004c78:	08004d70 	.word	0x08004d70
 8004c7c:	08004d70 	.word	0x08004d70
 8004c80:	08004d78 	.word	0x08004d78

08004c84 <__retarget_lock_acquire_recursive>:
 8004c84:	4770      	bx	lr

08004c86 <__retarget_lock_release_recursive>:
 8004c86:	4770      	bx	lr

08004c88 <_free_r>:
 8004c88:	b538      	push	{r3, r4, r5, lr}
 8004c8a:	4605      	mov	r5, r0
 8004c8c:	2900      	cmp	r1, #0
 8004c8e:	d040      	beq.n	8004d12 <_free_r+0x8a>
 8004c90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c94:	1f0c      	subs	r4, r1, #4
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	bfb8      	it	lt
 8004c9a:	18e4      	addlt	r4, r4, r3
 8004c9c:	f7ff ffba 	bl	8004c14 <__malloc_lock>
 8004ca0:	4a1c      	ldr	r2, [pc, #112]	@ (8004d14 <_free_r+0x8c>)
 8004ca2:	6813      	ldr	r3, [r2, #0]
 8004ca4:	b933      	cbnz	r3, 8004cb4 <_free_r+0x2c>
 8004ca6:	6063      	str	r3, [r4, #4]
 8004ca8:	6014      	str	r4, [r2, #0]
 8004caa:	4628      	mov	r0, r5
 8004cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004cb0:	f7ff bfb6 	b.w	8004c20 <__malloc_unlock>
 8004cb4:	42a3      	cmp	r3, r4
 8004cb6:	d908      	bls.n	8004cca <_free_r+0x42>
 8004cb8:	6820      	ldr	r0, [r4, #0]
 8004cba:	1821      	adds	r1, r4, r0
 8004cbc:	428b      	cmp	r3, r1
 8004cbe:	bf01      	itttt	eq
 8004cc0:	6819      	ldreq	r1, [r3, #0]
 8004cc2:	685b      	ldreq	r3, [r3, #4]
 8004cc4:	1809      	addeq	r1, r1, r0
 8004cc6:	6021      	streq	r1, [r4, #0]
 8004cc8:	e7ed      	b.n	8004ca6 <_free_r+0x1e>
 8004cca:	461a      	mov	r2, r3
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	b10b      	cbz	r3, 8004cd4 <_free_r+0x4c>
 8004cd0:	42a3      	cmp	r3, r4
 8004cd2:	d9fa      	bls.n	8004cca <_free_r+0x42>
 8004cd4:	6811      	ldr	r1, [r2, #0]
 8004cd6:	1850      	adds	r0, r2, r1
 8004cd8:	42a0      	cmp	r0, r4
 8004cda:	d10b      	bne.n	8004cf4 <_free_r+0x6c>
 8004cdc:	6820      	ldr	r0, [r4, #0]
 8004cde:	4401      	add	r1, r0
 8004ce0:	1850      	adds	r0, r2, r1
 8004ce2:	4283      	cmp	r3, r0
 8004ce4:	6011      	str	r1, [r2, #0]
 8004ce6:	d1e0      	bne.n	8004caa <_free_r+0x22>
 8004ce8:	6818      	ldr	r0, [r3, #0]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	4408      	add	r0, r1
 8004cee:	6010      	str	r0, [r2, #0]
 8004cf0:	6053      	str	r3, [r2, #4]
 8004cf2:	e7da      	b.n	8004caa <_free_r+0x22>
 8004cf4:	d902      	bls.n	8004cfc <_free_r+0x74>
 8004cf6:	230c      	movs	r3, #12
 8004cf8:	602b      	str	r3, [r5, #0]
 8004cfa:	e7d6      	b.n	8004caa <_free_r+0x22>
 8004cfc:	6820      	ldr	r0, [r4, #0]
 8004cfe:	1821      	adds	r1, r4, r0
 8004d00:	428b      	cmp	r3, r1
 8004d02:	bf01      	itttt	eq
 8004d04:	6819      	ldreq	r1, [r3, #0]
 8004d06:	685b      	ldreq	r3, [r3, #4]
 8004d08:	1809      	addeq	r1, r1, r0
 8004d0a:	6021      	streq	r1, [r4, #0]
 8004d0c:	6063      	str	r3, [r4, #4]
 8004d0e:	6054      	str	r4, [r2, #4]
 8004d10:	e7cb      	b.n	8004caa <_free_r+0x22>
 8004d12:	bd38      	pop	{r3, r4, r5, pc}
 8004d14:	2000017c 	.word	0x2000017c

08004d18 <_init>:
 8004d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d1a:	bf00      	nop
 8004d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d1e:	bc08      	pop	{r3}
 8004d20:	469e      	mov	lr, r3
 8004d22:	4770      	bx	lr

08004d24 <_fini>:
 8004d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d26:	bf00      	nop
 8004d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d2a:	bc08      	pop	{r3}
 8004d2c:	469e      	mov	lr, r3
 8004d2e:	4770      	bx	lr
