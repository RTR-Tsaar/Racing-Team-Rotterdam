
SteerByWireV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e8c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003f98  08003f98  00004f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fbc  08003fbc  0000505c  2**0
                  CONTENTS
  4 .ARM          00000000  08003fbc  08003fbc  0000505c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003fbc  08003fbc  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08003fbc  08003fbc  00004fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  08003fc4  08003fc4  00004fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003fcc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  2000005c  08004028  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000028c  08004028  0000528c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001656a  00000000  00000000  00005085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002be1  00000000  00000000  0001b5ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e8  00000000  00000000  0001e1d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ce1  00000000  00000000  0001f2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a4a3  00000000  00000000  0001ff99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fb1d  00000000  00000000  0003a43c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093826  00000000  00000000  00049f59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dd77f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d54  00000000  00000000  000dd7c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000e2518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003f80 	.word	0x08003f80

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003f80 	.word	0x08003f80

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ba:	2afd      	cmp	r2, #253	@ 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	@ 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	@ 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	@ 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2iz>:
 80006f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80006fc:	d30f      	bcc.n	800071e <__aeabi_f2iz+0x2a>
 80006fe:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d90d      	bls.n	8000724 <__aeabi_f2iz+0x30>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000710:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000714:	fa23 f002 	lsr.w	r0, r3, r2
 8000718:	bf18      	it	ne
 800071a:	4240      	negne	r0, r0
 800071c:	4770      	bx	lr
 800071e:	f04f 0000 	mov.w	r0, #0
 8000722:	4770      	bx	lr
 8000724:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000728:	d101      	bne.n	800072e <__aeabi_f2iz+0x3a>
 800072a:	0242      	lsls	r2, r0, #9
 800072c:	d105      	bne.n	800073a <__aeabi_f2iz+0x46>
 800072e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000732:	bf08      	it	eq
 8000734:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000738:	4770      	bx	lr
 800073a:	f04f 0000 	mov.w	r0, #0
 800073e:	4770      	bx	lr

08000740 <_ZNSt12_Vector_baseImSaImEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	4618      	mov	r0, r3
 800074c:	f000 f903 	bl	8000956 <_ZNSt12_Vector_baseImSaImEE12_Vector_implC1Ev>
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	4618      	mov	r0, r3
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}

0800075a <_ZNSt6vectorImSaImEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 800075a:	b580      	push	{r7, lr}
 800075c:	b082      	sub	sp, #8
 800075e:	af00      	add	r7, sp, #0
 8000760:	6078      	str	r0, [r7, #4]
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	4618      	mov	r0, r3
 8000766:	f7ff ffeb 	bl	8000740 <_ZNSt12_Vector_baseImSaImEEC1Ev>
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	4618      	mov	r0, r3
 800076e:	3708      	adds	r7, #8
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <_ZNSt12_Vector_baseIySaIyEEC1Ev>:
      _Vector_base() = default;
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	4618      	mov	r0, r3
 8000780:	f000 f8f9 	bl	8000976 <_ZNSt12_Vector_baseIySaIyEE12_Vector_implC1Ev>
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	4618      	mov	r0, r3
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}

0800078e <_ZNSt6vectorIySaIyEEC1Ev>:
      vector() = default;
 800078e:	b580      	push	{r7, lr}
 8000790:	b082      	sub	sp, #8
 8000792:	af00      	add	r7, sp, #0
 8000794:	6078      	str	r0, [r7, #4]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff ffeb 	bl	8000774 <_ZNSt12_Vector_baseIySaIyEEC1Ev>
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	4618      	mov	r0, r3
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <_ZN6CANBusC1Ev>:
 *      Author: Rolan van Bommel
 */

#include "CAN_bus.hpp"

CANBus::CANBus() {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	331c      	adds	r3, #28
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff ffd0 	bl	800075a <_ZNSt6vectorImSaImEEC1Ev>
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	3328      	adds	r3, #40	@ 0x28
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff ffe5 	bl	800078e <_ZNSt6vectorIySaIyEEC1Ev>
    // Constructor implementation (if needed)
}
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	4618      	mov	r0, r3
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}

080007ce <_ZN6CANBus5startEP17CAN_HandleTypeDefh>:

void CANBus::start(CAN_HandleTypeDef* hcan, uint8_t LIDEE){
 80007ce:	b580      	push	{r7, lr}
 80007d0:	b084      	sub	sp, #16
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	60f8      	str	r0, [r7, #12]
 80007d6:	60b9      	str	r1, [r7, #8]
 80007d8:	4613      	mov	r3, r2
 80007da:	71fb      	strb	r3, [r7, #7]

	// Start CAN bus
    HAL_CAN_Start(hcan);
 80007dc:	68b8      	ldr	r0, [r7, #8]
 80007de:	f001 fadb 	bl	8001d98 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80007e2:	2102      	movs	r1, #2
 80007e4:	68b8      	ldr	r0, [r7, #8]
 80007e6:	f001 fd0b 	bl	8002200 <HAL_CAN_ActivateNotification>

    if(LIDEE == CAN_ID_STD){
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d107      	bne.n	8000800 <_ZN6CANBus5startEP17CAN_HandleTypeDefh+0x32>
        TxHeader.ExtId = 0;		// 0 is standaard ID , 4 is extended ID
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	2200      	movs	r2, #0
 80007f4:	605a      	str	r2, [r3, #4]
        TxHeader.StdId = 2047;  // Set CAN ID to 2047
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	e006      	b.n	800080e <_ZN6CANBus5startEP17CAN_HandleTypeDefh+0x40>
    }
    else{
        TxHeader.ExtId = 2047;		// 0 is standaard ID , 4 is extended ID
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000806:	605a      	str	r2, [r3, #4]
        TxHeader.StdId = 0;  // Set CAN ID to 2047
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
    }
    // Initialize default values for CAN headers
    TxHeader.DLC = 8;
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	2208      	movs	r2, #8
 8000812:	611a      	str	r2, [r3, #16]
    TxHeader.IDE = LIDEE;    // standaard ID = CAN_ID_STD, extended ID = CAN_ID_EXT
 8000814:	79fa      	ldrb	r2, [r7, #7]
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	609a      	str	r2, [r3, #8]
    TxHeader.RTR = CAN_RTR_DATA;
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	2200      	movs	r2, #0
 800081e:	60da      	str	r2, [r3, #12]
    TxHeader.TransmitGlobalTime = DISABLE;
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	2200      	movs	r2, #0
 8000824:	751a      	strb	r2, [r3, #20]

}
 8000826:	bf00      	nop
 8000828:	3710      	adds	r7, #16
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}

0800082e <_ZN6CANBus8transmitEP17CAN_HandleTypeDefPht>:

// Transmit data
void CANBus::transmit(CAN_HandleTypeDef* hcan, uint8_t* TxData, uint16_t id) {
 800082e:	b580      	push	{r7, lr}
 8000830:	b084      	sub	sp, #16
 8000832:	af00      	add	r7, sp, #0
 8000834:	60f8      	str	r0, [r7, #12]
 8000836:	60b9      	str	r1, [r7, #8]
 8000838:	607a      	str	r2, [r7, #4]
 800083a:	807b      	strh	r3, [r7, #2]
    if (TxHeader.IDE == CAN_ID_STD){
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	689b      	ldr	r3, [r3, #8]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d103      	bne.n	800084c <_ZN6CANBus8transmitEP17CAN_HandleTypeDefPht+0x1e>
    	TxHeader.StdId = id;
 8000844:	887a      	ldrh	r2, [r7, #2]
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	e002      	b.n	8000852 <_ZN6CANBus8transmitEP17CAN_HandleTypeDefPht+0x24>
    }
    else{
    	TxHeader.ExtId = id;
 800084c:	887a      	ldrh	r2, [r7, #2]
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	605a      	str	r2, [r3, #4]
    }
	TxHeader.DLC = 8;
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	2208      	movs	r2, #8
 8000856:	611a      	str	r2, [r3, #16]
    HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox);
 8000858:	68f9      	ldr	r1, [r7, #12]
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	3318      	adds	r3, #24
 800085e:	687a      	ldr	r2, [r7, #4]
 8000860:	68b8      	ldr	r0, [r7, #8]
 8000862:	f001 fadd 	bl	8001e20 <HAL_CAN_AddTxMessage>
}
 8000866:	bf00      	nop
 8000868:	3710      	adds	r7, #16
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <_ZN6CANBus15configureFilterEP17CAN_HandleTypeDeftthh>:

void CANBus::configureFilter(CAN_HandleTypeDef* hcan, uint16_t ID, uint16_t Mask, uint8_t filterBank, uint8_t slaveFilterBank){
 800086e:	b580      	push	{r7, lr}
 8000870:	b08e      	sub	sp, #56	@ 0x38
 8000872:	af00      	add	r7, sp, #0
 8000874:	60f8      	str	r0, [r7, #12]
 8000876:	60b9      	str	r1, [r7, #8]
 8000878:	4611      	mov	r1, r2
 800087a:	461a      	mov	r2, r3
 800087c:	460b      	mov	r3, r1
 800087e:	80fb      	strh	r3, [r7, #6]
 8000880:	4613      	mov	r3, r2
 8000882:	80bb      	strh	r3, [r7, #4]

	  CAN_FilterTypeDef canFilterConfig;

	  canFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8000884:	2301      	movs	r3, #1
 8000886:	633b      	str	r3, [r7, #48]	@ 0x30
	  canFilterConfig.FilterBank = filterBank;
 8000888:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800088c:	627b      	str	r3, [r7, #36]	@ 0x24
	  canFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800088e:	2300      	movs	r3, #0
 8000890:	623b      	str	r3, [r7, #32]
	  canFilterConfig.FilterIdHigh = 0 << 5;
 8000892:	2300      	movs	r3, #0
 8000894:	613b      	str	r3, [r7, #16]
	  canFilterConfig.FilterIdLow = 0x0000;
 8000896:	2300      	movs	r3, #0
 8000898:	617b      	str	r3, [r7, #20]
	  canFilterConfig.FilterMaskIdHigh = 0 << 5;
 800089a:	2300      	movs	r3, #0
 800089c:	61bb      	str	r3, [r7, #24]
	  canFilterConfig.FilterMaskIdLow = 0x0000;
 800089e:	2300      	movs	r3, #0
 80008a0:	61fb      	str	r3, [r7, #28]
	  canFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80008a2:	2300      	movs	r3, #0
 80008a4:	62bb      	str	r3, [r7, #40]	@ 0x28
	  canFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80008a6:	2301      	movs	r3, #1
 80008a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  canFilterConfig.SlaveStartFilterBank = slaveFilterBank;
 80008aa:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80008ae:	637b      	str	r3, [r7, #52]	@ 0x34

	  HAL_CAN_ConfigFilter(hcan, &canFilterConfig);
 80008b0:	f107 0310 	add.w	r3, r7, #16
 80008b4:	4619      	mov	r1, r3
 80008b6:	68b8      	ldr	r0, [r7, #8]
 80008b8:	f001 f9a5 	bl	8001c06 <HAL_CAN_ConfigFilter>
}
 80008bc:	bf00      	nop
 80008be:	3738      	adds	r7, #56	@ 0x38
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <_ZN6CANBus12dataSplitterEmPh>:
void CANBus::storeCAN(uint32_t can_id, uint64_t Data){
	can_IDs.push_back(can_id);
    can_DATA.push_back(Data);
}

void CANBus::dataSplitter(uint32_t data, uint8_t* bytes) {
 80008c4:	b480      	push	{r7}
 80008c6:	b085      	sub	sp, #20
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	60f8      	str	r0, [r7, #12]
 80008cc:	60b9      	str	r1, [r7, #8]
 80008ce:	607a      	str	r2, [r7, #4]
    // Split the 32-bit integer into 4 bytes
    bytes[0] = (data >> 24) & 0xFF; // Most significant byte
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	0e1b      	lsrs	r3, r3, #24
 80008d4:	b2da      	uxtb	r2, r3
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	701a      	strb	r2, [r3, #0]
    bytes[1] = (data >> 16) & 0xFF;
 80008da:	68bb      	ldr	r3, [r7, #8]
 80008dc:	0c1a      	lsrs	r2, r3, #16
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	3301      	adds	r3, #1
 80008e2:	b2d2      	uxtb	r2, r2
 80008e4:	701a      	strb	r2, [r3, #0]
    bytes[2] = (data >> 8) & 0xFF;
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	0a1a      	lsrs	r2, r3, #8
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	3302      	adds	r3, #2
 80008ee:	b2d2      	uxtb	r2, r2
 80008f0:	701a      	strb	r2, [r3, #0]
    bytes[3] = data & 0xFF;         // Least significant byte
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	3303      	adds	r3, #3
 80008f6:	68ba      	ldr	r2, [r7, #8]
 80008f8:	b2d2      	uxtb	r2, r2
 80008fa:	701a      	strb	r2, [r3, #0]
}
 80008fc:	bf00      	nop
 80008fe:	3714      	adds	r7, #20
 8000900:	46bd      	mov	sp, r7
 8000902:	bc80      	pop	{r7}
 8000904:	4770      	bx	lr

08000906 <_ZN6CANBus10dataMergerEPh>:

uint32_t CANBus::dataMerger(uint8_t *data) {
 8000906:	b480      	push	{r7}
 8000908:	b085      	sub	sp, #20
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
 800090e:	6039      	str	r1, [r7, #0]
    uint32_t extracted_value = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	60fb      	str	r3, [r7, #12]
    extracted_value |= (uint32_t)data[0] << 24; // Most significant byte
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	061b      	lsls	r3, r3, #24
 800091a:	68fa      	ldr	r2, [r7, #12]
 800091c:	4313      	orrs	r3, r2
 800091e:	60fb      	str	r3, [r7, #12]
    extracted_value |= (uint32_t)data[1] << 16;
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	3301      	adds	r3, #1
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	041b      	lsls	r3, r3, #16
 8000928:	68fa      	ldr	r2, [r7, #12]
 800092a:	4313      	orrs	r3, r2
 800092c:	60fb      	str	r3, [r7, #12]
    extracted_value |= (uint32_t)data[2] << 8;
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	3302      	adds	r3, #2
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	021b      	lsls	r3, r3, #8
 8000936:	68fa      	ldr	r2, [r7, #12]
 8000938:	4313      	orrs	r3, r2
 800093a:	60fb      	str	r3, [r7, #12]
    extracted_value |= (uint32_t)data[3];      // Least significant byte
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	3303      	adds	r3, #3
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	461a      	mov	r2, r3
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	4313      	orrs	r3, r2
 8000948:	60fb      	str	r3, [r7, #12]
    return extracted_value;
 800094a:	68fb      	ldr	r3, [r7, #12]
}
 800094c:	4618      	mov	r0, r3
 800094e:	3714      	adds	r7, #20
 8000950:	46bd      	mov	sp, r7
 8000952:	bc80      	pop	{r7}
 8000954:	4770      	bx	lr

08000956 <_ZNSt12_Vector_baseImSaImEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8000956:	b580      	push	{r7, lr}
 8000958:	b082      	sub	sp, #8
 800095a:	af00      	add	r7, sp, #0
 800095c:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800095e:	6878      	ldr	r0, [r7, #4]
 8000960:	f000 f819 	bl	8000996 <_ZNSaImEC1Ev>
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	4618      	mov	r0, r3
 8000968:	f000 f821 	bl	80009ae <_ZNSt12_Vector_baseImSaImEE17_Vector_impl_dataC1Ev>
	{ }
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	4618      	mov	r0, r3
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}

08000976 <_ZNSt12_Vector_baseIySaIyEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8000976:	b580      	push	{r7, lr}
 8000978:	b082      	sub	sp, #8
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800097e:	6878      	ldr	r0, [r7, #4]
 8000980:	f000 f853 	bl	8000a2a <_ZNSaIyEC1Ev>
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	4618      	mov	r0, r3
 8000988:	f000 f85b 	bl	8000a42 <_ZNSt12_Vector_baseIySaIyEE17_Vector_impl_dataC1Ev>
	{ }
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	4618      	mov	r0, r3
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}

08000996 <_ZNSaImEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 8000996:	b580      	push	{r7, lr}
 8000998:	b082      	sub	sp, #8
 800099a:	af00      	add	r7, sp, #0
 800099c:	6078      	str	r0, [r7, #4]
 800099e:	6878      	ldr	r0, [r7, #4]
 80009a0:	f000 f88d 	bl	8000abe <_ZNSt15__new_allocatorImEC1Ev>
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	4618      	mov	r0, r3
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}

080009ae <_ZNSt12_Vector_baseImSaImEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80009ae:	b480      	push	{r7}
 80009b0:	b083      	sub	sp, #12
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2200      	movs	r2, #0
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
	{ }
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	4618      	mov	r0, r3
 80009cc:	370c      	adds	r7, #12
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bc80      	pop	{r7}
 80009d2:	4770      	bx	lr

080009d4 <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj>:
      _M_deallocate(pointer __p, size_t __n)
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	60f8      	str	r0, [r7, #12]
 80009dc:	60b9      	str	r1, [r7, #8]
 80009de:	607a      	str	r2, [r7, #4]
	if (__p)
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d005      	beq.n	80009f2 <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	687a      	ldr	r2, [r7, #4]
 80009ea:	68b9      	ldr	r1, [r7, #8]
 80009ec:	4618      	mov	r0, r3
 80009ee:	f000 f870 	bl	8000ad2 <_ZNSt16allocator_traitsISaImEE10deallocateERS0_Pmj>
      }
 80009f2:	bf00      	nop
 80009f4:	3710      	adds	r7, #16
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80009fa:	b480      	push	{r7}
 80009fc:	b083      	sub	sp, #12
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4618      	mov	r0, r3
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bc80      	pop	{r7}
 8000a0c:	4770      	bx	lr

08000a0e <_ZSt8_DestroyIPmmEvT_S1_RSaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	b084      	sub	sp, #16
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	60f8      	str	r0, [r7, #12]
 8000a16:	60b9      	str	r1, [r7, #8]
 8000a18:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8000a1a:	68b9      	ldr	r1, [r7, #8]
 8000a1c:	68f8      	ldr	r0, [r7, #12]
 8000a1e:	f000 f867 	bl	8000af0 <_ZSt8_DestroyIPmEvT_S1_>
    }
 8000a22:	bf00      	nop
 8000a24:	3710      	adds	r7, #16
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <_ZNSaIyEC1Ev>:
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	b082      	sub	sp, #8
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	6078      	str	r0, [r7, #4]
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f000 f869 	bl	8000b0a <_ZNSt15__new_allocatorIyEC1Ev>
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <_ZNSt12_Vector_baseIySaIyEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8000a42:	b480      	push	{r7}
 8000a44:	b083      	sub	sp, #12
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2200      	movs	r2, #0
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
	{ }
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	4618      	mov	r0, r3
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bc80      	pop	{r7}
 8000a66:	4770      	bx	lr

08000a68 <_ZNSt12_Vector_baseIySaIyEE13_M_deallocateEPyj>:
      _M_deallocate(pointer __p, size_t __n)
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	60b9      	str	r1, [r7, #8]
 8000a72:	607a      	str	r2, [r7, #4]
	if (__p)
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d005      	beq.n	8000a86 <_ZNSt12_Vector_baseIySaIyEE13_M_deallocateEPyj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	687a      	ldr	r2, [r7, #4]
 8000a7e:	68b9      	ldr	r1, [r7, #8]
 8000a80:	4618      	mov	r0, r3
 8000a82:	f000 f84c 	bl	8000b1e <_ZNSt16allocator_traitsISaIyEE10deallocateERS0_Pyj>
      }
 8000a86:	bf00      	nop
 8000a88:	3710      	adds	r7, #16
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <_ZNSt12_Vector_baseIySaIyEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8000a8e:	b480      	push	{r7}
 8000a90:	b083      	sub	sp, #12
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bc80      	pop	{r7}
 8000aa0:	4770      	bx	lr

08000aa2 <_ZSt8_DestroyIPyyEvT_S1_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b084      	sub	sp, #16
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	60f8      	str	r0, [r7, #12]
 8000aaa:	60b9      	str	r1, [r7, #8]
 8000aac:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8000aae:	68b9      	ldr	r1, [r7, #8]
 8000ab0:	68f8      	ldr	r0, [r7, #12]
 8000ab2:	f000 f843 	bl	8000b3c <_ZSt8_DestroyIPyEvT_S1_>
    }
 8000ab6:	bf00      	nop
 8000ab8:	3710      	adds	r7, #16
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}

08000abe <_ZNSt15__new_allocatorImEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000abe:	b480      	push	{r7}
 8000ac0:	b083      	sub	sp, #12
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bc80      	pop	{r7}
 8000ad0:	4770      	bx	lr

08000ad2 <_ZNSt16allocator_traitsISaImEE10deallocateERS0_Pmj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	b084      	sub	sp, #16
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	60f8      	str	r0, [r7, #12]
 8000ada:	60b9      	str	r1, [r7, #8]
 8000adc:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	68b9      	ldr	r1, [r7, #8]
 8000ae2:	68f8      	ldr	r0, [r7, #12]
 8000ae4:	f000 f837 	bl	8000b56 <_ZNSt15__new_allocatorImE10deallocateEPmj>
 8000ae8:	bf00      	nop
 8000aea:	3710      	adds	r7, #16
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <_ZSt8_DestroyIPmEvT_S1_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	6039      	str	r1, [r7, #0]
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8000afa:	6839      	ldr	r1, [r7, #0]
 8000afc:	6878      	ldr	r0, [r7, #4]
 8000afe:	f000 f83a 	bl	8000b76 <_ZNSt12_Destroy_auxILb1EE9__destroyIPmEEvT_S3_>
    }
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <_ZNSt15__new_allocatorIyEC1Ev>:
 8000b0a:	b480      	push	{r7}
 8000b0c:	b083      	sub	sp, #12
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4618      	mov	r0, r3
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bc80      	pop	{r7}
 8000b1c:	4770      	bx	lr

08000b1e <_ZNSt16allocator_traitsISaIyEE10deallocateERS0_Pyj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b084      	sub	sp, #16
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	60f8      	str	r0, [r7, #12]
 8000b26:	60b9      	str	r1, [r7, #8]
 8000b28:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8000b2a:	687a      	ldr	r2, [r7, #4]
 8000b2c:	68b9      	ldr	r1, [r7, #8]
 8000b2e:	68f8      	ldr	r0, [r7, #12]
 8000b30:	f000 f82b 	bl	8000b8a <_ZNSt15__new_allocatorIyE10deallocateEPyj>
 8000b34:	bf00      	nop
 8000b36:	3710      	adds	r7, #16
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <_ZSt8_DestroyIPyEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8000b46:	6839      	ldr	r1, [r7, #0]
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f000 f82e 	bl	8000baa <_ZNSt12_Destroy_auxILb1EE9__destroyIPyEEvT_S3_>
    }
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <_ZNSt15__new_allocatorImE10deallocateEPmj>:
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b084      	sub	sp, #16
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	60f8      	str	r0, [r7, #12]
 8000b5e:	60b9      	str	r1, [r7, #8]
 8000b60:	607a      	str	r2, [r7, #4]
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	4619      	mov	r1, r3
 8000b68:	68b8      	ldr	r0, [r7, #8]
 8000b6a:	f003 f97b 	bl	8003e64 <_ZdlPvj>
      }
 8000b6e:	bf00      	nop
 8000b70:	3710      	adds	r7, #16
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <_ZNSt12_Destroy_auxILb1EE9__destroyIPmEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8000b76:	b480      	push	{r7}
 8000b78:	b083      	sub	sp, #12
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
 8000b7e:	6039      	str	r1, [r7, #0]
 8000b80:	bf00      	nop
 8000b82:	370c      	adds	r7, #12
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bc80      	pop	{r7}
 8000b88:	4770      	bx	lr

08000b8a <_ZNSt15__new_allocatorIyE10deallocateEPyj>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b084      	sub	sp, #16
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	60f8      	str	r0, [r7, #12]
 8000b92:	60b9      	str	r1, [r7, #8]
 8000b94:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	00db      	lsls	r3, r3, #3
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	68b8      	ldr	r0, [r7, #8]
 8000b9e:	f003 f961 	bl	8003e64 <_ZdlPvj>
      }
 8000ba2:	bf00      	nop
 8000ba4:	3710      	adds	r7, #16
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <_ZNSt12_Destroy_auxILb1EE9__destroyIPyEEvT_S3_>:
 8000baa:	b480      	push	{r7}
 8000bac:	b083      	sub	sp, #12
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
 8000bb2:	6039      	str	r1, [r7, #0]
 8000bb4:	bf00      	nop
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bc80      	pop	{r7}
 8000bbc:	4770      	bx	lr

08000bbe <_ZN7EncoderC1EP12MotorControlP17TIM_HandleTypeDefS3_tf>:
 */
 
#include "encoder.hpp"
#include "cmath"

Encoder::Encoder(MotorControl* motorControl, TIM_HandleTypeDef* enc1, TIM_HandleTypeDef* enc2, uint16_t maxCount, float countsPerRevolution)
 8000bbe:	b480      	push	{r7}
 8000bc0:	b085      	sub	sp, #20
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	60f8      	str	r0, [r7, #12]
 8000bc6:	60b9      	str	r1, [r7, #8]
 8000bc8:	607a      	str	r2, [r7, #4]
 8000bca:	603b      	str	r3, [r7, #0]
    : motorControl(motorControl), encoder1(enc1), encoder2(enc2), maxEncoderCount(maxCount), countsPerRev(countsPerRevolution) {
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	68ba      	ldr	r2, [r7, #8]
 8000bd0:	601a      	str	r2, [r3, #0]
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	687a      	ldr	r2, [r7, #4]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	683a      	ldr	r2, [r7, #0]
 8000bdc:	609a      	str	r2, [r3, #8]
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	8b3a      	ldrh	r2, [r7, #24]
 8000be2:	819a      	strh	r2, [r3, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	69fa      	ldr	r2, [r7, #28]
 8000be8:	611a      	str	r2, [r3, #16]
    // Constructor
};
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	4618      	mov	r0, r3
 8000bee:	3714      	adds	r7, #20
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bc80      	pop	{r7}
 8000bf4:	4770      	bx	lr

08000bf6 <_ZN7Encoder11readEncoderEP17TIM_HandleTypeDef>:

uint32_t Encoder::readEncoder(TIM_HandleTypeDef* enc) {
 8000bf6:	b480      	push	{r7}
 8000bf8:	b083      	sub	sp, #12
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
 8000bfe:	6039      	str	r1, [r7, #0]
    // Reads encoder data
    return __HAL_TIM_GET_COUNTER(enc);
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bc80      	pop	{r7}
 8000c0e:	4770      	bx	lr

08000c10 <_ZN7Encoder17resetEncoderCountEP17TIM_HandleTypeDef>:

void Encoder::resetEncoderCount(TIM_HandleTypeDef* enc){
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SET_COUNTER(enc, 0);
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	2200      	movs	r2, #0
 8000c20:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000c22:	bf00      	nop
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bc80      	pop	{r7}
 8000c2a:	4770      	bx	lr

08000c2c <_ZN7Encoder16calibrateEncoderEP17TIM_HandleTypeDeft>:

void Encoder::calibrateEncoder(TIM_HandleTypeDef* enc, uint16_t motorCurrent){
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	60f8      	str	r0, [r7, #12]
 8000c34:	60b9      	str	r1, [r7, #8]
 8000c36:	4613      	mov	r3, r2
 8000c38:	80fb      	strh	r3, [r7, #6]


	bool stalling = false; //Checks if the steering motor is stalled. We need this to know when the steering system has reached full lock
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	75fb      	strb	r3, [r7, #23]
	uint16_t stallCurrent = 500; //mA
 8000c3e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000c42:	82bb      	strh	r3, [r7, #20]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c44:	2200      	movs	r2, #0
 8000c46:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c4a:	4827      	ldr	r0, [pc, #156]	@ (8000ce8 <_ZN7Encoder16calibrateEncoderEP17TIM_HandleTypeDeft+0xbc>)
 8000c4c:	f001 ffaa 	bl	8002ba4 <HAL_GPIO_WritePin>

	while(!stalling){
 8000c50:	e016      	b.n	8000c80 <_ZN7Encoder16calibrateEncoderEP17TIM_HandleTypeDeft+0x54>
		motorControl->setDutyCycle(3000);
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f000 fbe1 	bl	8001422 <_ZN12MotorControl12setDutyCycleEt>

		if (motorCurrent >= stallCurrent) {
 8000c60:	88fa      	ldrh	r2, [r7, #6]
 8000c62:	8abb      	ldrh	r3, [r7, #20]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	d30b      	bcc.n	8000c80 <_ZN7Encoder16calibrateEncoderEP17TIM_HandleTypeDeft+0x54>
			resetEncoderCount(enc);
 8000c68:	68b9      	ldr	r1, [r7, #8]
 8000c6a:	68f8      	ldr	r0, [r7, #12]
 8000c6c:	f7ff ffd0 	bl	8000c10 <_ZN7Encoder17resetEncoderCountEP17TIM_HandleTypeDef>
			motorControl->setDutyCycle(0);
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2100      	movs	r1, #0
 8000c76:	4618      	mov	r0, r3
 8000c78:	f000 fbd3 	bl	8001422 <_ZN12MotorControl12setDutyCycleEt>
			stalling = true;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	75fb      	strb	r3, [r7, #23]
	while(!stalling){
 8000c80:	7dfb      	ldrb	r3, [r7, #23]
 8000c82:	f083 0301 	eor.w	r3, r3, #1
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d1e2      	bne.n	8000c52 <_ZN7Encoder16calibrateEncoderEP17TIM_HandleTypeDeft+0x26>
		}
	}

	stalling = false;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	75fb      	strb	r3, [r7, #23]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c90:	2200      	movs	r2, #0
 8000c92:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c96:	4814      	ldr	r0, [pc, #80]	@ (8000ce8 <_ZN7Encoder16calibrateEncoderEP17TIM_HandleTypeDeft+0xbc>)
 8000c98:	f001 ff84 	bl	8002ba4 <HAL_GPIO_WritePin>

	while(!stalling){
 8000c9c:	e018      	b.n	8000cd0 <_ZN7Encoder16calibrateEncoderEP17TIM_HandleTypeDeft+0xa4>
		motorControl->setDutyCycle(3000);
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f000 fbbb 	bl	8001422 <_ZN12MotorControl12setDutyCycleEt>
		if (motorCurrent >= stallCurrent) {
 8000cac:	88fa      	ldrh	r2, [r7, #6]
 8000cae:	8abb      	ldrh	r3, [r7, #20]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d30d      	bcc.n	8000cd0 <_ZN7Encoder16calibrateEncoderEP17TIM_HandleTypeDeft+0xa4>
			maxEncoderCount = __HAL_TIM_GET_COUNTER(enc);
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cba:	b29a      	uxth	r2, r3
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	819a      	strh	r2, [r3, #12]
			motorControl->setDutyCycle(0);
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f000 fbab 	bl	8001422 <_ZN12MotorControl12setDutyCycleEt>
			stalling = true;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	75fb      	strb	r3, [r7, #23]
	while(!stalling){
 8000cd0:	7dfb      	ldrb	r3, [r7, #23]
 8000cd2:	f083 0301 	eor.w	r3, r3, #1
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d1e0      	bne.n	8000c9e <_ZN7Encoder16calibrateEncoderEP17TIM_HandleTypeDeft+0x72>
		}
	}
}
 8000cdc:	bf00      	nop
 8000cde:	bf00      	nop
 8000ce0:	3718      	adds	r7, #24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40010c00 	.word	0x40010c00

08000cec <_ZN7Encoder14calculateAngleEt>:

int16_t Encoder::calculateAngle(uint16_t count) {
 8000cec:	b480      	push	{r7}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	460b      	mov	r3, r1
 8000cf6:	807b      	strh	r3, [r7, #2]
    // Converts encoder count into a tenth of a degree in steer angle
	// Map count to angle within -300 to +300 (tenths of a degree)
	int32_t scaledCount = static_cast<int32_t>(count) * 600; // Scale by total range (60.0 degrees * 10)
 8000cf8:	887b      	ldrh	r3, [r7, #2]
 8000cfa:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8000cfe:	fb02 f303 	mul.w	r3, r2, r3
 8000d02:	60fb      	str	r3, [r7, #12]
	int32_t angle = scaledCount / maxEncoderCount - 300;     // Subtract 300 to map to range [-300, +300]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	899b      	ldrh	r3, [r3, #12]
 8000d08:	461a      	mov	r2, r3
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8000d10:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000d14:	60bb      	str	r3, [r7, #8]
	return static_cast<int16_t>(angle);
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	b21b      	sxth	r3, r3
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3714      	adds	r7, #20
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bc80      	pop	{r7}
 8000d22:	4770      	bx	lr

08000d24 <HAL_CAN_RxFifo0MsgPendingCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */



void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8000d2c:	4b15      	ldr	r3, [pc, #84]	@ (8000d84 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8000d2e:	4a16      	ldr	r2, [pc, #88]	@ (8000d88 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8000d30:	2100      	movs	r1, #0
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	f001 f943 	bl	8001fbe <HAL_CAN_GetRxMessage>
	if (RxHeader.StdId == 446) {
 8000d38:	4b13      	ldr	r3, [pc, #76]	@ (8000d88 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f5b3 7fdf 	cmp.w	r3, #446	@ 0x1be
 8000d40:	d10c      	bne.n	8000d5c <HAL_CAN_RxFifo0MsgPendingCallback+0x38>
		received_value = globalcanbus.dataMerger(RxData);
 8000d42:	4910      	ldr	r1, [pc, #64]	@ (8000d84 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8000d44:	4811      	ldr	r0, [pc, #68]	@ (8000d8c <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 8000d46:	f7ff fdde 	bl	8000906 <_ZN6CANBus10dataMergerEPh>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	4a10      	ldr	r2, [pc, #64]	@ (8000d90 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8000d4e:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000d50:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d54:	480f      	ldr	r0, [pc, #60]	@ (8000d94 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8000d56:	f001 ff3d 	bl	8002bd4 <HAL_GPIO_TogglePin>
	}
	else{
		Error_Handler();
	}

}
 8000d5a:	e00e      	b.n	8000d7a <HAL_CAN_RxFifo0MsgPendingCallback+0x56>
	else if(RxHeader.StdId == 300) {
 8000d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d88 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000d64:	d107      	bne.n	8000d76 <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
		received_value2 = globalcanbus.dataMerger(RxData);
 8000d66:	4907      	ldr	r1, [pc, #28]	@ (8000d84 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8000d68:	4808      	ldr	r0, [pc, #32]	@ (8000d8c <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 8000d6a:	f7ff fdcc 	bl	8000906 <_ZN6CANBus10dataMergerEPh>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	4a09      	ldr	r2, [pc, #36]	@ (8000d98 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000d72:	6013      	str	r3, [r2, #0]
}
 8000d74:	e001      	b.n	8000d7a <HAL_CAN_RxFifo0MsgPendingCallback+0x56>
		Error_Handler();
 8000d76:	f000 fa2f 	bl	80011d8 <Error_Handler>
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000138 	.word	0x20000138
 8000d88:	2000011c 	.word	0x2000011c
 8000d8c:	20000078 	.word	0x20000078
 8000d90:	20000140 	.word	0x20000140
 8000d94:	40011000 	.word	0x40011000
 8000d98:	20000144 	.word	0x20000144

08000d9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b096      	sub	sp, #88	@ 0x58
 8000da0:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	CAN_ErrorFlags error_flags;
	MotorControl motorControl(&htim2, TIM_CHANNEL_3);
 8000da2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000da6:	2208      	movs	r2, #8
 8000da8:	4938      	ldr	r1, [pc, #224]	@ (8000e8c <main+0xf0>)
 8000daa:	4618      	mov	r0, r3
 8000dac:	f000 fb0c 	bl	80013c8 <_ZN12MotorControlC1EP17TIM_HandleTypeDefm>
	Encoder encoder(&motorControl, &htim2, &htim2, 65535, 1000);
 8000db0:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000db4:	f107 0010 	add.w	r0, r7, #16
 8000db8:	4b35      	ldr	r3, [pc, #212]	@ (8000e90 <main+0xf4>)
 8000dba:	9301      	str	r3, [sp, #4]
 8000dbc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000dc0:	9300      	str	r3, [sp, #0]
 8000dc2:	4b32      	ldr	r3, [pc, #200]	@ (8000e8c <main+0xf0>)
 8000dc4:	4a31      	ldr	r2, [pc, #196]	@ (8000e8c <main+0xf0>)
 8000dc6:	f7ff fefa 	bl	8000bbe <_ZN7EncoderC1EP12MotorControlP17TIM_HandleTypeDefS3_tf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dca:	f000 fd9b 	bl	8001904 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dce:	f000 f869 	bl	8000ea4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dd2:	f000 f993 	bl	80010fc <_ZL12MX_GPIO_Initv>
  MX_CAN_Init();
 8000dd6:	f000 f8b5 	bl	8000f44 <_ZL11MX_CAN_Initv>
  MX_TIM2_Init();
 8000dda:	f000 f8ff 	bl	8000fdc <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000dde:	213c      	movs	r1, #60	@ 0x3c
 8000de0:	482a      	ldr	r0, [pc, #168]	@ (8000e8c <main+0xf0>)
 8000de2:	f002 fc86 	bl	80036f2 <HAL_TIM_Encoder_Start>

  //Temporary values for development and testing ------------------------------*/
  uint8_t canAngle[8];
  uint32_t counter = 978324;
 8000de6:	4b2b      	ldr	r3, [pc, #172]	@ (8000e94 <main+0xf8>)
 8000de8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint8_t desiredAngle[8];
  uint32_t counter2 = 9999999;
 8000dea:	4b2b      	ldr	r3, [pc, #172]	@ (8000e98 <main+0xfc>)
 8000dec:	64bb      	str	r3, [r7, #72]	@ 0x48
  //---------------------------------------------------------------------------*/
  globalcanbus.start(&hcan, CAN_ID_STD);
 8000dee:	2200      	movs	r2, #0
 8000df0:	492a      	ldr	r1, [pc, #168]	@ (8000e9c <main+0x100>)
 8000df2:	482b      	ldr	r0, [pc, #172]	@ (8000ea0 <main+0x104>)
 8000df4:	f7ff fceb 	bl	80007ce <_ZN6CANBus5startEP17CAN_HandleTypeDefh>
  motorControl.start();
 8000df8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f000 fb00 	bl	8001402 <_ZN12MotorControl5startEv>

  encoder.calibrateEncoder(&htim2, 10);
 8000e02:	f107 0310 	add.w	r3, r7, #16
 8000e06:	220a      	movs	r2, #10
 8000e08:	4920      	ldr	r1, [pc, #128]	@ (8000e8c <main+0xf0>)
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff ff0e 	bl	8000c2c <_ZN7Encoder16calibrateEncoderEP17TIM_HandleTypeDeft>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint16_t currentCount = encoder.readEncoder(&htim2);
 8000e10:	f107 0310 	add.w	r3, r7, #16
 8000e14:	491d      	ldr	r1, [pc, #116]	@ (8000e8c <main+0xf0>)
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff feed 	bl	8000bf6 <_ZN7Encoder11readEncoderEP17TIM_HandleTypeDef>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	  int16_t currentAngle = encoder.calculateAngle(currentCount);
 8000e22:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8000e26:	f107 0310 	add.w	r3, r7, #16
 8000e2a:	4611      	mov	r1, r2
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff ff5d 	bl	8000cec <_ZN7Encoder14calculateAngleEt>
 8000e32:	4603      	mov	r3, r0
 8000e34:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
	  motorControl.steerToAngle(currentAngle, 50);
 8000e38:	f8b7 1044 	ldrh.w	r1, [r7, #68]	@ 0x44
 8000e3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e40:	2232      	movs	r2, #50	@ 0x32
 8000e42:	4618      	mov	r0, r3
 8000e44:	f000 fba4 	bl	8001590 <_ZN12MotorControl12steerToAngleEtt>

	  globalcanbus.dataSplitter(counter, canAngle);
 8000e48:	f107 0308 	add.w	r3, r7, #8
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8000e50:	4813      	ldr	r0, [pc, #76]	@ (8000ea0 <main+0x104>)
 8000e52:	f7ff fd37 	bl	80008c4 <_ZN6CANBus12dataSplitterEmPh>
	  globalcanbus.dataSplitter(counter2, desiredAngle);
 8000e56:	463b      	mov	r3, r7
 8000e58:	461a      	mov	r2, r3
 8000e5a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8000e5c:	4810      	ldr	r0, [pc, #64]	@ (8000ea0 <main+0x104>)
 8000e5e:	f7ff fd31 	bl	80008c4 <_ZN6CANBus12dataSplitterEmPh>

	  globalcanbus.transmit(&hcan, canAngle, 446);
 8000e62:	f107 0208 	add.w	r2, r7, #8
 8000e66:	f44f 73df 	mov.w	r3, #446	@ 0x1be
 8000e6a:	490c      	ldr	r1, [pc, #48]	@ (8000e9c <main+0x100>)
 8000e6c:	480c      	ldr	r0, [pc, #48]	@ (8000ea0 <main+0x104>)
 8000e6e:	f7ff fcde 	bl	800082e <_ZN6CANBus8transmitEP17CAN_HandleTypeDefPht>
	  globalcanbus.transmit(&hcan, desiredAngle, 300);
 8000e72:	463a      	mov	r2, r7
 8000e74:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000e78:	4908      	ldr	r1, [pc, #32]	@ (8000e9c <main+0x100>)
 8000e7a:	4809      	ldr	r0, [pc, #36]	@ (8000ea0 <main+0x104>)
 8000e7c:	f7ff fcd7 	bl	800082e <_ZN6CANBus8transmitEP17CAN_HandleTypeDefPht>
//	  int length = sizeof(canAngle)/sizeof(canAngle[0]);
	  HAL_Delay(300);
 8000e80:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000e84:	f000 fda0 	bl	80019c8 <HAL_Delay>
	  /* USER CODE END WHILE */

	  /* USER CODE BEGIN 3 */
  }
 8000e88:	bf00      	nop
 8000e8a:	e7c1      	b.n	8000e10 <main+0x74>
 8000e8c:	200000d4 	.word	0x200000d4
 8000e90:	447a0000 	.word	0x447a0000
 8000e94:	000eed94 	.word	0x000eed94
 8000e98:	0098967f 	.word	0x0098967f
 8000e9c:	200000ac 	.word	0x200000ac
 8000ea0:	20000078 	.word	0x20000078

08000ea4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b090      	sub	sp, #64	@ 0x40
 8000ea8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eaa:	f107 0318 	add.w	r3, r7, #24
 8000eae:	2228      	movs	r2, #40	@ 0x28
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f002 ffee 	bl	8003e94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eb8:	1d3b      	adds	r3, r7, #4
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	605a      	str	r2, [r3, #4]
 8000ec0:	609a      	str	r2, [r3, #8]
 8000ec2:	60da      	str	r2, [r3, #12]
 8000ec4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000eca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ece:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000edc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ee0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ee2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000ee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ee8:	f107 0318 	add.w	r3, r7, #24
 8000eec:	4618      	mov	r0, r3
 8000eee:	f001 fe8b 	bl	8002c08 <HAL_RCC_OscConfig>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	bf14      	ite	ne
 8000ef8:	2301      	movne	r3, #1
 8000efa:	2300      	moveq	r3, #0
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 8000f02:	f000 f969 	bl	80011d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f06:	230f      	movs	r3, #15
 8000f08:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f1c:	1d3b      	adds	r3, r7, #4
 8000f1e:	2102      	movs	r1, #2
 8000f20:	4618      	mov	r0, r3
 8000f22:	f002 f8f3 	bl	800310c <HAL_RCC_ClockConfig>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	bf14      	ite	ne
 8000f2c:	2301      	movne	r3, #1
 8000f2e:	2300      	moveq	r3, #0
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 8000f36:	f000 f94f 	bl	80011d8 <Error_Handler>
  }
}
 8000f3a:	bf00      	nop
 8000f3c:	3740      	adds	r7, #64	@ 0x40
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
	...

08000f44 <_ZL11MX_CAN_Initv>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af02      	add	r7, sp, #8
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000f4a:	4b21      	ldr	r3, [pc, #132]	@ (8000fd0 <_ZL11MX_CAN_Initv+0x8c>)
 8000f4c:	4a21      	ldr	r2, [pc, #132]	@ (8000fd4 <_ZL11MX_CAN_Initv+0x90>)
 8000f4e:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 36;
 8000f50:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd0 <_ZL11MX_CAN_Initv+0x8c>)
 8000f52:	2224      	movs	r2, #36	@ 0x24
 8000f54:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 8000f56:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd0 <_ZL11MX_CAN_Initv+0x8c>)
 8000f58:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f5c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd0 <_ZL11MX_CAN_Initv+0x8c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000f64:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd0 <_ZL11MX_CAN_Initv+0x8c>)
 8000f66:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000f6a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000f6c:	4b18      	ldr	r3, [pc, #96]	@ (8000fd0 <_ZL11MX_CAN_Initv+0x8c>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000f72:	4b17      	ldr	r3, [pc, #92]	@ (8000fd0 <_ZL11MX_CAN_Initv+0x8c>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000f78:	4b15      	ldr	r3, [pc, #84]	@ (8000fd0 <_ZL11MX_CAN_Initv+0x8c>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000f7e:	4b14      	ldr	r3, [pc, #80]	@ (8000fd0 <_ZL11MX_CAN_Initv+0x8c>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000f84:	4b12      	ldr	r3, [pc, #72]	@ (8000fd0 <_ZL11MX_CAN_Initv+0x8c>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000f8a:	4b11      	ldr	r3, [pc, #68]	@ (8000fd0 <_ZL11MX_CAN_Initv+0x8c>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000f90:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd0 <_ZL11MX_CAN_Initv+0x8c>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000f96:	480e      	ldr	r0, [pc, #56]	@ (8000fd0 <_ZL11MX_CAN_Initv+0x8c>)
 8000f98:	f000 fd3a 	bl	8001a10 <HAL_CAN_Init>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	bf14      	ite	ne
 8000fa2:	2301      	movne	r3, #1
 8000fa4:	2300      	moveq	r3, #0
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <_ZL11MX_CAN_Initv+0x6c>
  {
    Error_Handler();
 8000fac:	f000 f914 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  globalcanbus.configureFilter(&hcan, 0b00100010000, 0b00110110000, 10, 0);
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	9301      	str	r3, [sp, #4]
 8000fb4:	230a      	movs	r3, #10
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 8000fbc:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8000fc0:	4903      	ldr	r1, [pc, #12]	@ (8000fd0 <_ZL11MX_CAN_Initv+0x8c>)
 8000fc2:	4805      	ldr	r0, [pc, #20]	@ (8000fd8 <_ZL11MX_CAN_Initv+0x94>)
 8000fc4:	f7ff fc53 	bl	800086e <_ZN6CANBus15configureFilterEP17CAN_HandleTypeDeftthh>
  /* USER CODE END CAN_Init 2 */

}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	200000ac 	.word	0x200000ac
 8000fd4:	40006400 	.word	0x40006400
 8000fd8:	20000078 	.word	0x20000078

08000fdc <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b092      	sub	sp, #72	@ 0x48
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000fe2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fe6:	2224      	movs	r2, #36	@ 0x24
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f002 ff52 	bl	8003e94 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ff0:	f107 031c 	add.w	r3, r7, #28
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ffa:	463b      	mov	r3, r7
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]
 8001006:	611a      	str	r2, [r3, #16]
 8001008:	615a      	str	r2, [r3, #20]
 800100a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800100c:	4b3a      	ldr	r3, [pc, #232]	@ (80010f8 <_ZL12MX_TIM2_Initv+0x11c>)
 800100e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001012:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001014:	4b38      	ldr	r3, [pc, #224]	@ (80010f8 <_ZL12MX_TIM2_Initv+0x11c>)
 8001016:	2200      	movs	r2, #0
 8001018:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800101a:	4b37      	ldr	r3, [pc, #220]	@ (80010f8 <_ZL12MX_TIM2_Initv+0x11c>)
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001020:	4b35      	ldr	r3, [pc, #212]	@ (80010f8 <_ZL12MX_TIM2_Initv+0x11c>)
 8001022:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001026:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001028:	4b33      	ldr	r3, [pc, #204]	@ (80010f8 <_ZL12MX_TIM2_Initv+0x11c>)
 800102a:	2200      	movs	r2, #0
 800102c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800102e:	4b32      	ldr	r3, [pc, #200]	@ (80010f8 <_ZL12MX_TIM2_Initv+0x11c>)
 8001030:	2200      	movs	r2, #0
 8001032:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001034:	4830      	ldr	r0, [pc, #192]	@ (80010f8 <_ZL12MX_TIM2_Initv+0x11c>)
 8001036:	f002 f9c5 	bl	80033c4 <HAL_TIM_PWM_Init>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	bf14      	ite	ne
 8001040:	2301      	movne	r3, #1
 8001042:	2300      	moveq	r3, #0
 8001044:	b2db      	uxtb	r3, r3
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <_ZL12MX_TIM2_Initv+0x72>
  {
    Error_Handler();
 800104a:	f000 f8c5 	bl	80011d8 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800104e:	2303      	movs	r3, #3
 8001050:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001052:	2300      	movs	r3, #0
 8001054:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001056:	2301      	movs	r3, #1
 8001058:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800105a:	2300      	movs	r3, #0
 800105c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfig.IC1Filter = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001062:	2300      	movs	r3, #0
 8001064:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001066:	2301      	movs	r3, #1
 8001068:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800106a:	2300      	movs	r3, #0
 800106c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.IC2Filter = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001072:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001076:	4619      	mov	r1, r3
 8001078:	481f      	ldr	r0, [pc, #124]	@ (80010f8 <_ZL12MX_TIM2_Initv+0x11c>)
 800107a:	f002 fa8f 	bl	800359c <HAL_TIM_Encoder_Init>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	bf14      	ite	ne
 8001084:	2301      	movne	r3, #1
 8001086:	2300      	moveq	r3, #0
 8001088:	b2db      	uxtb	r3, r3
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <_ZL12MX_TIM2_Initv+0xb6>
  {
    Error_Handler();
 800108e:	f000 f8a3 	bl	80011d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001092:	2300      	movs	r3, #0
 8001094:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001096:	2300      	movs	r3, #0
 8001098:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800109a:	f107 031c 	add.w	r3, r7, #28
 800109e:	4619      	mov	r1, r3
 80010a0:	4815      	ldr	r0, [pc, #84]	@ (80010f8 <_ZL12MX_TIM2_Initv+0x11c>)
 80010a2:	f002 fe87 	bl	8003db4 <HAL_TIMEx_MasterConfigSynchronization>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	bf14      	ite	ne
 80010ac:	2301      	movne	r3, #1
 80010ae:	2300      	moveq	r3, #0
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <_ZL12MX_TIM2_Initv+0xde>
  {
    Error_Handler();
 80010b6:	f000 f88f 	bl	80011d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010ba:	2360      	movs	r3, #96	@ 0x60
 80010bc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010c2:	2300      	movs	r3, #0
 80010c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010c6:	2300      	movs	r3, #0
 80010c8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010ca:	463b      	mov	r3, r7
 80010cc:	2208      	movs	r2, #8
 80010ce:	4619      	mov	r1, r3
 80010d0:	4809      	ldr	r0, [pc, #36]	@ (80010f8 <_ZL12MX_TIM2_Initv+0x11c>)
 80010d2:	f002 fb9d 	bl	8003810 <HAL_TIM_PWM_ConfigChannel>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	bf14      	ite	ne
 80010dc:	2301      	movne	r3, #1
 80010de:	2300      	moveq	r3, #0
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <_ZL12MX_TIM2_Initv+0x10e>
  {
    Error_Handler();
 80010e6:	f000 f877 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80010ea:	4803      	ldr	r0, [pc, #12]	@ (80010f8 <_ZL12MX_TIM2_Initv+0x11c>)
 80010ec:	f000 fb6e 	bl	80017cc <HAL_TIM_MspPostInit>

}
 80010f0:	bf00      	nop
 80010f2:	3748      	adds	r7, #72	@ 0x48
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	200000d4 	.word	0x200000d4

080010fc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b088      	sub	sp, #32
 8001100:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001102:	f107 0310 	add.w	r3, r7, #16
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]
 800110e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001110:	4b2e      	ldr	r3, [pc, #184]	@ (80011cc <_ZL12MX_GPIO_Initv+0xd0>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	4a2d      	ldr	r2, [pc, #180]	@ (80011cc <_ZL12MX_GPIO_Initv+0xd0>)
 8001116:	f043 0310 	orr.w	r3, r3, #16
 800111a:	6193      	str	r3, [r2, #24]
 800111c:	4b2b      	ldr	r3, [pc, #172]	@ (80011cc <_ZL12MX_GPIO_Initv+0xd0>)
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	f003 0310 	and.w	r3, r3, #16
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001128:	4b28      	ldr	r3, [pc, #160]	@ (80011cc <_ZL12MX_GPIO_Initv+0xd0>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	4a27      	ldr	r2, [pc, #156]	@ (80011cc <_ZL12MX_GPIO_Initv+0xd0>)
 800112e:	f043 0320 	orr.w	r3, r3, #32
 8001132:	6193      	str	r3, [r2, #24]
 8001134:	4b25      	ldr	r3, [pc, #148]	@ (80011cc <_ZL12MX_GPIO_Initv+0xd0>)
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	f003 0320 	and.w	r3, r3, #32
 800113c:	60bb      	str	r3, [r7, #8]
 800113e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001140:	4b22      	ldr	r3, [pc, #136]	@ (80011cc <_ZL12MX_GPIO_Initv+0xd0>)
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	4a21      	ldr	r2, [pc, #132]	@ (80011cc <_ZL12MX_GPIO_Initv+0xd0>)
 8001146:	f043 0304 	orr.w	r3, r3, #4
 800114a:	6193      	str	r3, [r2, #24]
 800114c:	4b1f      	ldr	r3, [pc, #124]	@ (80011cc <_ZL12MX_GPIO_Initv+0xd0>)
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	f003 0304 	and.w	r3, r3, #4
 8001154:	607b      	str	r3, [r7, #4]
 8001156:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001158:	4b1c      	ldr	r3, [pc, #112]	@ (80011cc <_ZL12MX_GPIO_Initv+0xd0>)
 800115a:	699b      	ldr	r3, [r3, #24]
 800115c:	4a1b      	ldr	r2, [pc, #108]	@ (80011cc <_ZL12MX_GPIO_Initv+0xd0>)
 800115e:	f043 0308 	orr.w	r3, r3, #8
 8001162:	6193      	str	r3, [r2, #24]
 8001164:	4b19      	ldr	r3, [pc, #100]	@ (80011cc <_ZL12MX_GPIO_Initv+0xd0>)
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	f003 0308 	and.w	r3, r3, #8
 800116c:	603b      	str	r3, [r7, #0]
 800116e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001170:	2201      	movs	r2, #1
 8001172:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001176:	4816      	ldr	r0, [pc, #88]	@ (80011d0 <_ZL12MX_GPIO_Initv+0xd4>)
 8001178:	f001 fd14 	bl	8002ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800117c:	2200      	movs	r2, #0
 800117e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001182:	4814      	ldr	r0, [pc, #80]	@ (80011d4 <_ZL12MX_GPIO_Initv+0xd8>)
 8001184:	f001 fd0e 	bl	8002ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001188:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800118c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118e:	2301      	movs	r3, #1
 8001190:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001192:	2301      	movs	r3, #1
 8001194:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001196:	2301      	movs	r3, #1
 8001198:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800119a:	f107 0310 	add.w	r3, r7, #16
 800119e:	4619      	mov	r1, r3
 80011a0:	480b      	ldr	r0, [pc, #44]	@ (80011d0 <_ZL12MX_GPIO_Initv+0xd4>)
 80011a2:	f001 fb83 	bl	80028ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ac:	2301      	movs	r3, #1
 80011ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b4:	2302      	movs	r3, #2
 80011b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b8:	f107 0310 	add.w	r3, r7, #16
 80011bc:	4619      	mov	r1, r3
 80011be:	4805      	ldr	r0, [pc, #20]	@ (80011d4 <_ZL12MX_GPIO_Initv+0xd8>)
 80011c0:	f001 fb74 	bl	80028ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011c4:	bf00      	nop
 80011c6:	3720      	adds	r7, #32
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40021000 	.word	0x40021000
 80011d0:	40011000 	.word	0x40011000
 80011d4:	40010c00 	.word	0x40010c00

080011d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011dc:	b672      	cpsid	i
}
 80011de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011e0:	bf00      	nop
 80011e2:	e7fd      	b.n	80011e0 <Error_Handler+0x8>

080011e4 <_ZN6CANBusD1Ev>:
#include "stm32f1xx_hal.h"
#include "main.hpp"
#include <vector>
#include <cstdint>

class CANBus {
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3328      	adds	r3, #40	@ 0x28
 80011f0:	4618      	mov	r0, r3
 80011f2:	f000 f848 	bl	8001286 <_ZNSt6vectorIySaIyEED1Ev>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	331c      	adds	r3, #28
 80011fa:	4618      	mov	r0, r3
 80011fc:	f000 f828 	bl	8001250 <_ZNSt6vectorImSaImEED1Ev>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4618      	mov	r0, r3
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
	...

0800120c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d107      	bne.n	800122c <_Z41__static_initialization_and_destruction_0ii+0x20>
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001222:	4293      	cmp	r3, r2
 8001224:	d102      	bne.n	800122c <_Z41__static_initialization_and_destruction_0ii+0x20>
CANBus globalcanbus;
 8001226:	4809      	ldr	r0, [pc, #36]	@ (800124c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001228:	f7ff fabe 	bl	80007a8 <_ZN6CANBusC1Ev>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d107      	bne.n	8001242 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001238:	4293      	cmp	r3, r2
 800123a:	d102      	bne.n	8001242 <_Z41__static_initialization_and_destruction_0ii+0x36>
 800123c:	4803      	ldr	r0, [pc, #12]	@ (800124c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800123e:	f7ff ffd1 	bl	80011e4 <_ZN6CANBusD1Ev>
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000078 	.word	0x20000078

08001250 <_ZNSt6vectorImSaImEED1Ev>:
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      _GLIBCXX20_CONSTEXPR
      ~vector() _GLIBCXX_NOEXCEPT
 8001250:	b5b0      	push	{r4, r5, r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681c      	ldr	r4, [r3, #0]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff fbc9 	bl	80009fa <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 8001268:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800126a:	461a      	mov	r2, r3
 800126c:	4629      	mov	r1, r5
 800126e:	4620      	mov	r0, r4
 8001270:	f7ff fbcd 	bl	8000a0e <_ZSt8_DestroyIPmmEvT_S1_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4618      	mov	r0, r3
 8001278:	f000 f82c 	bl	80012d4 <_ZNSt12_Vector_baseImSaImEED1Ev>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	4618      	mov	r0, r3
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bdb0      	pop	{r4, r5, r7, pc}

08001286 <_ZNSt6vectorIySaIyEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8001286:	b5b0      	push	{r4, r5, r7, lr}
 8001288:	b082      	sub	sp, #8
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681c      	ldr	r4, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff fbf8 	bl	8000a8e <_ZNSt12_Vector_baseIySaIyEE19_M_get_Tp_allocatorEv>
 800129e:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80012a0:	461a      	mov	r2, r3
 80012a2:	4629      	mov	r1, r5
 80012a4:	4620      	mov	r0, r4
 80012a6:	f7ff fbfc 	bl	8000aa2 <_ZSt8_DestroyIPyyEvT_S1_RSaIT0_E>
      }
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f000 f836 	bl	800131e <_ZNSt12_Vector_baseIySaIyEED1Ev>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4618      	mov	r0, r3
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bdb0      	pop	{r4, r5, r7, pc}

080012bc <_ZNSt12_Vector_baseImSaImEE12_Vector_implD1Ev>:
      struct _Vector_impl
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f000 f843 	bl	8001350 <_ZNSaImED1Ev>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4618      	mov	r0, r3
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <_ZNSt12_Vector_baseImSaImEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689a      	ldr	r2, [r3, #8]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 80012ec:	461a      	mov	r2, r3
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7ff fb70 	bl	80009d4 <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj>
      }
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff ffe0 	bl	80012bc <_ZNSt12_Vector_baseImSaImEE12_Vector_implD1Ev>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4618      	mov	r0, r3
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <_ZNSt12_Vector_baseIySaIyEE12_Vector_implD1Ev>:
      struct _Vector_impl
 8001306:	b580      	push	{r7, lr}
 8001308:	b082      	sub	sp, #8
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f000 f82a 	bl	8001368 <_ZNSaIyED1Ev>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4618      	mov	r0, r3
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <_ZNSt12_Vector_baseIySaIyEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800131e:	b580      	push	{r7, lr}
 8001320:	b082      	sub	sp, #8
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	689a      	ldr	r2, [r3, #8]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	10db      	asrs	r3, r3, #3
	_M_deallocate(_M_impl._M_start,
 8001336:	461a      	mov	r2, r3
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f7ff fb95 	bl	8000a68 <_ZNSt12_Vector_baseIySaIyEE13_M_deallocateEPyj>
      }
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff ffe0 	bl	8001306 <_ZNSt12_Vector_baseIySaIyEE12_Vector_implD1Ev>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4618      	mov	r0, r3
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <_ZNSaImED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f000 f811 	bl	8001380 <_ZNSt15__new_allocatorImED1Ev>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4618      	mov	r0, r3
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <_ZNSaIyED1Ev>:
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f000 f80f 	bl	8001394 <_ZNSt15__new_allocatorIyED1Ev>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4618      	mov	r0, r3
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <_ZNSt15__new_allocatorImED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4618      	mov	r0, r3
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr

08001394 <_ZNSt15__new_allocatorIyED1Ev>:
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4618      	mov	r0, r3
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr

080013a8 <_GLOBAL__sub_I_globalcanbus>:
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80013b0:	2001      	movs	r0, #1
 80013b2:	f7ff ff2b 	bl	800120c <_Z41__static_initialization_and_destruction_0ii>
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <_GLOBAL__sub_D_globalcanbus>:
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80013c0:	2000      	movs	r0, #0
 80013c2:	f7ff ff23 	bl	800120c <_Z41__static_initialization_and_destruction_0ii>
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <_ZN12MotorControlC1EP17TIM_HandleTypeDefm>:

#include "motorControl.hpp"
#include <cmath>

// Constructor
MotorControl::MotorControl(TIM_HandleTypeDef* timer, uint32_t channel)
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
    : htim(timer), channel(channel), lastDirection(GPIO_PIN_SET),
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	68ba      	ldr	r2, [r7, #8]
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2201      	movs	r2, #1
 80013e4:	721a      	strb	r2, [r3, #8]
      integral(0.0f), previousError(0.0f) {}
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	f04f 0200 	mov.w	r2, #0
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	f04f 0200 	mov.w	r2, #0
 80013f4:	611a      	str	r2, [r3, #16]
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	4618      	mov	r0, r3
 80013fa:	3714      	adds	r7, #20
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bc80      	pop	{r7}
 8001400:	4770      	bx	lr

08001402 <_ZN12MotorControl5startEv>:

// Starts PWM
void MotorControl::start() {
 8001402:	b580      	push	{r7, lr}
 8001404:	b082      	sub	sp, #8
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Start(htim, channel);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	4619      	mov	r1, r3
 8001414:	4610      	mov	r0, r2
 8001416:	f002 f825 	bl	8003464 <HAL_TIM_PWM_Start>
}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <_ZN12MotorControl12setDutyCycleEt>:

// Sets steer speed (duty cycle)
void MotorControl::setDutyCycle(uint16_t dutyCycle) {
 8001422:	b480      	push	{r7}
 8001424:	b083      	sub	sp, #12
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
 800142a:	460b      	mov	r3, r1
 800142c:	807b      	strh	r3, [r7, #2]
    __HAL_TIM_SET_COMPARE(htim, channel, dutyCycle);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d105      	bne.n	8001442 <_ZN12MotorControl12setDutyCycleEt+0x20>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	887a      	ldrh	r2, [r7, #2]
 800143e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001440:	e018      	b.n	8001474 <_ZN12MotorControl12setDutyCycleEt+0x52>
    __HAL_TIM_SET_COMPARE(htim, channel, dutyCycle);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	2b04      	cmp	r3, #4
 8001448:	d105      	bne.n	8001456 <_ZN12MotorControl12setDutyCycleEt+0x34>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	887a      	ldrh	r2, [r7, #2]
 8001452:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001454:	e00e      	b.n	8001474 <_ZN12MotorControl12setDutyCycleEt+0x52>
    __HAL_TIM_SET_COMPARE(htim, channel, dutyCycle);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	2b08      	cmp	r3, #8
 800145c:	d105      	bne.n	800146a <_ZN12MotorControl12setDutyCycleEt+0x48>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	887a      	ldrh	r2, [r7, #2]
 8001466:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001468:	e004      	b.n	8001474 <_ZN12MotorControl12setDutyCycleEt+0x52>
    __HAL_TIM_SET_COMPARE(htim, channel, dutyCycle);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	887a      	ldrh	r2, [r7, #2]
 8001472:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	bc80      	pop	{r7}
 800147c:	4770      	bx	lr
	...

08001480 <_ZN12MotorControl12calculatePIDEtt>:
void MotorControl::toggleDirection() {
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
}

// PID controller implementation
int16_t MotorControl::calculatePID(uint16_t targetAngle, uint16_t currentAngle) {
 8001480:	b590      	push	{r4, r7, lr}
 8001482:	b087      	sub	sp, #28
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	460b      	mov	r3, r1
 800148a:	807b      	strh	r3, [r7, #2]
 800148c:	4613      	mov	r3, r2
 800148e:	803b      	strh	r3, [r7, #0]
    const float dt = 0.01f; // Fixed dt in seconds (10ms)
 8001490:	4b3a      	ldr	r3, [pc, #232]	@ (800157c <_ZN12MotorControl12calculatePIDEtt+0xfc>)
 8001492:	613b      	str	r3, [r7, #16]

    // Error calculation
    float error = static_cast<float>(targetAngle - currentAngle);
 8001494:	887a      	ldrh	r2, [r7, #2]
 8001496:	883b      	ldrh	r3, [r7, #0]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	4618      	mov	r0, r3
 800149c:	f7fe ff10 	bl	80002c0 <__aeabi_i2f>
 80014a0:	4603      	mov	r3, r0
 80014a2:	60fb      	str	r3, [r7, #12]

    // Integral windup prevention
    integral += error * dt;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	68dc      	ldr	r4, [r3, #12]
 80014a8:	4934      	ldr	r1, [pc, #208]	@ (800157c <_ZN12MotorControl12calculatePIDEtt+0xfc>)
 80014aa:	68f8      	ldr	r0, [r7, #12]
 80014ac:	f7fe ff5c 	bl	8000368 <__aeabi_fmul>
 80014b0:	4603      	mov	r3, r0
 80014b2:	4619      	mov	r1, r3
 80014b4:	4620      	mov	r0, r4
 80014b6:	f7fe fe4f 	bl	8000158 <__addsf3>
 80014ba:	4603      	mov	r3, r0
 80014bc:	461a      	mov	r2, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	60da      	str	r2, [r3, #12]
    if (integral > MAX_INTEGRAL) integral = MAX_INTEGRAL;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	68db      	ldr	r3, [r3, #12]
 80014c6:	492e      	ldr	r1, [pc, #184]	@ (8001580 <_ZN12MotorControl12calculatePIDEtt+0x100>)
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff f909 	bl	80006e0 <__aeabi_fcmpgt>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d002      	beq.n	80014da <_ZN12MotorControl12calculatePIDEtt+0x5a>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4a2a      	ldr	r2, [pc, #168]	@ (8001580 <_ZN12MotorControl12calculatePIDEtt+0x100>)
 80014d8:	60da      	str	r2, [r3, #12]
    if (integral < MIN_INTEGRAL) integral = MIN_INTEGRAL;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	4929      	ldr	r1, [pc, #164]	@ (8001584 <_ZN12MotorControl12calculatePIDEtt+0x104>)
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff f8df 	bl	80006a4 <__aeabi_fcmplt>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d002      	beq.n	80014f2 <_ZN12MotorControl12calculatePIDEtt+0x72>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4a25      	ldr	r2, [pc, #148]	@ (8001584 <_ZN12MotorControl12calculatePIDEtt+0x104>)
 80014f0:	60da      	str	r2, [r3, #12]

    // Derivative calculation
    float derivative = (error - previousError) / dt;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	691b      	ldr	r3, [r3, #16]
 80014f6:	4619      	mov	r1, r3
 80014f8:	68f8      	ldr	r0, [r7, #12]
 80014fa:	f7fe fe2b 	bl	8000154 <__aeabi_fsub>
 80014fe:	4603      	mov	r3, r0
 8001500:	491e      	ldr	r1, [pc, #120]	@ (800157c <_ZN12MotorControl12calculatePIDEtt+0xfc>)
 8001502:	4618      	mov	r0, r3
 8001504:	f7fe ffe4 	bl	80004d0 <__aeabi_fdiv>
 8001508:	4603      	mov	r3, r0
 800150a:	60bb      	str	r3, [r7, #8]

    // PID calculations
    float output = (KP * error) + (KI * integral) + (KD * derivative);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	491d      	ldr	r1, [pc, #116]	@ (8001588 <_ZN12MotorControl12calculatePIDEtt+0x108>)
 8001512:	4618      	mov	r0, r3
 8001514:	f7fe ff28 	bl	8000368 <__aeabi_fmul>
 8001518:	4603      	mov	r3, r0
 800151a:	68f9      	ldr	r1, [r7, #12]
 800151c:	4618      	mov	r0, r3
 800151e:	f7fe fe1b 	bl	8000158 <__addsf3>
 8001522:	4603      	mov	r3, r0
 8001524:	461c      	mov	r4, r3
 8001526:	4915      	ldr	r1, [pc, #84]	@ (800157c <_ZN12MotorControl12calculatePIDEtt+0xfc>)
 8001528:	68b8      	ldr	r0, [r7, #8]
 800152a:	f7fe ff1d 	bl	8000368 <__aeabi_fmul>
 800152e:	4603      	mov	r3, r0
 8001530:	4619      	mov	r1, r3
 8001532:	4620      	mov	r0, r4
 8001534:	f7fe fe10 	bl	8000158 <__addsf3>
 8001538:	4603      	mov	r3, r0
 800153a:	617b      	str	r3, [r7, #20]

    // Constrain output to valid range
    if (output > MAX_OUTPUT) output = MAX_OUTPUT;
 800153c:	4913      	ldr	r1, [pc, #76]	@ (800158c <_ZN12MotorControl12calculatePIDEtt+0x10c>)
 800153e:	6978      	ldr	r0, [r7, #20]
 8001540:	f7ff f8ce 	bl	80006e0 <__aeabi_fcmpgt>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <_ZN12MotorControl12calculatePIDEtt+0xce>
 800154a:	4b10      	ldr	r3, [pc, #64]	@ (800158c <_ZN12MotorControl12calculatePIDEtt+0x10c>)
 800154c:	617b      	str	r3, [r7, #20]
    if (output < MIN_OUTPUT) output = MIN_OUTPUT;
 800154e:	f04f 0100 	mov.w	r1, #0
 8001552:	6978      	ldr	r0, [r7, #20]
 8001554:	f7ff f8a6 	bl	80006a4 <__aeabi_fcmplt>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d002      	beq.n	8001564 <_ZN12MotorControl12calculatePIDEtt+0xe4>
 800155e:	f04f 0300 	mov.w	r3, #0
 8001562:	617b      	str	r3, [r7, #20]


    // Update previous error for the next iteration
    previousError = error;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	611a      	str	r2, [r3, #16]

    return static_cast<int16_t>(output);
 800156a:	6978      	ldr	r0, [r7, #20]
 800156c:	f7ff f8c2 	bl	80006f4 <__aeabi_f2iz>
 8001570:	4603      	mov	r3, r0
 8001572:	b21b      	sxth	r3, r3
}
 8001574:	4618      	mov	r0, r3
 8001576:	371c      	adds	r7, #28
 8001578:	46bd      	mov	sp, r7
 800157a:	bd90      	pop	{r4, r7, pc}
 800157c:	3c23d70a 	.word	0x3c23d70a
 8001580:	43fa0000 	.word	0x43fa0000
 8001584:	c3fa0000 	.word	0xc3fa0000
 8001588:	3dcccccd 	.word	0x3dcccccd
 800158c:	477fff00 	.word	0x477fff00

08001590 <_ZN12MotorControl12steerToAngleEtt>:

// Steers to target angle using PID
void MotorControl::steerToAngle(uint16_t currentAngle, uint16_t targetAngle) {
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	460b      	mov	r3, r1
 800159a:	807b      	strh	r3, [r7, #2]
 800159c:	4613      	mov	r3, r2
 800159e:	803b      	strh	r3, [r7, #0]
    int16_t pidOutput = calculatePID(targetAngle, currentAngle);
 80015a0:	887a      	ldrh	r2, [r7, #2]
 80015a2:	883b      	ldrh	r3, [r7, #0]
 80015a4:	4619      	mov	r1, r3
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f7ff ff6a 	bl	8001480 <_ZN12MotorControl12calculatePIDEtt>
 80015ac:	4603      	mov	r3, r0
 80015ae:	81fb      	strh	r3, [r7, #14]

    // Apply dead zone
    if (std::abs(pidOutput) < DEAD_ZONE_THRESHOLD) {
 80015b0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	bfb8      	it	lt
 80015b8:	425b      	neglt	r3, r3
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	2b09      	cmp	r3, #9
 80015be:	d804      	bhi.n	80015ca <_ZN12MotorControl12steerToAngleEtt+0x3a>
        setDutyCycle(0);
 80015c0:	2100      	movs	r1, #0
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f7ff ff2d 	bl	8001422 <_ZN12MotorControl12setDutyCycleEt>
        return;
 80015c8:	e01c      	b.n	8001604 <_ZN12MotorControl12steerToAngleEtt+0x74>
    }

    // Determine direction and apply PWM
    if (pidOutput < 0) {
 80015ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	da0d      	bge.n	80015ee <_ZN12MotorControl12steerToAngleEtt+0x5e>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); // Reverse direction
 80015d2:	2200      	movs	r2, #0
 80015d4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80015d8:	480c      	ldr	r0, [pc, #48]	@ (800160c <_ZN12MotorControl12steerToAngleEtt+0x7c>)
 80015da:	f001 fae3 	bl	8002ba4 <HAL_GPIO_WritePin>
        setDutyCycle(static_cast<uint16_t>(-pidOutput));      // Positive duty cycle
 80015de:	89fb      	ldrh	r3, [r7, #14]
 80015e0:	425b      	negs	r3, r3
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	4619      	mov	r1, r3
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f7ff ff1b 	bl	8001422 <_ZN12MotorControl12setDutyCycleEt>
 80015ec:	e00a      	b.n	8001604 <_ZN12MotorControl12steerToAngleEtt+0x74>
    } else {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);   // Forward direction
 80015ee:	2201      	movs	r2, #1
 80015f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80015f4:	4805      	ldr	r0, [pc, #20]	@ (800160c <_ZN12MotorControl12steerToAngleEtt+0x7c>)
 80015f6:	f001 fad5 	bl	8002ba4 <HAL_GPIO_WritePin>
        setDutyCycle(static_cast<uint16_t>(pidOutput));
 80015fa:	89fb      	ldrh	r3, [r7, #14]
 80015fc:	4619      	mov	r1, r3
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff ff0f 	bl	8001422 <_ZN12MotorControl12setDutyCycleEt>
    }
}
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40010800 	.word	0x40010800

08001610 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001616:	4b15      	ldr	r3, [pc, #84]	@ (800166c <HAL_MspInit+0x5c>)
 8001618:	699b      	ldr	r3, [r3, #24]
 800161a:	4a14      	ldr	r2, [pc, #80]	@ (800166c <HAL_MspInit+0x5c>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	6193      	str	r3, [r2, #24]
 8001622:	4b12      	ldr	r3, [pc, #72]	@ (800166c <HAL_MspInit+0x5c>)
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	60bb      	str	r3, [r7, #8]
 800162c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800162e:	4b0f      	ldr	r3, [pc, #60]	@ (800166c <HAL_MspInit+0x5c>)
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	4a0e      	ldr	r2, [pc, #56]	@ (800166c <HAL_MspInit+0x5c>)
 8001634:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001638:	61d3      	str	r3, [r2, #28]
 800163a:	4b0c      	ldr	r3, [pc, #48]	@ (800166c <HAL_MspInit+0x5c>)
 800163c:	69db      	ldr	r3, [r3, #28]
 800163e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001642:	607b      	str	r3, [r7, #4]
 8001644:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001646:	4b0a      	ldr	r3, [pc, #40]	@ (8001670 <HAL_MspInit+0x60>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	4a04      	ldr	r2, [pc, #16]	@ (8001670 <HAL_MspInit+0x60>)
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001662:	bf00      	nop
 8001664:	3714      	adds	r7, #20
 8001666:	46bd      	mov	sp, r7
 8001668:	bc80      	pop	{r7}
 800166a:	4770      	bx	lr
 800166c:	40021000 	.word	0x40021000
 8001670:	40010000 	.word	0x40010000

08001674 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08a      	sub	sp, #40	@ 0x28
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167c:	f107 0314 	add.w	r3, r7, #20
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a2d      	ldr	r2, [pc, #180]	@ (8001744 <HAL_CAN_MspInit+0xd0>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d153      	bne.n	800173c <HAL_CAN_MspInit+0xc8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001694:	4b2c      	ldr	r3, [pc, #176]	@ (8001748 <HAL_CAN_MspInit+0xd4>)
 8001696:	69db      	ldr	r3, [r3, #28]
 8001698:	4a2b      	ldr	r2, [pc, #172]	@ (8001748 <HAL_CAN_MspInit+0xd4>)
 800169a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800169e:	61d3      	str	r3, [r2, #28]
 80016a0:	4b29      	ldr	r3, [pc, #164]	@ (8001748 <HAL_CAN_MspInit+0xd4>)
 80016a2:	69db      	ldr	r3, [r3, #28]
 80016a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016a8:	613b      	str	r3, [r7, #16]
 80016aa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ac:	4b26      	ldr	r3, [pc, #152]	@ (8001748 <HAL_CAN_MspInit+0xd4>)
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	4a25      	ldr	r2, [pc, #148]	@ (8001748 <HAL_CAN_MspInit+0xd4>)
 80016b2:	f043 0308 	orr.w	r3, r3, #8
 80016b6:	6193      	str	r3, [r2, #24]
 80016b8:	4b23      	ldr	r3, [pc, #140]	@ (8001748 <HAL_CAN_MspInit+0xd4>)
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	f003 0308 	and.w	r3, r3, #8
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80016c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d2:	f107 0314 	add.w	r3, r7, #20
 80016d6:	4619      	mov	r1, r3
 80016d8:	481c      	ldr	r0, [pc, #112]	@ (800174c <HAL_CAN_MspInit+0xd8>)
 80016da:	f001 f8e7 	bl	80028ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e4:	2302      	movs	r3, #2
 80016e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016e8:	2303      	movs	r3, #3
 80016ea:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ec:	f107 0314 	add.w	r3, r7, #20
 80016f0:	4619      	mov	r1, r3
 80016f2:	4816      	ldr	r0, [pc, #88]	@ (800174c <HAL_CAN_MspInit+0xd8>)
 80016f4:	f001 f8da 	bl	80028ac <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 80016f8:	4b15      	ldr	r3, [pc, #84]	@ (8001750 <HAL_CAN_MspInit+0xdc>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80016fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001700:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8001704:	627b      	str	r3, [r7, #36]	@ 0x24
 8001706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001708:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800170c:	627b      	str	r3, [r7, #36]	@ 0x24
 800170e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001710:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001714:	627b      	str	r3, [r7, #36]	@ 0x24
 8001716:	4a0e      	ldr	r2, [pc, #56]	@ (8001750 <HAL_CAN_MspInit+0xdc>)
 8001718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800171a:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800171c:	2200      	movs	r2, #0
 800171e:	2100      	movs	r1, #0
 8001720:	2014      	movs	r0, #20
 8001722:	f001 f88c 	bl	800283e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001726:	2014      	movs	r0, #20
 8001728:	f001 f8a5 	bl	8002876 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 800172c:	2200      	movs	r2, #0
 800172e:	2100      	movs	r1, #0
 8001730:	2015      	movs	r0, #21
 8001732:	f001 f884 	bl	800283e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001736:	2015      	movs	r0, #21
 8001738:	f001 f89d 	bl	8002876 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 800173c:	bf00      	nop
 800173e:	3728      	adds	r7, #40	@ 0x28
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40006400 	.word	0x40006400
 8001748:	40021000 	.word	0x40021000
 800174c:	40010c00 	.word	0x40010c00
 8001750:	40010000 	.word	0x40010000

08001754 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b088      	sub	sp, #32
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175c:	f107 0310 	add.w	r3, r7, #16
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]
  if(htim_pwm->Instance==TIM2)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001772:	d123      	bne.n	80017bc <HAL_TIM_PWM_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001774:	4b13      	ldr	r3, [pc, #76]	@ (80017c4 <HAL_TIM_PWM_MspInit+0x70>)
 8001776:	69db      	ldr	r3, [r3, #28]
 8001778:	4a12      	ldr	r2, [pc, #72]	@ (80017c4 <HAL_TIM_PWM_MspInit+0x70>)
 800177a:	f043 0301 	orr.w	r3, r3, #1
 800177e:	61d3      	str	r3, [r2, #28]
 8001780:	4b10      	ldr	r3, [pc, #64]	@ (80017c4 <HAL_TIM_PWM_MspInit+0x70>)
 8001782:	69db      	ldr	r3, [r3, #28]
 8001784:	f003 0301 	and.w	r3, r3, #1
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800178c:	4b0d      	ldr	r3, [pc, #52]	@ (80017c4 <HAL_TIM_PWM_MspInit+0x70>)
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	4a0c      	ldr	r2, [pc, #48]	@ (80017c4 <HAL_TIM_PWM_MspInit+0x70>)
 8001792:	f043 0304 	orr.w	r3, r3, #4
 8001796:	6193      	str	r3, [r2, #24]
 8001798:	4b0a      	ldr	r3, [pc, #40]	@ (80017c4 <HAL_TIM_PWM_MspInit+0x70>)
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	f003 0304 	and.w	r3, r3, #4
 80017a0:	60bb      	str	r3, [r7, #8]
 80017a2:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017a4:	2303      	movs	r3, #3
 80017a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b0:	f107 0310 	add.w	r3, r7, #16
 80017b4:	4619      	mov	r1, r3
 80017b6:	4804      	ldr	r0, [pc, #16]	@ (80017c8 <HAL_TIM_PWM_MspInit+0x74>)
 80017b8:	f001 f878 	bl	80028ac <HAL_GPIO_Init>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80017bc:	bf00      	nop
 80017be:	3720      	adds	r7, #32
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	40021000 	.word	0x40021000
 80017c8:	40010800 	.word	0x40010800

080017cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b088      	sub	sp, #32
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d4:	f107 0310 	add.w	r3, r7, #16
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	609a      	str	r2, [r3, #8]
 80017e0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017ea:	d117      	bne.n	800181c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001824 <HAL_TIM_MspPostInit+0x58>)
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	4a0c      	ldr	r2, [pc, #48]	@ (8001824 <HAL_TIM_MspPostInit+0x58>)
 80017f2:	f043 0304 	orr.w	r3, r3, #4
 80017f6:	6193      	str	r3, [r2, #24]
 80017f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001824 <HAL_TIM_MspPostInit+0x58>)
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	f003 0304 	and.w	r3, r3, #4
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001804:	2304      	movs	r3, #4
 8001806:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001808:	2302      	movs	r3, #2
 800180a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180c:	2302      	movs	r3, #2
 800180e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001810:	f107 0310 	add.w	r3, r7, #16
 8001814:	4619      	mov	r1, r3
 8001816:	4804      	ldr	r0, [pc, #16]	@ (8001828 <HAL_TIM_MspPostInit+0x5c>)
 8001818:	f001 f848 	bl	80028ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800181c:	bf00      	nop
 800181e:	3720      	adds	r7, #32
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40021000 	.word	0x40021000
 8001828:	40010800 	.word	0x40010800

0800182c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001830:	bf00      	nop
 8001832:	e7fd      	b.n	8001830 <NMI_Handler+0x4>

08001834 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001838:	bf00      	nop
 800183a:	e7fd      	b.n	8001838 <HardFault_Handler+0x4>

0800183c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001840:	bf00      	nop
 8001842:	e7fd      	b.n	8001840 <MemManage_Handler+0x4>

08001844 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001848:	bf00      	nop
 800184a:	e7fd      	b.n	8001848 <BusFault_Handler+0x4>

0800184c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001850:	bf00      	nop
 8001852:	e7fd      	b.n	8001850 <UsageFault_Handler+0x4>

08001854 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001858:	bf00      	nop
 800185a:	46bd      	mov	sp, r7
 800185c:	bc80      	pop	{r7}
 800185e:	4770      	bx	lr

08001860 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr

0800186c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	bc80      	pop	{r7}
 8001876:	4770      	bx	lr

08001878 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800187c:	f000 f888 	bl	8001990 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001880:	bf00      	nop
 8001882:	bd80      	pop	{r7, pc}

08001884 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001888:	4802      	ldr	r0, [pc, #8]	@ (8001894 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800188a:	f000 fcde 	bl	800224a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	200000ac 	.word	0x200000ac

08001898 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800189c:	4802      	ldr	r0, [pc, #8]	@ (80018a8 <CAN1_RX1_IRQHandler+0x10>)
 800189e:	f000 fcd4 	bl	800224a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	200000ac 	.word	0x200000ac

080018ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc80      	pop	{r7}
 80018b6:	4770      	bx	lr

080018b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018b8:	f7ff fff8 	bl	80018ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018bc:	480b      	ldr	r0, [pc, #44]	@ (80018ec <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80018be:	490c      	ldr	r1, [pc, #48]	@ (80018f0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80018c0:	4a0c      	ldr	r2, [pc, #48]	@ (80018f4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80018c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018c4:	e002      	b.n	80018cc <LoopCopyDataInit>

080018c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ca:	3304      	adds	r3, #4

080018cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018d0:	d3f9      	bcc.n	80018c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018d2:	4a09      	ldr	r2, [pc, #36]	@ (80018f8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80018d4:	4c09      	ldr	r4, [pc, #36]	@ (80018fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018d8:	e001      	b.n	80018de <LoopFillZerobss>

080018da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018dc:	3204      	adds	r2, #4

080018de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018e0:	d3fb      	bcc.n	80018da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018e2:	f002 fadf 	bl	8003ea4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018e6:	f7ff fa59 	bl	8000d9c <main>
  bx lr
 80018ea:	4770      	bx	lr
  ldr r0, =_sdata
 80018ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018f0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80018f4:	08003fcc 	.word	0x08003fcc
  ldr r2, =_sbss
 80018f8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80018fc:	2000028c 	.word	0x2000028c

08001900 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001900:	e7fe      	b.n	8001900 <ADC1_2_IRQHandler>
	...

08001904 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001908:	4b08      	ldr	r3, [pc, #32]	@ (800192c <HAL_Init+0x28>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a07      	ldr	r2, [pc, #28]	@ (800192c <HAL_Init+0x28>)
 800190e:	f043 0310 	orr.w	r3, r3, #16
 8001912:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001914:	2003      	movs	r0, #3
 8001916:	f000 ff87 	bl	8002828 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800191a:	200f      	movs	r0, #15
 800191c:	f000 f808 	bl	8001930 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001920:	f7ff fe76 	bl	8001610 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40022000 	.word	0x40022000

08001930 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001938:	4b12      	ldr	r3, [pc, #72]	@ (8001984 <HAL_InitTick+0x54>)
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	4b12      	ldr	r3, [pc, #72]	@ (8001988 <HAL_InitTick+0x58>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	4619      	mov	r1, r3
 8001942:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001946:	fbb3 f3f1 	udiv	r3, r3, r1
 800194a:	fbb2 f3f3 	udiv	r3, r2, r3
 800194e:	4618      	mov	r0, r3
 8001950:	f000 ff9f 	bl	8002892 <HAL_SYSTICK_Config>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e00e      	b.n	800197c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2b0f      	cmp	r3, #15
 8001962:	d80a      	bhi.n	800197a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001964:	2200      	movs	r2, #0
 8001966:	6879      	ldr	r1, [r7, #4]
 8001968:	f04f 30ff 	mov.w	r0, #4294967295
 800196c:	f000 ff67 	bl	800283e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001970:	4a06      	ldr	r2, [pc, #24]	@ (800198c <HAL_InitTick+0x5c>)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001976:	2300      	movs	r3, #0
 8001978:	e000      	b.n	800197c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
}
 800197c:	4618      	mov	r0, r3
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	20000000 	.word	0x20000000
 8001988:	20000008 	.word	0x20000008
 800198c:	20000004 	.word	0x20000004

08001990 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001994:	4b05      	ldr	r3, [pc, #20]	@ (80019ac <HAL_IncTick+0x1c>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	461a      	mov	r2, r3
 800199a:	4b05      	ldr	r3, [pc, #20]	@ (80019b0 <HAL_IncTick+0x20>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4413      	add	r3, r2
 80019a0:	4a03      	ldr	r2, [pc, #12]	@ (80019b0 <HAL_IncTick+0x20>)
 80019a2:	6013      	str	r3, [r2, #0]
}
 80019a4:	bf00      	nop
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr
 80019ac:	20000008 	.word	0x20000008
 80019b0:	20000148 	.word	0x20000148

080019b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  return uwTick;
 80019b8:	4b02      	ldr	r3, [pc, #8]	@ (80019c4 <HAL_GetTick+0x10>)
 80019ba:	681b      	ldr	r3, [r3, #0]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr
 80019c4:	20000148 	.word	0x20000148

080019c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019d0:	f7ff fff0 	bl	80019b4 <HAL_GetTick>
 80019d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019e0:	d005      	beq.n	80019ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019e2:	4b0a      	ldr	r3, [pc, #40]	@ (8001a0c <HAL_Delay+0x44>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	461a      	mov	r2, r3
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	4413      	add	r3, r2
 80019ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019ee:	bf00      	nop
 80019f0:	f7ff ffe0 	bl	80019b4 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	68fa      	ldr	r2, [r7, #12]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d8f7      	bhi.n	80019f0 <HAL_Delay+0x28>
  {
  }
}
 8001a00:	bf00      	nop
 8001a02:	bf00      	nop
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20000008 	.word	0x20000008

08001a10 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d101      	bne.n	8001a22 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e0ed      	b.n	8001bfe <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d102      	bne.n	8001a34 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f7ff fe20 	bl	8001674 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f042 0201 	orr.w	r2, r2, #1
 8001a42:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a44:	f7ff ffb6 	bl	80019b4 <HAL_GetTick>
 8001a48:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a4a:	e012      	b.n	8001a72 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a4c:	f7ff ffb2 	bl	80019b4 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b0a      	cmp	r3, #10
 8001a58:	d90b      	bls.n	8001a72 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a5e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2205      	movs	r2, #5
 8001a6a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e0c5      	b.n	8001bfe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f003 0301 	and.w	r3, r3, #1
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d0e5      	beq.n	8001a4c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f022 0202 	bic.w	r2, r2, #2
 8001a8e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a90:	f7ff ff90 	bl	80019b4 <HAL_GetTick>
 8001a94:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a96:	e012      	b.n	8001abe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a98:	f7ff ff8c 	bl	80019b4 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b0a      	cmp	r3, #10
 8001aa4:	d90b      	bls.n	8001abe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aaa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2205      	movs	r2, #5
 8001ab6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e09f      	b.n	8001bfe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f003 0302 	and.w	r3, r3, #2
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d1e5      	bne.n	8001a98 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	7e1b      	ldrb	r3, [r3, #24]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d108      	bne.n	8001ae6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	e007      	b.n	8001af6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001af4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	7e5b      	ldrb	r3, [r3, #25]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d108      	bne.n	8001b10 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	e007      	b.n	8001b20 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001b1e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	7e9b      	ldrb	r3, [r3, #26]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d108      	bne.n	8001b3a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f042 0220 	orr.w	r2, r2, #32
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	e007      	b.n	8001b4a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f022 0220 	bic.w	r2, r2, #32
 8001b48:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	7edb      	ldrb	r3, [r3, #27]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d108      	bne.n	8001b64 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f022 0210 	bic.w	r2, r2, #16
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	e007      	b.n	8001b74 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f042 0210 	orr.w	r2, r2, #16
 8001b72:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	7f1b      	ldrb	r3, [r3, #28]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d108      	bne.n	8001b8e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f042 0208 	orr.w	r2, r2, #8
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	e007      	b.n	8001b9e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f022 0208 	bic.w	r2, r2, #8
 8001b9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	7f5b      	ldrb	r3, [r3, #29]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d108      	bne.n	8001bb8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f042 0204 	orr.w	r2, r2, #4
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	e007      	b.n	8001bc8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f022 0204 	bic.w	r2, r2, #4
 8001bc6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689a      	ldr	r2, [r3, #8]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	431a      	orrs	r2, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	691b      	ldr	r3, [r3, #16]
 8001bd6:	431a      	orrs	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	695b      	ldr	r3, [r3, #20]
 8001bdc:	ea42 0103 	orr.w	r1, r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	1e5a      	subs	r2, r3, #1
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	430a      	orrs	r2, r1
 8001bec:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001c06:	b480      	push	{r7}
 8001c08:	b087      	sub	sp, #28
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
 8001c0e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c1c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001c1e:	7cfb      	ldrb	r3, [r7, #19]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d003      	beq.n	8001c2c <HAL_CAN_ConfigFilter+0x26>
 8001c24:	7cfb      	ldrb	r3, [r7, #19]
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	f040 80aa 	bne.w	8001d80 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001c32:	f043 0201 	orr.w	r2, r3, #1
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	695b      	ldr	r3, [r3, #20]
 8001c40:	f003 031f 	and.w	r3, r3, #31
 8001c44:	2201      	movs	r2, #1
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	43db      	mvns	r3, r3
 8001c56:	401a      	ands	r2, r3
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	69db      	ldr	r3, [r3, #28]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d123      	bne.n	8001cae <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	401a      	ands	r2, r3
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001c88:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	3248      	adds	r2, #72	@ 0x48
 8001c8e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ca2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ca4:	6979      	ldr	r1, [r7, #20]
 8001ca6:	3348      	adds	r3, #72	@ 0x48
 8001ca8:	00db      	lsls	r3, r3, #3
 8001caa:	440b      	add	r3, r1
 8001cac:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d122      	bne.n	8001cfc <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	431a      	orrs	r2, r3
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001cd2:	683a      	ldr	r2, [r7, #0]
 8001cd4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001cd6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	3248      	adds	r2, #72	@ 0x48
 8001cdc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001cf0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001cf2:	6979      	ldr	r1, [r7, #20]
 8001cf4:	3348      	adds	r3, #72	@ 0x48
 8001cf6:	00db      	lsls	r3, r3, #3
 8001cf8:	440b      	add	r3, r1
 8001cfa:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d109      	bne.n	8001d18 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	401a      	ands	r2, r3
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001d16:	e007      	b.n	8001d28 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	431a      	orrs	r2, r3
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d109      	bne.n	8001d44 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	401a      	ands	r2, r3
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001d42:	e007      	b.n	8001d54 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	431a      	orrs	r2, r3
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	6a1b      	ldr	r3, [r3, #32]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d107      	bne.n	8001d6c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	431a      	orrs	r2, r3
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001d72:	f023 0201 	bic.w	r2, r3, #1
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	e006      	b.n	8001d8e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d84:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
  }
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	371c      	adds	r7, #28
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bc80      	pop	{r7}
 8001d96:	4770      	bx	lr

08001d98 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d12e      	bne.n	8001e0a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2202      	movs	r2, #2
 8001db0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f022 0201 	bic.w	r2, r2, #1
 8001dc2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001dc4:	f7ff fdf6 	bl	80019b4 <HAL_GetTick>
 8001dc8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001dca:	e012      	b.n	8001df2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001dcc:	f7ff fdf2 	bl	80019b4 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b0a      	cmp	r3, #10
 8001dd8:	d90b      	bls.n	8001df2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dde:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2205      	movs	r2, #5
 8001dea:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e012      	b.n	8001e18 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d1e5      	bne.n	8001dcc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001e06:	2300      	movs	r3, #0
 8001e08:	e006      	b.n	8001e18 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e0e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
  }
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b089      	sub	sp, #36	@ 0x24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
 8001e2c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e34:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e3e:	7ffb      	ldrb	r3, [r7, #31]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d003      	beq.n	8001e4c <HAL_CAN_AddTxMessage+0x2c>
 8001e44:	7ffb      	ldrb	r3, [r7, #31]
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	f040 80ad 	bne.w	8001fa6 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d10a      	bne.n	8001e6c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d105      	bne.n	8001e6c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f000 8095 	beq.w	8001f96 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	0e1b      	lsrs	r3, r3, #24
 8001e70:	f003 0303 	and.w	r3, r3, #3
 8001e74:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001e76:	2201      	movs	r2, #1
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	409a      	lsls	r2, r3
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d10d      	bne.n	8001ea4 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001e92:	68f9      	ldr	r1, [r7, #12]
 8001e94:	6809      	ldr	r1, [r1, #0]
 8001e96:	431a      	orrs	r2, r3
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	3318      	adds	r3, #24
 8001e9c:	011b      	lsls	r3, r3, #4
 8001e9e:	440b      	add	r3, r1
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	e00f      	b.n	8001ec4 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001eae:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001eb4:	68f9      	ldr	r1, [r7, #12]
 8001eb6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001eb8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	3318      	adds	r3, #24
 8001ebe:	011b      	lsls	r3, r3, #4
 8001ec0:	440b      	add	r3, r1
 8001ec2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6819      	ldr	r1, [r3, #0]
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	691a      	ldr	r2, [r3, #16]
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	3318      	adds	r3, #24
 8001ed0:	011b      	lsls	r3, r3, #4
 8001ed2:	440b      	add	r3, r1
 8001ed4:	3304      	adds	r3, #4
 8001ed6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	7d1b      	ldrb	r3, [r3, #20]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d111      	bne.n	8001f04 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	3318      	adds	r3, #24
 8001ee8:	011b      	lsls	r3, r3, #4
 8001eea:	4413      	add	r3, r2
 8001eec:	3304      	adds	r3, #4
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	68fa      	ldr	r2, [r7, #12]
 8001ef2:	6811      	ldr	r1, [r2, #0]
 8001ef4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	3318      	adds	r3, #24
 8001efc:	011b      	lsls	r3, r3, #4
 8001efe:	440b      	add	r3, r1
 8001f00:	3304      	adds	r3, #4
 8001f02:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	3307      	adds	r3, #7
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	061a      	lsls	r2, r3, #24
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	3306      	adds	r3, #6
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	041b      	lsls	r3, r3, #16
 8001f14:	431a      	orrs	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	3305      	adds	r3, #5
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	021b      	lsls	r3, r3, #8
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	3204      	adds	r2, #4
 8001f24:	7812      	ldrb	r2, [r2, #0]
 8001f26:	4610      	mov	r0, r2
 8001f28:	68fa      	ldr	r2, [r7, #12]
 8001f2a:	6811      	ldr	r1, [r2, #0]
 8001f2c:	ea43 0200 	orr.w	r2, r3, r0
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	011b      	lsls	r3, r3, #4
 8001f34:	440b      	add	r3, r1
 8001f36:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001f3a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3303      	adds	r3, #3
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	061a      	lsls	r2, r3, #24
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	3302      	adds	r3, #2
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	041b      	lsls	r3, r3, #16
 8001f4c:	431a      	orrs	r2, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	3301      	adds	r3, #1
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	021b      	lsls	r3, r3, #8
 8001f56:	4313      	orrs	r3, r2
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	7812      	ldrb	r2, [r2, #0]
 8001f5c:	4610      	mov	r0, r2
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	6811      	ldr	r1, [r2, #0]
 8001f62:	ea43 0200 	orr.w	r2, r3, r0
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	011b      	lsls	r3, r3, #4
 8001f6a:	440b      	add	r3, r1
 8001f6c:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001f70:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	3318      	adds	r3, #24
 8001f7a:	011b      	lsls	r3, r3, #4
 8001f7c:	4413      	add	r3, r2
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	6811      	ldr	r1, [r2, #0]
 8001f84:	f043 0201 	orr.w	r2, r3, #1
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	3318      	adds	r3, #24
 8001f8c:	011b      	lsls	r3, r3, #4
 8001f8e:	440b      	add	r3, r1
 8001f90:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001f92:	2300      	movs	r3, #0
 8001f94:	e00e      	b.n	8001fb4 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f9a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e006      	b.n	8001fb4 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001faa:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
  }
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3724      	adds	r7, #36	@ 0x24
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bc80      	pop	{r7}
 8001fbc:	4770      	bx	lr

08001fbe <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b087      	sub	sp, #28
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	60f8      	str	r0, [r7, #12]
 8001fc6:	60b9      	str	r1, [r7, #8]
 8001fc8:	607a      	str	r2, [r7, #4]
 8001fca:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fd2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001fd4:	7dfb      	ldrb	r3, [r7, #23]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d003      	beq.n	8001fe2 <HAL_CAN_GetRxMessage+0x24>
 8001fda:	7dfb      	ldrb	r3, [r7, #23]
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	f040 8103 	bne.w	80021e8 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d10e      	bne.n	8002006 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	f003 0303 	and.w	r3, r3, #3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d116      	bne.n	8002024 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ffa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e0f7      	b.n	80021f6 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	f003 0303 	and.w	r3, r3, #3
 8002010:	2b00      	cmp	r3, #0
 8002012:	d107      	bne.n	8002024 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002018:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e0e8      	b.n	80021f6 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	331b      	adds	r3, #27
 800202c:	011b      	lsls	r3, r3, #4
 800202e:	4413      	add	r3, r2
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0204 	and.w	r2, r3, #4
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d10c      	bne.n	800205c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	331b      	adds	r3, #27
 800204a:	011b      	lsls	r3, r3, #4
 800204c:	4413      	add	r3, r2
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	0d5b      	lsrs	r3, r3, #21
 8002052:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	601a      	str	r2, [r3, #0]
 800205a:	e00b      	b.n	8002074 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	331b      	adds	r3, #27
 8002064:	011b      	lsls	r3, r3, #4
 8002066:	4413      	add	r3, r2
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	08db      	lsrs	r3, r3, #3
 800206c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	331b      	adds	r3, #27
 800207c:	011b      	lsls	r3, r3, #4
 800207e:	4413      	add	r3, r2
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0202 	and.w	r2, r3, #2
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	331b      	adds	r3, #27
 8002092:	011b      	lsls	r3, r3, #4
 8002094:	4413      	add	r3, r2
 8002096:	3304      	adds	r3, #4
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d003      	beq.n	80020aa <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2208      	movs	r2, #8
 80020a6:	611a      	str	r2, [r3, #16]
 80020a8:	e00b      	b.n	80020c2 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	331b      	adds	r3, #27
 80020b2:	011b      	lsls	r3, r3, #4
 80020b4:	4413      	add	r3, r2
 80020b6:	3304      	adds	r3, #4
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 020f 	and.w	r2, r3, #15
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	331b      	adds	r3, #27
 80020ca:	011b      	lsls	r3, r3, #4
 80020cc:	4413      	add	r3, r2
 80020ce:	3304      	adds	r3, #4
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	0a1b      	lsrs	r3, r3, #8
 80020d4:	b2da      	uxtb	r2, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	331b      	adds	r3, #27
 80020e2:	011b      	lsls	r3, r3, #4
 80020e4:	4413      	add	r3, r2
 80020e6:	3304      	adds	r3, #4
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	0c1b      	lsrs	r3, r3, #16
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	011b      	lsls	r3, r3, #4
 80020fa:	4413      	add	r3, r2
 80020fc:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	b2da      	uxtb	r2, r3
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	011b      	lsls	r3, r3, #4
 8002110:	4413      	add	r3, r2
 8002112:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	0a1a      	lsrs	r2, r3, #8
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	3301      	adds	r3, #1
 800211e:	b2d2      	uxtb	r2, r2
 8002120:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	011b      	lsls	r3, r3, #4
 800212a:	4413      	add	r3, r2
 800212c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	0c1a      	lsrs	r2, r3, #16
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	3302      	adds	r3, #2
 8002138:	b2d2      	uxtb	r2, r2
 800213a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	011b      	lsls	r3, r3, #4
 8002144:	4413      	add	r3, r2
 8002146:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	0e1a      	lsrs	r2, r3, #24
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	3303      	adds	r3, #3
 8002152:	b2d2      	uxtb	r2, r2
 8002154:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	011b      	lsls	r3, r3, #4
 800215e:	4413      	add	r3, r2
 8002160:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	3304      	adds	r3, #4
 800216a:	b2d2      	uxtb	r2, r2
 800216c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	011b      	lsls	r3, r3, #4
 8002176:	4413      	add	r3, r2
 8002178:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	0a1a      	lsrs	r2, r3, #8
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	3305      	adds	r3, #5
 8002184:	b2d2      	uxtb	r2, r2
 8002186:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	011b      	lsls	r3, r3, #4
 8002190:	4413      	add	r3, r2
 8002192:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	0c1a      	lsrs	r2, r3, #16
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	3306      	adds	r3, #6
 800219e:	b2d2      	uxtb	r2, r2
 80021a0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	011b      	lsls	r3, r3, #4
 80021aa:	4413      	add	r3, r2
 80021ac:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	0e1a      	lsrs	r2, r3, #24
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	3307      	adds	r3, #7
 80021b8:	b2d2      	uxtb	r2, r2
 80021ba:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d108      	bne.n	80021d4 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	68da      	ldr	r2, [r3, #12]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f042 0220 	orr.w	r2, r2, #32
 80021d0:	60da      	str	r2, [r3, #12]
 80021d2:	e007      	b.n	80021e4 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	691a      	ldr	r2, [r3, #16]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f042 0220 	orr.w	r2, r2, #32
 80021e2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80021e4:	2300      	movs	r3, #0
 80021e6:	e006      	b.n	80021f6 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ec:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
  }
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	371c      	adds	r7, #28
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bc80      	pop	{r7}
 80021fe:	4770      	bx	lr

08002200 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002210:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002212:	7bfb      	ldrb	r3, [r7, #15]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d002      	beq.n	800221e <HAL_CAN_ActivateNotification+0x1e>
 8002218:	7bfb      	ldrb	r3, [r7, #15]
 800221a:	2b02      	cmp	r3, #2
 800221c:	d109      	bne.n	8002232 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	6959      	ldr	r1, [r3, #20]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	430a      	orrs	r2, r1
 800222c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800222e:	2300      	movs	r3, #0
 8002230:	e006      	b.n	8002240 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002236:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
  }
}
 8002240:	4618      	mov	r0, r3
 8002242:	3714      	adds	r7, #20
 8002244:	46bd      	mov	sp, r7
 8002246:	bc80      	pop	{r7}
 8002248:	4770      	bx	lr

0800224a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b08a      	sub	sp, #40	@ 0x28
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002252:	2300      	movs	r3, #0
 8002254:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	695b      	ldr	r3, [r3, #20]
 800225c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002286:	6a3b      	ldr	r3, [r7, #32]
 8002288:	f003 0301 	and.w	r3, r3, #1
 800228c:	2b00      	cmp	r3, #0
 800228e:	d07c      	beq.n	800238a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	2b00      	cmp	r3, #0
 8002298:	d023      	beq.n	80022e2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2201      	movs	r2, #1
 80022a0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d003      	beq.n	80022b4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f000 f983 	bl	80025b8 <HAL_CAN_TxMailbox0CompleteCallback>
 80022b2:	e016      	b.n	80022e2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	f003 0304 	and.w	r3, r3, #4
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d004      	beq.n	80022c8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80022be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80022c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80022c6:	e00c      	b.n	80022e2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	f003 0308 	and.w	r3, r3, #8
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d004      	beq.n	80022dc <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80022d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80022d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80022da:	e002      	b.n	80022e2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f000 f986 	bl	80025ee <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d024      	beq.n	8002336 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80022f4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d003      	beq.n	8002308 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f000 f962 	bl	80025ca <HAL_CAN_TxMailbox1CompleteCallback>
 8002306:	e016      	b.n	8002336 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800230e:	2b00      	cmp	r3, #0
 8002310:	d004      	beq.n	800231c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002314:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002318:	627b      	str	r3, [r7, #36]	@ 0x24
 800231a:	e00c      	b.n	8002336 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002322:	2b00      	cmp	r3, #0
 8002324:	d004      	beq.n	8002330 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002328:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800232c:	627b      	str	r3, [r7, #36]	@ 0x24
 800232e:	e002      	b.n	8002336 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f000 f965 	bl	8002600 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d024      	beq.n	800238a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002348:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d003      	beq.n	800235c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f000 f941 	bl	80025dc <HAL_CAN_TxMailbox2CompleteCallback>
 800235a:	e016      	b.n	800238a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d004      	beq.n	8002370 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002368:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800236c:	627b      	str	r3, [r7, #36]	@ 0x24
 800236e:	e00c      	b.n	800238a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d004      	beq.n	8002384 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800237a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800237c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002380:	627b      	str	r3, [r7, #36]	@ 0x24
 8002382:	e002      	b.n	800238a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f000 f944 	bl	8002612 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800238a:	6a3b      	ldr	r3, [r7, #32]
 800238c:	f003 0308 	and.w	r3, r3, #8
 8002390:	2b00      	cmp	r3, #0
 8002392:	d00c      	beq.n	80023ae <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	f003 0310 	and.w	r3, r3, #16
 800239a:	2b00      	cmp	r3, #0
 800239c:	d007      	beq.n	80023ae <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800239e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023a4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2210      	movs	r2, #16
 80023ac:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80023ae:	6a3b      	ldr	r3, [r7, #32]
 80023b0:	f003 0304 	and.w	r3, r3, #4
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d00b      	beq.n	80023d0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	f003 0308 	and.w	r3, r3, #8
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d006      	beq.n	80023d0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2208      	movs	r2, #8
 80023c8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 f92a 	bl	8002624 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80023d0:	6a3b      	ldr	r3, [r7, #32]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d009      	beq.n	80023ee <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	f003 0303 	and.w	r3, r3, #3
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d002      	beq.n	80023ee <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f7fe fc9b 	bl	8000d24 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80023ee:	6a3b      	ldr	r3, [r7, #32]
 80023f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d00c      	beq.n	8002412 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	f003 0310 	and.w	r3, r3, #16
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d007      	beq.n	8002412 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002404:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002408:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2210      	movs	r2, #16
 8002410:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002412:	6a3b      	ldr	r3, [r7, #32]
 8002414:	f003 0320 	and.w	r3, r3, #32
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00b      	beq.n	8002434 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	f003 0308 	and.w	r3, r3, #8
 8002422:	2b00      	cmp	r3, #0
 8002424:	d006      	beq.n	8002434 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2208      	movs	r2, #8
 800242c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 f90a 	bl	8002648 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002434:	6a3b      	ldr	r3, [r7, #32]
 8002436:	f003 0310 	and.w	r3, r3, #16
 800243a:	2b00      	cmp	r3, #0
 800243c:	d009      	beq.n	8002452 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	691b      	ldr	r3, [r3, #16]
 8002444:	f003 0303 	and.w	r3, r3, #3
 8002448:	2b00      	cmp	r3, #0
 800244a:	d002      	beq.n	8002452 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f000 f8f2 	bl	8002636 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002452:	6a3b      	ldr	r3, [r7, #32]
 8002454:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d00b      	beq.n	8002474 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	f003 0310 	and.w	r3, r3, #16
 8002462:	2b00      	cmp	r3, #0
 8002464:	d006      	beq.n	8002474 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2210      	movs	r2, #16
 800246c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 f8f3 	bl	800265a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002474:	6a3b      	ldr	r3, [r7, #32]
 8002476:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d00b      	beq.n	8002496 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	f003 0308 	and.w	r3, r3, #8
 8002484:	2b00      	cmp	r3, #0
 8002486:	d006      	beq.n	8002496 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2208      	movs	r2, #8
 800248e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f000 f8eb 	bl	800266c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002496:	6a3b      	ldr	r3, [r7, #32]
 8002498:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d07b      	beq.n	8002598 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	f003 0304 	and.w	r3, r3, #4
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d072      	beq.n	8002590 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80024aa:	6a3b      	ldr	r3, [r7, #32]
 80024ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d008      	beq.n	80024c6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80024be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c0:	f043 0301 	orr.w	r3, r3, #1
 80024c4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80024c6:	6a3b      	ldr	r3, [r7, #32]
 80024c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d008      	beq.n	80024e2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80024da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024dc:	f043 0302 	orr.w	r3, r3, #2
 80024e0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80024e2:	6a3b      	ldr	r3, [r7, #32]
 80024e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d008      	beq.n	80024fe <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d003      	beq.n	80024fe <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80024f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f8:	f043 0304 	orr.w	r3, r3, #4
 80024fc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80024fe:	6a3b      	ldr	r3, [r7, #32]
 8002500:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002504:	2b00      	cmp	r3, #0
 8002506:	d043      	beq.n	8002590 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800250e:	2b00      	cmp	r3, #0
 8002510:	d03e      	beq.n	8002590 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002518:	2b60      	cmp	r3, #96	@ 0x60
 800251a:	d02b      	beq.n	8002574 <HAL_CAN_IRQHandler+0x32a>
 800251c:	2b60      	cmp	r3, #96	@ 0x60
 800251e:	d82e      	bhi.n	800257e <HAL_CAN_IRQHandler+0x334>
 8002520:	2b50      	cmp	r3, #80	@ 0x50
 8002522:	d022      	beq.n	800256a <HAL_CAN_IRQHandler+0x320>
 8002524:	2b50      	cmp	r3, #80	@ 0x50
 8002526:	d82a      	bhi.n	800257e <HAL_CAN_IRQHandler+0x334>
 8002528:	2b40      	cmp	r3, #64	@ 0x40
 800252a:	d019      	beq.n	8002560 <HAL_CAN_IRQHandler+0x316>
 800252c:	2b40      	cmp	r3, #64	@ 0x40
 800252e:	d826      	bhi.n	800257e <HAL_CAN_IRQHandler+0x334>
 8002530:	2b30      	cmp	r3, #48	@ 0x30
 8002532:	d010      	beq.n	8002556 <HAL_CAN_IRQHandler+0x30c>
 8002534:	2b30      	cmp	r3, #48	@ 0x30
 8002536:	d822      	bhi.n	800257e <HAL_CAN_IRQHandler+0x334>
 8002538:	2b10      	cmp	r3, #16
 800253a:	d002      	beq.n	8002542 <HAL_CAN_IRQHandler+0x2f8>
 800253c:	2b20      	cmp	r3, #32
 800253e:	d005      	beq.n	800254c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002540:	e01d      	b.n	800257e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002544:	f043 0308 	orr.w	r3, r3, #8
 8002548:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800254a:	e019      	b.n	8002580 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800254c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800254e:	f043 0310 	orr.w	r3, r3, #16
 8002552:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002554:	e014      	b.n	8002580 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002558:	f043 0320 	orr.w	r3, r3, #32
 800255c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800255e:	e00f      	b.n	8002580 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002562:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002566:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002568:	e00a      	b.n	8002580 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800256a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800256c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002570:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002572:	e005      	b.n	8002580 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002576:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800257a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800257c:	e000      	b.n	8002580 <HAL_CAN_IRQHandler+0x336>
            break;
 800257e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	699a      	ldr	r2, [r3, #24]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800258e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2204      	movs	r2, #4
 8002596:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259a:	2b00      	cmp	r3, #0
 800259c:	d008      	beq.n	80025b0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a4:	431a      	orrs	r2, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f000 f867 	bl	800267e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80025b0:	bf00      	nop
 80025b2:	3728      	adds	r7, #40	@ 0x28
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bc80      	pop	{r7}
 80025c8:	4770      	bx	lr

080025ca <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80025ca:	b480      	push	{r7}
 80025cc:	b083      	sub	sp, #12
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80025d2:	bf00      	nop
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bc80      	pop	{r7}
 80025da:	4770      	bx	lr

080025dc <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bc80      	pop	{r7}
 80025ec:	4770      	bx	lr

080025ee <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80025ee:	b480      	push	{r7}
 80025f0:	b083      	sub	sp, #12
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80025f6:	bf00      	nop
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bc80      	pop	{r7}
 80025fe:	4770      	bx	lr

08002600 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	bc80      	pop	{r7}
 8002610:	4770      	bx	lr

08002612 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002612:	b480      	push	{r7}
 8002614:	b083      	sub	sp, #12
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800261a:	bf00      	nop
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	bc80      	pop	{r7}
 8002622:	4770      	bx	lr

08002624 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800262c:	bf00      	nop
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	bc80      	pop	{r7}
 8002634:	4770      	bx	lr

08002636 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002636:	b480      	push	{r7}
 8002638:	b083      	sub	sp, #12
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800263e:	bf00      	nop
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	bc80      	pop	{r7}
 8002646:	4770      	bx	lr

08002648 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	bc80      	pop	{r7}
 8002658:	4770      	bx	lr

0800265a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800265a:	b480      	push	{r7}
 800265c:	b083      	sub	sp, #12
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002662:	bf00      	nop
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	bc80      	pop	{r7}
 800266a:	4770      	bx	lr

0800266c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	bc80      	pop	{r7}
 800267c:	4770      	bx	lr

0800267e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800267e:	b480      	push	{r7}
 8002680:	b083      	sub	sp, #12
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002686:	bf00      	nop
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	bc80      	pop	{r7}
 800268e:	4770      	bx	lr

08002690 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f003 0307 	and.w	r3, r3, #7
 800269e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026a0:	4b0c      	ldr	r3, [pc, #48]	@ (80026d4 <__NVIC_SetPriorityGrouping+0x44>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026a6:	68ba      	ldr	r2, [r7, #8]
 80026a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80026ac:	4013      	ands	r3, r2
 80026ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80026bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026c2:	4a04      	ldr	r2, [pc, #16]	@ (80026d4 <__NVIC_SetPriorityGrouping+0x44>)
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	60d3      	str	r3, [r2, #12]
}
 80026c8:	bf00      	nop
 80026ca:	3714      	adds	r7, #20
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bc80      	pop	{r7}
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	e000ed00 	.word	0xe000ed00

080026d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026dc:	4b04      	ldr	r3, [pc, #16]	@ (80026f0 <__NVIC_GetPriorityGrouping+0x18>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	0a1b      	lsrs	r3, r3, #8
 80026e2:	f003 0307 	and.w	r3, r3, #7
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bc80      	pop	{r7}
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	e000ed00 	.word	0xe000ed00

080026f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	4603      	mov	r3, r0
 80026fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002702:	2b00      	cmp	r3, #0
 8002704:	db0b      	blt.n	800271e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002706:	79fb      	ldrb	r3, [r7, #7]
 8002708:	f003 021f 	and.w	r2, r3, #31
 800270c:	4906      	ldr	r1, [pc, #24]	@ (8002728 <__NVIC_EnableIRQ+0x34>)
 800270e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002712:	095b      	lsrs	r3, r3, #5
 8002714:	2001      	movs	r0, #1
 8002716:	fa00 f202 	lsl.w	r2, r0, r2
 800271a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800271e:	bf00      	nop
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	bc80      	pop	{r7}
 8002726:	4770      	bx	lr
 8002728:	e000e100 	.word	0xe000e100

0800272c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	4603      	mov	r3, r0
 8002734:	6039      	str	r1, [r7, #0]
 8002736:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800273c:	2b00      	cmp	r3, #0
 800273e:	db0a      	blt.n	8002756 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	b2da      	uxtb	r2, r3
 8002744:	490c      	ldr	r1, [pc, #48]	@ (8002778 <__NVIC_SetPriority+0x4c>)
 8002746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274a:	0112      	lsls	r2, r2, #4
 800274c:	b2d2      	uxtb	r2, r2
 800274e:	440b      	add	r3, r1
 8002750:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002754:	e00a      	b.n	800276c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	b2da      	uxtb	r2, r3
 800275a:	4908      	ldr	r1, [pc, #32]	@ (800277c <__NVIC_SetPriority+0x50>)
 800275c:	79fb      	ldrb	r3, [r7, #7]
 800275e:	f003 030f 	and.w	r3, r3, #15
 8002762:	3b04      	subs	r3, #4
 8002764:	0112      	lsls	r2, r2, #4
 8002766:	b2d2      	uxtb	r2, r2
 8002768:	440b      	add	r3, r1
 800276a:	761a      	strb	r2, [r3, #24]
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	bc80      	pop	{r7}
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	e000e100 	.word	0xe000e100
 800277c:	e000ed00 	.word	0xe000ed00

08002780 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002780:	b480      	push	{r7}
 8002782:	b089      	sub	sp, #36	@ 0x24
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f003 0307 	and.w	r3, r3, #7
 8002792:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	f1c3 0307 	rsb	r3, r3, #7
 800279a:	2b04      	cmp	r3, #4
 800279c:	bf28      	it	cs
 800279e:	2304      	movcs	r3, #4
 80027a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	3304      	adds	r3, #4
 80027a6:	2b06      	cmp	r3, #6
 80027a8:	d902      	bls.n	80027b0 <NVIC_EncodePriority+0x30>
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	3b03      	subs	r3, #3
 80027ae:	e000      	b.n	80027b2 <NVIC_EncodePriority+0x32>
 80027b0:	2300      	movs	r3, #0
 80027b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b4:	f04f 32ff 	mov.w	r2, #4294967295
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	fa02 f303 	lsl.w	r3, r2, r3
 80027be:	43da      	mvns	r2, r3
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	401a      	ands	r2, r3
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027c8:	f04f 31ff 	mov.w	r1, #4294967295
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	fa01 f303 	lsl.w	r3, r1, r3
 80027d2:	43d9      	mvns	r1, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027d8:	4313      	orrs	r3, r2
         );
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3724      	adds	r7, #36	@ 0x24
 80027de:	46bd      	mov	sp, r7
 80027e0:	bc80      	pop	{r7}
 80027e2:	4770      	bx	lr

080027e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	3b01      	subs	r3, #1
 80027f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027f4:	d301      	bcc.n	80027fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027f6:	2301      	movs	r3, #1
 80027f8:	e00f      	b.n	800281a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002824 <SysTick_Config+0x40>)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	3b01      	subs	r3, #1
 8002800:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002802:	210f      	movs	r1, #15
 8002804:	f04f 30ff 	mov.w	r0, #4294967295
 8002808:	f7ff ff90 	bl	800272c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800280c:	4b05      	ldr	r3, [pc, #20]	@ (8002824 <SysTick_Config+0x40>)
 800280e:	2200      	movs	r2, #0
 8002810:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002812:	4b04      	ldr	r3, [pc, #16]	@ (8002824 <SysTick_Config+0x40>)
 8002814:	2207      	movs	r2, #7
 8002816:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	e000e010 	.word	0xe000e010

08002828 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f7ff ff2d 	bl	8002690 <__NVIC_SetPriorityGrouping>
}
 8002836:	bf00      	nop
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800283e:	b580      	push	{r7, lr}
 8002840:	b086      	sub	sp, #24
 8002842:	af00      	add	r7, sp, #0
 8002844:	4603      	mov	r3, r0
 8002846:	60b9      	str	r1, [r7, #8]
 8002848:	607a      	str	r2, [r7, #4]
 800284a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800284c:	2300      	movs	r3, #0
 800284e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002850:	f7ff ff42 	bl	80026d8 <__NVIC_GetPriorityGrouping>
 8002854:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	68b9      	ldr	r1, [r7, #8]
 800285a:	6978      	ldr	r0, [r7, #20]
 800285c:	f7ff ff90 	bl	8002780 <NVIC_EncodePriority>
 8002860:	4602      	mov	r2, r0
 8002862:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002866:	4611      	mov	r1, r2
 8002868:	4618      	mov	r0, r3
 800286a:	f7ff ff5f 	bl	800272c <__NVIC_SetPriority>
}
 800286e:	bf00      	nop
 8002870:	3718      	adds	r7, #24
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b082      	sub	sp, #8
 800287a:	af00      	add	r7, sp, #0
 800287c:	4603      	mov	r3, r0
 800287e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff ff35 	bl	80026f4 <__NVIC_EnableIRQ>
}
 800288a:	bf00      	nop
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b082      	sub	sp, #8
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f7ff ffa2 	bl	80027e4 <SysTick_Config>
 80028a0:	4603      	mov	r3, r0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
	...

080028ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b08b      	sub	sp, #44	@ 0x2c
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028b6:	2300      	movs	r3, #0
 80028b8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80028ba:	2300      	movs	r3, #0
 80028bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028be:	e161      	b.n	8002b84 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80028c0:	2201      	movs	r2, #1
 80028c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	69fa      	ldr	r2, [r7, #28]
 80028d0:	4013      	ands	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	429a      	cmp	r2, r3
 80028da:	f040 8150 	bne.w	8002b7e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	4a97      	ldr	r2, [pc, #604]	@ (8002b40 <HAL_GPIO_Init+0x294>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d05e      	beq.n	80029a6 <HAL_GPIO_Init+0xfa>
 80028e8:	4a95      	ldr	r2, [pc, #596]	@ (8002b40 <HAL_GPIO_Init+0x294>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d875      	bhi.n	80029da <HAL_GPIO_Init+0x12e>
 80028ee:	4a95      	ldr	r2, [pc, #596]	@ (8002b44 <HAL_GPIO_Init+0x298>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d058      	beq.n	80029a6 <HAL_GPIO_Init+0xfa>
 80028f4:	4a93      	ldr	r2, [pc, #588]	@ (8002b44 <HAL_GPIO_Init+0x298>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d86f      	bhi.n	80029da <HAL_GPIO_Init+0x12e>
 80028fa:	4a93      	ldr	r2, [pc, #588]	@ (8002b48 <HAL_GPIO_Init+0x29c>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d052      	beq.n	80029a6 <HAL_GPIO_Init+0xfa>
 8002900:	4a91      	ldr	r2, [pc, #580]	@ (8002b48 <HAL_GPIO_Init+0x29c>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d869      	bhi.n	80029da <HAL_GPIO_Init+0x12e>
 8002906:	4a91      	ldr	r2, [pc, #580]	@ (8002b4c <HAL_GPIO_Init+0x2a0>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d04c      	beq.n	80029a6 <HAL_GPIO_Init+0xfa>
 800290c:	4a8f      	ldr	r2, [pc, #572]	@ (8002b4c <HAL_GPIO_Init+0x2a0>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d863      	bhi.n	80029da <HAL_GPIO_Init+0x12e>
 8002912:	4a8f      	ldr	r2, [pc, #572]	@ (8002b50 <HAL_GPIO_Init+0x2a4>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d046      	beq.n	80029a6 <HAL_GPIO_Init+0xfa>
 8002918:	4a8d      	ldr	r2, [pc, #564]	@ (8002b50 <HAL_GPIO_Init+0x2a4>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d85d      	bhi.n	80029da <HAL_GPIO_Init+0x12e>
 800291e:	2b12      	cmp	r3, #18
 8002920:	d82a      	bhi.n	8002978 <HAL_GPIO_Init+0xcc>
 8002922:	2b12      	cmp	r3, #18
 8002924:	d859      	bhi.n	80029da <HAL_GPIO_Init+0x12e>
 8002926:	a201      	add	r2, pc, #4	@ (adr r2, 800292c <HAL_GPIO_Init+0x80>)
 8002928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800292c:	080029a7 	.word	0x080029a7
 8002930:	08002981 	.word	0x08002981
 8002934:	08002993 	.word	0x08002993
 8002938:	080029d5 	.word	0x080029d5
 800293c:	080029db 	.word	0x080029db
 8002940:	080029db 	.word	0x080029db
 8002944:	080029db 	.word	0x080029db
 8002948:	080029db 	.word	0x080029db
 800294c:	080029db 	.word	0x080029db
 8002950:	080029db 	.word	0x080029db
 8002954:	080029db 	.word	0x080029db
 8002958:	080029db 	.word	0x080029db
 800295c:	080029db 	.word	0x080029db
 8002960:	080029db 	.word	0x080029db
 8002964:	080029db 	.word	0x080029db
 8002968:	080029db 	.word	0x080029db
 800296c:	080029db 	.word	0x080029db
 8002970:	08002989 	.word	0x08002989
 8002974:	0800299d 	.word	0x0800299d
 8002978:	4a76      	ldr	r2, [pc, #472]	@ (8002b54 <HAL_GPIO_Init+0x2a8>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d013      	beq.n	80029a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800297e:	e02c      	b.n	80029da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	623b      	str	r3, [r7, #32]
          break;
 8002986:	e029      	b.n	80029dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	3304      	adds	r3, #4
 800298e:	623b      	str	r3, [r7, #32]
          break;
 8002990:	e024      	b.n	80029dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	3308      	adds	r3, #8
 8002998:	623b      	str	r3, [r7, #32]
          break;
 800299a:	e01f      	b.n	80029dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	330c      	adds	r3, #12
 80029a2:	623b      	str	r3, [r7, #32]
          break;
 80029a4:	e01a      	b.n	80029dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d102      	bne.n	80029b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80029ae:	2304      	movs	r3, #4
 80029b0:	623b      	str	r3, [r7, #32]
          break;
 80029b2:	e013      	b.n	80029dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d105      	bne.n	80029c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029bc:	2308      	movs	r3, #8
 80029be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	69fa      	ldr	r2, [r7, #28]
 80029c4:	611a      	str	r2, [r3, #16]
          break;
 80029c6:	e009      	b.n	80029dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029c8:	2308      	movs	r3, #8
 80029ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	69fa      	ldr	r2, [r7, #28]
 80029d0:	615a      	str	r2, [r3, #20]
          break;
 80029d2:	e003      	b.n	80029dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80029d4:	2300      	movs	r3, #0
 80029d6:	623b      	str	r3, [r7, #32]
          break;
 80029d8:	e000      	b.n	80029dc <HAL_GPIO_Init+0x130>
          break;
 80029da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	2bff      	cmp	r3, #255	@ 0xff
 80029e0:	d801      	bhi.n	80029e6 <HAL_GPIO_Init+0x13a>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	e001      	b.n	80029ea <HAL_GPIO_Init+0x13e>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	3304      	adds	r3, #4
 80029ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	2bff      	cmp	r3, #255	@ 0xff
 80029f0:	d802      	bhi.n	80029f8 <HAL_GPIO_Init+0x14c>
 80029f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	e002      	b.n	80029fe <HAL_GPIO_Init+0x152>
 80029f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029fa:	3b08      	subs	r3, #8
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	210f      	movs	r1, #15
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	fa01 f303 	lsl.w	r3, r1, r3
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	401a      	ands	r2, r3
 8002a10:	6a39      	ldr	r1, [r7, #32]
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	fa01 f303 	lsl.w	r3, r1, r3
 8002a18:	431a      	orrs	r2, r3
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f000 80a9 	beq.w	8002b7e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a2c:	4b4a      	ldr	r3, [pc, #296]	@ (8002b58 <HAL_GPIO_Init+0x2ac>)
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	4a49      	ldr	r2, [pc, #292]	@ (8002b58 <HAL_GPIO_Init+0x2ac>)
 8002a32:	f043 0301 	orr.w	r3, r3, #1
 8002a36:	6193      	str	r3, [r2, #24]
 8002a38:	4b47      	ldr	r3, [pc, #284]	@ (8002b58 <HAL_GPIO_Init+0x2ac>)
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	f003 0301 	and.w	r3, r3, #1
 8002a40:	60bb      	str	r3, [r7, #8]
 8002a42:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a44:	4a45      	ldr	r2, [pc, #276]	@ (8002b5c <HAL_GPIO_Init+0x2b0>)
 8002a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a48:	089b      	lsrs	r3, r3, #2
 8002a4a:	3302      	adds	r3, #2
 8002a4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a50:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a54:	f003 0303 	and.w	r3, r3, #3
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	220f      	movs	r2, #15
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	43db      	mvns	r3, r3
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	4013      	ands	r3, r2
 8002a66:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4a3d      	ldr	r2, [pc, #244]	@ (8002b60 <HAL_GPIO_Init+0x2b4>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d00d      	beq.n	8002a8c <HAL_GPIO_Init+0x1e0>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4a3c      	ldr	r2, [pc, #240]	@ (8002b64 <HAL_GPIO_Init+0x2b8>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d007      	beq.n	8002a88 <HAL_GPIO_Init+0x1dc>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4a3b      	ldr	r2, [pc, #236]	@ (8002b68 <HAL_GPIO_Init+0x2bc>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d101      	bne.n	8002a84 <HAL_GPIO_Init+0x1d8>
 8002a80:	2302      	movs	r3, #2
 8002a82:	e004      	b.n	8002a8e <HAL_GPIO_Init+0x1e2>
 8002a84:	2303      	movs	r3, #3
 8002a86:	e002      	b.n	8002a8e <HAL_GPIO_Init+0x1e2>
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e000      	b.n	8002a8e <HAL_GPIO_Init+0x1e2>
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a90:	f002 0203 	and.w	r2, r2, #3
 8002a94:	0092      	lsls	r2, r2, #2
 8002a96:	4093      	lsls	r3, r2
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a9e:	492f      	ldr	r1, [pc, #188]	@ (8002b5c <HAL_GPIO_Init+0x2b0>)
 8002aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa2:	089b      	lsrs	r3, r3, #2
 8002aa4:	3302      	adds	r3, #2
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d006      	beq.n	8002ac6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ab8:	4b2c      	ldr	r3, [pc, #176]	@ (8002b6c <HAL_GPIO_Init+0x2c0>)
 8002aba:	689a      	ldr	r2, [r3, #8]
 8002abc:	492b      	ldr	r1, [pc, #172]	@ (8002b6c <HAL_GPIO_Init+0x2c0>)
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	608b      	str	r3, [r1, #8]
 8002ac4:	e006      	b.n	8002ad4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002ac6:	4b29      	ldr	r3, [pc, #164]	@ (8002b6c <HAL_GPIO_Init+0x2c0>)
 8002ac8:	689a      	ldr	r2, [r3, #8]
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	43db      	mvns	r3, r3
 8002ace:	4927      	ldr	r1, [pc, #156]	@ (8002b6c <HAL_GPIO_Init+0x2c0>)
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d006      	beq.n	8002aee <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002ae0:	4b22      	ldr	r3, [pc, #136]	@ (8002b6c <HAL_GPIO_Init+0x2c0>)
 8002ae2:	68da      	ldr	r2, [r3, #12]
 8002ae4:	4921      	ldr	r1, [pc, #132]	@ (8002b6c <HAL_GPIO_Init+0x2c0>)
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	60cb      	str	r3, [r1, #12]
 8002aec:	e006      	b.n	8002afc <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002aee:	4b1f      	ldr	r3, [pc, #124]	@ (8002b6c <HAL_GPIO_Init+0x2c0>)
 8002af0:	68da      	ldr	r2, [r3, #12]
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	43db      	mvns	r3, r3
 8002af6:	491d      	ldr	r1, [pc, #116]	@ (8002b6c <HAL_GPIO_Init+0x2c0>)
 8002af8:	4013      	ands	r3, r2
 8002afa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d006      	beq.n	8002b16 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002b08:	4b18      	ldr	r3, [pc, #96]	@ (8002b6c <HAL_GPIO_Init+0x2c0>)
 8002b0a:	685a      	ldr	r2, [r3, #4]
 8002b0c:	4917      	ldr	r1, [pc, #92]	@ (8002b6c <HAL_GPIO_Init+0x2c0>)
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	604b      	str	r3, [r1, #4]
 8002b14:	e006      	b.n	8002b24 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b16:	4b15      	ldr	r3, [pc, #84]	@ (8002b6c <HAL_GPIO_Init+0x2c0>)
 8002b18:	685a      	ldr	r2, [r3, #4]
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	43db      	mvns	r3, r3
 8002b1e:	4913      	ldr	r1, [pc, #76]	@ (8002b6c <HAL_GPIO_Init+0x2c0>)
 8002b20:	4013      	ands	r3, r2
 8002b22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d01f      	beq.n	8002b70 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002b30:	4b0e      	ldr	r3, [pc, #56]	@ (8002b6c <HAL_GPIO_Init+0x2c0>)
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	490d      	ldr	r1, [pc, #52]	@ (8002b6c <HAL_GPIO_Init+0x2c0>)
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	600b      	str	r3, [r1, #0]
 8002b3c:	e01f      	b.n	8002b7e <HAL_GPIO_Init+0x2d2>
 8002b3e:	bf00      	nop
 8002b40:	10320000 	.word	0x10320000
 8002b44:	10310000 	.word	0x10310000
 8002b48:	10220000 	.word	0x10220000
 8002b4c:	10210000 	.word	0x10210000
 8002b50:	10120000 	.word	0x10120000
 8002b54:	10110000 	.word	0x10110000
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	40010000 	.word	0x40010000
 8002b60:	40010800 	.word	0x40010800
 8002b64:	40010c00 	.word	0x40010c00
 8002b68:	40011000 	.word	0x40011000
 8002b6c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b70:	4b0b      	ldr	r3, [pc, #44]	@ (8002ba0 <HAL_GPIO_Init+0x2f4>)
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	43db      	mvns	r3, r3
 8002b78:	4909      	ldr	r1, [pc, #36]	@ (8002ba0 <HAL_GPIO_Init+0x2f4>)
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b80:	3301      	adds	r3, #1
 8002b82:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f47f ae96 	bne.w	80028c0 <HAL_GPIO_Init+0x14>
  }
}
 8002b94:	bf00      	nop
 8002b96:	bf00      	nop
 8002b98:	372c      	adds	r7, #44	@ 0x2c
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bc80      	pop	{r7}
 8002b9e:	4770      	bx	lr
 8002ba0:	40010400 	.word	0x40010400

08002ba4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	460b      	mov	r3, r1
 8002bae:	807b      	strh	r3, [r7, #2]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002bb4:	787b      	ldrb	r3, [r7, #1]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d003      	beq.n	8002bc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bba:	887a      	ldrh	r2, [r7, #2]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002bc0:	e003      	b.n	8002bca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002bc2:	887b      	ldrh	r3, [r7, #2]
 8002bc4:	041a      	lsls	r2, r3, #16
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	611a      	str	r2, [r3, #16]
}
 8002bca:	bf00      	nop
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bc80      	pop	{r7}
 8002bd2:	4770      	bx	lr

08002bd4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	460b      	mov	r3, r1
 8002bde:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002be6:	887a      	ldrh	r2, [r7, #2]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	4013      	ands	r3, r2
 8002bec:	041a      	lsls	r2, r3, #16
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	43d9      	mvns	r1, r3
 8002bf2:	887b      	ldrh	r3, [r7, #2]
 8002bf4:	400b      	ands	r3, r1
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	611a      	str	r2, [r3, #16]
}
 8002bfc:	bf00      	nop
 8002bfe:	3714      	adds	r7, #20
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bc80      	pop	{r7}
 8002c04:	4770      	bx	lr
	...

08002c08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d101      	bne.n	8002c1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e272      	b.n	8003100 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f000 8087 	beq.w	8002d36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c28:	4b92      	ldr	r3, [pc, #584]	@ (8002e74 <HAL_RCC_OscConfig+0x26c>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f003 030c 	and.w	r3, r3, #12
 8002c30:	2b04      	cmp	r3, #4
 8002c32:	d00c      	beq.n	8002c4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c34:	4b8f      	ldr	r3, [pc, #572]	@ (8002e74 <HAL_RCC_OscConfig+0x26c>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f003 030c 	and.w	r3, r3, #12
 8002c3c:	2b08      	cmp	r3, #8
 8002c3e:	d112      	bne.n	8002c66 <HAL_RCC_OscConfig+0x5e>
 8002c40:	4b8c      	ldr	r3, [pc, #560]	@ (8002e74 <HAL_RCC_OscConfig+0x26c>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c4c:	d10b      	bne.n	8002c66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c4e:	4b89      	ldr	r3, [pc, #548]	@ (8002e74 <HAL_RCC_OscConfig+0x26c>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d06c      	beq.n	8002d34 <HAL_RCC_OscConfig+0x12c>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d168      	bne.n	8002d34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e24c      	b.n	8003100 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c6e:	d106      	bne.n	8002c7e <HAL_RCC_OscConfig+0x76>
 8002c70:	4b80      	ldr	r3, [pc, #512]	@ (8002e74 <HAL_RCC_OscConfig+0x26c>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a7f      	ldr	r2, [pc, #508]	@ (8002e74 <HAL_RCC_OscConfig+0x26c>)
 8002c76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c7a:	6013      	str	r3, [r2, #0]
 8002c7c:	e02e      	b.n	8002cdc <HAL_RCC_OscConfig+0xd4>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10c      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x98>
 8002c86:	4b7b      	ldr	r3, [pc, #492]	@ (8002e74 <HAL_RCC_OscConfig+0x26c>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a7a      	ldr	r2, [pc, #488]	@ (8002e74 <HAL_RCC_OscConfig+0x26c>)
 8002c8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c90:	6013      	str	r3, [r2, #0]
 8002c92:	4b78      	ldr	r3, [pc, #480]	@ (8002e74 <HAL_RCC_OscConfig+0x26c>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a77      	ldr	r2, [pc, #476]	@ (8002e74 <HAL_RCC_OscConfig+0x26c>)
 8002c98:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c9c:	6013      	str	r3, [r2, #0]
 8002c9e:	e01d      	b.n	8002cdc <HAL_RCC_OscConfig+0xd4>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ca8:	d10c      	bne.n	8002cc4 <HAL_RCC_OscConfig+0xbc>
 8002caa:	4b72      	ldr	r3, [pc, #456]	@ (8002e74 <HAL_RCC_OscConfig+0x26c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a71      	ldr	r2, [pc, #452]	@ (8002e74 <HAL_RCC_OscConfig+0x26c>)
 8002cb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cb4:	6013      	str	r3, [r2, #0]
 8002cb6:	4b6f      	ldr	r3, [pc, #444]	@ (8002e74 <HAL_RCC_OscConfig+0x26c>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a6e      	ldr	r2, [pc, #440]	@ (8002e74 <HAL_RCC_OscConfig+0x26c>)
 8002cbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cc0:	6013      	str	r3, [r2, #0]
 8002cc2:	e00b      	b.n	8002cdc <HAL_RCC_OscConfig+0xd4>
 8002cc4:	4b6b      	ldr	r3, [pc, #428]	@ (8002e74 <HAL_RCC_OscConfig+0x26c>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a6a      	ldr	r2, [pc, #424]	@ (8002e74 <HAL_RCC_OscConfig+0x26c>)
 8002cca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cce:	6013      	str	r3, [r2, #0]
 8002cd0:	4b68      	ldr	r3, [pc, #416]	@ (8002e74 <HAL_RCC_OscConfig+0x26c>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a67      	ldr	r2, [pc, #412]	@ (8002e74 <HAL_RCC_OscConfig+0x26c>)
 8002cd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cda:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d013      	beq.n	8002d0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce4:	f7fe fe66 	bl	80019b4 <HAL_GetTick>
 8002ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cea:	e008      	b.n	8002cfe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cec:	f7fe fe62 	bl	80019b4 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b64      	cmp	r3, #100	@ 0x64
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e200      	b.n	8003100 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cfe:	4b5d      	ldr	r3, [pc, #372]	@ (8002e74 <HAL_RCC_OscConfig+0x26c>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d0f0      	beq.n	8002cec <HAL_RCC_OscConfig+0xe4>
 8002d0a:	e014      	b.n	8002d36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d0c:	f7fe fe52 	bl	80019b4 <HAL_GetTick>
 8002d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d12:	e008      	b.n	8002d26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d14:	f7fe fe4e 	bl	80019b4 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b64      	cmp	r3, #100	@ 0x64
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e1ec      	b.n	8003100 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d26:	4b53      	ldr	r3, [pc, #332]	@ (8002e74 <HAL_RCC_OscConfig+0x26c>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1f0      	bne.n	8002d14 <HAL_RCC_OscConfig+0x10c>
 8002d32:	e000      	b.n	8002d36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d063      	beq.n	8002e0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d42:	4b4c      	ldr	r3, [pc, #304]	@ (8002e74 <HAL_RCC_OscConfig+0x26c>)
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f003 030c 	and.w	r3, r3, #12
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00b      	beq.n	8002d66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d4e:	4b49      	ldr	r3, [pc, #292]	@ (8002e74 <HAL_RCC_OscConfig+0x26c>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f003 030c 	and.w	r3, r3, #12
 8002d56:	2b08      	cmp	r3, #8
 8002d58:	d11c      	bne.n	8002d94 <HAL_RCC_OscConfig+0x18c>
 8002d5a:	4b46      	ldr	r3, [pc, #280]	@ (8002e74 <HAL_RCC_OscConfig+0x26c>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d116      	bne.n	8002d94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d66:	4b43      	ldr	r3, [pc, #268]	@ (8002e74 <HAL_RCC_OscConfig+0x26c>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d005      	beq.n	8002d7e <HAL_RCC_OscConfig+0x176>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d001      	beq.n	8002d7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e1c0      	b.n	8003100 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d7e:	4b3d      	ldr	r3, [pc, #244]	@ (8002e74 <HAL_RCC_OscConfig+0x26c>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	4939      	ldr	r1, [pc, #228]	@ (8002e74 <HAL_RCC_OscConfig+0x26c>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d92:	e03a      	b.n	8002e0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d020      	beq.n	8002dde <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d9c:	4b36      	ldr	r3, [pc, #216]	@ (8002e78 <HAL_RCC_OscConfig+0x270>)
 8002d9e:	2201      	movs	r2, #1
 8002da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da2:	f7fe fe07 	bl	80019b4 <HAL_GetTick>
 8002da6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da8:	e008      	b.n	8002dbc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002daa:	f7fe fe03 	bl	80019b4 <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d901      	bls.n	8002dbc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e1a1      	b.n	8003100 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dbc:	4b2d      	ldr	r3, [pc, #180]	@ (8002e74 <HAL_RCC_OscConfig+0x26c>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d0f0      	beq.n	8002daa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dc8:	4b2a      	ldr	r3, [pc, #168]	@ (8002e74 <HAL_RCC_OscConfig+0x26c>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	695b      	ldr	r3, [r3, #20]
 8002dd4:	00db      	lsls	r3, r3, #3
 8002dd6:	4927      	ldr	r1, [pc, #156]	@ (8002e74 <HAL_RCC_OscConfig+0x26c>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	600b      	str	r3, [r1, #0]
 8002ddc:	e015      	b.n	8002e0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dde:	4b26      	ldr	r3, [pc, #152]	@ (8002e78 <HAL_RCC_OscConfig+0x270>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de4:	f7fe fde6 	bl	80019b4 <HAL_GetTick>
 8002de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dec:	f7fe fde2 	bl	80019b4 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e180      	b.n	8003100 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dfe:	4b1d      	ldr	r3, [pc, #116]	@ (8002e74 <HAL_RCC_OscConfig+0x26c>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1f0      	bne.n	8002dec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0308 	and.w	r3, r3, #8
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d03a      	beq.n	8002e8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d019      	beq.n	8002e52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e1e:	4b17      	ldr	r3, [pc, #92]	@ (8002e7c <HAL_RCC_OscConfig+0x274>)
 8002e20:	2201      	movs	r2, #1
 8002e22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e24:	f7fe fdc6 	bl	80019b4 <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e2c:	f7fe fdc2 	bl	80019b4 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e160      	b.n	8003100 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8002e74 <HAL_RCC_OscConfig+0x26c>)
 8002e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d0f0      	beq.n	8002e2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e4a:	2001      	movs	r0, #1
 8002e4c:	f000 fa9c 	bl	8003388 <RCC_Delay>
 8002e50:	e01c      	b.n	8002e8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e52:	4b0a      	ldr	r3, [pc, #40]	@ (8002e7c <HAL_RCC_OscConfig+0x274>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e58:	f7fe fdac 	bl	80019b4 <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e5e:	e00f      	b.n	8002e80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e60:	f7fe fda8 	bl	80019b4 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d908      	bls.n	8002e80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e146      	b.n	8003100 <HAL_RCC_OscConfig+0x4f8>
 8002e72:	bf00      	nop
 8002e74:	40021000 	.word	0x40021000
 8002e78:	42420000 	.word	0x42420000
 8002e7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e80:	4b92      	ldr	r3, [pc, #584]	@ (80030cc <HAL_RCC_OscConfig+0x4c4>)
 8002e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1e9      	bne.n	8002e60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0304 	and.w	r3, r3, #4
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f000 80a6 	beq.w	8002fe6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e9e:	4b8b      	ldr	r3, [pc, #556]	@ (80030cc <HAL_RCC_OscConfig+0x4c4>)
 8002ea0:	69db      	ldr	r3, [r3, #28]
 8002ea2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d10d      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eaa:	4b88      	ldr	r3, [pc, #544]	@ (80030cc <HAL_RCC_OscConfig+0x4c4>)
 8002eac:	69db      	ldr	r3, [r3, #28]
 8002eae:	4a87      	ldr	r2, [pc, #540]	@ (80030cc <HAL_RCC_OscConfig+0x4c4>)
 8002eb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002eb4:	61d3      	str	r3, [r2, #28]
 8002eb6:	4b85      	ldr	r3, [pc, #532]	@ (80030cc <HAL_RCC_OscConfig+0x4c4>)
 8002eb8:	69db      	ldr	r3, [r3, #28]
 8002eba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ebe:	60bb      	str	r3, [r7, #8]
 8002ec0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ec6:	4b82      	ldr	r3, [pc, #520]	@ (80030d0 <HAL_RCC_OscConfig+0x4c8>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d118      	bne.n	8002f04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ed2:	4b7f      	ldr	r3, [pc, #508]	@ (80030d0 <HAL_RCC_OscConfig+0x4c8>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a7e      	ldr	r2, [pc, #504]	@ (80030d0 <HAL_RCC_OscConfig+0x4c8>)
 8002ed8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002edc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ede:	f7fe fd69 	bl	80019b4 <HAL_GetTick>
 8002ee2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee4:	e008      	b.n	8002ef8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ee6:	f7fe fd65 	bl	80019b4 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b64      	cmp	r3, #100	@ 0x64
 8002ef2:	d901      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e103      	b.n	8003100 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef8:	4b75      	ldr	r3, [pc, #468]	@ (80030d0 <HAL_RCC_OscConfig+0x4c8>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d0f0      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d106      	bne.n	8002f1a <HAL_RCC_OscConfig+0x312>
 8002f0c:	4b6f      	ldr	r3, [pc, #444]	@ (80030cc <HAL_RCC_OscConfig+0x4c4>)
 8002f0e:	6a1b      	ldr	r3, [r3, #32]
 8002f10:	4a6e      	ldr	r2, [pc, #440]	@ (80030cc <HAL_RCC_OscConfig+0x4c4>)
 8002f12:	f043 0301 	orr.w	r3, r3, #1
 8002f16:	6213      	str	r3, [r2, #32]
 8002f18:	e02d      	b.n	8002f76 <HAL_RCC_OscConfig+0x36e>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d10c      	bne.n	8002f3c <HAL_RCC_OscConfig+0x334>
 8002f22:	4b6a      	ldr	r3, [pc, #424]	@ (80030cc <HAL_RCC_OscConfig+0x4c4>)
 8002f24:	6a1b      	ldr	r3, [r3, #32]
 8002f26:	4a69      	ldr	r2, [pc, #420]	@ (80030cc <HAL_RCC_OscConfig+0x4c4>)
 8002f28:	f023 0301 	bic.w	r3, r3, #1
 8002f2c:	6213      	str	r3, [r2, #32]
 8002f2e:	4b67      	ldr	r3, [pc, #412]	@ (80030cc <HAL_RCC_OscConfig+0x4c4>)
 8002f30:	6a1b      	ldr	r3, [r3, #32]
 8002f32:	4a66      	ldr	r2, [pc, #408]	@ (80030cc <HAL_RCC_OscConfig+0x4c4>)
 8002f34:	f023 0304 	bic.w	r3, r3, #4
 8002f38:	6213      	str	r3, [r2, #32]
 8002f3a:	e01c      	b.n	8002f76 <HAL_RCC_OscConfig+0x36e>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	2b05      	cmp	r3, #5
 8002f42:	d10c      	bne.n	8002f5e <HAL_RCC_OscConfig+0x356>
 8002f44:	4b61      	ldr	r3, [pc, #388]	@ (80030cc <HAL_RCC_OscConfig+0x4c4>)
 8002f46:	6a1b      	ldr	r3, [r3, #32]
 8002f48:	4a60      	ldr	r2, [pc, #384]	@ (80030cc <HAL_RCC_OscConfig+0x4c4>)
 8002f4a:	f043 0304 	orr.w	r3, r3, #4
 8002f4e:	6213      	str	r3, [r2, #32]
 8002f50:	4b5e      	ldr	r3, [pc, #376]	@ (80030cc <HAL_RCC_OscConfig+0x4c4>)
 8002f52:	6a1b      	ldr	r3, [r3, #32]
 8002f54:	4a5d      	ldr	r2, [pc, #372]	@ (80030cc <HAL_RCC_OscConfig+0x4c4>)
 8002f56:	f043 0301 	orr.w	r3, r3, #1
 8002f5a:	6213      	str	r3, [r2, #32]
 8002f5c:	e00b      	b.n	8002f76 <HAL_RCC_OscConfig+0x36e>
 8002f5e:	4b5b      	ldr	r3, [pc, #364]	@ (80030cc <HAL_RCC_OscConfig+0x4c4>)
 8002f60:	6a1b      	ldr	r3, [r3, #32]
 8002f62:	4a5a      	ldr	r2, [pc, #360]	@ (80030cc <HAL_RCC_OscConfig+0x4c4>)
 8002f64:	f023 0301 	bic.w	r3, r3, #1
 8002f68:	6213      	str	r3, [r2, #32]
 8002f6a:	4b58      	ldr	r3, [pc, #352]	@ (80030cc <HAL_RCC_OscConfig+0x4c4>)
 8002f6c:	6a1b      	ldr	r3, [r3, #32]
 8002f6e:	4a57      	ldr	r2, [pc, #348]	@ (80030cc <HAL_RCC_OscConfig+0x4c4>)
 8002f70:	f023 0304 	bic.w	r3, r3, #4
 8002f74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d015      	beq.n	8002faa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f7e:	f7fe fd19 	bl	80019b4 <HAL_GetTick>
 8002f82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f84:	e00a      	b.n	8002f9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f86:	f7fe fd15 	bl	80019b4 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e0b1      	b.n	8003100 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f9c:	4b4b      	ldr	r3, [pc, #300]	@ (80030cc <HAL_RCC_OscConfig+0x4c4>)
 8002f9e:	6a1b      	ldr	r3, [r3, #32]
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d0ee      	beq.n	8002f86 <HAL_RCC_OscConfig+0x37e>
 8002fa8:	e014      	b.n	8002fd4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002faa:	f7fe fd03 	bl	80019b4 <HAL_GetTick>
 8002fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fb0:	e00a      	b.n	8002fc8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fb2:	f7fe fcff 	bl	80019b4 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d901      	bls.n	8002fc8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e09b      	b.n	8003100 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fc8:	4b40      	ldr	r3, [pc, #256]	@ (80030cc <HAL_RCC_OscConfig+0x4c4>)
 8002fca:	6a1b      	ldr	r3, [r3, #32]
 8002fcc:	f003 0302 	and.w	r3, r3, #2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1ee      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002fd4:	7dfb      	ldrb	r3, [r7, #23]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d105      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fda:	4b3c      	ldr	r3, [pc, #240]	@ (80030cc <HAL_RCC_OscConfig+0x4c4>)
 8002fdc:	69db      	ldr	r3, [r3, #28]
 8002fde:	4a3b      	ldr	r2, [pc, #236]	@ (80030cc <HAL_RCC_OscConfig+0x4c4>)
 8002fe0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fe4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f000 8087 	beq.w	80030fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ff0:	4b36      	ldr	r3, [pc, #216]	@ (80030cc <HAL_RCC_OscConfig+0x4c4>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f003 030c 	and.w	r3, r3, #12
 8002ff8:	2b08      	cmp	r3, #8
 8002ffa:	d061      	beq.n	80030c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	69db      	ldr	r3, [r3, #28]
 8003000:	2b02      	cmp	r3, #2
 8003002:	d146      	bne.n	8003092 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003004:	4b33      	ldr	r3, [pc, #204]	@ (80030d4 <HAL_RCC_OscConfig+0x4cc>)
 8003006:	2200      	movs	r2, #0
 8003008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800300a:	f7fe fcd3 	bl	80019b4 <HAL_GetTick>
 800300e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003010:	e008      	b.n	8003024 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003012:	f7fe fccf 	bl	80019b4 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d901      	bls.n	8003024 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e06d      	b.n	8003100 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003024:	4b29      	ldr	r3, [pc, #164]	@ (80030cc <HAL_RCC_OscConfig+0x4c4>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d1f0      	bne.n	8003012 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a1b      	ldr	r3, [r3, #32]
 8003034:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003038:	d108      	bne.n	800304c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800303a:	4b24      	ldr	r3, [pc, #144]	@ (80030cc <HAL_RCC_OscConfig+0x4c4>)
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	4921      	ldr	r1, [pc, #132]	@ (80030cc <HAL_RCC_OscConfig+0x4c4>)
 8003048:	4313      	orrs	r3, r2
 800304a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800304c:	4b1f      	ldr	r3, [pc, #124]	@ (80030cc <HAL_RCC_OscConfig+0x4c4>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a19      	ldr	r1, [r3, #32]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800305c:	430b      	orrs	r3, r1
 800305e:	491b      	ldr	r1, [pc, #108]	@ (80030cc <HAL_RCC_OscConfig+0x4c4>)
 8003060:	4313      	orrs	r3, r2
 8003062:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003064:	4b1b      	ldr	r3, [pc, #108]	@ (80030d4 <HAL_RCC_OscConfig+0x4cc>)
 8003066:	2201      	movs	r2, #1
 8003068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800306a:	f7fe fca3 	bl	80019b4 <HAL_GetTick>
 800306e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003070:	e008      	b.n	8003084 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003072:	f7fe fc9f 	bl	80019b4 <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	2b02      	cmp	r3, #2
 800307e:	d901      	bls.n	8003084 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e03d      	b.n	8003100 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003084:	4b11      	ldr	r3, [pc, #68]	@ (80030cc <HAL_RCC_OscConfig+0x4c4>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d0f0      	beq.n	8003072 <HAL_RCC_OscConfig+0x46a>
 8003090:	e035      	b.n	80030fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003092:	4b10      	ldr	r3, [pc, #64]	@ (80030d4 <HAL_RCC_OscConfig+0x4cc>)
 8003094:	2200      	movs	r2, #0
 8003096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003098:	f7fe fc8c 	bl	80019b4 <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800309e:	e008      	b.n	80030b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030a0:	f7fe fc88 	bl	80019b4 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e026      	b.n	8003100 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030b2:	4b06      	ldr	r3, [pc, #24]	@ (80030cc <HAL_RCC_OscConfig+0x4c4>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1f0      	bne.n	80030a0 <HAL_RCC_OscConfig+0x498>
 80030be:	e01e      	b.n	80030fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	69db      	ldr	r3, [r3, #28]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d107      	bne.n	80030d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e019      	b.n	8003100 <HAL_RCC_OscConfig+0x4f8>
 80030cc:	40021000 	.word	0x40021000
 80030d0:	40007000 	.word	0x40007000
 80030d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80030d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003108 <HAL_RCC_OscConfig+0x500>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a1b      	ldr	r3, [r3, #32]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d106      	bne.n	80030fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d001      	beq.n	80030fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e000      	b.n	8003100 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	3718      	adds	r7, #24
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	40021000 	.word	0x40021000

0800310c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d101      	bne.n	8003120 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e0d0      	b.n	80032c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003120:	4b6a      	ldr	r3, [pc, #424]	@ (80032cc <HAL_RCC_ClockConfig+0x1c0>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0307 	and.w	r3, r3, #7
 8003128:	683a      	ldr	r2, [r7, #0]
 800312a:	429a      	cmp	r2, r3
 800312c:	d910      	bls.n	8003150 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800312e:	4b67      	ldr	r3, [pc, #412]	@ (80032cc <HAL_RCC_ClockConfig+0x1c0>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f023 0207 	bic.w	r2, r3, #7
 8003136:	4965      	ldr	r1, [pc, #404]	@ (80032cc <HAL_RCC_ClockConfig+0x1c0>)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	4313      	orrs	r3, r2
 800313c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800313e:	4b63      	ldr	r3, [pc, #396]	@ (80032cc <HAL_RCC_ClockConfig+0x1c0>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0307 	and.w	r3, r3, #7
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	429a      	cmp	r2, r3
 800314a:	d001      	beq.n	8003150 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e0b8      	b.n	80032c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0302 	and.w	r3, r3, #2
 8003158:	2b00      	cmp	r3, #0
 800315a:	d020      	beq.n	800319e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0304 	and.w	r3, r3, #4
 8003164:	2b00      	cmp	r3, #0
 8003166:	d005      	beq.n	8003174 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003168:	4b59      	ldr	r3, [pc, #356]	@ (80032d0 <HAL_RCC_ClockConfig+0x1c4>)
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	4a58      	ldr	r2, [pc, #352]	@ (80032d0 <HAL_RCC_ClockConfig+0x1c4>)
 800316e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003172:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0308 	and.w	r3, r3, #8
 800317c:	2b00      	cmp	r3, #0
 800317e:	d005      	beq.n	800318c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003180:	4b53      	ldr	r3, [pc, #332]	@ (80032d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	4a52      	ldr	r2, [pc, #328]	@ (80032d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003186:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800318a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800318c:	4b50      	ldr	r3, [pc, #320]	@ (80032d0 <HAL_RCC_ClockConfig+0x1c4>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	494d      	ldr	r1, [pc, #308]	@ (80032d0 <HAL_RCC_ClockConfig+0x1c4>)
 800319a:	4313      	orrs	r3, r2
 800319c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d040      	beq.n	800322c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d107      	bne.n	80031c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031b2:	4b47      	ldr	r3, [pc, #284]	@ (80032d0 <HAL_RCC_ClockConfig+0x1c4>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d115      	bne.n	80031ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e07f      	b.n	80032c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d107      	bne.n	80031da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ca:	4b41      	ldr	r3, [pc, #260]	@ (80032d0 <HAL_RCC_ClockConfig+0x1c4>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d109      	bne.n	80031ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e073      	b.n	80032c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031da:	4b3d      	ldr	r3, [pc, #244]	@ (80032d0 <HAL_RCC_ClockConfig+0x1c4>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e06b      	b.n	80032c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031ea:	4b39      	ldr	r3, [pc, #228]	@ (80032d0 <HAL_RCC_ClockConfig+0x1c4>)
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f023 0203 	bic.w	r2, r3, #3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	4936      	ldr	r1, [pc, #216]	@ (80032d0 <HAL_RCC_ClockConfig+0x1c4>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031fc:	f7fe fbda 	bl	80019b4 <HAL_GetTick>
 8003200:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003202:	e00a      	b.n	800321a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003204:	f7fe fbd6 	bl	80019b4 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003212:	4293      	cmp	r3, r2
 8003214:	d901      	bls.n	800321a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e053      	b.n	80032c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800321a:	4b2d      	ldr	r3, [pc, #180]	@ (80032d0 <HAL_RCC_ClockConfig+0x1c4>)
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f003 020c 	and.w	r2, r3, #12
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	429a      	cmp	r2, r3
 800322a:	d1eb      	bne.n	8003204 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800322c:	4b27      	ldr	r3, [pc, #156]	@ (80032cc <HAL_RCC_ClockConfig+0x1c0>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0307 	and.w	r3, r3, #7
 8003234:	683a      	ldr	r2, [r7, #0]
 8003236:	429a      	cmp	r2, r3
 8003238:	d210      	bcs.n	800325c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800323a:	4b24      	ldr	r3, [pc, #144]	@ (80032cc <HAL_RCC_ClockConfig+0x1c0>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f023 0207 	bic.w	r2, r3, #7
 8003242:	4922      	ldr	r1, [pc, #136]	@ (80032cc <HAL_RCC_ClockConfig+0x1c0>)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	4313      	orrs	r3, r2
 8003248:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800324a:	4b20      	ldr	r3, [pc, #128]	@ (80032cc <HAL_RCC_ClockConfig+0x1c0>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0307 	and.w	r3, r3, #7
 8003252:	683a      	ldr	r2, [r7, #0]
 8003254:	429a      	cmp	r2, r3
 8003256:	d001      	beq.n	800325c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e032      	b.n	80032c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0304 	and.w	r3, r3, #4
 8003264:	2b00      	cmp	r3, #0
 8003266:	d008      	beq.n	800327a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003268:	4b19      	ldr	r3, [pc, #100]	@ (80032d0 <HAL_RCC_ClockConfig+0x1c4>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	4916      	ldr	r1, [pc, #88]	@ (80032d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003276:	4313      	orrs	r3, r2
 8003278:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0308 	and.w	r3, r3, #8
 8003282:	2b00      	cmp	r3, #0
 8003284:	d009      	beq.n	800329a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003286:	4b12      	ldr	r3, [pc, #72]	@ (80032d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	490e      	ldr	r1, [pc, #56]	@ (80032d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003296:	4313      	orrs	r3, r2
 8003298:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800329a:	f000 f821 	bl	80032e0 <HAL_RCC_GetSysClockFreq>
 800329e:	4602      	mov	r2, r0
 80032a0:	4b0b      	ldr	r3, [pc, #44]	@ (80032d0 <HAL_RCC_ClockConfig+0x1c4>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	091b      	lsrs	r3, r3, #4
 80032a6:	f003 030f 	and.w	r3, r3, #15
 80032aa:	490a      	ldr	r1, [pc, #40]	@ (80032d4 <HAL_RCC_ClockConfig+0x1c8>)
 80032ac:	5ccb      	ldrb	r3, [r1, r3]
 80032ae:	fa22 f303 	lsr.w	r3, r2, r3
 80032b2:	4a09      	ldr	r2, [pc, #36]	@ (80032d8 <HAL_RCC_ClockConfig+0x1cc>)
 80032b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032b6:	4b09      	ldr	r3, [pc, #36]	@ (80032dc <HAL_RCC_ClockConfig+0x1d0>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7fe fb38 	bl	8001930 <HAL_InitTick>

  return HAL_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3710      	adds	r7, #16
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	40022000 	.word	0x40022000
 80032d0:	40021000 	.word	0x40021000
 80032d4:	08003f98 	.word	0x08003f98
 80032d8:	20000000 	.word	0x20000000
 80032dc:	20000004 	.word	0x20000004

080032e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b087      	sub	sp, #28
 80032e4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032e6:	2300      	movs	r3, #0
 80032e8:	60fb      	str	r3, [r7, #12]
 80032ea:	2300      	movs	r3, #0
 80032ec:	60bb      	str	r3, [r7, #8]
 80032ee:	2300      	movs	r3, #0
 80032f0:	617b      	str	r3, [r7, #20]
 80032f2:	2300      	movs	r3, #0
 80032f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80032f6:	2300      	movs	r3, #0
 80032f8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80032fa:	4b1e      	ldr	r3, [pc, #120]	@ (8003374 <HAL_RCC_GetSysClockFreq+0x94>)
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f003 030c 	and.w	r3, r3, #12
 8003306:	2b04      	cmp	r3, #4
 8003308:	d002      	beq.n	8003310 <HAL_RCC_GetSysClockFreq+0x30>
 800330a:	2b08      	cmp	r3, #8
 800330c:	d003      	beq.n	8003316 <HAL_RCC_GetSysClockFreq+0x36>
 800330e:	e027      	b.n	8003360 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003310:	4b19      	ldr	r3, [pc, #100]	@ (8003378 <HAL_RCC_GetSysClockFreq+0x98>)
 8003312:	613b      	str	r3, [r7, #16]
      break;
 8003314:	e027      	b.n	8003366 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	0c9b      	lsrs	r3, r3, #18
 800331a:	f003 030f 	and.w	r3, r3, #15
 800331e:	4a17      	ldr	r2, [pc, #92]	@ (800337c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003320:	5cd3      	ldrb	r3, [r2, r3]
 8003322:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d010      	beq.n	8003350 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800332e:	4b11      	ldr	r3, [pc, #68]	@ (8003374 <HAL_RCC_GetSysClockFreq+0x94>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	0c5b      	lsrs	r3, r3, #17
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	4a11      	ldr	r2, [pc, #68]	@ (8003380 <HAL_RCC_GetSysClockFreq+0xa0>)
 800333a:	5cd3      	ldrb	r3, [r2, r3]
 800333c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a0d      	ldr	r2, [pc, #52]	@ (8003378 <HAL_RCC_GetSysClockFreq+0x98>)
 8003342:	fb03 f202 	mul.w	r2, r3, r2
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	fbb2 f3f3 	udiv	r3, r2, r3
 800334c:	617b      	str	r3, [r7, #20]
 800334e:	e004      	b.n	800335a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a0c      	ldr	r2, [pc, #48]	@ (8003384 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003354:	fb02 f303 	mul.w	r3, r2, r3
 8003358:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	613b      	str	r3, [r7, #16]
      break;
 800335e:	e002      	b.n	8003366 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003360:	4b05      	ldr	r3, [pc, #20]	@ (8003378 <HAL_RCC_GetSysClockFreq+0x98>)
 8003362:	613b      	str	r3, [r7, #16]
      break;
 8003364:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003366:	693b      	ldr	r3, [r7, #16]
}
 8003368:	4618      	mov	r0, r3
 800336a:	371c      	adds	r7, #28
 800336c:	46bd      	mov	sp, r7
 800336e:	bc80      	pop	{r7}
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	40021000 	.word	0x40021000
 8003378:	007a1200 	.word	0x007a1200
 800337c:	08003fa8 	.word	0x08003fa8
 8003380:	08003fb8 	.word	0x08003fb8
 8003384:	003d0900 	.word	0x003d0900

08003388 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003388:	b480      	push	{r7}
 800338a:	b085      	sub	sp, #20
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003390:	4b0a      	ldr	r3, [pc, #40]	@ (80033bc <RCC_Delay+0x34>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a0a      	ldr	r2, [pc, #40]	@ (80033c0 <RCC_Delay+0x38>)
 8003396:	fba2 2303 	umull	r2, r3, r2, r3
 800339a:	0a5b      	lsrs	r3, r3, #9
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	fb02 f303 	mul.w	r3, r2, r3
 80033a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80033a4:	bf00      	nop
  }
  while (Delay --);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	1e5a      	subs	r2, r3, #1
 80033aa:	60fa      	str	r2, [r7, #12]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d1f9      	bne.n	80033a4 <RCC_Delay+0x1c>
}
 80033b0:	bf00      	nop
 80033b2:	bf00      	nop
 80033b4:	3714      	adds	r7, #20
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bc80      	pop	{r7}
 80033ba:	4770      	bx	lr
 80033bc:	20000000 	.word	0x20000000
 80033c0:	10624dd3 	.word	0x10624dd3

080033c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d101      	bne.n	80033d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e041      	b.n	800345a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d106      	bne.n	80033f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f7fe f9b2 	bl	8001754 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2202      	movs	r2, #2
 80033f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	3304      	adds	r3, #4
 8003400:	4619      	mov	r1, r3
 8003402:	4610      	mov	r0, r2
 8003404:	f000 fac6 	bl	8003994 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
	...

08003464 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d109      	bne.n	8003488 <HAL_TIM_PWM_Start+0x24>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800347a:	b2db      	uxtb	r3, r3
 800347c:	2b01      	cmp	r3, #1
 800347e:	bf14      	ite	ne
 8003480:	2301      	movne	r3, #1
 8003482:	2300      	moveq	r3, #0
 8003484:	b2db      	uxtb	r3, r3
 8003486:	e022      	b.n	80034ce <HAL_TIM_PWM_Start+0x6a>
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	2b04      	cmp	r3, #4
 800348c:	d109      	bne.n	80034a2 <HAL_TIM_PWM_Start+0x3e>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b01      	cmp	r3, #1
 8003498:	bf14      	ite	ne
 800349a:	2301      	movne	r3, #1
 800349c:	2300      	moveq	r3, #0
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	e015      	b.n	80034ce <HAL_TIM_PWM_Start+0x6a>
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	2b08      	cmp	r3, #8
 80034a6:	d109      	bne.n	80034bc <HAL_TIM_PWM_Start+0x58>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	bf14      	ite	ne
 80034b4:	2301      	movne	r3, #1
 80034b6:	2300      	moveq	r3, #0
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	e008      	b.n	80034ce <HAL_TIM_PWM_Start+0x6a>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	bf14      	ite	ne
 80034c8:	2301      	movne	r3, #1
 80034ca:	2300      	moveq	r3, #0
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e059      	b.n	800358a <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d104      	bne.n	80034e6 <HAL_TIM_PWM_Start+0x82>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2202      	movs	r2, #2
 80034e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034e4:	e013      	b.n	800350e <HAL_TIM_PWM_Start+0xaa>
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	2b04      	cmp	r3, #4
 80034ea:	d104      	bne.n	80034f6 <HAL_TIM_PWM_Start+0x92>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2202      	movs	r2, #2
 80034f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034f4:	e00b      	b.n	800350e <HAL_TIM_PWM_Start+0xaa>
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	2b08      	cmp	r3, #8
 80034fa:	d104      	bne.n	8003506 <HAL_TIM_PWM_Start+0xa2>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2202      	movs	r2, #2
 8003500:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003504:	e003      	b.n	800350e <HAL_TIM_PWM_Start+0xaa>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2202      	movs	r2, #2
 800350a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2201      	movs	r2, #1
 8003514:	6839      	ldr	r1, [r7, #0]
 8003516:	4618      	mov	r0, r3
 8003518:	f000 fc28 	bl	8003d6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a1c      	ldr	r2, [pc, #112]	@ (8003594 <HAL_TIM_PWM_Start+0x130>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d107      	bne.n	8003536 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003534:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a16      	ldr	r2, [pc, #88]	@ (8003594 <HAL_TIM_PWM_Start+0x130>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d009      	beq.n	8003554 <HAL_TIM_PWM_Start+0xf0>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003548:	d004      	beq.n	8003554 <HAL_TIM_PWM_Start+0xf0>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a12      	ldr	r2, [pc, #72]	@ (8003598 <HAL_TIM_PWM_Start+0x134>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d111      	bne.n	8003578 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f003 0307 	and.w	r3, r3, #7
 800355e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2b06      	cmp	r3, #6
 8003564:	d010      	beq.n	8003588 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f042 0201 	orr.w	r2, r2, #1
 8003574:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003576:	e007      	b.n	8003588 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f042 0201 	orr.w	r2, r2, #1
 8003586:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	40012c00 	.word	0x40012c00
 8003598:	40000400 	.word	0x40000400

0800359c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b086      	sub	sp, #24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d101      	bne.n	80035b0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e093      	b.n	80036d8 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d106      	bne.n	80035ca <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 f88b 	bl	80036e0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2202      	movs	r2, #2
 80035ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	6812      	ldr	r2, [r2, #0]
 80035dc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80035e0:	f023 0307 	bic.w	r3, r3, #7
 80035e4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	3304      	adds	r3, #4
 80035ee:	4619      	mov	r1, r3
 80035f0:	4610      	mov	r0, r2
 80035f2:	f000 f9cf 	bl	8003994 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	6a1b      	ldr	r3, [r3, #32]
 800360c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	4313      	orrs	r3, r2
 8003616:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800361e:	f023 0303 	bic.w	r3, r3, #3
 8003622:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	689a      	ldr	r2, [r3, #8]
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	699b      	ldr	r3, [r3, #24]
 800362c:	021b      	lsls	r3, r3, #8
 800362e:	4313      	orrs	r3, r2
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	4313      	orrs	r3, r2
 8003634:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800363c:	f023 030c 	bic.w	r3, r3, #12
 8003640:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003648:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800364c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	68da      	ldr	r2, [r3, #12]
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	69db      	ldr	r3, [r3, #28]
 8003656:	021b      	lsls	r3, r3, #8
 8003658:	4313      	orrs	r3, r2
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	4313      	orrs	r3, r2
 800365e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	011a      	lsls	r2, r3, #4
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	6a1b      	ldr	r3, [r3, #32]
 800366a:	031b      	lsls	r3, r3, #12
 800366c:	4313      	orrs	r3, r2
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	4313      	orrs	r3, r2
 8003672:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800367a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685a      	ldr	r2, [r3, #4]
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	695b      	ldr	r3, [r3, #20]
 8003684:	011b      	lsls	r3, r3, #4
 8003686:	4313      	orrs	r3, r2
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	4313      	orrs	r3, r2
 800368c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2201      	movs	r2, #1
 80036aa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2201      	movs	r2, #1
 80036c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3718      	adds	r7, #24
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <HAL_TIM_Encoder_MspInit>:
  * @brief  Initializes the TIM Encoder Interface MSP.
  * @param  htim TIM Encoder Interface handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspInit could be implemented in the user file
   */
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bc80      	pop	{r7}
 80036f0:	4770      	bx	lr

080036f2 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b084      	sub	sp, #16
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
 80036fa:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003702:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800370a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003712:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800371a:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d110      	bne.n	8003744 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003722:	7bfb      	ldrb	r3, [r7, #15]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d102      	bne.n	800372e <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003728:	7b7b      	ldrb	r3, [r7, #13]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d001      	beq.n	8003732 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e069      	b.n	8003806 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2202      	movs	r2, #2
 8003736:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2202      	movs	r2, #2
 800373e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003742:	e031      	b.n	80037a8 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	2b04      	cmp	r3, #4
 8003748:	d110      	bne.n	800376c <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800374a:	7bbb      	ldrb	r3, [r7, #14]
 800374c:	2b01      	cmp	r3, #1
 800374e:	d102      	bne.n	8003756 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003750:	7b3b      	ldrb	r3, [r7, #12]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d001      	beq.n	800375a <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e055      	b.n	8003806 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2202      	movs	r2, #2
 800375e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2202      	movs	r2, #2
 8003766:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800376a:	e01d      	b.n	80037a8 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800376c:	7bfb      	ldrb	r3, [r7, #15]
 800376e:	2b01      	cmp	r3, #1
 8003770:	d108      	bne.n	8003784 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003772:	7bbb      	ldrb	r3, [r7, #14]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d105      	bne.n	8003784 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003778:	7b7b      	ldrb	r3, [r7, #13]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d102      	bne.n	8003784 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800377e:	7b3b      	ldrb	r3, [r7, #12]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d001      	beq.n	8003788 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e03e      	b.n	8003806 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2202      	movs	r2, #2
 800378c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2202      	movs	r2, #2
 8003794:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2202      	movs	r2, #2
 800379c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2202      	movs	r2, #2
 80037a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d003      	beq.n	80037b6 <HAL_TIM_Encoder_Start+0xc4>
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	2b04      	cmp	r3, #4
 80037b2:	d008      	beq.n	80037c6 <HAL_TIM_Encoder_Start+0xd4>
 80037b4:	e00f      	b.n	80037d6 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2201      	movs	r2, #1
 80037bc:	2100      	movs	r1, #0
 80037be:	4618      	mov	r0, r3
 80037c0:	f000 fad4 	bl	8003d6c <TIM_CCxChannelCmd>
      break;
 80037c4:	e016      	b.n	80037f4 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2201      	movs	r2, #1
 80037cc:	2104      	movs	r1, #4
 80037ce:	4618      	mov	r0, r3
 80037d0:	f000 facc 	bl	8003d6c <TIM_CCxChannelCmd>
      break;
 80037d4:	e00e      	b.n	80037f4 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2201      	movs	r2, #1
 80037dc:	2100      	movs	r1, #0
 80037de:	4618      	mov	r0, r3
 80037e0:	f000 fac4 	bl	8003d6c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2201      	movs	r2, #1
 80037ea:	2104      	movs	r1, #4
 80037ec:	4618      	mov	r0, r3
 80037ee:	f000 fabd 	bl	8003d6c <TIM_CCxChannelCmd>
      break;
 80037f2:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f042 0201 	orr.w	r2, r2, #1
 8003802:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3710      	adds	r7, #16
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
	...

08003810 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800381c:	2300      	movs	r3, #0
 800381e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003826:	2b01      	cmp	r3, #1
 8003828:	d101      	bne.n	800382e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800382a:	2302      	movs	r3, #2
 800382c:	e0ae      	b.n	800398c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2201      	movs	r2, #1
 8003832:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2b0c      	cmp	r3, #12
 800383a:	f200 809f 	bhi.w	800397c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800383e:	a201      	add	r2, pc, #4	@ (adr r2, 8003844 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003844:	08003879 	.word	0x08003879
 8003848:	0800397d 	.word	0x0800397d
 800384c:	0800397d 	.word	0x0800397d
 8003850:	0800397d 	.word	0x0800397d
 8003854:	080038b9 	.word	0x080038b9
 8003858:	0800397d 	.word	0x0800397d
 800385c:	0800397d 	.word	0x0800397d
 8003860:	0800397d 	.word	0x0800397d
 8003864:	080038fb 	.word	0x080038fb
 8003868:	0800397d 	.word	0x0800397d
 800386c:	0800397d 	.word	0x0800397d
 8003870:	0800397d 	.word	0x0800397d
 8003874:	0800393b 	.word	0x0800393b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68b9      	ldr	r1, [r7, #8]
 800387e:	4618      	mov	r0, r3
 8003880:	f000 f8ec 	bl	8003a5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	699a      	ldr	r2, [r3, #24]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f042 0208 	orr.w	r2, r2, #8
 8003892:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	699a      	ldr	r2, [r3, #24]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f022 0204 	bic.w	r2, r2, #4
 80038a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	6999      	ldr	r1, [r3, #24]
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	691a      	ldr	r2, [r3, #16]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	430a      	orrs	r2, r1
 80038b4:	619a      	str	r2, [r3, #24]
      break;
 80038b6:	e064      	b.n	8003982 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68b9      	ldr	r1, [r7, #8]
 80038be:	4618      	mov	r0, r3
 80038c0:	f000 f932 	bl	8003b28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	699a      	ldr	r2, [r3, #24]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	699a      	ldr	r2, [r3, #24]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6999      	ldr	r1, [r3, #24]
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	021a      	lsls	r2, r3, #8
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	430a      	orrs	r2, r1
 80038f6:	619a      	str	r2, [r3, #24]
      break;
 80038f8:	e043      	b.n	8003982 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68b9      	ldr	r1, [r7, #8]
 8003900:	4618      	mov	r0, r3
 8003902:	f000 f97b 	bl	8003bfc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	69da      	ldr	r2, [r3, #28]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f042 0208 	orr.w	r2, r2, #8
 8003914:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	69da      	ldr	r2, [r3, #28]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f022 0204 	bic.w	r2, r2, #4
 8003924:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	69d9      	ldr	r1, [r3, #28]
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	691a      	ldr	r2, [r3, #16]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	430a      	orrs	r2, r1
 8003936:	61da      	str	r2, [r3, #28]
      break;
 8003938:	e023      	b.n	8003982 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68b9      	ldr	r1, [r7, #8]
 8003940:	4618      	mov	r0, r3
 8003942:	f000 f9c5 	bl	8003cd0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	69da      	ldr	r2, [r3, #28]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003954:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	69da      	ldr	r2, [r3, #28]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003964:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	69d9      	ldr	r1, [r3, #28]
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	021a      	lsls	r2, r3, #8
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	430a      	orrs	r2, r1
 8003978:	61da      	str	r2, [r3, #28]
      break;
 800397a:	e002      	b.n	8003982 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	75fb      	strb	r3, [r7, #23]
      break;
 8003980:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800398a:	7dfb      	ldrb	r3, [r7, #23]
}
 800398c:	4618      	mov	r0, r3
 800398e:	3718      	adds	r7, #24
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003994:	b480      	push	{r7}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4a2b      	ldr	r2, [pc, #172]	@ (8003a54 <TIM_Base_SetConfig+0xc0>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d007      	beq.n	80039bc <TIM_Base_SetConfig+0x28>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039b2:	d003      	beq.n	80039bc <TIM_Base_SetConfig+0x28>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a28      	ldr	r2, [pc, #160]	@ (8003a58 <TIM_Base_SetConfig+0xc4>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d108      	bne.n	80039ce <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	68fa      	ldr	r2, [r7, #12]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a20      	ldr	r2, [pc, #128]	@ (8003a54 <TIM_Base_SetConfig+0xc0>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d007      	beq.n	80039e6 <TIM_Base_SetConfig+0x52>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039dc:	d003      	beq.n	80039e6 <TIM_Base_SetConfig+0x52>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a1d      	ldr	r2, [pc, #116]	@ (8003a58 <TIM_Base_SetConfig+0xc4>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d108      	bne.n	80039f8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	689a      	ldr	r2, [r3, #8]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a0d      	ldr	r2, [pc, #52]	@ (8003a54 <TIM_Base_SetConfig+0xc0>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d103      	bne.n	8003a2c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	691a      	ldr	r2, [r3, #16]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d005      	beq.n	8003a4a <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	f023 0201 	bic.w	r2, r3, #1
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	611a      	str	r2, [r3, #16]
  }
}
 8003a4a:	bf00      	nop
 8003a4c:	3714      	adds	r7, #20
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bc80      	pop	{r7}
 8003a52:	4770      	bx	lr
 8003a54:	40012c00 	.word	0x40012c00
 8003a58:	40000400 	.word	0x40000400

08003a5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b087      	sub	sp, #28
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a1b      	ldr	r3, [r3, #32]
 8003a6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a1b      	ldr	r3, [r3, #32]
 8003a70:	f023 0201 	bic.w	r2, r3, #1
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f023 0303 	bic.w	r3, r3, #3
 8003a92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	f023 0302 	bic.w	r3, r3, #2
 8003aa4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a1c      	ldr	r2, [pc, #112]	@ (8003b24 <TIM_OC1_SetConfig+0xc8>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d10c      	bne.n	8003ad2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	f023 0308 	bic.w	r3, r3, #8
 8003abe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	697a      	ldr	r2, [r7, #20]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	f023 0304 	bic.w	r3, r3, #4
 8003ad0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a13      	ldr	r2, [pc, #76]	@ (8003b24 <TIM_OC1_SetConfig+0xc8>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d111      	bne.n	8003afe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ae0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ae8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	699b      	ldr	r3, [r3, #24]
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	693a      	ldr	r2, [r7, #16]
 8003b02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	685a      	ldr	r2, [r3, #4]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	697a      	ldr	r2, [r7, #20]
 8003b16:	621a      	str	r2, [r3, #32]
}
 8003b18:	bf00      	nop
 8003b1a:	371c      	adds	r7, #28
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bc80      	pop	{r7}
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	40012c00 	.word	0x40012c00

08003b28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b087      	sub	sp, #28
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a1b      	ldr	r3, [r3, #32]
 8003b36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a1b      	ldr	r3, [r3, #32]
 8003b3c:	f023 0210 	bic.w	r2, r3, #16
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	021b      	lsls	r3, r3, #8
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	f023 0320 	bic.w	r3, r3, #32
 8003b72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	011b      	lsls	r3, r3, #4
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a1d      	ldr	r2, [pc, #116]	@ (8003bf8 <TIM_OC2_SetConfig+0xd0>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d10d      	bne.n	8003ba4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	011b      	lsls	r3, r3, #4
 8003b96:	697a      	ldr	r2, [r7, #20]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ba2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a14      	ldr	r2, [pc, #80]	@ (8003bf8 <TIM_OC2_SetConfig+0xd0>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d113      	bne.n	8003bd4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003bb2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003bba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	695b      	ldr	r3, [r3, #20]
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	693a      	ldr	r2, [r7, #16]
 8003bd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685a      	ldr	r2, [r3, #4]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	621a      	str	r2, [r3, #32]
}
 8003bee:	bf00      	nop
 8003bf0:	371c      	adds	r7, #28
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bc80      	pop	{r7}
 8003bf6:	4770      	bx	lr
 8003bf8:	40012c00 	.word	0x40012c00

08003bfc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b087      	sub	sp, #28
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a1b      	ldr	r3, [r3, #32]
 8003c0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a1b      	ldr	r3, [r3, #32]
 8003c10:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	69db      	ldr	r3, [r3, #28]
 8003c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f023 0303 	bic.w	r3, r3, #3
 8003c32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	021b      	lsls	r3, r3, #8
 8003c4c:	697a      	ldr	r2, [r7, #20]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a1d      	ldr	r2, [pc, #116]	@ (8003ccc <TIM_OC3_SetConfig+0xd0>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d10d      	bne.n	8003c76 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003c60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	021b      	lsls	r3, r3, #8
 8003c68:	697a      	ldr	r2, [r7, #20]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003c74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a14      	ldr	r2, [pc, #80]	@ (8003ccc <TIM_OC3_SetConfig+0xd0>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d113      	bne.n	8003ca6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003c84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003c8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	011b      	lsls	r3, r3, #4
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	011b      	lsls	r3, r3, #4
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	68fa      	ldr	r2, [r7, #12]
 8003cb0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	685a      	ldr	r2, [r3, #4]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	697a      	ldr	r2, [r7, #20]
 8003cbe:	621a      	str	r2, [r3, #32]
}
 8003cc0:	bf00      	nop
 8003cc2:	371c      	adds	r7, #28
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bc80      	pop	{r7}
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	40012c00 	.word	0x40012c00

08003cd0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b087      	sub	sp, #28
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
 8003cde:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a1b      	ldr	r3, [r3, #32]
 8003ce4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	69db      	ldr	r3, [r3, #28]
 8003cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003cfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	021b      	lsls	r3, r3, #8
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003d1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	031b      	lsls	r3, r3, #12
 8003d22:	693a      	ldr	r2, [r7, #16]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a0f      	ldr	r2, [pc, #60]	@ (8003d68 <TIM_OC4_SetConfig+0x98>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d109      	bne.n	8003d44 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003d36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	695b      	ldr	r3, [r3, #20]
 8003d3c:	019b      	lsls	r3, r3, #6
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	697a      	ldr	r2, [r7, #20]
 8003d48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	685a      	ldr	r2, [r3, #4]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	621a      	str	r2, [r3, #32]
}
 8003d5e:	bf00      	nop
 8003d60:	371c      	adds	r7, #28
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bc80      	pop	{r7}
 8003d66:	4770      	bx	lr
 8003d68:	40012c00 	.word	0x40012c00

08003d6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b087      	sub	sp, #28
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	f003 031f 	and.w	r3, r3, #31
 8003d7e:	2201      	movs	r2, #1
 8003d80:	fa02 f303 	lsl.w	r3, r2, r3
 8003d84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6a1a      	ldr	r2, [r3, #32]
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	43db      	mvns	r3, r3
 8003d8e:	401a      	ands	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6a1a      	ldr	r2, [r3, #32]
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	f003 031f 	and.w	r3, r3, #31
 8003d9e:	6879      	ldr	r1, [r7, #4]
 8003da0:	fa01 f303 	lsl.w	r3, r1, r3
 8003da4:	431a      	orrs	r2, r3
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	621a      	str	r2, [r3, #32]
}
 8003daa:	bf00      	nop
 8003dac:	371c      	adds	r7, #28
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bc80      	pop	{r7}
 8003db2:	4770      	bx	lr

08003db4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b085      	sub	sp, #20
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d101      	bne.n	8003dcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003dc8:	2302      	movs	r3, #2
 8003dca:	e041      	b.n	8003e50 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2202      	movs	r2, #2
 8003dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003df2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68fa      	ldr	r2, [r7, #12]
 8003e04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a14      	ldr	r2, [pc, #80]	@ (8003e5c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d009      	beq.n	8003e24 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e18:	d004      	beq.n	8003e24 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a10      	ldr	r2, [pc, #64]	@ (8003e60 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d10c      	bne.n	8003e3e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e2a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	68ba      	ldr	r2, [r7, #8]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68ba      	ldr	r2, [r7, #8]
 8003e3c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3714      	adds	r7, #20
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bc80      	pop	{r7}
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop
 8003e5c:	40012c00 	.word	0x40012c00
 8003e60:	40000400 	.word	0x40000400

08003e64 <_ZdlPvj>:
 8003e64:	f000 b800 	b.w	8003e68 <_ZdlPv>

08003e68 <_ZdlPv>:
 8003e68:	f000 b800 	b.w	8003e6c <free>

08003e6c <free>:
 8003e6c:	4b02      	ldr	r3, [pc, #8]	@ (8003e78 <free+0xc>)
 8003e6e:	4601      	mov	r1, r0
 8003e70:	6818      	ldr	r0, [r3, #0]
 8003e72:	f000 b83d 	b.w	8003ef0 <_free_r>
 8003e76:	bf00      	nop
 8003e78:	2000000c 	.word	0x2000000c

08003e7c <__malloc_lock>:
 8003e7c:	4801      	ldr	r0, [pc, #4]	@ (8003e84 <__malloc_lock+0x8>)
 8003e7e:	f000 b835 	b.w	8003eec <__retarget_lock_acquire_recursive>
 8003e82:	bf00      	nop
 8003e84:	20000288 	.word	0x20000288

08003e88 <__malloc_unlock>:
 8003e88:	4801      	ldr	r0, [pc, #4]	@ (8003e90 <__malloc_unlock+0x8>)
 8003e8a:	f000 b830 	b.w	8003eee <__retarget_lock_release_recursive>
 8003e8e:	bf00      	nop
 8003e90:	20000288 	.word	0x20000288

08003e94 <memset>:
 8003e94:	4603      	mov	r3, r0
 8003e96:	4402      	add	r2, r0
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d100      	bne.n	8003e9e <memset+0xa>
 8003e9c:	4770      	bx	lr
 8003e9e:	f803 1b01 	strb.w	r1, [r3], #1
 8003ea2:	e7f9      	b.n	8003e98 <memset+0x4>

08003ea4 <__libc_init_array>:
 8003ea4:	b570      	push	{r4, r5, r6, lr}
 8003ea6:	2600      	movs	r6, #0
 8003ea8:	4d0c      	ldr	r5, [pc, #48]	@ (8003edc <__libc_init_array+0x38>)
 8003eaa:	4c0d      	ldr	r4, [pc, #52]	@ (8003ee0 <__libc_init_array+0x3c>)
 8003eac:	1b64      	subs	r4, r4, r5
 8003eae:	10a4      	asrs	r4, r4, #2
 8003eb0:	42a6      	cmp	r6, r4
 8003eb2:	d109      	bne.n	8003ec8 <__libc_init_array+0x24>
 8003eb4:	f000 f864 	bl	8003f80 <_init>
 8003eb8:	2600      	movs	r6, #0
 8003eba:	4d0a      	ldr	r5, [pc, #40]	@ (8003ee4 <__libc_init_array+0x40>)
 8003ebc:	4c0a      	ldr	r4, [pc, #40]	@ (8003ee8 <__libc_init_array+0x44>)
 8003ebe:	1b64      	subs	r4, r4, r5
 8003ec0:	10a4      	asrs	r4, r4, #2
 8003ec2:	42a6      	cmp	r6, r4
 8003ec4:	d105      	bne.n	8003ed2 <__libc_init_array+0x2e>
 8003ec6:	bd70      	pop	{r4, r5, r6, pc}
 8003ec8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ecc:	4798      	blx	r3
 8003ece:	3601      	adds	r6, #1
 8003ed0:	e7ee      	b.n	8003eb0 <__libc_init_array+0xc>
 8003ed2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ed6:	4798      	blx	r3
 8003ed8:	3601      	adds	r6, #1
 8003eda:	e7f2      	b.n	8003ec2 <__libc_init_array+0x1e>
 8003edc:	08003fbc 	.word	0x08003fbc
 8003ee0:	08003fbc 	.word	0x08003fbc
 8003ee4:	08003fbc 	.word	0x08003fbc
 8003ee8:	08003fc4 	.word	0x08003fc4

08003eec <__retarget_lock_acquire_recursive>:
 8003eec:	4770      	bx	lr

08003eee <__retarget_lock_release_recursive>:
 8003eee:	4770      	bx	lr

08003ef0 <_free_r>:
 8003ef0:	b538      	push	{r3, r4, r5, lr}
 8003ef2:	4605      	mov	r5, r0
 8003ef4:	2900      	cmp	r1, #0
 8003ef6:	d040      	beq.n	8003f7a <_free_r+0x8a>
 8003ef8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003efc:	1f0c      	subs	r4, r1, #4
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	bfb8      	it	lt
 8003f02:	18e4      	addlt	r4, r4, r3
 8003f04:	f7ff ffba 	bl	8003e7c <__malloc_lock>
 8003f08:	4a1c      	ldr	r2, [pc, #112]	@ (8003f7c <_free_r+0x8c>)
 8003f0a:	6813      	ldr	r3, [r2, #0]
 8003f0c:	b933      	cbnz	r3, 8003f1c <_free_r+0x2c>
 8003f0e:	6063      	str	r3, [r4, #4]
 8003f10:	6014      	str	r4, [r2, #0]
 8003f12:	4628      	mov	r0, r5
 8003f14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f18:	f7ff bfb6 	b.w	8003e88 <__malloc_unlock>
 8003f1c:	42a3      	cmp	r3, r4
 8003f1e:	d908      	bls.n	8003f32 <_free_r+0x42>
 8003f20:	6820      	ldr	r0, [r4, #0]
 8003f22:	1821      	adds	r1, r4, r0
 8003f24:	428b      	cmp	r3, r1
 8003f26:	bf01      	itttt	eq
 8003f28:	6819      	ldreq	r1, [r3, #0]
 8003f2a:	685b      	ldreq	r3, [r3, #4]
 8003f2c:	1809      	addeq	r1, r1, r0
 8003f2e:	6021      	streq	r1, [r4, #0]
 8003f30:	e7ed      	b.n	8003f0e <_free_r+0x1e>
 8003f32:	461a      	mov	r2, r3
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	b10b      	cbz	r3, 8003f3c <_free_r+0x4c>
 8003f38:	42a3      	cmp	r3, r4
 8003f3a:	d9fa      	bls.n	8003f32 <_free_r+0x42>
 8003f3c:	6811      	ldr	r1, [r2, #0]
 8003f3e:	1850      	adds	r0, r2, r1
 8003f40:	42a0      	cmp	r0, r4
 8003f42:	d10b      	bne.n	8003f5c <_free_r+0x6c>
 8003f44:	6820      	ldr	r0, [r4, #0]
 8003f46:	4401      	add	r1, r0
 8003f48:	1850      	adds	r0, r2, r1
 8003f4a:	4283      	cmp	r3, r0
 8003f4c:	6011      	str	r1, [r2, #0]
 8003f4e:	d1e0      	bne.n	8003f12 <_free_r+0x22>
 8003f50:	6818      	ldr	r0, [r3, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	4408      	add	r0, r1
 8003f56:	6010      	str	r0, [r2, #0]
 8003f58:	6053      	str	r3, [r2, #4]
 8003f5a:	e7da      	b.n	8003f12 <_free_r+0x22>
 8003f5c:	d902      	bls.n	8003f64 <_free_r+0x74>
 8003f5e:	230c      	movs	r3, #12
 8003f60:	602b      	str	r3, [r5, #0]
 8003f62:	e7d6      	b.n	8003f12 <_free_r+0x22>
 8003f64:	6820      	ldr	r0, [r4, #0]
 8003f66:	1821      	adds	r1, r4, r0
 8003f68:	428b      	cmp	r3, r1
 8003f6a:	bf01      	itttt	eq
 8003f6c:	6819      	ldreq	r1, [r3, #0]
 8003f6e:	685b      	ldreq	r3, [r3, #4]
 8003f70:	1809      	addeq	r1, r1, r0
 8003f72:	6021      	streq	r1, [r4, #0]
 8003f74:	6063      	str	r3, [r4, #4]
 8003f76:	6054      	str	r4, [r2, #4]
 8003f78:	e7cb      	b.n	8003f12 <_free_r+0x22>
 8003f7a:	bd38      	pop	{r3, r4, r5, pc}
 8003f7c:	2000014c 	.word	0x2000014c

08003f80 <_init>:
 8003f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f82:	bf00      	nop
 8003f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f86:	bc08      	pop	{r3}
 8003f88:	469e      	mov	lr, r3
 8003f8a:	4770      	bx	lr

08003f8c <_fini>:
 8003f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f8e:	bf00      	nop
 8003f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f92:	bc08      	pop	{r3}
 8003f94:	469e      	mov	lr, r3
 8003f96:	4770      	bx	lr
