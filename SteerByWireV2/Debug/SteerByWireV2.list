
SteerByWireV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003110  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  0800321c  0800321c  0000421c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003248  08003248  0000505c  2**0
                  CONTENTS
  4 .ARM          00000000  08003248  08003248  0000505c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003248  08003248  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003248  08003248  00004248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800324c  0800324c  0000424c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003250  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  2000005c  080032ac  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000250  080032ac  00005250  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015eed  00000000  00000000  00005085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b01  00000000  00000000  0001af72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a8  00000000  00000000  0001da78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cb0  00000000  00000000  0001eb20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a49f  00000000  00000000  0001f7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f965  00000000  00000000  00039c6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093611  00000000  00000000  000495d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dcbe5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ac4  00000000  00000000  000dcc28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000e16ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003204 	.word	0x08003204

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003204 	.word	0x08003204

0800014c <_ZNSt12_Vector_baseImSaImEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	4618      	mov	r0, r3
 8000158:	f000 f8ba 	bl	80002d0 <_ZNSt12_Vector_baseImSaImEE12_Vector_implC1Ev>
 800015c:	687b      	ldr	r3, [r7, #4]
 800015e:	4618      	mov	r0, r3
 8000160:	3708      	adds	r7, #8
 8000162:	46bd      	mov	sp, r7
 8000164:	bd80      	pop	{r7, pc}

08000166 <_ZNSt6vectorImSaImEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8000166:	b580      	push	{r7, lr}
 8000168:	b082      	sub	sp, #8
 800016a:	af00      	add	r7, sp, #0
 800016c:	6078      	str	r0, [r7, #4]
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	4618      	mov	r0, r3
 8000172:	f7ff ffeb 	bl	800014c <_ZNSt12_Vector_baseImSaImEEC1Ev>
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	4618      	mov	r0, r3
 800017a:	3708      	adds	r7, #8
 800017c:	46bd      	mov	sp, r7
 800017e:	bd80      	pop	{r7, pc}

08000180 <_ZNSt12_Vector_baseIySaIyEEC1Ev>:
      _Vector_base() = default;
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	4618      	mov	r0, r3
 800018c:	f000 f8b0 	bl	80002f0 <_ZNSt12_Vector_baseIySaIyEE12_Vector_implC1Ev>
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	4618      	mov	r0, r3
 8000194:	3708      	adds	r7, #8
 8000196:	46bd      	mov	sp, r7
 8000198:	bd80      	pop	{r7, pc}

0800019a <_ZNSt6vectorIySaIyEEC1Ev>:
      vector() = default;
 800019a:	b580      	push	{r7, lr}
 800019c:	b082      	sub	sp, #8
 800019e:	af00      	add	r7, sp, #0
 80001a0:	6078      	str	r0, [r7, #4]
 80001a2:	687b      	ldr	r3, [r7, #4]
 80001a4:	4618      	mov	r0, r3
 80001a6:	f7ff ffeb 	bl	8000180 <_ZNSt12_Vector_baseIySaIyEEC1Ev>
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	4618      	mov	r0, r3
 80001ae:	3708      	adds	r7, #8
 80001b0:	46bd      	mov	sp, r7
 80001b2:	bd80      	pop	{r7, pc}

080001b4 <_ZN6CANBusC1Ev>:
 *      Author: Dennis Boekholtz
 */

#include "CAN_bus.hpp"

CANBus::CANBus() {
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b082      	sub	sp, #8
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	331c      	adds	r3, #28
 80001c0:	4618      	mov	r0, r3
 80001c2:	f7ff ffd0 	bl	8000166 <_ZNSt6vectorImSaImEEC1Ev>
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	3328      	adds	r3, #40	@ 0x28
 80001ca:	4618      	mov	r0, r3
 80001cc:	f7ff ffe5 	bl	800019a <_ZNSt6vectorIySaIyEEC1Ev>
    // Constructor implementation (if needed)
}
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	4618      	mov	r0, r3
 80001d4:	3708      	adds	r7, #8
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bd80      	pop	{r7, pc}

080001da <_ZN6CANBus5startEP17CAN_HandleTypeDefh>:

void CANBus::start(CAN_HandleTypeDef* hcan, uint8_t LIDEE){
 80001da:	b580      	push	{r7, lr}
 80001dc:	b084      	sub	sp, #16
 80001de:	af00      	add	r7, sp, #0
 80001e0:	60f8      	str	r0, [r7, #12]
 80001e2:	60b9      	str	r1, [r7, #8]
 80001e4:	4613      	mov	r3, r2
 80001e6:	71fb      	strb	r3, [r7, #7]

	// Start CAN bus
    HAL_CAN_Start(hcan);
 80001e8:	68b8      	ldr	r0, [r7, #8]
 80001ea:	f001 f867 	bl	80012bc <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80001ee:	2102      	movs	r1, #2
 80001f0:	68b8      	ldr	r0, [r7, #8]
 80001f2:	f001 fa97 	bl	8001724 <HAL_CAN_ActivateNotification>

    if(LIDEE == CAN_ID_STD){
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d107      	bne.n	800020c <_ZN6CANBus5startEP17CAN_HandleTypeDefh+0x32>
        TxHeader.ExtId = 0;		// 0 is standaard ID , 4 is extended ID
 80001fc:	68fb      	ldr	r3, [r7, #12]
 80001fe:	2200      	movs	r2, #0
 8000200:	605a      	str	r2, [r3, #4]
        TxHeader.StdId = 2047;  // Set CAN ID to 2047
 8000202:	68fb      	ldr	r3, [r7, #12]
 8000204:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000208:	601a      	str	r2, [r3, #0]
 800020a:	e006      	b.n	800021a <_ZN6CANBus5startEP17CAN_HandleTypeDefh+0x40>
    }
    else{
        TxHeader.ExtId = 2047;		// 0 is standaard ID , 4 is extended ID
 800020c:	68fb      	ldr	r3, [r7, #12]
 800020e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000212:	605a      	str	r2, [r3, #4]
        TxHeader.StdId = 0;  // Set CAN ID to 2047
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	2200      	movs	r2, #0
 8000218:	601a      	str	r2, [r3, #0]
    }
    // Initialize default values for CAN headers
    TxHeader.DLC = 8;
 800021a:	68fb      	ldr	r3, [r7, #12]
 800021c:	2208      	movs	r2, #8
 800021e:	611a      	str	r2, [r3, #16]
    TxHeader.IDE = LIDEE;    // standaard ID = CAN_ID_STD, extended ID = CAN_ID_EXT
 8000220:	79fa      	ldrb	r2, [r7, #7]
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	609a      	str	r2, [r3, #8]
    TxHeader.RTR = CAN_RTR_DATA;
 8000226:	68fb      	ldr	r3, [r7, #12]
 8000228:	2200      	movs	r2, #0
 800022a:	60da      	str	r2, [r3, #12]
    TxHeader.TransmitGlobalTime = DISABLE;
 800022c:	68fb      	ldr	r3, [r7, #12]
 800022e:	2200      	movs	r2, #0
 8000230:	751a      	strb	r2, [r3, #20]

}
 8000232:	bf00      	nop
 8000234:	3710      	adds	r7, #16
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}

0800023a <_ZN6CANBus8transmitEP17CAN_HandleTypeDefPht>:

// Transmit data
void CANBus::transmit(CAN_HandleTypeDef* hcan, uint8_t* TxData, uint16_t id) {
 800023a:	b580      	push	{r7, lr}
 800023c:	b084      	sub	sp, #16
 800023e:	af00      	add	r7, sp, #0
 8000240:	60f8      	str	r0, [r7, #12]
 8000242:	60b9      	str	r1, [r7, #8]
 8000244:	607a      	str	r2, [r7, #4]
 8000246:	807b      	strh	r3, [r7, #2]
    if (TxHeader.IDE == CAN_ID_STD){
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	689b      	ldr	r3, [r3, #8]
 800024c:	2b00      	cmp	r3, #0
 800024e:	d103      	bne.n	8000258 <_ZN6CANBus8transmitEP17CAN_HandleTypeDefPht+0x1e>
    	TxHeader.StdId = id;
 8000250:	887a      	ldrh	r2, [r7, #2]
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	601a      	str	r2, [r3, #0]
 8000256:	e002      	b.n	800025e <_ZN6CANBus8transmitEP17CAN_HandleTypeDefPht+0x24>
    }
    else{
    	TxHeader.ExtId = id;
 8000258:	887a      	ldrh	r2, [r7, #2]
 800025a:	68fb      	ldr	r3, [r7, #12]
 800025c:	605a      	str	r2, [r3, #4]
    }
	TxHeader.DLC = 8;
 800025e:	68fb      	ldr	r3, [r7, #12]
 8000260:	2208      	movs	r2, #8
 8000262:	611a      	str	r2, [r3, #16]
    HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox);
 8000264:	68f9      	ldr	r1, [r7, #12]
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	3318      	adds	r3, #24
 800026a:	687a      	ldr	r2, [r7, #4]
 800026c:	68b8      	ldr	r0, [r7, #8]
 800026e:	f001 f869 	bl	8001344 <HAL_CAN_AddTxMessage>
}
 8000272:	bf00      	nop
 8000274:	3710      	adds	r7, #16
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}

0800027a <_ZN6CANBus15configureFilterEP17CAN_HandleTypeDeftthh>:

void CANBus::configureFilter(CAN_HandleTypeDef* hcan, uint16_t ID, uint16_t Mask, uint8_t filterBank, uint8_t slaveFilterBank){
 800027a:	b580      	push	{r7, lr}
 800027c:	b08e      	sub	sp, #56	@ 0x38
 800027e:	af00      	add	r7, sp, #0
 8000280:	60f8      	str	r0, [r7, #12]
 8000282:	60b9      	str	r1, [r7, #8]
 8000284:	4611      	mov	r1, r2
 8000286:	461a      	mov	r2, r3
 8000288:	460b      	mov	r3, r1
 800028a:	80fb      	strh	r3, [r7, #6]
 800028c:	4613      	mov	r3, r2
 800028e:	80bb      	strh	r3, [r7, #4]

	  CAN_FilterTypeDef canFilterConfig;

	  canFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8000290:	2301      	movs	r3, #1
 8000292:	633b      	str	r3, [r7, #48]	@ 0x30
	  canFilterConfig.FilterBank = filterBank;
 8000294:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000298:	627b      	str	r3, [r7, #36]	@ 0x24
	  canFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800029a:	2300      	movs	r3, #0
 800029c:	623b      	str	r3, [r7, #32]
	  canFilterConfig.FilterIdHigh = 0 << 5;
 800029e:	2300      	movs	r3, #0
 80002a0:	613b      	str	r3, [r7, #16]
	  canFilterConfig.FilterIdLow = 0x0000;
 80002a2:	2300      	movs	r3, #0
 80002a4:	617b      	str	r3, [r7, #20]
	  canFilterConfig.FilterMaskIdHigh = 0 << 5;
 80002a6:	2300      	movs	r3, #0
 80002a8:	61bb      	str	r3, [r7, #24]
	  canFilterConfig.FilterMaskIdLow = 0x0000;
 80002aa:	2300      	movs	r3, #0
 80002ac:	61fb      	str	r3, [r7, #28]
	  canFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80002ae:	2300      	movs	r3, #0
 80002b0:	62bb      	str	r3, [r7, #40]	@ 0x28
	  canFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80002b2:	2301      	movs	r3, #1
 80002b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  canFilterConfig.SlaveStartFilterBank = slaveFilterBank;
 80002b6:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80002ba:	637b      	str	r3, [r7, #52]	@ 0x34

	  HAL_CAN_ConfigFilter(hcan, &canFilterConfig);
 80002bc:	f107 0310 	add.w	r3, r7, #16
 80002c0:	4619      	mov	r1, r3
 80002c2:	68b8      	ldr	r0, [r7, #8]
 80002c4:	f000 ff31 	bl	800112a <HAL_CAN_ConfigFilter>
}
 80002c8:	bf00      	nop
 80002ca:	3738      	adds	r7, #56	@ 0x38
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}

080002d0 <_ZNSt12_Vector_baseImSaImEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b082      	sub	sp, #8
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80002d8:	6878      	ldr	r0, [r7, #4]
 80002da:	f000 f819 	bl	8000310 <_ZNSaImEC1Ev>
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	4618      	mov	r0, r3
 80002e2:	f000 f821 	bl	8000328 <_ZNSt12_Vector_baseImSaImEE17_Vector_impl_dataC1Ev>
	{ }
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	4618      	mov	r0, r3
 80002ea:	3708      	adds	r7, #8
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}

080002f0 <_ZNSt12_Vector_baseIySaIyEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80002f8:	6878      	ldr	r0, [r7, #4]
 80002fa:	f000 f853 	bl	80003a4 <_ZNSaIyEC1Ev>
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	4618      	mov	r0, r3
 8000302:	f000 f85b 	bl	80003bc <_ZNSt12_Vector_baseIySaIyEE17_Vector_impl_dataC1Ev>
	{ }
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	4618      	mov	r0, r3
 800030a:	3708      	adds	r7, #8
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}

08000310 <_ZNSaImEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
 8000318:	6878      	ldr	r0, [r7, #4]
 800031a:	f000 f88d 	bl	8000438 <_ZNSt15__new_allocatorImEC1Ev>
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	4618      	mov	r0, r3
 8000322:	3708      	adds	r7, #8
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}

08000328 <_ZNSt12_Vector_baseImSaImEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8000328:	b480      	push	{r7}
 800032a:	b083      	sub	sp, #12
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	2200      	movs	r2, #0
 8000334:	601a      	str	r2, [r3, #0]
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	2200      	movs	r2, #0
 800033a:	605a      	str	r2, [r3, #4]
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	2200      	movs	r2, #0
 8000340:	609a      	str	r2, [r3, #8]
	{ }
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	4618      	mov	r0, r3
 8000346:	370c      	adds	r7, #12
 8000348:	46bd      	mov	sp, r7
 800034a:	bc80      	pop	{r7}
 800034c:	4770      	bx	lr

0800034e <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj>:
      _M_deallocate(pointer __p, size_t __n)
 800034e:	b580      	push	{r7, lr}
 8000350:	b084      	sub	sp, #16
 8000352:	af00      	add	r7, sp, #0
 8000354:	60f8      	str	r0, [r7, #12]
 8000356:	60b9      	str	r1, [r7, #8]
 8000358:	607a      	str	r2, [r7, #4]
	if (__p)
 800035a:	68bb      	ldr	r3, [r7, #8]
 800035c:	2b00      	cmp	r3, #0
 800035e:	d005      	beq.n	800036c <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	687a      	ldr	r2, [r7, #4]
 8000364:	68b9      	ldr	r1, [r7, #8]
 8000366:	4618      	mov	r0, r3
 8000368:	f000 f870 	bl	800044c <_ZNSt16allocator_traitsISaImEE10deallocateERS0_Pmj>
      }
 800036c:	bf00      	nop
 800036e:	3710      	adds	r7, #16
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}

08000374 <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	4618      	mov	r0, r3
 8000380:	370c      	adds	r7, #12
 8000382:	46bd      	mov	sp, r7
 8000384:	bc80      	pop	{r7}
 8000386:	4770      	bx	lr

08000388 <_ZSt8_DestroyIPmmEvT_S1_RSaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8000388:	b580      	push	{r7, lr}
 800038a:	b084      	sub	sp, #16
 800038c:	af00      	add	r7, sp, #0
 800038e:	60f8      	str	r0, [r7, #12]
 8000390:	60b9      	str	r1, [r7, #8]
 8000392:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8000394:	68b9      	ldr	r1, [r7, #8]
 8000396:	68f8      	ldr	r0, [r7, #12]
 8000398:	f000 f867 	bl	800046a <_ZSt8_DestroyIPmEvT_S1_>
    }
 800039c:	bf00      	nop
 800039e:	3710      	adds	r7, #16
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}

080003a4 <_ZNSaIyEC1Ev>:
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
 80003ac:	6878      	ldr	r0, [r7, #4]
 80003ae:	f000 f869 	bl	8000484 <_ZNSt15__new_allocatorIyEC1Ev>
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	4618      	mov	r0, r3
 80003b6:	3708      	adds	r7, #8
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}

080003bc <_ZNSt12_Vector_baseIySaIyEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80003bc:	b480      	push	{r7}
 80003be:	b083      	sub	sp, #12
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	2200      	movs	r2, #0
 80003c8:	601a      	str	r2, [r3, #0]
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	2200      	movs	r2, #0
 80003ce:	605a      	str	r2, [r3, #4]
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	2200      	movs	r2, #0
 80003d4:	609a      	str	r2, [r3, #8]
	{ }
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	4618      	mov	r0, r3
 80003da:	370c      	adds	r7, #12
 80003dc:	46bd      	mov	sp, r7
 80003de:	bc80      	pop	{r7}
 80003e0:	4770      	bx	lr

080003e2 <_ZNSt12_Vector_baseIySaIyEE13_M_deallocateEPyj>:
      _M_deallocate(pointer __p, size_t __n)
 80003e2:	b580      	push	{r7, lr}
 80003e4:	b084      	sub	sp, #16
 80003e6:	af00      	add	r7, sp, #0
 80003e8:	60f8      	str	r0, [r7, #12]
 80003ea:	60b9      	str	r1, [r7, #8]
 80003ec:	607a      	str	r2, [r7, #4]
	if (__p)
 80003ee:	68bb      	ldr	r3, [r7, #8]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d005      	beq.n	8000400 <_ZNSt12_Vector_baseIySaIyEE13_M_deallocateEPyj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	687a      	ldr	r2, [r7, #4]
 80003f8:	68b9      	ldr	r1, [r7, #8]
 80003fa:	4618      	mov	r0, r3
 80003fc:	f000 f84c 	bl	8000498 <_ZNSt16allocator_traitsISaIyEE10deallocateERS0_Pyj>
      }
 8000400:	bf00      	nop
 8000402:	3710      	adds	r7, #16
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}

08000408 <_ZNSt12_Vector_baseIySaIyEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8000408:	b480      	push	{r7}
 800040a:	b083      	sub	sp, #12
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	4618      	mov	r0, r3
 8000414:	370c      	adds	r7, #12
 8000416:	46bd      	mov	sp, r7
 8000418:	bc80      	pop	{r7}
 800041a:	4770      	bx	lr

0800041c <_ZSt8_DestroyIPyyEvT_S1_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800041c:	b580      	push	{r7, lr}
 800041e:	b084      	sub	sp, #16
 8000420:	af00      	add	r7, sp, #0
 8000422:	60f8      	str	r0, [r7, #12]
 8000424:	60b9      	str	r1, [r7, #8]
 8000426:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8000428:	68b9      	ldr	r1, [r7, #8]
 800042a:	68f8      	ldr	r0, [r7, #12]
 800042c:	f000 f843 	bl	80004b6 <_ZSt8_DestroyIPyEvT_S1_>
    }
 8000430:	bf00      	nop
 8000432:	3710      	adds	r7, #16
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}

08000438 <_ZNSt15__new_allocatorImEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000438:	b480      	push	{r7}
 800043a:	b083      	sub	sp, #12
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	4618      	mov	r0, r3
 8000444:	370c      	adds	r7, #12
 8000446:	46bd      	mov	sp, r7
 8000448:	bc80      	pop	{r7}
 800044a:	4770      	bx	lr

0800044c <_ZNSt16allocator_traitsISaImEE10deallocateERS0_Pmj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800044c:	b580      	push	{r7, lr}
 800044e:	b084      	sub	sp, #16
 8000450:	af00      	add	r7, sp, #0
 8000452:	60f8      	str	r0, [r7, #12]
 8000454:	60b9      	str	r1, [r7, #8]
 8000456:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8000458:	687a      	ldr	r2, [r7, #4]
 800045a:	68b9      	ldr	r1, [r7, #8]
 800045c:	68f8      	ldr	r0, [r7, #12]
 800045e:	f000 f837 	bl	80004d0 <_ZNSt15__new_allocatorImE10deallocateEPmj>
 8000462:	bf00      	nop
 8000464:	3710      	adds	r7, #16
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}

0800046a <_ZSt8_DestroyIPmEvT_S1_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800046a:	b580      	push	{r7, lr}
 800046c:	b082      	sub	sp, #8
 800046e:	af00      	add	r7, sp, #0
 8000470:	6078      	str	r0, [r7, #4]
 8000472:	6039      	str	r1, [r7, #0]
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8000474:	6839      	ldr	r1, [r7, #0]
 8000476:	6878      	ldr	r0, [r7, #4]
 8000478:	f000 f83a 	bl	80004f0 <_ZNSt12_Destroy_auxILb1EE9__destroyIPmEEvT_S3_>
    }
 800047c:	bf00      	nop
 800047e:	3708      	adds	r7, #8
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}

08000484 <_ZNSt15__new_allocatorIyEC1Ev>:
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	4618      	mov	r0, r3
 8000490:	370c      	adds	r7, #12
 8000492:	46bd      	mov	sp, r7
 8000494:	bc80      	pop	{r7}
 8000496:	4770      	bx	lr

08000498 <_ZNSt16allocator_traitsISaIyEE10deallocateERS0_Pyj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8000498:	b580      	push	{r7, lr}
 800049a:	b084      	sub	sp, #16
 800049c:	af00      	add	r7, sp, #0
 800049e:	60f8      	str	r0, [r7, #12]
 80004a0:	60b9      	str	r1, [r7, #8]
 80004a2:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80004a4:	687a      	ldr	r2, [r7, #4]
 80004a6:	68b9      	ldr	r1, [r7, #8]
 80004a8:	68f8      	ldr	r0, [r7, #12]
 80004aa:	f000 f82b 	bl	8000504 <_ZNSt15__new_allocatorIyE10deallocateEPyj>
 80004ae:	bf00      	nop
 80004b0:	3710      	adds	r7, #16
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}

080004b6 <_ZSt8_DestroyIPyEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80004b6:	b580      	push	{r7, lr}
 80004b8:	b082      	sub	sp, #8
 80004ba:	af00      	add	r7, sp, #0
 80004bc:	6078      	str	r0, [r7, #4]
 80004be:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 80004c0:	6839      	ldr	r1, [r7, #0]
 80004c2:	6878      	ldr	r0, [r7, #4]
 80004c4:	f000 f82e 	bl	8000524 <_ZNSt12_Destroy_auxILb1EE9__destroyIPyEEvT_S3_>
    }
 80004c8:	bf00      	nop
 80004ca:	3708      	adds	r7, #8
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}

080004d0 <_ZNSt15__new_allocatorImE10deallocateEPmj>:
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	60b9      	str	r1, [r7, #8]
 80004da:	607a      	str	r2, [r7, #4]
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	009b      	lsls	r3, r3, #2
 80004e0:	4619      	mov	r1, r3
 80004e2:	68b8      	ldr	r0, [r7, #8]
 80004e4:	f002 fe00 	bl	80030e8 <_ZdlPvj>
      }
 80004e8:	bf00      	nop
 80004ea:	3710      	adds	r7, #16
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}

080004f0 <_ZNSt12_Destroy_auxILb1EE9__destroyIPmEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
 80004f8:	6039      	str	r1, [r7, #0]
 80004fa:	bf00      	nop
 80004fc:	370c      	adds	r7, #12
 80004fe:	46bd      	mov	sp, r7
 8000500:	bc80      	pop	{r7}
 8000502:	4770      	bx	lr

08000504 <_ZNSt15__new_allocatorIyE10deallocateEPyj>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0
 800050a:	60f8      	str	r0, [r7, #12]
 800050c:	60b9      	str	r1, [r7, #8]
 800050e:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	00db      	lsls	r3, r3, #3
 8000514:	4619      	mov	r1, r3
 8000516:	68b8      	ldr	r0, [r7, #8]
 8000518:	f002 fde6 	bl	80030e8 <_ZdlPvj>
      }
 800051c:	bf00      	nop
 800051e:	3710      	adds	r7, #16
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}

08000524 <_ZNSt12_Destroy_auxILb1EE9__destroyIPyEEvT_S3_>:
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
 800052c:	6039      	str	r1, [r7, #0]
 800052e:	bf00      	nop
 8000530:	370c      	adds	r7, #12
 8000532:	46bd      	mov	sp, r7
 8000534:	bc80      	pop	{r7}
 8000536:	4770      	bx	lr

08000538 <_ZN7EncoderC1EP17TIM_HandleTypeDefS1_mf>:
 
#include "encoder.hpp"
#include "motorControl.hpp"
#include "cmath"

Encoder::Encoder(TIM_HandleTypeDef* enc1, TIM_HandleTypeDef* enc2, uint32_t maxCount, float countsPerRevolution)
 8000538:	b480      	push	{r7}
 800053a:	b085      	sub	sp, #20
 800053c:	af00      	add	r7, sp, #0
 800053e:	60f8      	str	r0, [r7, #12]
 8000540:	60b9      	str	r1, [r7, #8]
 8000542:	607a      	str	r2, [r7, #4]
 8000544:	603b      	str	r3, [r7, #0]
    : encoder1(enc1), encoder2(enc2), maxEncoderCount(maxCount), countsPerRev(countsPerRevolution) {
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	68ba      	ldr	r2, [r7, #8]
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	687a      	ldr	r2, [r7, #4]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	683a      	ldr	r2, [r7, #0]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	69ba      	ldr	r2, [r7, #24]
 800055c:	60da      	str	r2, [r3, #12]
    // Constructor
};
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	4618      	mov	r0, r3
 8000562:	3714      	adds	r7, #20
 8000564:	46bd      	mov	sp, r7
 8000566:	bc80      	pop	{r7}
 8000568:	4770      	bx	lr
	...

0800056c <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8000574:	4b07      	ldr	r3, [pc, #28]	@ (8000594 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8000576:	4a08      	ldr	r2, [pc, #32]	@ (8000598 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000578:	2100      	movs	r1, #0
 800057a:	6878      	ldr	r0, [r7, #4]
 800057c:	f000 ffb1 	bl	80014e2 <HAL_CAN_GetRxMessage>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000580:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000584:	4805      	ldr	r0, [pc, #20]	@ (800059c <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000586:	f001 fdb7 	bl	80020f8 <HAL_GPIO_TogglePin>
}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	20000104 	.word	0x20000104
 8000598:	200000e8 	.word	0x200000e8
 800059c:	40011000 	.word	0x40011000

080005a0 <_ZN6CANBusD1Ev>:
#include "stm32f1xx_hal.h"
#include "main.hpp"
#include <vector>
#include <cstdint>

class CANBus {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	3328      	adds	r3, #40	@ 0x28
 80005ac:	4618      	mov	r0, r3
 80005ae:	f000 fa12 	bl	80009d6 <_ZNSt6vectorIySaIyEED1Ev>
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	331c      	adds	r3, #28
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 f9f2 	bl	80009a0 <_ZNSt6vectorImSaImEED1Ev>
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	4618      	mov	r0, r3
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
	...

080005c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b09e      	sub	sp, #120	@ 0x78
 80005cc:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	CANBus canBus;
 80005ce:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80005d2:	4618      	mov	r0, r3
 80005d4:	f7ff fdee 	bl	80001b4 <_ZN6CANBusC1Ev>
	CAN_ErrorFlags error_flags;
	MotorControl motorControl(&htim2, TIM_CHANNEL_3);
 80005d8:	f107 031c 	add.w	r3, r7, #28
 80005dc:	2208      	movs	r2, #8
 80005de:	4919      	ldr	r1, [pc, #100]	@ (8000644 <main+0x7c>)
 80005e0:	4618      	mov	r0, r3
 80005e2:	f000 fa89 	bl	8000af8 <_ZN12MotorControlC1EP17TIM_HandleTypeDefm>
	Encoder encoder(&htim2, &htim2, 65535, 1000);
 80005e6:	f107 000c 	add.w	r0, r7, #12
 80005ea:	4b17      	ldr	r3, [pc, #92]	@ (8000648 <main+0x80>)
 80005ec:	9300      	str	r3, [sp, #0]
 80005ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80005f2:	4a14      	ldr	r2, [pc, #80]	@ (8000644 <main+0x7c>)
 80005f4:	4913      	ldr	r1, [pc, #76]	@ (8000644 <main+0x7c>)
 80005f6:	f7ff ff9f 	bl	8000538 <_ZN7EncoderC1EP17TIM_HandleTypeDefS1_mf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fa:	f000 fc15 	bl	8000e28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fe:	f000 f829 	bl	8000654 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000602:	f000 f959 	bl	80008b8 <_ZL12MX_GPIO_Initv>
  MX_CAN_Init();
 8000606:	f000 f875 	bl	80006f4 <_ZL11MX_CAN_Initv>
  MX_TIM2_Init();
 800060a:	f000 f8c5 	bl	8000798 <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */
  uint8_t trump[8] = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08}; // Example data
 800060e:	4a0f      	ldr	r2, [pc, #60]	@ (800064c <main+0x84>)
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000616:	e883 0003 	stmia.w	r3, {r0, r1}

  canBus.start(&hcan, CAN_ID_STD);
 800061a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800061e:	2200      	movs	r2, #0
 8000620:	490b      	ldr	r1, [pc, #44]	@ (8000650 <main+0x88>)
 8000622:	4618      	mov	r0, r3
 8000624:	f7ff fdd9 	bl	80001da <_ZN6CANBus5startEP17CAN_HandleTypeDefh>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* USER CODE END WHILE */
	  canBus.transmit(&hcan, trump, 446);
 8000628:	1d3a      	adds	r2, r7, #4
 800062a:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 800062e:	f44f 73df 	mov.w	r3, #446	@ 0x1be
 8000632:	4907      	ldr	r1, [pc, #28]	@ (8000650 <main+0x88>)
 8000634:	f7ff fe01 	bl	800023a <_ZN6CANBus8transmitEP17CAN_HandleTypeDefPht>
	  HAL_Delay(300);
 8000638:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800063c:	f000 fc56 	bl	8000eec <HAL_Delay>
	  canBus.transmit(&hcan, trump, 446);
 8000640:	bf00      	nop
 8000642:	e7f1      	b.n	8000628 <main+0x60>
 8000644:	200000a0 	.word	0x200000a0
 8000648:	447a0000 	.word	0x447a0000
 800064c:	0800321c 	.word	0x0800321c
 8000650:	20000078 	.word	0x20000078

08000654 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b090      	sub	sp, #64	@ 0x40
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 0318 	add.w	r3, r7, #24
 800065e:	2228      	movs	r2, #40	@ 0x28
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f002 fd58 	bl	8003118 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]
 8000674:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000676:	2301      	movs	r3, #1
 8000678:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800067a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800067e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000684:	2301      	movs	r3, #1
 8000686:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000688:	2302      	movs	r3, #2
 800068a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800068c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000690:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000692:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000696:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000698:	f107 0318 	add.w	r3, r7, #24
 800069c:	4618      	mov	r0, r3
 800069e:	f001 fd45 	bl	800212c <HAL_RCC_OscConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	bf14      	ite	ne
 80006a8:	2301      	movne	r3, #1
 80006aa:	2300      	moveq	r3, #0
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 80006b2:	f000 f96f 	bl	8000994 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b6:	230f      	movs	r3, #15
 80006b8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ba:	2302      	movs	r3, #2
 80006bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	2102      	movs	r1, #2
 80006d0:	4618      	mov	r0, r3
 80006d2:	f001 ffad 	bl	8002630 <HAL_RCC_ClockConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	bf14      	ite	ne
 80006dc:	2301      	movne	r3, #1
 80006de:	2300      	moveq	r3, #0
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 80006e6:	f000 f955 	bl	8000994 <Error_Handler>
  }
}
 80006ea:	bf00      	nop
 80006ec:	3740      	adds	r7, #64	@ 0x40
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
	...

080006f4 <_ZL11MX_CAN_Initv>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b090      	sub	sp, #64	@ 0x40
 80006f8:	af02      	add	r7, sp, #8
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80006fa:	4b25      	ldr	r3, [pc, #148]	@ (8000790 <_ZL11MX_CAN_Initv+0x9c>)
 80006fc:	4a25      	ldr	r2, [pc, #148]	@ (8000794 <_ZL11MX_CAN_Initv+0xa0>)
 80006fe:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 36;
 8000700:	4b23      	ldr	r3, [pc, #140]	@ (8000790 <_ZL11MX_CAN_Initv+0x9c>)
 8000702:	2224      	movs	r2, #36	@ 0x24
 8000704:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 8000706:	4b22      	ldr	r3, [pc, #136]	@ (8000790 <_ZL11MX_CAN_Initv+0x9c>)
 8000708:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800070c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800070e:	4b20      	ldr	r3, [pc, #128]	@ (8000790 <_ZL11MX_CAN_Initv+0x9c>)
 8000710:	2200      	movs	r2, #0
 8000712:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000714:	4b1e      	ldr	r3, [pc, #120]	@ (8000790 <_ZL11MX_CAN_Initv+0x9c>)
 8000716:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800071a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800071c:	4b1c      	ldr	r3, [pc, #112]	@ (8000790 <_ZL11MX_CAN_Initv+0x9c>)
 800071e:	2200      	movs	r2, #0
 8000720:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000722:	4b1b      	ldr	r3, [pc, #108]	@ (8000790 <_ZL11MX_CAN_Initv+0x9c>)
 8000724:	2200      	movs	r2, #0
 8000726:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000728:	4b19      	ldr	r3, [pc, #100]	@ (8000790 <_ZL11MX_CAN_Initv+0x9c>)
 800072a:	2200      	movs	r2, #0
 800072c:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800072e:	4b18      	ldr	r3, [pc, #96]	@ (8000790 <_ZL11MX_CAN_Initv+0x9c>)
 8000730:	2200      	movs	r2, #0
 8000732:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000734:	4b16      	ldr	r3, [pc, #88]	@ (8000790 <_ZL11MX_CAN_Initv+0x9c>)
 8000736:	2200      	movs	r2, #0
 8000738:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800073a:	4b15      	ldr	r3, [pc, #84]	@ (8000790 <_ZL11MX_CAN_Initv+0x9c>)
 800073c:	2200      	movs	r2, #0
 800073e:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000740:	4b13      	ldr	r3, [pc, #76]	@ (8000790 <_ZL11MX_CAN_Initv+0x9c>)
 8000742:	2200      	movs	r2, #0
 8000744:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000746:	4812      	ldr	r0, [pc, #72]	@ (8000790 <_ZL11MX_CAN_Initv+0x9c>)
 8000748:	f000 fbf4 	bl	8000f34 <HAL_CAN_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	bf14      	ite	ne
 8000752:	2301      	movne	r3, #1
 8000754:	2300      	moveq	r3, #0
 8000756:	b2db      	uxtb	r3, r3
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <_ZL11MX_CAN_Initv+0x6c>
  {
    Error_Handler();
 800075c:	f000 f91a 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CANBus canBus;
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff fd26 	bl	80001b4 <_ZN6CANBusC1Ev>

  canBus.configureFilter(&hcan, 0b00100010000, 0b00110110000, 10, 0);
 8000768:	1d38      	adds	r0, r7, #4
 800076a:	2300      	movs	r3, #0
 800076c:	9301      	str	r3, [sp, #4]
 800076e:	230a      	movs	r3, #10
 8000770:	9300      	str	r3, [sp, #0]
 8000772:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 8000776:	f44f 7288 	mov.w	r2, #272	@ 0x110
 800077a:	4905      	ldr	r1, [pc, #20]	@ (8000790 <_ZL11MX_CAN_Initv+0x9c>)
 800077c:	f7ff fd7d 	bl	800027a <_ZN6CANBus15configureFilterEP17CAN_HandleTypeDeftthh>
  /* USER CODE END CAN_Init 2 */

}
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	4618      	mov	r0, r3
 8000784:	f7ff ff0c 	bl	80005a0 <_ZN6CANBusD1Ev>
 8000788:	3738      	adds	r7, #56	@ 0x38
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20000078 	.word	0x20000078
 8000794:	40006400 	.word	0x40006400

08000798 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b092      	sub	sp, #72	@ 0x48
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800079e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007a2:	2224      	movs	r2, #36	@ 0x24
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f002 fcb6 	bl	8003118 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ac:	f107 031c 	add.w	r3, r7, #28
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007b6:	463b      	mov	r3, r7
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
 80007c2:	611a      	str	r2, [r3, #16]
 80007c4:	615a      	str	r2, [r3, #20]
 80007c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007c8:	4b3a      	ldr	r3, [pc, #232]	@ (80008b4 <_ZL12MX_TIM2_Initv+0x11c>)
 80007ca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007d0:	4b38      	ldr	r3, [pc, #224]	@ (80008b4 <_ZL12MX_TIM2_Initv+0x11c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d6:	4b37      	ldr	r3, [pc, #220]	@ (80008b4 <_ZL12MX_TIM2_Initv+0x11c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80007dc:	4b35      	ldr	r3, [pc, #212]	@ (80008b4 <_ZL12MX_TIM2_Initv+0x11c>)
 80007de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e4:	4b33      	ldr	r3, [pc, #204]	@ (80008b4 <_ZL12MX_TIM2_Initv+0x11c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ea:	4b32      	ldr	r3, [pc, #200]	@ (80008b4 <_ZL12MX_TIM2_Initv+0x11c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007f0:	4830      	ldr	r0, [pc, #192]	@ (80008b4 <_ZL12MX_TIM2_Initv+0x11c>)
 80007f2:	f002 f879 	bl	80028e8 <HAL_TIM_PWM_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	bf14      	ite	ne
 80007fc:	2301      	movne	r3, #1
 80007fe:	2300      	moveq	r3, #0
 8000800:	b2db      	uxtb	r3, r3
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <_ZL12MX_TIM2_Initv+0x72>
  {
    Error_Handler();
 8000806:	f000 f8c5 	bl	8000994 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800080a:	2303      	movs	r3, #3
 800080c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800080e:	2300      	movs	r3, #0
 8000810:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000812:	2301      	movs	r3, #1
 8000814:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000816:	2300      	movs	r3, #0
 8000818:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfig.IC1Filter = 0;
 800081a:	2300      	movs	r3, #0
 800081c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800081e:	2300      	movs	r3, #0
 8000820:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000822:	2301      	movs	r3, #1
 8000824:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000826:	2300      	movs	r3, #0
 8000828:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.IC2Filter = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800082e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000832:	4619      	mov	r1, r3
 8000834:	481f      	ldr	r0, [pc, #124]	@ (80008b4 <_ZL12MX_TIM2_Initv+0x11c>)
 8000836:	f002 f8a6 	bl	8002986 <HAL_TIM_Encoder_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	bf14      	ite	ne
 8000840:	2301      	movne	r3, #1
 8000842:	2300      	moveq	r3, #0
 8000844:	b2db      	uxtb	r3, r3
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <_ZL12MX_TIM2_Initv+0xb6>
  {
    Error_Handler();
 800084a:	f000 f8a3 	bl	8000994 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800084e:	2300      	movs	r3, #0
 8000850:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000852:	2300      	movs	r3, #0
 8000854:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000856:	f107 031c 	add.w	r3, r7, #28
 800085a:	4619      	mov	r1, r3
 800085c:	4815      	ldr	r0, [pc, #84]	@ (80008b4 <_ZL12MX_TIM2_Initv+0x11c>)
 800085e:	f002 fbeb 	bl	8003038 <HAL_TIMEx_MasterConfigSynchronization>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	bf14      	ite	ne
 8000868:	2301      	movne	r3, #1
 800086a:	2300      	moveq	r3, #0
 800086c:	b2db      	uxtb	r3, r3
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <_ZL12MX_TIM2_Initv+0xde>
  {
    Error_Handler();
 8000872:	f000 f88f 	bl	8000994 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000876:	2360      	movs	r3, #96	@ 0x60
 8000878:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800087e:	2300      	movs	r3, #0
 8000880:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000882:	2300      	movs	r3, #0
 8000884:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000886:	463b      	mov	r3, r7
 8000888:	2208      	movs	r2, #8
 800088a:	4619      	mov	r1, r3
 800088c:	4809      	ldr	r0, [pc, #36]	@ (80008b4 <_ZL12MX_TIM2_Initv+0x11c>)
 800088e:	f002 f925 	bl	8002adc <HAL_TIM_PWM_ConfigChannel>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	bf14      	ite	ne
 8000898:	2301      	movne	r3, #1
 800089a:	2300      	moveq	r3, #0
 800089c:	b2db      	uxtb	r3, r3
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <_ZL12MX_TIM2_Initv+0x10e>
  {
    Error_Handler();
 80008a2:	f000 f877 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80008a6:	4803      	ldr	r0, [pc, #12]	@ (80008b4 <_ZL12MX_TIM2_Initv+0x11c>)
 80008a8:	f000 fa22 	bl	8000cf0 <HAL_TIM_MspPostInit>

}
 80008ac:	bf00      	nop
 80008ae:	3748      	adds	r7, #72	@ 0x48
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	200000a0 	.word	0x200000a0

080008b8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b088      	sub	sp, #32
 80008bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008be:	f107 0310 	add.w	r3, r7, #16
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008cc:	4b2e      	ldr	r3, [pc, #184]	@ (8000988 <_ZL12MX_GPIO_Initv+0xd0>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	4a2d      	ldr	r2, [pc, #180]	@ (8000988 <_ZL12MX_GPIO_Initv+0xd0>)
 80008d2:	f043 0310 	orr.w	r3, r3, #16
 80008d6:	6193      	str	r3, [r2, #24]
 80008d8:	4b2b      	ldr	r3, [pc, #172]	@ (8000988 <_ZL12MX_GPIO_Initv+0xd0>)
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	f003 0310 	and.w	r3, r3, #16
 80008e0:	60fb      	str	r3, [r7, #12]
 80008e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008e4:	4b28      	ldr	r3, [pc, #160]	@ (8000988 <_ZL12MX_GPIO_Initv+0xd0>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	4a27      	ldr	r2, [pc, #156]	@ (8000988 <_ZL12MX_GPIO_Initv+0xd0>)
 80008ea:	f043 0320 	orr.w	r3, r3, #32
 80008ee:	6193      	str	r3, [r2, #24]
 80008f0:	4b25      	ldr	r3, [pc, #148]	@ (8000988 <_ZL12MX_GPIO_Initv+0xd0>)
 80008f2:	699b      	ldr	r3, [r3, #24]
 80008f4:	f003 0320 	and.w	r3, r3, #32
 80008f8:	60bb      	str	r3, [r7, #8]
 80008fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fc:	4b22      	ldr	r3, [pc, #136]	@ (8000988 <_ZL12MX_GPIO_Initv+0xd0>)
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	4a21      	ldr	r2, [pc, #132]	@ (8000988 <_ZL12MX_GPIO_Initv+0xd0>)
 8000902:	f043 0304 	orr.w	r3, r3, #4
 8000906:	6193      	str	r3, [r2, #24]
 8000908:	4b1f      	ldr	r3, [pc, #124]	@ (8000988 <_ZL12MX_GPIO_Initv+0xd0>)
 800090a:	699b      	ldr	r3, [r3, #24]
 800090c:	f003 0304 	and.w	r3, r3, #4
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000914:	4b1c      	ldr	r3, [pc, #112]	@ (8000988 <_ZL12MX_GPIO_Initv+0xd0>)
 8000916:	699b      	ldr	r3, [r3, #24]
 8000918:	4a1b      	ldr	r2, [pc, #108]	@ (8000988 <_ZL12MX_GPIO_Initv+0xd0>)
 800091a:	f043 0308 	orr.w	r3, r3, #8
 800091e:	6193      	str	r3, [r2, #24]
 8000920:	4b19      	ldr	r3, [pc, #100]	@ (8000988 <_ZL12MX_GPIO_Initv+0xd0>)
 8000922:	699b      	ldr	r3, [r3, #24]
 8000924:	f003 0308 	and.w	r3, r3, #8
 8000928:	603b      	str	r3, [r7, #0]
 800092a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800092c:	2201      	movs	r2, #1
 800092e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000932:	4816      	ldr	r0, [pc, #88]	@ (800098c <_ZL12MX_GPIO_Initv+0xd4>)
 8000934:	f001 fbc8 	bl	80020c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000938:	2200      	movs	r2, #0
 800093a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800093e:	4814      	ldr	r0, [pc, #80]	@ (8000990 <_ZL12MX_GPIO_Initv+0xd8>)
 8000940:	f001 fbc2 	bl	80020c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000944:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000948:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094a:	2301      	movs	r3, #1
 800094c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800094e:	2301      	movs	r3, #1
 8000950:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000952:	2301      	movs	r3, #1
 8000954:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000956:	f107 0310 	add.w	r3, r7, #16
 800095a:	4619      	mov	r1, r3
 800095c:	480b      	ldr	r0, [pc, #44]	@ (800098c <_ZL12MX_GPIO_Initv+0xd4>)
 800095e:	f001 fa37 	bl	8001dd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000962:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000966:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000968:	2301      	movs	r3, #1
 800096a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000970:	2302      	movs	r3, #2
 8000972:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000974:	f107 0310 	add.w	r3, r7, #16
 8000978:	4619      	mov	r1, r3
 800097a:	4805      	ldr	r0, [pc, #20]	@ (8000990 <_ZL12MX_GPIO_Initv+0xd8>)
 800097c:	f001 fa28 	bl	8001dd0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000980:	bf00      	nop
 8000982:	3720      	adds	r7, #32
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40021000 	.word	0x40021000
 800098c:	40011000 	.word	0x40011000
 8000990:	40010c00 	.word	0x40010c00

08000994 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000998:	b672      	cpsid	i
}
 800099a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800099c:	bf00      	nop
 800099e:	e7fd      	b.n	800099c <Error_Handler+0x8>

080009a0 <_ZNSt6vectorImSaImEED1Ev>:
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      _GLIBCXX20_CONSTEXPR
      ~vector() _GLIBCXX_NOEXCEPT
 80009a0:	b5b0      	push	{r4, r5, r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681c      	ldr	r4, [r3, #0]
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff fcde 	bl	8000374 <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 80009b8:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80009ba:	461a      	mov	r2, r3
 80009bc:	4629      	mov	r1, r5
 80009be:	4620      	mov	r0, r4
 80009c0:	f7ff fce2 	bl	8000388 <_ZSt8_DestroyIPmmEvT_S1_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	4618      	mov	r0, r3
 80009c8:	f000 f82c 	bl	8000a24 <_ZNSt12_Vector_baseImSaImEED1Ev>
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	4618      	mov	r0, r3
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bdb0      	pop	{r4, r5, r7, pc}

080009d6 <_ZNSt6vectorIySaIyEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 80009d6:	b5b0      	push	{r4, r5, r7, lr}
 80009d8:	b082      	sub	sp, #8
 80009da:	af00      	add	r7, sp, #0
 80009dc:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681c      	ldr	r4, [r3, #0]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff fd0d 	bl	8000408 <_ZNSt12_Vector_baseIySaIyEE19_M_get_Tp_allocatorEv>
 80009ee:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80009f0:	461a      	mov	r2, r3
 80009f2:	4629      	mov	r1, r5
 80009f4:	4620      	mov	r0, r4
 80009f6:	f7ff fd11 	bl	800041c <_ZSt8_DestroyIPyyEvT_S1_RSaIT0_E>
      }
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4618      	mov	r0, r3
 80009fe:	f000 f836 	bl	8000a6e <_ZNSt12_Vector_baseIySaIyEED1Ev>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4618      	mov	r0, r3
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bdb0      	pop	{r4, r5, r7, pc}

08000a0c <_ZNSt12_Vector_baseImSaImEE12_Vector_implD1Ev>:
      struct _Vector_impl
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	f000 f843 	bl	8000aa0 <_ZNSaImED1Ev>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3708      	adds	r7, #8
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <_ZNSt12_Vector_baseImSaImEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	689a      	ldr	r2, [r3, #8]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	1ad3      	subs	r3, r2, r3
 8000a3a:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	6878      	ldr	r0, [r7, #4]
 8000a40:	f7ff fc85 	bl	800034e <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj>
      }
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	4618      	mov	r0, r3
 8000a48:	f7ff ffe0 	bl	8000a0c <_ZNSt12_Vector_baseImSaImEE12_Vector_implD1Ev>
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <_ZNSt12_Vector_baseIySaIyEE12_Vector_implD1Ev>:
      struct _Vector_impl
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b082      	sub	sp, #8
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
 8000a5e:	6878      	ldr	r0, [r7, #4]
 8000a60:	f000 f82a 	bl	8000ab8 <_ZNSaIyED1Ev>
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	4618      	mov	r0, r3
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <_ZNSt12_Vector_baseIySaIyEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	b082      	sub	sp, #8
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	689a      	ldr	r2, [r3, #8]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	1ad3      	subs	r3, r2, r3
 8000a84:	10db      	asrs	r3, r3, #3
	_M_deallocate(_M_impl._M_start,
 8000a86:	461a      	mov	r2, r3
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f7ff fcaa 	bl	80003e2 <_ZNSt12_Vector_baseIySaIyEE13_M_deallocateEPyj>
      }
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff ffe0 	bl	8000a56 <_ZNSt12_Vector_baseIySaIyEE12_Vector_implD1Ev>
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <_ZNSaImED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f000 f811 	bl	8000ad0 <_ZNSt15__new_allocatorImED1Ev>
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <_ZNSaIyED1Ev>:
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f000 f80f 	bl	8000ae4 <_ZNSt15__new_allocatorIyED1Ev>
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <_ZNSt15__new_allocatorImED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	4618      	mov	r0, r3
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr

08000ae4 <_ZNSt15__new_allocatorIyED1Ev>:
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	4618      	mov	r0, r3
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr

08000af8 <_ZN12MotorControlC1EP17TIM_HandleTypeDefm>:

#include "motorControl.hpp"
#include <cmath>

// Constructor
MotorControl::MotorControl(TIM_HandleTypeDef* timer, uint32_t channel)
 8000af8:	b480      	push	{r7}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	60f8      	str	r0, [r7, #12]
 8000b00:	60b9      	str	r1, [r7, #8]
 8000b02:	607a      	str	r2, [r7, #4]
    : htim(timer), channel(channel), lastDirection(GPIO_PIN_SET),
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	68ba      	ldr	r2, [r7, #8]
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	687a      	ldr	r2, [r7, #4]
 8000b0e:	605a      	str	r2, [r3, #4]
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	2201      	movs	r2, #1
 8000b14:	721a      	strb	r2, [r3, #8]
      integral(0.0f), previousError(0.0f) {}
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	f04f 0200 	mov.w	r2, #0
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	f04f 0200 	mov.w	r2, #0
 8000b24:	611a      	str	r2, [r3, #16]
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3714      	adds	r7, #20
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bc80      	pop	{r7}
 8000b30:	4770      	bx	lr
	...

08000b34 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b3a:	4b15      	ldr	r3, [pc, #84]	@ (8000b90 <HAL_MspInit+0x5c>)
 8000b3c:	699b      	ldr	r3, [r3, #24]
 8000b3e:	4a14      	ldr	r2, [pc, #80]	@ (8000b90 <HAL_MspInit+0x5c>)
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	6193      	str	r3, [r2, #24]
 8000b46:	4b12      	ldr	r3, [pc, #72]	@ (8000b90 <HAL_MspInit+0x5c>)
 8000b48:	699b      	ldr	r3, [r3, #24]
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	60bb      	str	r3, [r7, #8]
 8000b50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b52:	4b0f      	ldr	r3, [pc, #60]	@ (8000b90 <HAL_MspInit+0x5c>)
 8000b54:	69db      	ldr	r3, [r3, #28]
 8000b56:	4a0e      	ldr	r2, [pc, #56]	@ (8000b90 <HAL_MspInit+0x5c>)
 8000b58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b5c:	61d3      	str	r3, [r2, #28]
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b90 <HAL_MspInit+0x5c>)
 8000b60:	69db      	ldr	r3, [r3, #28]
 8000b62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b94 <HAL_MspInit+0x60>)
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	4a04      	ldr	r2, [pc, #16]	@ (8000b94 <HAL_MspInit+0x60>)
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b86:	bf00      	nop
 8000b88:	3714      	adds	r7, #20
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bc80      	pop	{r7}
 8000b8e:	4770      	bx	lr
 8000b90:	40021000 	.word	0x40021000
 8000b94:	40010000 	.word	0x40010000

08000b98 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08a      	sub	sp, #40	@ 0x28
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a2d      	ldr	r2, [pc, #180]	@ (8000c68 <HAL_CAN_MspInit+0xd0>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d153      	bne.n	8000c60 <HAL_CAN_MspInit+0xc8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000bb8:	4b2c      	ldr	r3, [pc, #176]	@ (8000c6c <HAL_CAN_MspInit+0xd4>)
 8000bba:	69db      	ldr	r3, [r3, #28]
 8000bbc:	4a2b      	ldr	r2, [pc, #172]	@ (8000c6c <HAL_CAN_MspInit+0xd4>)
 8000bbe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000bc2:	61d3      	str	r3, [r2, #28]
 8000bc4:	4b29      	ldr	r3, [pc, #164]	@ (8000c6c <HAL_CAN_MspInit+0xd4>)
 8000bc6:	69db      	ldr	r3, [r3, #28]
 8000bc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000bcc:	613b      	str	r3, [r7, #16]
 8000bce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd0:	4b26      	ldr	r3, [pc, #152]	@ (8000c6c <HAL_CAN_MspInit+0xd4>)
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	4a25      	ldr	r2, [pc, #148]	@ (8000c6c <HAL_CAN_MspInit+0xd4>)
 8000bd6:	f043 0308 	orr.w	r3, r3, #8
 8000bda:	6193      	str	r3, [r2, #24]
 8000bdc:	4b23      	ldr	r3, [pc, #140]	@ (8000c6c <HAL_CAN_MspInit+0xd4>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	f003 0308 	and.w	r3, r3, #8
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000be8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf6:	f107 0314 	add.w	r3, r7, #20
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	481c      	ldr	r0, [pc, #112]	@ (8000c70 <HAL_CAN_MspInit+0xd8>)
 8000bfe:	f001 f8e7 	bl	8001dd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c02:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	4619      	mov	r1, r3
 8000c16:	4816      	ldr	r0, [pc, #88]	@ (8000c70 <HAL_CAN_MspInit+0xd8>)
 8000c18:	f001 f8da 	bl	8001dd0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000c1c:	4b15      	ldr	r3, [pc, #84]	@ (8000c74 <HAL_CAN_MspInit+0xdc>)
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c24:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8000c28:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c2c:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000c30:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c38:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c3a:	4a0e      	ldr	r2, [pc, #56]	@ (8000c74 <HAL_CAN_MspInit+0xdc>)
 8000c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c3e:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000c40:	2200      	movs	r2, #0
 8000c42:	2100      	movs	r1, #0
 8000c44:	2014      	movs	r0, #20
 8000c46:	f001 f88c 	bl	8001d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000c4a:	2014      	movs	r0, #20
 8000c4c:	f001 f8a5 	bl	8001d9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000c50:	2200      	movs	r2, #0
 8000c52:	2100      	movs	r1, #0
 8000c54:	2015      	movs	r0, #21
 8000c56:	f001 f884 	bl	8001d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000c5a:	2015      	movs	r0, #21
 8000c5c:	f001 f89d 	bl	8001d9a <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000c60:	bf00      	nop
 8000c62:	3728      	adds	r7, #40	@ 0x28
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	40006400 	.word	0x40006400
 8000c6c:	40021000 	.word	0x40021000
 8000c70:	40010c00 	.word	0x40010c00
 8000c74:	40010000 	.word	0x40010000

08000c78 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b088      	sub	sp, #32
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 0310 	add.w	r3, r7, #16
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
  if(htim_pwm->Instance==TIM2)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c96:	d123      	bne.n	8000ce0 <HAL_TIM_PWM_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c98:	4b13      	ldr	r3, [pc, #76]	@ (8000ce8 <HAL_TIM_PWM_MspInit+0x70>)
 8000c9a:	69db      	ldr	r3, [r3, #28]
 8000c9c:	4a12      	ldr	r2, [pc, #72]	@ (8000ce8 <HAL_TIM_PWM_MspInit+0x70>)
 8000c9e:	f043 0301 	orr.w	r3, r3, #1
 8000ca2:	61d3      	str	r3, [r2, #28]
 8000ca4:	4b10      	ldr	r3, [pc, #64]	@ (8000ce8 <HAL_TIM_PWM_MspInit+0x70>)
 8000ca6:	69db      	ldr	r3, [r3, #28]
 8000ca8:	f003 0301 	and.w	r3, r3, #1
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb0:	4b0d      	ldr	r3, [pc, #52]	@ (8000ce8 <HAL_TIM_PWM_MspInit+0x70>)
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	4a0c      	ldr	r2, [pc, #48]	@ (8000ce8 <HAL_TIM_PWM_MspInit+0x70>)
 8000cb6:	f043 0304 	orr.w	r3, r3, #4
 8000cba:	6193      	str	r3, [r2, #24]
 8000cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce8 <HAL_TIM_PWM_MspInit+0x70>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	f003 0304 	and.w	r3, r3, #4
 8000cc4:	60bb      	str	r3, [r7, #8]
 8000cc6:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000cc8:	2303      	movs	r3, #3
 8000cca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd4:	f107 0310 	add.w	r3, r7, #16
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4804      	ldr	r0, [pc, #16]	@ (8000cec <HAL_TIM_PWM_MspInit+0x74>)
 8000cdc:	f001 f878 	bl	8001dd0 <HAL_GPIO_Init>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000ce0:	bf00      	nop
 8000ce2:	3720      	adds	r7, #32
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40021000 	.word	0x40021000
 8000cec:	40010800 	.word	0x40010800

08000cf0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b088      	sub	sp, #32
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf8:	f107 0310 	add.w	r3, r7, #16
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d0e:	d117      	bne.n	8000d40 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d10:	4b0d      	ldr	r3, [pc, #52]	@ (8000d48 <HAL_TIM_MspPostInit+0x58>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	4a0c      	ldr	r2, [pc, #48]	@ (8000d48 <HAL_TIM_MspPostInit+0x58>)
 8000d16:	f043 0304 	orr.w	r3, r3, #4
 8000d1a:	6193      	str	r3, [r2, #24]
 8000d1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d48 <HAL_TIM_MspPostInit+0x58>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	f003 0304 	and.w	r3, r3, #4
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d28:	2304      	movs	r3, #4
 8000d2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d30:	2302      	movs	r3, #2
 8000d32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d34:	f107 0310 	add.w	r3, r7, #16
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4804      	ldr	r0, [pc, #16]	@ (8000d4c <HAL_TIM_MspPostInit+0x5c>)
 8000d3c:	f001 f848 	bl	8001dd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000d40:	bf00      	nop
 8000d42:	3720      	adds	r7, #32
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	40021000 	.word	0x40021000
 8000d4c:	40010800 	.word	0x40010800

08000d50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d54:	bf00      	nop
 8000d56:	e7fd      	b.n	8000d54 <NMI_Handler+0x4>

08000d58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d5c:	bf00      	nop
 8000d5e:	e7fd      	b.n	8000d5c <HardFault_Handler+0x4>

08000d60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d64:	bf00      	nop
 8000d66:	e7fd      	b.n	8000d64 <MemManage_Handler+0x4>

08000d68 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d6c:	bf00      	nop
 8000d6e:	e7fd      	b.n	8000d6c <BusFault_Handler+0x4>

08000d70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d74:	bf00      	nop
 8000d76:	e7fd      	b.n	8000d74 <UsageFault_Handler+0x4>

08000d78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr

08000d84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc80      	pop	{r7}
 8000d8e:	4770      	bx	lr

08000d90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bc80      	pop	{r7}
 8000d9a:	4770      	bx	lr

08000d9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000da0:	f000 f888 	bl	8000eb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000dac:	4802      	ldr	r0, [pc, #8]	@ (8000db8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000dae:	f000 fcde 	bl	800176e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000078 	.word	0x20000078

08000dbc <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000dc0:	4802      	ldr	r0, [pc, #8]	@ (8000dcc <CAN1_RX1_IRQHandler+0x10>)
 8000dc2:	f000 fcd4 	bl	800176e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000078 	.word	0x20000078

08000dd0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bc80      	pop	{r7}
 8000dda:	4770      	bx	lr

08000ddc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ddc:	f7ff fff8 	bl	8000dd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000de0:	480b      	ldr	r0, [pc, #44]	@ (8000e10 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000de2:	490c      	ldr	r1, [pc, #48]	@ (8000e14 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000de4:	4a0c      	ldr	r2, [pc, #48]	@ (8000e18 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000de6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000de8:	e002      	b.n	8000df0 <LoopCopyDataInit>

08000dea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dee:	3304      	adds	r3, #4

08000df0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000df2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df4:	d3f9      	bcc.n	8000dea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000df6:	4a09      	ldr	r2, [pc, #36]	@ (8000e1c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000df8:	4c09      	ldr	r4, [pc, #36]	@ (8000e20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dfc:	e001      	b.n	8000e02 <LoopFillZerobss>

08000dfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e00:	3204      	adds	r2, #4

08000e02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e04:	d3fb      	bcc.n	8000dfe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e06:	f002 f98f 	bl	8003128 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e0a:	f7ff fbdd 	bl	80005c8 <main>
  bx lr
 8000e0e:	4770      	bx	lr
  ldr r0, =_sdata
 8000e10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e14:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e18:	08003250 	.word	0x08003250
  ldr r2, =_sbss
 8000e1c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e20:	20000250 	.word	0x20000250

08000e24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e24:	e7fe      	b.n	8000e24 <ADC1_2_IRQHandler>
	...

08000e28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e2c:	4b08      	ldr	r3, [pc, #32]	@ (8000e50 <HAL_Init+0x28>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a07      	ldr	r2, [pc, #28]	@ (8000e50 <HAL_Init+0x28>)
 8000e32:	f043 0310 	orr.w	r3, r3, #16
 8000e36:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e38:	2003      	movs	r0, #3
 8000e3a:	f000 ff87 	bl	8001d4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e3e:	200f      	movs	r0, #15
 8000e40:	f000 f808 	bl	8000e54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e44:	f7ff fe76 	bl	8000b34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e48:	2300      	movs	r3, #0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40022000 	.word	0x40022000

08000e54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e5c:	4b12      	ldr	r3, [pc, #72]	@ (8000ea8 <HAL_InitTick+0x54>)
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	4b12      	ldr	r3, [pc, #72]	@ (8000eac <HAL_InitTick+0x58>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	4619      	mov	r1, r3
 8000e66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e72:	4618      	mov	r0, r3
 8000e74:	f000 ff9f 	bl	8001db6 <HAL_SYSTICK_Config>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e00e      	b.n	8000ea0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2b0f      	cmp	r3, #15
 8000e86:	d80a      	bhi.n	8000e9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	6879      	ldr	r1, [r7, #4]
 8000e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e90:	f000 ff67 	bl	8001d62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e94:	4a06      	ldr	r2, [pc, #24]	@ (8000eb0 <HAL_InitTick+0x5c>)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	e000      	b.n	8000ea0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	20000000 	.word	0x20000000
 8000eac:	20000008 	.word	0x20000008
 8000eb0:	20000004 	.word	0x20000004

08000eb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb8:	4b05      	ldr	r3, [pc, #20]	@ (8000ed0 <HAL_IncTick+0x1c>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4b05      	ldr	r3, [pc, #20]	@ (8000ed4 <HAL_IncTick+0x20>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	4a03      	ldr	r2, [pc, #12]	@ (8000ed4 <HAL_IncTick+0x20>)
 8000ec6:	6013      	str	r3, [r2, #0]
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bc80      	pop	{r7}
 8000ece:	4770      	bx	lr
 8000ed0:	20000008 	.word	0x20000008
 8000ed4:	2000010c 	.word	0x2000010c

08000ed8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  return uwTick;
 8000edc:	4b02      	ldr	r3, [pc, #8]	@ (8000ee8 <HAL_GetTick+0x10>)
 8000ede:	681b      	ldr	r3, [r3, #0]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bc80      	pop	{r7}
 8000ee6:	4770      	bx	lr
 8000ee8:	2000010c 	.word	0x2000010c

08000eec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ef4:	f7ff fff0 	bl	8000ed8 <HAL_GetTick>
 8000ef8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f04:	d005      	beq.n	8000f12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f06:	4b0a      	ldr	r3, [pc, #40]	@ (8000f30 <HAL_Delay+0x44>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	4413      	add	r3, r2
 8000f10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f12:	bf00      	nop
 8000f14:	f7ff ffe0 	bl	8000ed8 <HAL_GetTick>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	68fa      	ldr	r2, [r7, #12]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d8f7      	bhi.n	8000f14 <HAL_Delay+0x28>
  {
  }
}
 8000f24:	bf00      	nop
 8000f26:	bf00      	nop
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000008 	.word	0x20000008

08000f34 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d101      	bne.n	8000f46 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e0ed      	b.n	8001122 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d102      	bne.n	8000f58 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f7ff fe20 	bl	8000b98 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f042 0201 	orr.w	r2, r2, #1
 8000f66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f68:	f7ff ffb6 	bl	8000ed8 <HAL_GetTick>
 8000f6c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f6e:	e012      	b.n	8000f96 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f70:	f7ff ffb2 	bl	8000ed8 <HAL_GetTick>
 8000f74:	4602      	mov	r2, r0
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	2b0a      	cmp	r3, #10
 8000f7c:	d90b      	bls.n	8000f96 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f82:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2205      	movs	r2, #5
 8000f8e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e0c5      	b.n	8001122 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f003 0301 	and.w	r3, r3, #1
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d0e5      	beq.n	8000f70 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f022 0202 	bic.w	r2, r2, #2
 8000fb2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fb4:	f7ff ff90 	bl	8000ed8 <HAL_GetTick>
 8000fb8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000fba:	e012      	b.n	8000fe2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000fbc:	f7ff ff8c 	bl	8000ed8 <HAL_GetTick>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	2b0a      	cmp	r3, #10
 8000fc8:	d90b      	bls.n	8000fe2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fce:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2205      	movs	r2, #5
 8000fda:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e09f      	b.n	8001122 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f003 0302 	and.w	r3, r3, #2
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d1e5      	bne.n	8000fbc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	7e1b      	ldrb	r3, [r3, #24]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d108      	bne.n	800100a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	e007      	b.n	800101a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001018:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	7e5b      	ldrb	r3, [r3, #25]
 800101e:	2b01      	cmp	r3, #1
 8001020:	d108      	bne.n	8001034 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	e007      	b.n	8001044 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001042:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	7e9b      	ldrb	r3, [r3, #26]
 8001048:	2b01      	cmp	r3, #1
 800104a:	d108      	bne.n	800105e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f042 0220 	orr.w	r2, r2, #32
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	e007      	b.n	800106e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f022 0220 	bic.w	r2, r2, #32
 800106c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	7edb      	ldrb	r3, [r3, #27]
 8001072:	2b01      	cmp	r3, #1
 8001074:	d108      	bne.n	8001088 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f022 0210 	bic.w	r2, r2, #16
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	e007      	b.n	8001098 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f042 0210 	orr.w	r2, r2, #16
 8001096:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	7f1b      	ldrb	r3, [r3, #28]
 800109c:	2b01      	cmp	r3, #1
 800109e:	d108      	bne.n	80010b2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f042 0208 	orr.w	r2, r2, #8
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	e007      	b.n	80010c2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f022 0208 	bic.w	r2, r2, #8
 80010c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	7f5b      	ldrb	r3, [r3, #29]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d108      	bne.n	80010dc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f042 0204 	orr.w	r2, r2, #4
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	e007      	b.n	80010ec <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f022 0204 	bic.w	r2, r2, #4
 80010ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	689a      	ldr	r2, [r3, #8]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	431a      	orrs	r2, r3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	691b      	ldr	r3, [r3, #16]
 80010fa:	431a      	orrs	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	695b      	ldr	r3, [r3, #20]
 8001100:	ea42 0103 	orr.w	r1, r2, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	1e5a      	subs	r2, r3, #1
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	430a      	orrs	r2, r1
 8001110:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2200      	movs	r2, #0
 8001116:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2201      	movs	r2, #1
 800111c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800112a:	b480      	push	{r7}
 800112c:	b087      	sub	sp, #28
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
 8001132:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001140:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001142:	7cfb      	ldrb	r3, [r7, #19]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d003      	beq.n	8001150 <HAL_CAN_ConfigFilter+0x26>
 8001148:	7cfb      	ldrb	r3, [r7, #19]
 800114a:	2b02      	cmp	r3, #2
 800114c:	f040 80aa 	bne.w	80012a4 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001156:	f043 0201 	orr.w	r2, r3, #1
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	695b      	ldr	r3, [r3, #20]
 8001164:	f003 031f 	and.w	r3, r3, #31
 8001168:	2201      	movs	r2, #1
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	43db      	mvns	r3, r3
 800117a:	401a      	ands	r2, r3
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	69db      	ldr	r3, [r3, #28]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d123      	bne.n	80011d2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	43db      	mvns	r3, r3
 8001194:	401a      	ands	r2, r3
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011a8:	683a      	ldr	r2, [r7, #0]
 80011aa:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80011ac:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	3248      	adds	r2, #72	@ 0x48
 80011b2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011c6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011c8:	6979      	ldr	r1, [r7, #20]
 80011ca:	3348      	adds	r3, #72	@ 0x48
 80011cc:	00db      	lsls	r3, r3, #3
 80011ce:	440b      	add	r3, r1
 80011d0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	69db      	ldr	r3, [r3, #28]
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d122      	bne.n	8001220 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	431a      	orrs	r2, r3
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011f6:	683a      	ldr	r2, [r7, #0]
 80011f8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80011fa:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	3248      	adds	r2, #72	@ 0x48
 8001200:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	68db      	ldr	r3, [r3, #12]
 800120e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001214:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001216:	6979      	ldr	r1, [r7, #20]
 8001218:	3348      	adds	r3, #72	@ 0x48
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	440b      	add	r3, r1
 800121e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d109      	bne.n	800123c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	43db      	mvns	r3, r3
 8001232:	401a      	ands	r2, r3
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800123a:	e007      	b.n	800124c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	431a      	orrs	r2, r3
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	691b      	ldr	r3, [r3, #16]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d109      	bne.n	8001268 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	43db      	mvns	r3, r3
 800125e:	401a      	ands	r2, r3
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001266:	e007      	b.n	8001278 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	431a      	orrs	r2, r3
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	6a1b      	ldr	r3, [r3, #32]
 800127c:	2b01      	cmp	r3, #1
 800127e:	d107      	bne.n	8001290 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	431a      	orrs	r2, r3
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001296:	f023 0201 	bic.w	r2, r3, #1
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80012a0:	2300      	movs	r3, #0
 80012a2:	e006      	b.n	80012b2 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012a8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
  }
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	371c      	adds	r7, #28
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr

080012bc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d12e      	bne.n	800132e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2202      	movs	r2, #2
 80012d4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f022 0201 	bic.w	r2, r2, #1
 80012e6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80012e8:	f7ff fdf6 	bl	8000ed8 <HAL_GetTick>
 80012ec:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80012ee:	e012      	b.n	8001316 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012f0:	f7ff fdf2 	bl	8000ed8 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b0a      	cmp	r3, #10
 80012fc:	d90b      	bls.n	8001316 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001302:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2205      	movs	r2, #5
 800130e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e012      	b.n	800133c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f003 0301 	and.w	r3, r3, #1
 8001320:	2b00      	cmp	r3, #0
 8001322:	d1e5      	bne.n	80012f0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2200      	movs	r2, #0
 8001328:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800132a:	2300      	movs	r3, #0
 800132c:	e006      	b.n	800133c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001332:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
  }
}
 800133c:	4618      	mov	r0, r3
 800133e:	3710      	adds	r7, #16
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001344:	b480      	push	{r7}
 8001346:	b089      	sub	sp, #36	@ 0x24
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
 8001350:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001358:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001362:	7ffb      	ldrb	r3, [r7, #31]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d003      	beq.n	8001370 <HAL_CAN_AddTxMessage+0x2c>
 8001368:	7ffb      	ldrb	r3, [r7, #31]
 800136a:	2b02      	cmp	r3, #2
 800136c:	f040 80ad 	bne.w	80014ca <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d10a      	bne.n	8001390 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001380:	2b00      	cmp	r3, #0
 8001382:	d105      	bne.n	8001390 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800138a:	2b00      	cmp	r3, #0
 800138c:	f000 8095 	beq.w	80014ba <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	0e1b      	lsrs	r3, r3, #24
 8001394:	f003 0303 	and.w	r3, r3, #3
 8001398:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800139a:	2201      	movs	r2, #1
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	409a      	lsls	r2, r3
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d10d      	bne.n	80013c8 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80013b6:	68f9      	ldr	r1, [r7, #12]
 80013b8:	6809      	ldr	r1, [r1, #0]
 80013ba:	431a      	orrs	r2, r3
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	3318      	adds	r3, #24
 80013c0:	011b      	lsls	r3, r3, #4
 80013c2:	440b      	add	r3, r1
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	e00f      	b.n	80013e8 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013d2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013d8:	68f9      	ldr	r1, [r7, #12]
 80013da:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80013dc:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	3318      	adds	r3, #24
 80013e2:	011b      	lsls	r3, r3, #4
 80013e4:	440b      	add	r3, r1
 80013e6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	6819      	ldr	r1, [r3, #0]
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	691a      	ldr	r2, [r3, #16]
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	3318      	adds	r3, #24
 80013f4:	011b      	lsls	r3, r3, #4
 80013f6:	440b      	add	r3, r1
 80013f8:	3304      	adds	r3, #4
 80013fa:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	7d1b      	ldrb	r3, [r3, #20]
 8001400:	2b01      	cmp	r3, #1
 8001402:	d111      	bne.n	8001428 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	3318      	adds	r3, #24
 800140c:	011b      	lsls	r3, r3, #4
 800140e:	4413      	add	r3, r2
 8001410:	3304      	adds	r3, #4
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	68fa      	ldr	r2, [r7, #12]
 8001416:	6811      	ldr	r1, [r2, #0]
 8001418:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	3318      	adds	r3, #24
 8001420:	011b      	lsls	r3, r3, #4
 8001422:	440b      	add	r3, r1
 8001424:	3304      	adds	r3, #4
 8001426:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	3307      	adds	r3, #7
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	061a      	lsls	r2, r3, #24
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3306      	adds	r3, #6
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	041b      	lsls	r3, r3, #16
 8001438:	431a      	orrs	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	3305      	adds	r3, #5
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	021b      	lsls	r3, r3, #8
 8001442:	4313      	orrs	r3, r2
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	3204      	adds	r2, #4
 8001448:	7812      	ldrb	r2, [r2, #0]
 800144a:	4610      	mov	r0, r2
 800144c:	68fa      	ldr	r2, [r7, #12]
 800144e:	6811      	ldr	r1, [r2, #0]
 8001450:	ea43 0200 	orr.w	r2, r3, r0
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	011b      	lsls	r3, r3, #4
 8001458:	440b      	add	r3, r1
 800145a:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800145e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3303      	adds	r3, #3
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	061a      	lsls	r2, r3, #24
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3302      	adds	r3, #2
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	041b      	lsls	r3, r3, #16
 8001470:	431a      	orrs	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	3301      	adds	r3, #1
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	021b      	lsls	r3, r3, #8
 800147a:	4313      	orrs	r3, r2
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	7812      	ldrb	r2, [r2, #0]
 8001480:	4610      	mov	r0, r2
 8001482:	68fa      	ldr	r2, [r7, #12]
 8001484:	6811      	ldr	r1, [r2, #0]
 8001486:	ea43 0200 	orr.w	r2, r3, r0
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	011b      	lsls	r3, r3, #4
 800148e:	440b      	add	r3, r1
 8001490:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001494:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	3318      	adds	r3, #24
 800149e:	011b      	lsls	r3, r3, #4
 80014a0:	4413      	add	r3, r2
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	68fa      	ldr	r2, [r7, #12]
 80014a6:	6811      	ldr	r1, [r2, #0]
 80014a8:	f043 0201 	orr.w	r2, r3, #1
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	3318      	adds	r3, #24
 80014b0:	011b      	lsls	r3, r3, #4
 80014b2:	440b      	add	r3, r1
 80014b4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80014b6:	2300      	movs	r3, #0
 80014b8:	e00e      	b.n	80014d8 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014be:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e006      	b.n	80014d8 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ce:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
  }
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3724      	adds	r7, #36	@ 0x24
 80014dc:	46bd      	mov	sp, r7
 80014de:	bc80      	pop	{r7}
 80014e0:	4770      	bx	lr

080014e2 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80014e2:	b480      	push	{r7}
 80014e4:	b087      	sub	sp, #28
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	60f8      	str	r0, [r7, #12]
 80014ea:	60b9      	str	r1, [r7, #8]
 80014ec:	607a      	str	r2, [r7, #4]
 80014ee:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014f6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80014f8:	7dfb      	ldrb	r3, [r7, #23]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d003      	beq.n	8001506 <HAL_CAN_GetRxMessage+0x24>
 80014fe:	7dfb      	ldrb	r3, [r7, #23]
 8001500:	2b02      	cmp	r3, #2
 8001502:	f040 8103 	bne.w	800170c <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d10e      	bne.n	800152a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	f003 0303 	and.w	r3, r3, #3
 8001516:	2b00      	cmp	r3, #0
 8001518:	d116      	bne.n	8001548 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800151e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e0f7      	b.n	800171a <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	691b      	ldr	r3, [r3, #16]
 8001530:	f003 0303 	and.w	r3, r3, #3
 8001534:	2b00      	cmp	r3, #0
 8001536:	d107      	bne.n	8001548 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800153c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e0e8      	b.n	800171a <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	331b      	adds	r3, #27
 8001550:	011b      	lsls	r3, r3, #4
 8001552:	4413      	add	r3, r2
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0204 	and.w	r2, r3, #4
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d10c      	bne.n	8001580 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	331b      	adds	r3, #27
 800156e:	011b      	lsls	r3, r3, #4
 8001570:	4413      	add	r3, r2
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	0d5b      	lsrs	r3, r3, #21
 8001576:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	e00b      	b.n	8001598 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	331b      	adds	r3, #27
 8001588:	011b      	lsls	r3, r3, #4
 800158a:	4413      	add	r3, r2
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	08db      	lsrs	r3, r3, #3
 8001590:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	331b      	adds	r3, #27
 80015a0:	011b      	lsls	r3, r3, #4
 80015a2:	4413      	add	r3, r2
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0202 	and.w	r2, r3, #2
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	331b      	adds	r3, #27
 80015b6:	011b      	lsls	r3, r3, #4
 80015b8:	4413      	add	r3, r2
 80015ba:	3304      	adds	r3, #4
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0308 	and.w	r3, r3, #8
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d003      	beq.n	80015ce <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2208      	movs	r2, #8
 80015ca:	611a      	str	r2, [r3, #16]
 80015cc:	e00b      	b.n	80015e6 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	331b      	adds	r3, #27
 80015d6:	011b      	lsls	r3, r3, #4
 80015d8:	4413      	add	r3, r2
 80015da:	3304      	adds	r3, #4
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 020f 	and.w	r2, r3, #15
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	331b      	adds	r3, #27
 80015ee:	011b      	lsls	r3, r3, #4
 80015f0:	4413      	add	r3, r2
 80015f2:	3304      	adds	r3, #4
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	0a1b      	lsrs	r3, r3, #8
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	331b      	adds	r3, #27
 8001606:	011b      	lsls	r3, r3, #4
 8001608:	4413      	add	r3, r2
 800160a:	3304      	adds	r3, #4
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	0c1b      	lsrs	r3, r3, #16
 8001610:	b29a      	uxth	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	011b      	lsls	r3, r3, #4
 800161e:	4413      	add	r3, r2
 8001620:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	b2da      	uxtb	r2, r3
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	011b      	lsls	r3, r3, #4
 8001634:	4413      	add	r3, r2
 8001636:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	0a1a      	lsrs	r2, r3, #8
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	3301      	adds	r3, #1
 8001642:	b2d2      	uxtb	r2, r2
 8001644:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	011b      	lsls	r3, r3, #4
 800164e:	4413      	add	r3, r2
 8001650:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	0c1a      	lsrs	r2, r3, #16
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	3302      	adds	r3, #2
 800165c:	b2d2      	uxtb	r2, r2
 800165e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	011b      	lsls	r3, r3, #4
 8001668:	4413      	add	r3, r2
 800166a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	0e1a      	lsrs	r2, r3, #24
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	3303      	adds	r3, #3
 8001676:	b2d2      	uxtb	r2, r2
 8001678:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	011b      	lsls	r3, r3, #4
 8001682:	4413      	add	r3, r2
 8001684:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	3304      	adds	r3, #4
 800168e:	b2d2      	uxtb	r2, r2
 8001690:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	011b      	lsls	r3, r3, #4
 800169a:	4413      	add	r3, r2
 800169c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	0a1a      	lsrs	r2, r3, #8
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	3305      	adds	r3, #5
 80016a8:	b2d2      	uxtb	r2, r2
 80016aa:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	011b      	lsls	r3, r3, #4
 80016b4:	4413      	add	r3, r2
 80016b6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	0c1a      	lsrs	r2, r3, #16
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	3306      	adds	r3, #6
 80016c2:	b2d2      	uxtb	r2, r2
 80016c4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	011b      	lsls	r3, r3, #4
 80016ce:	4413      	add	r3, r2
 80016d0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	0e1a      	lsrs	r2, r3, #24
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	3307      	adds	r3, #7
 80016dc:	b2d2      	uxtb	r2, r2
 80016de:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d108      	bne.n	80016f8 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	68da      	ldr	r2, [r3, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f042 0220 	orr.w	r2, r2, #32
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	e007      	b.n	8001708 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	691a      	ldr	r2, [r3, #16]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f042 0220 	orr.w	r2, r2, #32
 8001706:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001708:	2300      	movs	r3, #0
 800170a:	e006      	b.n	800171a <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001710:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
  }
}
 800171a:	4618      	mov	r0, r3
 800171c:	371c      	adds	r7, #28
 800171e:	46bd      	mov	sp, r7
 8001720:	bc80      	pop	{r7}
 8001722:	4770      	bx	lr

08001724 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001734:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001736:	7bfb      	ldrb	r3, [r7, #15]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d002      	beq.n	8001742 <HAL_CAN_ActivateNotification+0x1e>
 800173c:	7bfb      	ldrb	r3, [r7, #15]
 800173e:	2b02      	cmp	r3, #2
 8001740:	d109      	bne.n	8001756 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	6959      	ldr	r1, [r3, #20]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	683a      	ldr	r2, [r7, #0]
 800174e:	430a      	orrs	r2, r1
 8001750:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001752:	2300      	movs	r3, #0
 8001754:	e006      	b.n	8001764 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800175a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
  }
}
 8001764:	4618      	mov	r0, r3
 8001766:	3714      	adds	r7, #20
 8001768:	46bd      	mov	sp, r7
 800176a:	bc80      	pop	{r7}
 800176c:	4770      	bx	lr

0800176e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b08a      	sub	sp, #40	@ 0x28
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001776:	2300      	movs	r3, #0
 8001778:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	695b      	ldr	r3, [r3, #20]
 8001780:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	691b      	ldr	r3, [r3, #16]
 80017a0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80017aa:	6a3b      	ldr	r3, [r7, #32]
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d07c      	beq.n	80018ae <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d023      	beq.n	8001806 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2201      	movs	r2, #1
 80017c4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	f003 0302 	and.w	r3, r3, #2
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d003      	beq.n	80017d8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f000 f983 	bl	8001adc <HAL_CAN_TxMailbox0CompleteCallback>
 80017d6:	e016      	b.n	8001806 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	f003 0304 	and.w	r3, r3, #4
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d004      	beq.n	80017ec <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80017e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80017e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80017ea:	e00c      	b.n	8001806 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	f003 0308 	and.w	r3, r3, #8
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d004      	beq.n	8001800 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80017f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80017fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80017fe:	e002      	b.n	8001806 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f000 f986 	bl	8001b12 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800180c:	2b00      	cmp	r3, #0
 800180e:	d024      	beq.n	800185a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001818:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001820:	2b00      	cmp	r3, #0
 8001822:	d003      	beq.n	800182c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f000 f962 	bl	8001aee <HAL_CAN_TxMailbox1CompleteCallback>
 800182a:	e016      	b.n	800185a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001832:	2b00      	cmp	r3, #0
 8001834:	d004      	beq.n	8001840 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001838:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800183c:	627b      	str	r3, [r7, #36]	@ 0x24
 800183e:	e00c      	b.n	800185a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001846:	2b00      	cmp	r3, #0
 8001848:	d004      	beq.n	8001854 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800184a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800184c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001850:	627b      	str	r3, [r7, #36]	@ 0x24
 8001852:	e002      	b.n	800185a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f000 f965 	bl	8001b24 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d024      	beq.n	80018ae <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800186c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d003      	beq.n	8001880 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f000 f941 	bl	8001b00 <HAL_CAN_TxMailbox2CompleteCallback>
 800187e:	e016      	b.n	80018ae <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d004      	beq.n	8001894 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800188a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800188c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001890:	627b      	str	r3, [r7, #36]	@ 0x24
 8001892:	e00c      	b.n	80018ae <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d004      	beq.n	80018a8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800189e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80018a6:	e002      	b.n	80018ae <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f000 f944 	bl	8001b36 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80018ae:	6a3b      	ldr	r3, [r7, #32]
 80018b0:	f003 0308 	and.w	r3, r3, #8
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d00c      	beq.n	80018d2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	f003 0310 	and.w	r3, r3, #16
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d007      	beq.n	80018d2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80018c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018c8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2210      	movs	r2, #16
 80018d0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80018d2:	6a3b      	ldr	r3, [r7, #32]
 80018d4:	f003 0304 	and.w	r3, r3, #4
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d00b      	beq.n	80018f4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	f003 0308 	and.w	r3, r3, #8
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d006      	beq.n	80018f4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2208      	movs	r2, #8
 80018ec:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f000 f92a 	bl	8001b48 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80018f4:	6a3b      	ldr	r3, [r7, #32]
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d009      	beq.n	8001912 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	f003 0303 	and.w	r3, r3, #3
 8001908:	2b00      	cmp	r3, #0
 800190a:	d002      	beq.n	8001912 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f7fe fe2d 	bl	800056c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001912:	6a3b      	ldr	r3, [r7, #32]
 8001914:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001918:	2b00      	cmp	r3, #0
 800191a:	d00c      	beq.n	8001936 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	f003 0310 	and.w	r3, r3, #16
 8001922:	2b00      	cmp	r3, #0
 8001924:	d007      	beq.n	8001936 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001928:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800192c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2210      	movs	r2, #16
 8001934:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001936:	6a3b      	ldr	r3, [r7, #32]
 8001938:	f003 0320 	and.w	r3, r3, #32
 800193c:	2b00      	cmp	r3, #0
 800193e:	d00b      	beq.n	8001958 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	f003 0308 	and.w	r3, r3, #8
 8001946:	2b00      	cmp	r3, #0
 8001948:	d006      	beq.n	8001958 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2208      	movs	r2, #8
 8001950:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f000 f90a 	bl	8001b6c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001958:	6a3b      	ldr	r3, [r7, #32]
 800195a:	f003 0310 	and.w	r3, r3, #16
 800195e:	2b00      	cmp	r3, #0
 8001960:	d009      	beq.n	8001976 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	691b      	ldr	r3, [r3, #16]
 8001968:	f003 0303 	and.w	r3, r3, #3
 800196c:	2b00      	cmp	r3, #0
 800196e:	d002      	beq.n	8001976 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f000 f8f2 	bl	8001b5a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001976:	6a3b      	ldr	r3, [r7, #32]
 8001978:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d00b      	beq.n	8001998 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	f003 0310 	and.w	r3, r3, #16
 8001986:	2b00      	cmp	r3, #0
 8001988:	d006      	beq.n	8001998 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2210      	movs	r2, #16
 8001990:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f000 f8f3 	bl	8001b7e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001998:	6a3b      	ldr	r3, [r7, #32]
 800199a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d00b      	beq.n	80019ba <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	f003 0308 	and.w	r3, r3, #8
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d006      	beq.n	80019ba <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2208      	movs	r2, #8
 80019b2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f000 f8eb 	bl	8001b90 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80019ba:	6a3b      	ldr	r3, [r7, #32]
 80019bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d07b      	beq.n	8001abc <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	f003 0304 	and.w	r3, r3, #4
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d072      	beq.n	8001ab4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80019ce:	6a3b      	ldr	r3, [r7, #32]
 80019d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d008      	beq.n	80019ea <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d003      	beq.n	80019ea <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80019e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e4:	f043 0301 	orr.w	r3, r3, #1
 80019e8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80019ea:	6a3b      	ldr	r3, [r7, #32]
 80019ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d008      	beq.n	8001a06 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d003      	beq.n	8001a06 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80019fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a00:	f043 0302 	orr.w	r3, r3, #2
 8001a04:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001a06:	6a3b      	ldr	r3, [r7, #32]
 8001a08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d008      	beq.n	8001a22 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d003      	beq.n	8001a22 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a1c:	f043 0304 	orr.w	r3, r3, #4
 8001a20:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001a22:	6a3b      	ldr	r3, [r7, #32]
 8001a24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d043      	beq.n	8001ab4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d03e      	beq.n	8001ab4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001a3c:	2b60      	cmp	r3, #96	@ 0x60
 8001a3e:	d02b      	beq.n	8001a98 <HAL_CAN_IRQHandler+0x32a>
 8001a40:	2b60      	cmp	r3, #96	@ 0x60
 8001a42:	d82e      	bhi.n	8001aa2 <HAL_CAN_IRQHandler+0x334>
 8001a44:	2b50      	cmp	r3, #80	@ 0x50
 8001a46:	d022      	beq.n	8001a8e <HAL_CAN_IRQHandler+0x320>
 8001a48:	2b50      	cmp	r3, #80	@ 0x50
 8001a4a:	d82a      	bhi.n	8001aa2 <HAL_CAN_IRQHandler+0x334>
 8001a4c:	2b40      	cmp	r3, #64	@ 0x40
 8001a4e:	d019      	beq.n	8001a84 <HAL_CAN_IRQHandler+0x316>
 8001a50:	2b40      	cmp	r3, #64	@ 0x40
 8001a52:	d826      	bhi.n	8001aa2 <HAL_CAN_IRQHandler+0x334>
 8001a54:	2b30      	cmp	r3, #48	@ 0x30
 8001a56:	d010      	beq.n	8001a7a <HAL_CAN_IRQHandler+0x30c>
 8001a58:	2b30      	cmp	r3, #48	@ 0x30
 8001a5a:	d822      	bhi.n	8001aa2 <HAL_CAN_IRQHandler+0x334>
 8001a5c:	2b10      	cmp	r3, #16
 8001a5e:	d002      	beq.n	8001a66 <HAL_CAN_IRQHandler+0x2f8>
 8001a60:	2b20      	cmp	r3, #32
 8001a62:	d005      	beq.n	8001a70 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001a64:	e01d      	b.n	8001aa2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a68:	f043 0308 	orr.w	r3, r3, #8
 8001a6c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001a6e:	e019      	b.n	8001aa4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a72:	f043 0310 	orr.w	r3, r3, #16
 8001a76:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001a78:	e014      	b.n	8001aa4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a7c:	f043 0320 	orr.w	r3, r3, #32
 8001a80:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001a82:	e00f      	b.n	8001aa4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a8a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001a8c:	e00a      	b.n	8001aa4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a94:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001a96:	e005      	b.n	8001aa4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a9e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001aa0:	e000      	b.n	8001aa4 <HAL_CAN_IRQHandler+0x336>
            break;
 8001aa2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	699a      	ldr	r2, [r3, #24]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001ab2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2204      	movs	r2, #4
 8001aba:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d008      	beq.n	8001ad4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac8:	431a      	orrs	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 f867 	bl	8001ba2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001ad4:	bf00      	nop
 8001ad6:	3728      	adds	r7, #40	@ 0x28
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc80      	pop	{r7}
 8001aec:	4770      	bx	lr

08001aee <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001aee:	b480      	push	{r7}
 8001af0:	b083      	sub	sp, #12
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bc80      	pop	{r7}
 8001afe:	4770      	bx	lr

08001b00 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bc80      	pop	{r7}
 8001b10:	4770      	bx	lr

08001b12 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b12:	b480      	push	{r7}
 8001b14:	b083      	sub	sp, #12
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bc80      	pop	{r7}
 8001b22:	4770      	bx	lr

08001b24 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bc80      	pop	{r7}
 8001b34:	4770      	bx	lr

08001b36 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b36:	b480      	push	{r7}
 8001b38:	b083      	sub	sp, #12
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr

08001b48 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bc80      	pop	{r7}
 8001b58:	4770      	bx	lr

08001b5a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b083      	sub	sp, #12
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr

08001b6c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bc80      	pop	{r7}
 8001b7c:	4770      	bx	lr

08001b7e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	b083      	sub	sp, #12
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr

08001b90 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bc80      	pop	{r7}
 8001ba0:	4770      	bx	lr

08001ba2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	b083      	sub	sp, #12
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001baa:	bf00      	nop
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr

08001bb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f003 0307 	and.w	r3, r3, #7
 8001bc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bca:	68ba      	ldr	r2, [r7, #8]
 8001bcc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bdc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001be0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001be4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001be6:	4a04      	ldr	r2, [pc, #16]	@ (8001bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	60d3      	str	r3, [r2, #12]
}
 8001bec:	bf00      	nop
 8001bee:	3714      	adds	r7, #20
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bc80      	pop	{r7}
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	e000ed00 	.word	0xe000ed00

08001bfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c00:	4b04      	ldr	r3, [pc, #16]	@ (8001c14 <__NVIC_GetPriorityGrouping+0x18>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	0a1b      	lsrs	r3, r3, #8
 8001c06:	f003 0307 	and.w	r3, r3, #7
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bc80      	pop	{r7}
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	e000ed00 	.word	0xe000ed00

08001c18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	db0b      	blt.n	8001c42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c2a:	79fb      	ldrb	r3, [r7, #7]
 8001c2c:	f003 021f 	and.w	r2, r3, #31
 8001c30:	4906      	ldr	r1, [pc, #24]	@ (8001c4c <__NVIC_EnableIRQ+0x34>)
 8001c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c36:	095b      	lsrs	r3, r3, #5
 8001c38:	2001      	movs	r0, #1
 8001c3a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c42:	bf00      	nop
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr
 8001c4c:	e000e100 	.word	0xe000e100

08001c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	6039      	str	r1, [r7, #0]
 8001c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	db0a      	blt.n	8001c7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	b2da      	uxtb	r2, r3
 8001c68:	490c      	ldr	r1, [pc, #48]	@ (8001c9c <__NVIC_SetPriority+0x4c>)
 8001c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6e:	0112      	lsls	r2, r2, #4
 8001c70:	b2d2      	uxtb	r2, r2
 8001c72:	440b      	add	r3, r1
 8001c74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c78:	e00a      	b.n	8001c90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	b2da      	uxtb	r2, r3
 8001c7e:	4908      	ldr	r1, [pc, #32]	@ (8001ca0 <__NVIC_SetPriority+0x50>)
 8001c80:	79fb      	ldrb	r3, [r7, #7]
 8001c82:	f003 030f 	and.w	r3, r3, #15
 8001c86:	3b04      	subs	r3, #4
 8001c88:	0112      	lsls	r2, r2, #4
 8001c8a:	b2d2      	uxtb	r2, r2
 8001c8c:	440b      	add	r3, r1
 8001c8e:	761a      	strb	r2, [r3, #24]
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bc80      	pop	{r7}
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	e000e100 	.word	0xe000e100
 8001ca0:	e000ed00 	.word	0xe000ed00

08001ca4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b089      	sub	sp, #36	@ 0x24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	f1c3 0307 	rsb	r3, r3, #7
 8001cbe:	2b04      	cmp	r3, #4
 8001cc0:	bf28      	it	cs
 8001cc2:	2304      	movcs	r3, #4
 8001cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	3304      	adds	r3, #4
 8001cca:	2b06      	cmp	r3, #6
 8001ccc:	d902      	bls.n	8001cd4 <NVIC_EncodePriority+0x30>
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	3b03      	subs	r3, #3
 8001cd2:	e000      	b.n	8001cd6 <NVIC_EncodePriority+0x32>
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	43da      	mvns	r2, r3
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	401a      	ands	r2, r3
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cec:	f04f 31ff 	mov.w	r1, #4294967295
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf6:	43d9      	mvns	r1, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cfc:	4313      	orrs	r3, r2
         );
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3724      	adds	r7, #36	@ 0x24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc80      	pop	{r7}
 8001d06:	4770      	bx	lr

08001d08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	3b01      	subs	r3, #1
 8001d14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d18:	d301      	bcc.n	8001d1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e00f      	b.n	8001d3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d48 <SysTick_Config+0x40>)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	3b01      	subs	r3, #1
 8001d24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d26:	210f      	movs	r1, #15
 8001d28:	f04f 30ff 	mov.w	r0, #4294967295
 8001d2c:	f7ff ff90 	bl	8001c50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d30:	4b05      	ldr	r3, [pc, #20]	@ (8001d48 <SysTick_Config+0x40>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d36:	4b04      	ldr	r3, [pc, #16]	@ (8001d48 <SysTick_Config+0x40>)
 8001d38:	2207      	movs	r2, #7
 8001d3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	e000e010 	.word	0xe000e010

08001d4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f7ff ff2d 	bl	8001bb4 <__NVIC_SetPriorityGrouping>
}
 8001d5a:	bf00      	nop
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b086      	sub	sp, #24
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	4603      	mov	r3, r0
 8001d6a:	60b9      	str	r1, [r7, #8]
 8001d6c:	607a      	str	r2, [r7, #4]
 8001d6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d70:	2300      	movs	r3, #0
 8001d72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d74:	f7ff ff42 	bl	8001bfc <__NVIC_GetPriorityGrouping>
 8001d78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	68b9      	ldr	r1, [r7, #8]
 8001d7e:	6978      	ldr	r0, [r7, #20]
 8001d80:	f7ff ff90 	bl	8001ca4 <NVIC_EncodePriority>
 8001d84:	4602      	mov	r2, r0
 8001d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d8a:	4611      	mov	r1, r2
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff ff5f 	bl	8001c50 <__NVIC_SetPriority>
}
 8001d92:	bf00      	nop
 8001d94:	3718      	adds	r7, #24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b082      	sub	sp, #8
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	4603      	mov	r3, r0
 8001da2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff ff35 	bl	8001c18 <__NVIC_EnableIRQ>
}
 8001dae:	bf00      	nop
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b082      	sub	sp, #8
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f7ff ffa2 	bl	8001d08 <SysTick_Config>
 8001dc4:	4603      	mov	r3, r0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
	...

08001dd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b08b      	sub	sp, #44	@ 0x2c
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001dde:	2300      	movs	r3, #0
 8001de0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001de2:	e161      	b.n	80020a8 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001de4:	2201      	movs	r2, #1
 8001de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	69fa      	ldr	r2, [r7, #28]
 8001df4:	4013      	ands	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	f040 8150 	bne.w	80020a2 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	4a97      	ldr	r2, [pc, #604]	@ (8002064 <HAL_GPIO_Init+0x294>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d05e      	beq.n	8001eca <HAL_GPIO_Init+0xfa>
 8001e0c:	4a95      	ldr	r2, [pc, #596]	@ (8002064 <HAL_GPIO_Init+0x294>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d875      	bhi.n	8001efe <HAL_GPIO_Init+0x12e>
 8001e12:	4a95      	ldr	r2, [pc, #596]	@ (8002068 <HAL_GPIO_Init+0x298>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d058      	beq.n	8001eca <HAL_GPIO_Init+0xfa>
 8001e18:	4a93      	ldr	r2, [pc, #588]	@ (8002068 <HAL_GPIO_Init+0x298>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d86f      	bhi.n	8001efe <HAL_GPIO_Init+0x12e>
 8001e1e:	4a93      	ldr	r2, [pc, #588]	@ (800206c <HAL_GPIO_Init+0x29c>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d052      	beq.n	8001eca <HAL_GPIO_Init+0xfa>
 8001e24:	4a91      	ldr	r2, [pc, #580]	@ (800206c <HAL_GPIO_Init+0x29c>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d869      	bhi.n	8001efe <HAL_GPIO_Init+0x12e>
 8001e2a:	4a91      	ldr	r2, [pc, #580]	@ (8002070 <HAL_GPIO_Init+0x2a0>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d04c      	beq.n	8001eca <HAL_GPIO_Init+0xfa>
 8001e30:	4a8f      	ldr	r2, [pc, #572]	@ (8002070 <HAL_GPIO_Init+0x2a0>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d863      	bhi.n	8001efe <HAL_GPIO_Init+0x12e>
 8001e36:	4a8f      	ldr	r2, [pc, #572]	@ (8002074 <HAL_GPIO_Init+0x2a4>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d046      	beq.n	8001eca <HAL_GPIO_Init+0xfa>
 8001e3c:	4a8d      	ldr	r2, [pc, #564]	@ (8002074 <HAL_GPIO_Init+0x2a4>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d85d      	bhi.n	8001efe <HAL_GPIO_Init+0x12e>
 8001e42:	2b12      	cmp	r3, #18
 8001e44:	d82a      	bhi.n	8001e9c <HAL_GPIO_Init+0xcc>
 8001e46:	2b12      	cmp	r3, #18
 8001e48:	d859      	bhi.n	8001efe <HAL_GPIO_Init+0x12e>
 8001e4a:	a201      	add	r2, pc, #4	@ (adr r2, 8001e50 <HAL_GPIO_Init+0x80>)
 8001e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e50:	08001ecb 	.word	0x08001ecb
 8001e54:	08001ea5 	.word	0x08001ea5
 8001e58:	08001eb7 	.word	0x08001eb7
 8001e5c:	08001ef9 	.word	0x08001ef9
 8001e60:	08001eff 	.word	0x08001eff
 8001e64:	08001eff 	.word	0x08001eff
 8001e68:	08001eff 	.word	0x08001eff
 8001e6c:	08001eff 	.word	0x08001eff
 8001e70:	08001eff 	.word	0x08001eff
 8001e74:	08001eff 	.word	0x08001eff
 8001e78:	08001eff 	.word	0x08001eff
 8001e7c:	08001eff 	.word	0x08001eff
 8001e80:	08001eff 	.word	0x08001eff
 8001e84:	08001eff 	.word	0x08001eff
 8001e88:	08001eff 	.word	0x08001eff
 8001e8c:	08001eff 	.word	0x08001eff
 8001e90:	08001eff 	.word	0x08001eff
 8001e94:	08001ead 	.word	0x08001ead
 8001e98:	08001ec1 	.word	0x08001ec1
 8001e9c:	4a76      	ldr	r2, [pc, #472]	@ (8002078 <HAL_GPIO_Init+0x2a8>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d013      	beq.n	8001eca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ea2:	e02c      	b.n	8001efe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	623b      	str	r3, [r7, #32]
          break;
 8001eaa:	e029      	b.n	8001f00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	3304      	adds	r3, #4
 8001eb2:	623b      	str	r3, [r7, #32]
          break;
 8001eb4:	e024      	b.n	8001f00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	3308      	adds	r3, #8
 8001ebc:	623b      	str	r3, [r7, #32]
          break;
 8001ebe:	e01f      	b.n	8001f00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	330c      	adds	r3, #12
 8001ec6:	623b      	str	r3, [r7, #32]
          break;
 8001ec8:	e01a      	b.n	8001f00 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d102      	bne.n	8001ed8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ed2:	2304      	movs	r3, #4
 8001ed4:	623b      	str	r3, [r7, #32]
          break;
 8001ed6:	e013      	b.n	8001f00 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d105      	bne.n	8001eec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ee0:	2308      	movs	r3, #8
 8001ee2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	69fa      	ldr	r2, [r7, #28]
 8001ee8:	611a      	str	r2, [r3, #16]
          break;
 8001eea:	e009      	b.n	8001f00 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001eec:	2308      	movs	r3, #8
 8001eee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	69fa      	ldr	r2, [r7, #28]
 8001ef4:	615a      	str	r2, [r3, #20]
          break;
 8001ef6:	e003      	b.n	8001f00 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	623b      	str	r3, [r7, #32]
          break;
 8001efc:	e000      	b.n	8001f00 <HAL_GPIO_Init+0x130>
          break;
 8001efe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	2bff      	cmp	r3, #255	@ 0xff
 8001f04:	d801      	bhi.n	8001f0a <HAL_GPIO_Init+0x13a>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	e001      	b.n	8001f0e <HAL_GPIO_Init+0x13e>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	3304      	adds	r3, #4
 8001f0e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	2bff      	cmp	r3, #255	@ 0xff
 8001f14:	d802      	bhi.n	8001f1c <HAL_GPIO_Init+0x14c>
 8001f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	e002      	b.n	8001f22 <HAL_GPIO_Init+0x152>
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1e:	3b08      	subs	r3, #8
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	210f      	movs	r1, #15
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	401a      	ands	r2, r3
 8001f34:	6a39      	ldr	r1, [r7, #32]
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3c:	431a      	orrs	r2, r3
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f000 80a9 	beq.w	80020a2 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f50:	4b4a      	ldr	r3, [pc, #296]	@ (800207c <HAL_GPIO_Init+0x2ac>)
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	4a49      	ldr	r2, [pc, #292]	@ (800207c <HAL_GPIO_Init+0x2ac>)
 8001f56:	f043 0301 	orr.w	r3, r3, #1
 8001f5a:	6193      	str	r3, [r2, #24]
 8001f5c:	4b47      	ldr	r3, [pc, #284]	@ (800207c <HAL_GPIO_Init+0x2ac>)
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	f003 0301 	and.w	r3, r3, #1
 8001f64:	60bb      	str	r3, [r7, #8]
 8001f66:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f68:	4a45      	ldr	r2, [pc, #276]	@ (8002080 <HAL_GPIO_Init+0x2b0>)
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f6c:	089b      	lsrs	r3, r3, #2
 8001f6e:	3302      	adds	r3, #2
 8001f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f74:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f78:	f003 0303 	and.w	r3, r3, #3
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	220f      	movs	r2, #15
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	43db      	mvns	r3, r3
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a3d      	ldr	r2, [pc, #244]	@ (8002084 <HAL_GPIO_Init+0x2b4>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d00d      	beq.n	8001fb0 <HAL_GPIO_Init+0x1e0>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a3c      	ldr	r2, [pc, #240]	@ (8002088 <HAL_GPIO_Init+0x2b8>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d007      	beq.n	8001fac <HAL_GPIO_Init+0x1dc>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a3b      	ldr	r2, [pc, #236]	@ (800208c <HAL_GPIO_Init+0x2bc>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d101      	bne.n	8001fa8 <HAL_GPIO_Init+0x1d8>
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	e004      	b.n	8001fb2 <HAL_GPIO_Init+0x1e2>
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e002      	b.n	8001fb2 <HAL_GPIO_Init+0x1e2>
 8001fac:	2301      	movs	r3, #1
 8001fae:	e000      	b.n	8001fb2 <HAL_GPIO_Init+0x1e2>
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fb4:	f002 0203 	and.w	r2, r2, #3
 8001fb8:	0092      	lsls	r2, r2, #2
 8001fba:	4093      	lsls	r3, r2
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fc2:	492f      	ldr	r1, [pc, #188]	@ (8002080 <HAL_GPIO_Init+0x2b0>)
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc6:	089b      	lsrs	r3, r3, #2
 8001fc8:	3302      	adds	r3, #2
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d006      	beq.n	8001fea <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fdc:	4b2c      	ldr	r3, [pc, #176]	@ (8002090 <HAL_GPIO_Init+0x2c0>)
 8001fde:	689a      	ldr	r2, [r3, #8]
 8001fe0:	492b      	ldr	r1, [pc, #172]	@ (8002090 <HAL_GPIO_Init+0x2c0>)
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	608b      	str	r3, [r1, #8]
 8001fe8:	e006      	b.n	8001ff8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fea:	4b29      	ldr	r3, [pc, #164]	@ (8002090 <HAL_GPIO_Init+0x2c0>)
 8001fec:	689a      	ldr	r2, [r3, #8]
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	4927      	ldr	r1, [pc, #156]	@ (8002090 <HAL_GPIO_Init+0x2c0>)
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d006      	beq.n	8002012 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002004:	4b22      	ldr	r3, [pc, #136]	@ (8002090 <HAL_GPIO_Init+0x2c0>)
 8002006:	68da      	ldr	r2, [r3, #12]
 8002008:	4921      	ldr	r1, [pc, #132]	@ (8002090 <HAL_GPIO_Init+0x2c0>)
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	4313      	orrs	r3, r2
 800200e:	60cb      	str	r3, [r1, #12]
 8002010:	e006      	b.n	8002020 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002012:	4b1f      	ldr	r3, [pc, #124]	@ (8002090 <HAL_GPIO_Init+0x2c0>)
 8002014:	68da      	ldr	r2, [r3, #12]
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	43db      	mvns	r3, r3
 800201a:	491d      	ldr	r1, [pc, #116]	@ (8002090 <HAL_GPIO_Init+0x2c0>)
 800201c:	4013      	ands	r3, r2
 800201e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d006      	beq.n	800203a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800202c:	4b18      	ldr	r3, [pc, #96]	@ (8002090 <HAL_GPIO_Init+0x2c0>)
 800202e:	685a      	ldr	r2, [r3, #4]
 8002030:	4917      	ldr	r1, [pc, #92]	@ (8002090 <HAL_GPIO_Init+0x2c0>)
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	4313      	orrs	r3, r2
 8002036:	604b      	str	r3, [r1, #4]
 8002038:	e006      	b.n	8002048 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800203a:	4b15      	ldr	r3, [pc, #84]	@ (8002090 <HAL_GPIO_Init+0x2c0>)
 800203c:	685a      	ldr	r2, [r3, #4]
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	43db      	mvns	r3, r3
 8002042:	4913      	ldr	r1, [pc, #76]	@ (8002090 <HAL_GPIO_Init+0x2c0>)
 8002044:	4013      	ands	r3, r2
 8002046:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d01f      	beq.n	8002094 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002054:	4b0e      	ldr	r3, [pc, #56]	@ (8002090 <HAL_GPIO_Init+0x2c0>)
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	490d      	ldr	r1, [pc, #52]	@ (8002090 <HAL_GPIO_Init+0x2c0>)
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	4313      	orrs	r3, r2
 800205e:	600b      	str	r3, [r1, #0]
 8002060:	e01f      	b.n	80020a2 <HAL_GPIO_Init+0x2d2>
 8002062:	bf00      	nop
 8002064:	10320000 	.word	0x10320000
 8002068:	10310000 	.word	0x10310000
 800206c:	10220000 	.word	0x10220000
 8002070:	10210000 	.word	0x10210000
 8002074:	10120000 	.word	0x10120000
 8002078:	10110000 	.word	0x10110000
 800207c:	40021000 	.word	0x40021000
 8002080:	40010000 	.word	0x40010000
 8002084:	40010800 	.word	0x40010800
 8002088:	40010c00 	.word	0x40010c00
 800208c:	40011000 	.word	0x40011000
 8002090:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002094:	4b0b      	ldr	r3, [pc, #44]	@ (80020c4 <HAL_GPIO_Init+0x2f4>)
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	43db      	mvns	r3, r3
 800209c:	4909      	ldr	r1, [pc, #36]	@ (80020c4 <HAL_GPIO_Init+0x2f4>)
 800209e:	4013      	ands	r3, r2
 80020a0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80020a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a4:	3301      	adds	r3, #1
 80020a6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ae:	fa22 f303 	lsr.w	r3, r2, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	f47f ae96 	bne.w	8001de4 <HAL_GPIO_Init+0x14>
  }
}
 80020b8:	bf00      	nop
 80020ba:	bf00      	nop
 80020bc:	372c      	adds	r7, #44	@ 0x2c
 80020be:	46bd      	mov	sp, r7
 80020c0:	bc80      	pop	{r7}
 80020c2:	4770      	bx	lr
 80020c4:	40010400 	.word	0x40010400

080020c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	460b      	mov	r3, r1
 80020d2:	807b      	strh	r3, [r7, #2]
 80020d4:	4613      	mov	r3, r2
 80020d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020d8:	787b      	ldrb	r3, [r7, #1]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020de:	887a      	ldrh	r2, [r7, #2]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020e4:	e003      	b.n	80020ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020e6:	887b      	ldrh	r3, [r7, #2]
 80020e8:	041a      	lsls	r2, r3, #16
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	611a      	str	r2, [r3, #16]
}
 80020ee:	bf00      	nop
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bc80      	pop	{r7}
 80020f6:	4770      	bx	lr

080020f8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	460b      	mov	r3, r1
 8002102:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800210a:	887a      	ldrh	r2, [r7, #2]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	4013      	ands	r3, r2
 8002110:	041a      	lsls	r2, r3, #16
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	43d9      	mvns	r1, r3
 8002116:	887b      	ldrh	r3, [r7, #2]
 8002118:	400b      	ands	r3, r1
 800211a:	431a      	orrs	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	611a      	str	r2, [r3, #16]
}
 8002120:	bf00      	nop
 8002122:	3714      	adds	r7, #20
 8002124:	46bd      	mov	sp, r7
 8002126:	bc80      	pop	{r7}
 8002128:	4770      	bx	lr
	...

0800212c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e272      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b00      	cmp	r3, #0
 8002148:	f000 8087 	beq.w	800225a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800214c:	4b92      	ldr	r3, [pc, #584]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f003 030c 	and.w	r3, r3, #12
 8002154:	2b04      	cmp	r3, #4
 8002156:	d00c      	beq.n	8002172 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002158:	4b8f      	ldr	r3, [pc, #572]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f003 030c 	and.w	r3, r3, #12
 8002160:	2b08      	cmp	r3, #8
 8002162:	d112      	bne.n	800218a <HAL_RCC_OscConfig+0x5e>
 8002164:	4b8c      	ldr	r3, [pc, #560]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800216c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002170:	d10b      	bne.n	800218a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002172:	4b89      	ldr	r3, [pc, #548]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d06c      	beq.n	8002258 <HAL_RCC_OscConfig+0x12c>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d168      	bne.n	8002258 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e24c      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002192:	d106      	bne.n	80021a2 <HAL_RCC_OscConfig+0x76>
 8002194:	4b80      	ldr	r3, [pc, #512]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a7f      	ldr	r2, [pc, #508]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 800219a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800219e:	6013      	str	r3, [r2, #0]
 80021a0:	e02e      	b.n	8002200 <HAL_RCC_OscConfig+0xd4>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d10c      	bne.n	80021c4 <HAL_RCC_OscConfig+0x98>
 80021aa:	4b7b      	ldr	r3, [pc, #492]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a7a      	ldr	r2, [pc, #488]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021b4:	6013      	str	r3, [r2, #0]
 80021b6:	4b78      	ldr	r3, [pc, #480]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a77      	ldr	r2, [pc, #476]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021c0:	6013      	str	r3, [r2, #0]
 80021c2:	e01d      	b.n	8002200 <HAL_RCC_OscConfig+0xd4>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021cc:	d10c      	bne.n	80021e8 <HAL_RCC_OscConfig+0xbc>
 80021ce:	4b72      	ldr	r3, [pc, #456]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a71      	ldr	r2, [pc, #452]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021d8:	6013      	str	r3, [r2, #0]
 80021da:	4b6f      	ldr	r3, [pc, #444]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a6e      	ldr	r2, [pc, #440]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021e4:	6013      	str	r3, [r2, #0]
 80021e6:	e00b      	b.n	8002200 <HAL_RCC_OscConfig+0xd4>
 80021e8:	4b6b      	ldr	r3, [pc, #428]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a6a      	ldr	r2, [pc, #424]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021f2:	6013      	str	r3, [r2, #0]
 80021f4:	4b68      	ldr	r3, [pc, #416]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a67      	ldr	r2, [pc, #412]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d013      	beq.n	8002230 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002208:	f7fe fe66 	bl	8000ed8 <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002210:	f7fe fe62 	bl	8000ed8 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b64      	cmp	r3, #100	@ 0x64
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e200      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002222:	4b5d      	ldr	r3, [pc, #372]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d0f0      	beq.n	8002210 <HAL_RCC_OscConfig+0xe4>
 800222e:	e014      	b.n	800225a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002230:	f7fe fe52 	bl	8000ed8 <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002238:	f7fe fe4e 	bl	8000ed8 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b64      	cmp	r3, #100	@ 0x64
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e1ec      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800224a:	4b53      	ldr	r3, [pc, #332]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1f0      	bne.n	8002238 <HAL_RCC_OscConfig+0x10c>
 8002256:	e000      	b.n	800225a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002258:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d063      	beq.n	800232e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002266:	4b4c      	ldr	r3, [pc, #304]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f003 030c 	and.w	r3, r3, #12
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00b      	beq.n	800228a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002272:	4b49      	ldr	r3, [pc, #292]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f003 030c 	and.w	r3, r3, #12
 800227a:	2b08      	cmp	r3, #8
 800227c:	d11c      	bne.n	80022b8 <HAL_RCC_OscConfig+0x18c>
 800227e:	4b46      	ldr	r3, [pc, #280]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d116      	bne.n	80022b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800228a:	4b43      	ldr	r3, [pc, #268]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d005      	beq.n	80022a2 <HAL_RCC_OscConfig+0x176>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d001      	beq.n	80022a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e1c0      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a2:	4b3d      	ldr	r3, [pc, #244]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	4939      	ldr	r1, [pc, #228]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022b6:	e03a      	b.n	800232e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d020      	beq.n	8002302 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022c0:	4b36      	ldr	r3, [pc, #216]	@ (800239c <HAL_RCC_OscConfig+0x270>)
 80022c2:	2201      	movs	r2, #1
 80022c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c6:	f7fe fe07 	bl	8000ed8 <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022ce:	f7fe fe03 	bl	8000ed8 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e1a1      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e0:	4b2d      	ldr	r3, [pc, #180]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0f0      	beq.n	80022ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ec:	4b2a      	ldr	r3, [pc, #168]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	695b      	ldr	r3, [r3, #20]
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	4927      	ldr	r1, [pc, #156]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	600b      	str	r3, [r1, #0]
 8002300:	e015      	b.n	800232e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002302:	4b26      	ldr	r3, [pc, #152]	@ (800239c <HAL_RCC_OscConfig+0x270>)
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002308:	f7fe fde6 	bl	8000ed8 <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002310:	f7fe fde2 	bl	8000ed8 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e180      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002322:	4b1d      	ldr	r3, [pc, #116]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1f0      	bne.n	8002310 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0308 	and.w	r3, r3, #8
 8002336:	2b00      	cmp	r3, #0
 8002338:	d03a      	beq.n	80023b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d019      	beq.n	8002376 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002342:	4b17      	ldr	r3, [pc, #92]	@ (80023a0 <HAL_RCC_OscConfig+0x274>)
 8002344:	2201      	movs	r2, #1
 8002346:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002348:	f7fe fdc6 	bl	8000ed8 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002350:	f7fe fdc2 	bl	8000ed8 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e160      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002362:	4b0d      	ldr	r3, [pc, #52]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 8002364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0f0      	beq.n	8002350 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800236e:	2001      	movs	r0, #1
 8002370:	f000 fa9c 	bl	80028ac <RCC_Delay>
 8002374:	e01c      	b.n	80023b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002376:	4b0a      	ldr	r3, [pc, #40]	@ (80023a0 <HAL_RCC_OscConfig+0x274>)
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800237c:	f7fe fdac 	bl	8000ed8 <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002382:	e00f      	b.n	80023a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002384:	f7fe fda8 	bl	8000ed8 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d908      	bls.n	80023a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e146      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
 8002396:	bf00      	nop
 8002398:	40021000 	.word	0x40021000
 800239c:	42420000 	.word	0x42420000
 80023a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023a4:	4b92      	ldr	r3, [pc, #584]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 80023a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1e9      	bne.n	8002384 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0304 	and.w	r3, r3, #4
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f000 80a6 	beq.w	800250a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023be:	2300      	movs	r3, #0
 80023c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023c2:	4b8b      	ldr	r3, [pc, #556]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10d      	bne.n	80023ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ce:	4b88      	ldr	r3, [pc, #544]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	4a87      	ldr	r2, [pc, #540]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 80023d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023d8:	61d3      	str	r3, [r2, #28]
 80023da:	4b85      	ldr	r3, [pc, #532]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 80023dc:	69db      	ldr	r3, [r3, #28]
 80023de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023e2:	60bb      	str	r3, [r7, #8]
 80023e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023e6:	2301      	movs	r3, #1
 80023e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ea:	4b82      	ldr	r3, [pc, #520]	@ (80025f4 <HAL_RCC_OscConfig+0x4c8>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d118      	bne.n	8002428 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023f6:	4b7f      	ldr	r3, [pc, #508]	@ (80025f4 <HAL_RCC_OscConfig+0x4c8>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a7e      	ldr	r2, [pc, #504]	@ (80025f4 <HAL_RCC_OscConfig+0x4c8>)
 80023fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002400:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002402:	f7fe fd69 	bl	8000ed8 <HAL_GetTick>
 8002406:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002408:	e008      	b.n	800241c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800240a:	f7fe fd65 	bl	8000ed8 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	2b64      	cmp	r3, #100	@ 0x64
 8002416:	d901      	bls.n	800241c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e103      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800241c:	4b75      	ldr	r3, [pc, #468]	@ (80025f4 <HAL_RCC_OscConfig+0x4c8>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002424:	2b00      	cmp	r3, #0
 8002426:	d0f0      	beq.n	800240a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d106      	bne.n	800243e <HAL_RCC_OscConfig+0x312>
 8002430:	4b6f      	ldr	r3, [pc, #444]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	4a6e      	ldr	r2, [pc, #440]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002436:	f043 0301 	orr.w	r3, r3, #1
 800243a:	6213      	str	r3, [r2, #32]
 800243c:	e02d      	b.n	800249a <HAL_RCC_OscConfig+0x36e>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d10c      	bne.n	8002460 <HAL_RCC_OscConfig+0x334>
 8002446:	4b6a      	ldr	r3, [pc, #424]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002448:	6a1b      	ldr	r3, [r3, #32]
 800244a:	4a69      	ldr	r2, [pc, #420]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 800244c:	f023 0301 	bic.w	r3, r3, #1
 8002450:	6213      	str	r3, [r2, #32]
 8002452:	4b67      	ldr	r3, [pc, #412]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	4a66      	ldr	r2, [pc, #408]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002458:	f023 0304 	bic.w	r3, r3, #4
 800245c:	6213      	str	r3, [r2, #32]
 800245e:	e01c      	b.n	800249a <HAL_RCC_OscConfig+0x36e>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	2b05      	cmp	r3, #5
 8002466:	d10c      	bne.n	8002482 <HAL_RCC_OscConfig+0x356>
 8002468:	4b61      	ldr	r3, [pc, #388]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	4a60      	ldr	r2, [pc, #384]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 800246e:	f043 0304 	orr.w	r3, r3, #4
 8002472:	6213      	str	r3, [r2, #32]
 8002474:	4b5e      	ldr	r3, [pc, #376]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	4a5d      	ldr	r2, [pc, #372]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 800247a:	f043 0301 	orr.w	r3, r3, #1
 800247e:	6213      	str	r3, [r2, #32]
 8002480:	e00b      	b.n	800249a <HAL_RCC_OscConfig+0x36e>
 8002482:	4b5b      	ldr	r3, [pc, #364]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002484:	6a1b      	ldr	r3, [r3, #32]
 8002486:	4a5a      	ldr	r2, [pc, #360]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002488:	f023 0301 	bic.w	r3, r3, #1
 800248c:	6213      	str	r3, [r2, #32]
 800248e:	4b58      	ldr	r3, [pc, #352]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	4a57      	ldr	r2, [pc, #348]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002494:	f023 0304 	bic.w	r3, r3, #4
 8002498:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d015      	beq.n	80024ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024a2:	f7fe fd19 	bl	8000ed8 <HAL_GetTick>
 80024a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024a8:	e00a      	b.n	80024c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024aa:	f7fe fd15 	bl	8000ed8 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e0b1      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c0:	4b4b      	ldr	r3, [pc, #300]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d0ee      	beq.n	80024aa <HAL_RCC_OscConfig+0x37e>
 80024cc:	e014      	b.n	80024f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ce:	f7fe fd03 	bl	8000ed8 <HAL_GetTick>
 80024d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024d4:	e00a      	b.n	80024ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024d6:	f7fe fcff 	bl	8000ed8 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e09b      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ec:	4b40      	ldr	r3, [pc, #256]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 80024ee:	6a1b      	ldr	r3, [r3, #32]
 80024f0:	f003 0302 	and.w	r3, r3, #2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1ee      	bne.n	80024d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024f8:	7dfb      	ldrb	r3, [r7, #23]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d105      	bne.n	800250a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024fe:	4b3c      	ldr	r3, [pc, #240]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002500:	69db      	ldr	r3, [r3, #28]
 8002502:	4a3b      	ldr	r2, [pc, #236]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002504:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002508:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	2b00      	cmp	r3, #0
 8002510:	f000 8087 	beq.w	8002622 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002514:	4b36      	ldr	r3, [pc, #216]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f003 030c 	and.w	r3, r3, #12
 800251c:	2b08      	cmp	r3, #8
 800251e:	d061      	beq.n	80025e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	69db      	ldr	r3, [r3, #28]
 8002524:	2b02      	cmp	r3, #2
 8002526:	d146      	bne.n	80025b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002528:	4b33      	ldr	r3, [pc, #204]	@ (80025f8 <HAL_RCC_OscConfig+0x4cc>)
 800252a:	2200      	movs	r2, #0
 800252c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252e:	f7fe fcd3 	bl	8000ed8 <HAL_GetTick>
 8002532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002534:	e008      	b.n	8002548 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002536:	f7fe fccf 	bl	8000ed8 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e06d      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002548:	4b29      	ldr	r3, [pc, #164]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d1f0      	bne.n	8002536 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800255c:	d108      	bne.n	8002570 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800255e:	4b24      	ldr	r3, [pc, #144]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	4921      	ldr	r1, [pc, #132]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 800256c:	4313      	orrs	r3, r2
 800256e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002570:	4b1f      	ldr	r3, [pc, #124]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a19      	ldr	r1, [r3, #32]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002580:	430b      	orrs	r3, r1
 8002582:	491b      	ldr	r1, [pc, #108]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002584:	4313      	orrs	r3, r2
 8002586:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002588:	4b1b      	ldr	r3, [pc, #108]	@ (80025f8 <HAL_RCC_OscConfig+0x4cc>)
 800258a:	2201      	movs	r2, #1
 800258c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258e:	f7fe fca3 	bl	8000ed8 <HAL_GetTick>
 8002592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002594:	e008      	b.n	80025a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002596:	f7fe fc9f 	bl	8000ed8 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e03d      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025a8:	4b11      	ldr	r3, [pc, #68]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d0f0      	beq.n	8002596 <HAL_RCC_OscConfig+0x46a>
 80025b4:	e035      	b.n	8002622 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025b6:	4b10      	ldr	r3, [pc, #64]	@ (80025f8 <HAL_RCC_OscConfig+0x4cc>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025bc:	f7fe fc8c 	bl	8000ed8 <HAL_GetTick>
 80025c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c4:	f7fe fc88 	bl	8000ed8 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e026      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025d6:	4b06      	ldr	r3, [pc, #24]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d1f0      	bne.n	80025c4 <HAL_RCC_OscConfig+0x498>
 80025e2:	e01e      	b.n	8002622 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	69db      	ldr	r3, [r3, #28]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d107      	bne.n	80025fc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e019      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
 80025f0:	40021000 	.word	0x40021000
 80025f4:	40007000 	.word	0x40007000
 80025f8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025fc:	4b0b      	ldr	r3, [pc, #44]	@ (800262c <HAL_RCC_OscConfig+0x500>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	429a      	cmp	r2, r3
 800260e:	d106      	bne.n	800261e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800261a:	429a      	cmp	r2, r3
 800261c:	d001      	beq.n	8002622 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e000      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002622:	2300      	movs	r3, #0
}
 8002624:	4618      	mov	r0, r3
 8002626:	3718      	adds	r7, #24
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	40021000 	.word	0x40021000

08002630 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d101      	bne.n	8002644 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e0d0      	b.n	80027e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002644:	4b6a      	ldr	r3, [pc, #424]	@ (80027f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0307 	and.w	r3, r3, #7
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	429a      	cmp	r2, r3
 8002650:	d910      	bls.n	8002674 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002652:	4b67      	ldr	r3, [pc, #412]	@ (80027f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f023 0207 	bic.w	r2, r3, #7
 800265a:	4965      	ldr	r1, [pc, #404]	@ (80027f0 <HAL_RCC_ClockConfig+0x1c0>)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	4313      	orrs	r3, r2
 8002660:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002662:	4b63      	ldr	r3, [pc, #396]	@ (80027f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0307 	and.w	r3, r3, #7
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	429a      	cmp	r2, r3
 800266e:	d001      	beq.n	8002674 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e0b8      	b.n	80027e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d020      	beq.n	80026c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0304 	and.w	r3, r3, #4
 8002688:	2b00      	cmp	r3, #0
 800268a:	d005      	beq.n	8002698 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800268c:	4b59      	ldr	r3, [pc, #356]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	4a58      	ldr	r2, [pc, #352]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002692:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002696:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0308 	and.w	r3, r3, #8
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d005      	beq.n	80026b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026a4:	4b53      	ldr	r3, [pc, #332]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	4a52      	ldr	r2, [pc, #328]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 80026aa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80026ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026b0:	4b50      	ldr	r3, [pc, #320]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	494d      	ldr	r1, [pc, #308]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d040      	beq.n	8002750 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d107      	bne.n	80026e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026d6:	4b47      	ldr	r3, [pc, #284]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d115      	bne.n	800270e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e07f      	b.n	80027e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d107      	bne.n	80026fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ee:	4b41      	ldr	r3, [pc, #260]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d109      	bne.n	800270e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e073      	b.n	80027e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026fe:	4b3d      	ldr	r3, [pc, #244]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e06b      	b.n	80027e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800270e:	4b39      	ldr	r3, [pc, #228]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f023 0203 	bic.w	r2, r3, #3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	4936      	ldr	r1, [pc, #216]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 800271c:	4313      	orrs	r3, r2
 800271e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002720:	f7fe fbda 	bl	8000ed8 <HAL_GetTick>
 8002724:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002726:	e00a      	b.n	800273e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002728:	f7fe fbd6 	bl	8000ed8 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002736:	4293      	cmp	r3, r2
 8002738:	d901      	bls.n	800273e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e053      	b.n	80027e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800273e:	4b2d      	ldr	r3, [pc, #180]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f003 020c 	and.w	r2, r3, #12
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	429a      	cmp	r2, r3
 800274e:	d1eb      	bne.n	8002728 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002750:	4b27      	ldr	r3, [pc, #156]	@ (80027f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0307 	and.w	r3, r3, #7
 8002758:	683a      	ldr	r2, [r7, #0]
 800275a:	429a      	cmp	r2, r3
 800275c:	d210      	bcs.n	8002780 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800275e:	4b24      	ldr	r3, [pc, #144]	@ (80027f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f023 0207 	bic.w	r2, r3, #7
 8002766:	4922      	ldr	r1, [pc, #136]	@ (80027f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	4313      	orrs	r3, r2
 800276c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800276e:	4b20      	ldr	r3, [pc, #128]	@ (80027f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0307 	and.w	r3, r3, #7
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	429a      	cmp	r2, r3
 800277a:	d001      	beq.n	8002780 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e032      	b.n	80027e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0304 	and.w	r3, r3, #4
 8002788:	2b00      	cmp	r3, #0
 800278a:	d008      	beq.n	800279e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800278c:	4b19      	ldr	r3, [pc, #100]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	4916      	ldr	r1, [pc, #88]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 800279a:	4313      	orrs	r3, r2
 800279c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0308 	and.w	r3, r3, #8
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d009      	beq.n	80027be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027aa:	4b12      	ldr	r3, [pc, #72]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	490e      	ldr	r1, [pc, #56]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027be:	f000 f821 	bl	8002804 <HAL_RCC_GetSysClockFreq>
 80027c2:	4602      	mov	r2, r0
 80027c4:	4b0b      	ldr	r3, [pc, #44]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	091b      	lsrs	r3, r3, #4
 80027ca:	f003 030f 	and.w	r3, r3, #15
 80027ce:	490a      	ldr	r1, [pc, #40]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c8>)
 80027d0:	5ccb      	ldrb	r3, [r1, r3]
 80027d2:	fa22 f303 	lsr.w	r3, r2, r3
 80027d6:	4a09      	ldr	r2, [pc, #36]	@ (80027fc <HAL_RCC_ClockConfig+0x1cc>)
 80027d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027da:	4b09      	ldr	r3, [pc, #36]	@ (8002800 <HAL_RCC_ClockConfig+0x1d0>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4618      	mov	r0, r3
 80027e0:	f7fe fb38 	bl	8000e54 <HAL_InitTick>

  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	40022000 	.word	0x40022000
 80027f4:	40021000 	.word	0x40021000
 80027f8:	08003224 	.word	0x08003224
 80027fc:	20000000 	.word	0x20000000
 8002800:	20000004 	.word	0x20000004

08002804 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002804:	b480      	push	{r7}
 8002806:	b087      	sub	sp, #28
 8002808:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800280a:	2300      	movs	r3, #0
 800280c:	60fb      	str	r3, [r7, #12]
 800280e:	2300      	movs	r3, #0
 8002810:	60bb      	str	r3, [r7, #8]
 8002812:	2300      	movs	r3, #0
 8002814:	617b      	str	r3, [r7, #20]
 8002816:	2300      	movs	r3, #0
 8002818:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800281a:	2300      	movs	r3, #0
 800281c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800281e:	4b1e      	ldr	r3, [pc, #120]	@ (8002898 <HAL_RCC_GetSysClockFreq+0x94>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f003 030c 	and.w	r3, r3, #12
 800282a:	2b04      	cmp	r3, #4
 800282c:	d002      	beq.n	8002834 <HAL_RCC_GetSysClockFreq+0x30>
 800282e:	2b08      	cmp	r3, #8
 8002830:	d003      	beq.n	800283a <HAL_RCC_GetSysClockFreq+0x36>
 8002832:	e027      	b.n	8002884 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002834:	4b19      	ldr	r3, [pc, #100]	@ (800289c <HAL_RCC_GetSysClockFreq+0x98>)
 8002836:	613b      	str	r3, [r7, #16]
      break;
 8002838:	e027      	b.n	800288a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	0c9b      	lsrs	r3, r3, #18
 800283e:	f003 030f 	and.w	r3, r3, #15
 8002842:	4a17      	ldr	r2, [pc, #92]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002844:	5cd3      	ldrb	r3, [r2, r3]
 8002846:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d010      	beq.n	8002874 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002852:	4b11      	ldr	r3, [pc, #68]	@ (8002898 <HAL_RCC_GetSysClockFreq+0x94>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	0c5b      	lsrs	r3, r3, #17
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	4a11      	ldr	r2, [pc, #68]	@ (80028a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800285e:	5cd3      	ldrb	r3, [r2, r3]
 8002860:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a0d      	ldr	r2, [pc, #52]	@ (800289c <HAL_RCC_GetSysClockFreq+0x98>)
 8002866:	fb03 f202 	mul.w	r2, r3, r2
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002870:	617b      	str	r3, [r7, #20]
 8002872:	e004      	b.n	800287e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4a0c      	ldr	r2, [pc, #48]	@ (80028a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002878:	fb02 f303 	mul.w	r3, r2, r3
 800287c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	613b      	str	r3, [r7, #16]
      break;
 8002882:	e002      	b.n	800288a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002884:	4b05      	ldr	r3, [pc, #20]	@ (800289c <HAL_RCC_GetSysClockFreq+0x98>)
 8002886:	613b      	str	r3, [r7, #16]
      break;
 8002888:	bf00      	nop
    }
  }
  return sysclockfreq;
 800288a:	693b      	ldr	r3, [r7, #16]
}
 800288c:	4618      	mov	r0, r3
 800288e:	371c      	adds	r7, #28
 8002890:	46bd      	mov	sp, r7
 8002892:	bc80      	pop	{r7}
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	40021000 	.word	0x40021000
 800289c:	007a1200 	.word	0x007a1200
 80028a0:	08003234 	.word	0x08003234
 80028a4:	08003244 	.word	0x08003244
 80028a8:	003d0900 	.word	0x003d0900

080028ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028b4:	4b0a      	ldr	r3, [pc, #40]	@ (80028e0 <RCC_Delay+0x34>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a0a      	ldr	r2, [pc, #40]	@ (80028e4 <RCC_Delay+0x38>)
 80028ba:	fba2 2303 	umull	r2, r3, r2, r3
 80028be:	0a5b      	lsrs	r3, r3, #9
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	fb02 f303 	mul.w	r3, r2, r3
 80028c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028c8:	bf00      	nop
  }
  while (Delay --);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	1e5a      	subs	r2, r3, #1
 80028ce:	60fa      	str	r2, [r7, #12]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d1f9      	bne.n	80028c8 <RCC_Delay+0x1c>
}
 80028d4:	bf00      	nop
 80028d6:	bf00      	nop
 80028d8:	3714      	adds	r7, #20
 80028da:	46bd      	mov	sp, r7
 80028dc:	bc80      	pop	{r7}
 80028de:	4770      	bx	lr
 80028e0:	20000000 	.word	0x20000000
 80028e4:	10624dd3 	.word	0x10624dd3

080028e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e041      	b.n	800297e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b00      	cmp	r3, #0
 8002904:	d106      	bne.n	8002914 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f7fe f9b2 	bl	8000c78 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2202      	movs	r2, #2
 8002918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	3304      	adds	r3, #4
 8002924:	4619      	mov	r1, r3
 8002926:	4610      	mov	r0, r2
 8002928:	f000 f99a 	bl	8002c60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b086      	sub	sp, #24
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
 800298e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e093      	b.n	8002ac2 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d106      	bne.n	80029b4 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 f88b 	bl	8002aca <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2202      	movs	r2, #2
 80029b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	6812      	ldr	r2, [r2, #0]
 80029c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80029ca:	f023 0307 	bic.w	r3, r3, #7
 80029ce:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	3304      	adds	r3, #4
 80029d8:	4619      	mov	r1, r3
 80029da:	4610      	mov	r0, r2
 80029dc:	f000 f940 	bl	8002c60 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6a1b      	ldr	r3, [r3, #32]
 80029f6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	697a      	ldr	r2, [r7, #20]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a08:	f023 0303 	bic.w	r3, r3, #3
 8002a0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	689a      	ldr	r2, [r3, #8]
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	021b      	lsls	r3, r3, #8
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002a26:	f023 030c 	bic.w	r3, r3, #12
 8002a2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002a32:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	68da      	ldr	r2, [r3, #12]
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	69db      	ldr	r3, [r3, #28]
 8002a40:	021b      	lsls	r3, r3, #8
 8002a42:	4313      	orrs	r3, r2
 8002a44:	693a      	ldr	r2, [r7, #16]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	011a      	lsls	r2, r3, #4
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	6a1b      	ldr	r3, [r3, #32]
 8002a54:	031b      	lsls	r3, r3, #12
 8002a56:	4313      	orrs	r3, r2
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002a64:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685a      	ldr	r2, [r3, #4]
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	011b      	lsls	r3, r3, #4
 8002a70:	4313      	orrs	r3, r2
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	697a      	ldr	r2, [r7, #20]
 8002a7e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68fa      	ldr	r2, [r7, #12]
 8002a8e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3718      	adds	r7, #24
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <HAL_TIM_Encoder_MspInit>:
  * @brief  Initializes the TIM Encoder Interface MSP.
  * @param  htim TIM Encoder Interface handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
{
 8002aca:	b480      	push	{r7}
 8002acc:	b083      	sub	sp, #12
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspInit could be implemented in the user file
   */
}
 8002ad2:	bf00      	nop
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bc80      	pop	{r7}
 8002ada:	4770      	bx	lr

08002adc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b086      	sub	sp, #24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d101      	bne.n	8002afa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002af6:	2302      	movs	r3, #2
 8002af8:	e0ae      	b.n	8002c58 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2201      	movs	r2, #1
 8002afe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2b0c      	cmp	r3, #12
 8002b06:	f200 809f 	bhi.w	8002c48 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002b0a:	a201      	add	r2, pc, #4	@ (adr r2, 8002b10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b10:	08002b45 	.word	0x08002b45
 8002b14:	08002c49 	.word	0x08002c49
 8002b18:	08002c49 	.word	0x08002c49
 8002b1c:	08002c49 	.word	0x08002c49
 8002b20:	08002b85 	.word	0x08002b85
 8002b24:	08002c49 	.word	0x08002c49
 8002b28:	08002c49 	.word	0x08002c49
 8002b2c:	08002c49 	.word	0x08002c49
 8002b30:	08002bc7 	.word	0x08002bc7
 8002b34:	08002c49 	.word	0x08002c49
 8002b38:	08002c49 	.word	0x08002c49
 8002b3c:	08002c49 	.word	0x08002c49
 8002b40:	08002c07 	.word	0x08002c07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68b9      	ldr	r1, [r7, #8]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f000 f8ec 	bl	8002d28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	699a      	ldr	r2, [r3, #24]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f042 0208 	orr.w	r2, r2, #8
 8002b5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	699a      	ldr	r2, [r3, #24]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f022 0204 	bic.w	r2, r2, #4
 8002b6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6999      	ldr	r1, [r3, #24]
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	691a      	ldr	r2, [r3, #16]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	619a      	str	r2, [r3, #24]
      break;
 8002b82:	e064      	b.n	8002c4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68b9      	ldr	r1, [r7, #8]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f000 f932 	bl	8002df4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	699a      	ldr	r2, [r3, #24]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	699a      	ldr	r2, [r3, #24]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	6999      	ldr	r1, [r3, #24]
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	021a      	lsls	r2, r3, #8
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	619a      	str	r2, [r3, #24]
      break;
 8002bc4:	e043      	b.n	8002c4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68b9      	ldr	r1, [r7, #8]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f000 f97b 	bl	8002ec8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	69da      	ldr	r2, [r3, #28]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f042 0208 	orr.w	r2, r2, #8
 8002be0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	69da      	ldr	r2, [r3, #28]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 0204 	bic.w	r2, r2, #4
 8002bf0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	69d9      	ldr	r1, [r3, #28]
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	691a      	ldr	r2, [r3, #16]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	430a      	orrs	r2, r1
 8002c02:	61da      	str	r2, [r3, #28]
      break;
 8002c04:	e023      	b.n	8002c4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68b9      	ldr	r1, [r7, #8]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f000 f9c5 	bl	8002f9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	69da      	ldr	r2, [r3, #28]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	69da      	ldr	r2, [r3, #28]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	69d9      	ldr	r1, [r3, #28]
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	021a      	lsls	r2, r3, #8
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	430a      	orrs	r2, r1
 8002c44:	61da      	str	r2, [r3, #28]
      break;
 8002c46:	e002      	b.n	8002c4e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	75fb      	strb	r3, [r7, #23]
      break;
 8002c4c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002c56:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3718      	adds	r7, #24
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a2b      	ldr	r2, [pc, #172]	@ (8002d20 <TIM_Base_SetConfig+0xc0>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d007      	beq.n	8002c88 <TIM_Base_SetConfig+0x28>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c7e:	d003      	beq.n	8002c88 <TIM_Base_SetConfig+0x28>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a28      	ldr	r2, [pc, #160]	@ (8002d24 <TIM_Base_SetConfig+0xc4>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d108      	bne.n	8002c9a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a20      	ldr	r2, [pc, #128]	@ (8002d20 <TIM_Base_SetConfig+0xc0>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d007      	beq.n	8002cb2 <TIM_Base_SetConfig+0x52>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ca8:	d003      	beq.n	8002cb2 <TIM_Base_SetConfig+0x52>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a1d      	ldr	r2, [pc, #116]	@ (8002d24 <TIM_Base_SetConfig+0xc4>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d108      	bne.n	8002cc4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a0d      	ldr	r2, [pc, #52]	@ (8002d20 <TIM_Base_SetConfig+0xc0>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d103      	bne.n	8002cf8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	691a      	ldr	r2, [r3, #16]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d005      	beq.n	8002d16 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	f023 0201 	bic.w	r2, r3, #1
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	611a      	str	r2, [r3, #16]
  }
}
 8002d16:	bf00      	nop
 8002d18:	3714      	adds	r7, #20
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bc80      	pop	{r7}
 8002d1e:	4770      	bx	lr
 8002d20:	40012c00 	.word	0x40012c00
 8002d24:	40000400 	.word	0x40000400

08002d28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b087      	sub	sp, #28
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a1b      	ldr	r3, [r3, #32]
 8002d36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a1b      	ldr	r3, [r3, #32]
 8002d3c:	f023 0201 	bic.w	r2, r3, #1
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f023 0303 	bic.w	r3, r3, #3
 8002d5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	f023 0302 	bic.w	r3, r3, #2
 8002d70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a1c      	ldr	r2, [pc, #112]	@ (8002df0 <TIM_OC1_SetConfig+0xc8>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d10c      	bne.n	8002d9e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	f023 0308 	bic.w	r3, r3, #8
 8002d8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	697a      	ldr	r2, [r7, #20]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	f023 0304 	bic.w	r3, r3, #4
 8002d9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a13      	ldr	r2, [pc, #76]	@ (8002df0 <TIM_OC1_SetConfig+0xc8>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d111      	bne.n	8002dca <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002dac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002db4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	693a      	ldr	r2, [r7, #16]
 8002dce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685a      	ldr	r2, [r3, #4]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	621a      	str	r2, [r3, #32]
}
 8002de4:	bf00      	nop
 8002de6:	371c      	adds	r7, #28
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bc80      	pop	{r7}
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	40012c00 	.word	0x40012c00

08002df4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b087      	sub	sp, #28
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a1b      	ldr	r3, [r3, #32]
 8002e02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	f023 0210 	bic.w	r2, r3, #16
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	021b      	lsls	r3, r3, #8
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	f023 0320 	bic.w	r3, r3, #32
 8002e3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	011b      	lsls	r3, r3, #4
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a1d      	ldr	r2, [pc, #116]	@ (8002ec4 <TIM_OC2_SetConfig+0xd0>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d10d      	bne.n	8002e70 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	011b      	lsls	r3, r3, #4
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002e6e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a14      	ldr	r2, [pc, #80]	@ (8002ec4 <TIM_OC2_SetConfig+0xd0>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d113      	bne.n	8002ea0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002e7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002e86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	695b      	ldr	r3, [r3, #20]
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	693a      	ldr	r2, [r7, #16]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68fa      	ldr	r2, [r7, #12]
 8002eaa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685a      	ldr	r2, [r3, #4]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	697a      	ldr	r2, [r7, #20]
 8002eb8:	621a      	str	r2, [r3, #32]
}
 8002eba:	bf00      	nop
 8002ebc:	371c      	adds	r7, #28
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bc80      	pop	{r7}
 8002ec2:	4770      	bx	lr
 8002ec4:	40012c00 	.word	0x40012c00

08002ec8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b087      	sub	sp, #28
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	69db      	ldr	r3, [r3, #28]
 8002eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ef6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f023 0303 	bic.w	r3, r3, #3
 8002efe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002f10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	021b      	lsls	r3, r3, #8
 8002f18:	697a      	ldr	r2, [r7, #20]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a1d      	ldr	r2, [pc, #116]	@ (8002f98 <TIM_OC3_SetConfig+0xd0>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d10d      	bne.n	8002f42 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002f2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	021b      	lsls	r3, r3, #8
 8002f34:	697a      	ldr	r2, [r7, #20]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002f40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a14      	ldr	r2, [pc, #80]	@ (8002f98 <TIM_OC3_SetConfig+0xd0>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d113      	bne.n	8002f72 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002f50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002f58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	011b      	lsls	r3, r3, #4
 8002f60:	693a      	ldr	r2, [r7, #16]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	011b      	lsls	r3, r3, #4
 8002f6c:	693a      	ldr	r2, [r7, #16]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685a      	ldr	r2, [r3, #4]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	697a      	ldr	r2, [r7, #20]
 8002f8a:	621a      	str	r2, [r3, #32]
}
 8002f8c:	bf00      	nop
 8002f8e:	371c      	adds	r7, #28
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bc80      	pop	{r7}
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	40012c00 	.word	0x40012c00

08002f9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b087      	sub	sp, #28
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a1b      	ldr	r3, [r3, #32]
 8002faa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002fca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	021b      	lsls	r3, r3, #8
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002fe6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	031b      	lsls	r3, r3, #12
 8002fee:	693a      	ldr	r2, [r7, #16]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4a0f      	ldr	r2, [pc, #60]	@ (8003034 <TIM_OC4_SetConfig+0x98>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d109      	bne.n	8003010 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003002:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	695b      	ldr	r3, [r3, #20]
 8003008:	019b      	lsls	r3, r3, #6
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	4313      	orrs	r3, r2
 800300e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	697a      	ldr	r2, [r7, #20]
 8003014:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	68fa      	ldr	r2, [r7, #12]
 800301a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685a      	ldr	r2, [r3, #4]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	693a      	ldr	r2, [r7, #16]
 8003028:	621a      	str	r2, [r3, #32]
}
 800302a:	bf00      	nop
 800302c:	371c      	adds	r7, #28
 800302e:	46bd      	mov	sp, r7
 8003030:	bc80      	pop	{r7}
 8003032:	4770      	bx	lr
 8003034:	40012c00 	.word	0x40012c00

08003038 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003048:	2b01      	cmp	r3, #1
 800304a:	d101      	bne.n	8003050 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800304c:	2302      	movs	r3, #2
 800304e:	e041      	b.n	80030d4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2202      	movs	r2, #2
 800305c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003076:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	4313      	orrs	r3, r2
 8003080:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a14      	ldr	r2, [pc, #80]	@ (80030e0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d009      	beq.n	80030a8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800309c:	d004      	beq.n	80030a8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a10      	ldr	r2, [pc, #64]	@ (80030e4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d10c      	bne.n	80030c2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80030ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	68ba      	ldr	r2, [r7, #8]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68ba      	ldr	r2, [r7, #8]
 80030c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2201      	movs	r2, #1
 80030c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3714      	adds	r7, #20
 80030d8:	46bd      	mov	sp, r7
 80030da:	bc80      	pop	{r7}
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	40012c00 	.word	0x40012c00
 80030e4:	40000400 	.word	0x40000400

080030e8 <_ZdlPvj>:
 80030e8:	f000 b800 	b.w	80030ec <_ZdlPv>

080030ec <_ZdlPv>:
 80030ec:	f000 b800 	b.w	80030f0 <free>

080030f0 <free>:
 80030f0:	4b02      	ldr	r3, [pc, #8]	@ (80030fc <free+0xc>)
 80030f2:	4601      	mov	r1, r0
 80030f4:	6818      	ldr	r0, [r3, #0]
 80030f6:	f000 b83d 	b.w	8003174 <_free_r>
 80030fa:	bf00      	nop
 80030fc:	2000000c 	.word	0x2000000c

08003100 <__malloc_lock>:
 8003100:	4801      	ldr	r0, [pc, #4]	@ (8003108 <__malloc_lock+0x8>)
 8003102:	f000 b835 	b.w	8003170 <__retarget_lock_acquire_recursive>
 8003106:	bf00      	nop
 8003108:	2000024c 	.word	0x2000024c

0800310c <__malloc_unlock>:
 800310c:	4801      	ldr	r0, [pc, #4]	@ (8003114 <__malloc_unlock+0x8>)
 800310e:	f000 b830 	b.w	8003172 <__retarget_lock_release_recursive>
 8003112:	bf00      	nop
 8003114:	2000024c 	.word	0x2000024c

08003118 <memset>:
 8003118:	4603      	mov	r3, r0
 800311a:	4402      	add	r2, r0
 800311c:	4293      	cmp	r3, r2
 800311e:	d100      	bne.n	8003122 <memset+0xa>
 8003120:	4770      	bx	lr
 8003122:	f803 1b01 	strb.w	r1, [r3], #1
 8003126:	e7f9      	b.n	800311c <memset+0x4>

08003128 <__libc_init_array>:
 8003128:	b570      	push	{r4, r5, r6, lr}
 800312a:	2600      	movs	r6, #0
 800312c:	4d0c      	ldr	r5, [pc, #48]	@ (8003160 <__libc_init_array+0x38>)
 800312e:	4c0d      	ldr	r4, [pc, #52]	@ (8003164 <__libc_init_array+0x3c>)
 8003130:	1b64      	subs	r4, r4, r5
 8003132:	10a4      	asrs	r4, r4, #2
 8003134:	42a6      	cmp	r6, r4
 8003136:	d109      	bne.n	800314c <__libc_init_array+0x24>
 8003138:	f000 f864 	bl	8003204 <_init>
 800313c:	2600      	movs	r6, #0
 800313e:	4d0a      	ldr	r5, [pc, #40]	@ (8003168 <__libc_init_array+0x40>)
 8003140:	4c0a      	ldr	r4, [pc, #40]	@ (800316c <__libc_init_array+0x44>)
 8003142:	1b64      	subs	r4, r4, r5
 8003144:	10a4      	asrs	r4, r4, #2
 8003146:	42a6      	cmp	r6, r4
 8003148:	d105      	bne.n	8003156 <__libc_init_array+0x2e>
 800314a:	bd70      	pop	{r4, r5, r6, pc}
 800314c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003150:	4798      	blx	r3
 8003152:	3601      	adds	r6, #1
 8003154:	e7ee      	b.n	8003134 <__libc_init_array+0xc>
 8003156:	f855 3b04 	ldr.w	r3, [r5], #4
 800315a:	4798      	blx	r3
 800315c:	3601      	adds	r6, #1
 800315e:	e7f2      	b.n	8003146 <__libc_init_array+0x1e>
 8003160:	08003248 	.word	0x08003248
 8003164:	08003248 	.word	0x08003248
 8003168:	08003248 	.word	0x08003248
 800316c:	0800324c 	.word	0x0800324c

08003170 <__retarget_lock_acquire_recursive>:
 8003170:	4770      	bx	lr

08003172 <__retarget_lock_release_recursive>:
 8003172:	4770      	bx	lr

08003174 <_free_r>:
 8003174:	b538      	push	{r3, r4, r5, lr}
 8003176:	4605      	mov	r5, r0
 8003178:	2900      	cmp	r1, #0
 800317a:	d040      	beq.n	80031fe <_free_r+0x8a>
 800317c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003180:	1f0c      	subs	r4, r1, #4
 8003182:	2b00      	cmp	r3, #0
 8003184:	bfb8      	it	lt
 8003186:	18e4      	addlt	r4, r4, r3
 8003188:	f7ff ffba 	bl	8003100 <__malloc_lock>
 800318c:	4a1c      	ldr	r2, [pc, #112]	@ (8003200 <_free_r+0x8c>)
 800318e:	6813      	ldr	r3, [r2, #0]
 8003190:	b933      	cbnz	r3, 80031a0 <_free_r+0x2c>
 8003192:	6063      	str	r3, [r4, #4]
 8003194:	6014      	str	r4, [r2, #0]
 8003196:	4628      	mov	r0, r5
 8003198:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800319c:	f7ff bfb6 	b.w	800310c <__malloc_unlock>
 80031a0:	42a3      	cmp	r3, r4
 80031a2:	d908      	bls.n	80031b6 <_free_r+0x42>
 80031a4:	6820      	ldr	r0, [r4, #0]
 80031a6:	1821      	adds	r1, r4, r0
 80031a8:	428b      	cmp	r3, r1
 80031aa:	bf01      	itttt	eq
 80031ac:	6819      	ldreq	r1, [r3, #0]
 80031ae:	685b      	ldreq	r3, [r3, #4]
 80031b0:	1809      	addeq	r1, r1, r0
 80031b2:	6021      	streq	r1, [r4, #0]
 80031b4:	e7ed      	b.n	8003192 <_free_r+0x1e>
 80031b6:	461a      	mov	r2, r3
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	b10b      	cbz	r3, 80031c0 <_free_r+0x4c>
 80031bc:	42a3      	cmp	r3, r4
 80031be:	d9fa      	bls.n	80031b6 <_free_r+0x42>
 80031c0:	6811      	ldr	r1, [r2, #0]
 80031c2:	1850      	adds	r0, r2, r1
 80031c4:	42a0      	cmp	r0, r4
 80031c6:	d10b      	bne.n	80031e0 <_free_r+0x6c>
 80031c8:	6820      	ldr	r0, [r4, #0]
 80031ca:	4401      	add	r1, r0
 80031cc:	1850      	adds	r0, r2, r1
 80031ce:	4283      	cmp	r3, r0
 80031d0:	6011      	str	r1, [r2, #0]
 80031d2:	d1e0      	bne.n	8003196 <_free_r+0x22>
 80031d4:	6818      	ldr	r0, [r3, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	4408      	add	r0, r1
 80031da:	6010      	str	r0, [r2, #0]
 80031dc:	6053      	str	r3, [r2, #4]
 80031de:	e7da      	b.n	8003196 <_free_r+0x22>
 80031e0:	d902      	bls.n	80031e8 <_free_r+0x74>
 80031e2:	230c      	movs	r3, #12
 80031e4:	602b      	str	r3, [r5, #0]
 80031e6:	e7d6      	b.n	8003196 <_free_r+0x22>
 80031e8:	6820      	ldr	r0, [r4, #0]
 80031ea:	1821      	adds	r1, r4, r0
 80031ec:	428b      	cmp	r3, r1
 80031ee:	bf01      	itttt	eq
 80031f0:	6819      	ldreq	r1, [r3, #0]
 80031f2:	685b      	ldreq	r3, [r3, #4]
 80031f4:	1809      	addeq	r1, r1, r0
 80031f6:	6021      	streq	r1, [r4, #0]
 80031f8:	6063      	str	r3, [r4, #4]
 80031fa:	6054      	str	r4, [r2, #4]
 80031fc:	e7cb      	b.n	8003196 <_free_r+0x22>
 80031fe:	bd38      	pop	{r3, r4, r5, pc}
 8003200:	20000110 	.word	0x20000110

08003204 <_init>:
 8003204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003206:	bf00      	nop
 8003208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800320a:	bc08      	pop	{r3}
 800320c:	469e      	mov	lr, r3
 800320e:	4770      	bx	lr

08003210 <_fini>:
 8003210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003212:	bf00      	nop
 8003214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003216:	bc08      	pop	{r3}
 8003218:	469e      	mov	lr, r3
 800321a:	4770      	bx	lr
