
SteerByWireC6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ad4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  08004be0  08004be0  00005be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ddc  08004ddc  0000605c  2**0
                  CONTENTS
  4 .ARM          00000000  08004ddc  08004ddc  0000605c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ddc  08004ddc  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ddc  08004ddc  00005ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004de0  08004de0  00005de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004de4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  2000005c  08004e40  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  08004e40  000062ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017369  00000000  00000000  00006085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e55  00000000  00000000  0001d3ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f8  00000000  00000000  00020248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dc4  00000000  00000000  00021440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001af6a  00000000  00000000  00022204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013717  00000000  00000000  0003d16e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098692  00000000  00000000  00050885  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e8f17  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fe8  00000000  00000000  000e8f5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000edf44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004bc8 	.word	0x08004bc8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08004bc8 	.word	0x08004bc8

0800014c <_ZNSt12_Vector_baseImSaImEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	4618      	mov	r0, r3
 8000158:	f000 f8ba 	bl	80002d0 <_ZNSt12_Vector_baseImSaImEE12_Vector_implC1Ev>
 800015c:	687b      	ldr	r3, [r7, #4]
 800015e:	4618      	mov	r0, r3
 8000160:	3708      	adds	r7, #8
 8000162:	46bd      	mov	sp, r7
 8000164:	bd80      	pop	{r7, pc}

08000166 <_ZNSt6vectorImSaImEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8000166:	b580      	push	{r7, lr}
 8000168:	b082      	sub	sp, #8
 800016a:	af00      	add	r7, sp, #0
 800016c:	6078      	str	r0, [r7, #4]
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	4618      	mov	r0, r3
 8000172:	f7ff ffeb 	bl	800014c <_ZNSt12_Vector_baseImSaImEEC1Ev>
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	4618      	mov	r0, r3
 800017a:	3708      	adds	r7, #8
 800017c:	46bd      	mov	sp, r7
 800017e:	bd80      	pop	{r7, pc}

08000180 <_ZNSt12_Vector_baseIySaIyEEC1Ev>:
      _Vector_base() = default;
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	4618      	mov	r0, r3
 800018c:	f000 f8b0 	bl	80002f0 <_ZNSt12_Vector_baseIySaIyEE12_Vector_implC1Ev>
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	4618      	mov	r0, r3
 8000194:	3708      	adds	r7, #8
 8000196:	46bd      	mov	sp, r7
 8000198:	bd80      	pop	{r7, pc}

0800019a <_ZNSt6vectorIySaIyEEC1Ev>:
      vector() = default;
 800019a:	b580      	push	{r7, lr}
 800019c:	b082      	sub	sp, #8
 800019e:	af00      	add	r7, sp, #0
 80001a0:	6078      	str	r0, [r7, #4]
 80001a2:	687b      	ldr	r3, [r7, #4]
 80001a4:	4618      	mov	r0, r3
 80001a6:	f7ff ffeb 	bl	8000180 <_ZNSt12_Vector_baseIySaIyEEC1Ev>
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	4618      	mov	r0, r3
 80001ae:	3708      	adds	r7, #8
 80001b0:	46bd      	mov	sp, r7
 80001b2:	bd80      	pop	{r7, pc}

080001b4 <_ZN6CANBusC1Ev>:
 *      Author: Dennis Boekholtz
 */

#include "CAN_bus.hpp"

CANBus::CANBus() {
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b082      	sub	sp, #8
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	331c      	adds	r3, #28
 80001c0:	4618      	mov	r0, r3
 80001c2:	f7ff ffd0 	bl	8000166 <_ZNSt6vectorImSaImEEC1Ev>
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	3328      	adds	r3, #40	@ 0x28
 80001ca:	4618      	mov	r0, r3
 80001cc:	f7ff ffe5 	bl	800019a <_ZNSt6vectorIySaIyEEC1Ev>
    // Constructor implementation (if needed)
}
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	4618      	mov	r0, r3
 80001d4:	3708      	adds	r7, #8
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bd80      	pop	{r7, pc}

080001da <_ZN6CANBus5startEP17CAN_HandleTypeDefh>:

void CANBus::start(CAN_HandleTypeDef* hcan, uint8_t LIDEE){
 80001da:	b580      	push	{r7, lr}
 80001dc:	b084      	sub	sp, #16
 80001de:	af00      	add	r7, sp, #0
 80001e0:	60f8      	str	r0, [r7, #12]
 80001e2:	60b9      	str	r1, [r7, #8]
 80001e4:	4613      	mov	r3, r2
 80001e6:	71fb      	strb	r3, [r7, #7]

	// Start CAN bus
    HAL_CAN_Start(hcan);
 80001e8:	68b8      	ldr	r0, [r7, #8]
 80001ea:	f001 ff89 	bl	8002100 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80001ee:	2102      	movs	r1, #2
 80001f0:	68b8      	ldr	r0, [r7, #8]
 80001f2:	f002 f8e3 	bl	80023bc <HAL_CAN_ActivateNotification>

    if(LIDEE == CAN_ID_STD){
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d107      	bne.n	800020c <_ZN6CANBus5startEP17CAN_HandleTypeDefh+0x32>
        TxHeader.ExtId = 0;		// 0 is standaard ID , 4 is extended ID
 80001fc:	68fb      	ldr	r3, [r7, #12]
 80001fe:	2200      	movs	r2, #0
 8000200:	605a      	str	r2, [r3, #4]
        TxHeader.StdId = 2047;  // Set CAN ID to 2047
 8000202:	68fb      	ldr	r3, [r7, #12]
 8000204:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000208:	601a      	str	r2, [r3, #0]
 800020a:	e006      	b.n	800021a <_ZN6CANBus5startEP17CAN_HandleTypeDefh+0x40>
    }
    else{
        TxHeader.ExtId = 2047;		// 0 is standaard ID , 4 is extended ID
 800020c:	68fb      	ldr	r3, [r7, #12]
 800020e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000212:	605a      	str	r2, [r3, #4]
        TxHeader.StdId = 0;  // Set CAN ID to 2047
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	2200      	movs	r2, #0
 8000218:	601a      	str	r2, [r3, #0]
    }
    // Initialize default values for CAN headers
    TxHeader.DLC = 8;
 800021a:	68fb      	ldr	r3, [r7, #12]
 800021c:	2208      	movs	r2, #8
 800021e:	611a      	str	r2, [r3, #16]
    TxHeader.IDE = LIDEE;    // standaard ID = CAN_ID_STD, extended ID = CAN_ID_EXT
 8000220:	79fa      	ldrb	r2, [r7, #7]
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	609a      	str	r2, [r3, #8]
    TxHeader.RTR = CAN_RTR_DATA;
 8000226:	68fb      	ldr	r3, [r7, #12]
 8000228:	2200      	movs	r2, #0
 800022a:	60da      	str	r2, [r3, #12]
    TxHeader.TransmitGlobalTime = DISABLE;
 800022c:	68fb      	ldr	r3, [r7, #12]
 800022e:	2200      	movs	r2, #0
 8000230:	751a      	strb	r2, [r3, #20]

}
 8000232:	bf00      	nop
 8000234:	3710      	adds	r7, #16
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}

0800023a <_ZN6CANBus8transmitEP17CAN_HandleTypeDefPht>:

// Transmit data
void CANBus::transmit(CAN_HandleTypeDef* hcan, uint8_t* TxData, uint16_t id) {
 800023a:	b580      	push	{r7, lr}
 800023c:	b084      	sub	sp, #16
 800023e:	af00      	add	r7, sp, #0
 8000240:	60f8      	str	r0, [r7, #12]
 8000242:	60b9      	str	r1, [r7, #8]
 8000244:	607a      	str	r2, [r7, #4]
 8000246:	807b      	strh	r3, [r7, #2]
    if (TxHeader.IDE == CAN_ID_STD){
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	689b      	ldr	r3, [r3, #8]
 800024c:	2b00      	cmp	r3, #0
 800024e:	d103      	bne.n	8000258 <_ZN6CANBus8transmitEP17CAN_HandleTypeDefPht+0x1e>
    	TxHeader.StdId = id;
 8000250:	887a      	ldrh	r2, [r7, #2]
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	601a      	str	r2, [r3, #0]
 8000256:	e002      	b.n	800025e <_ZN6CANBus8transmitEP17CAN_HandleTypeDefPht+0x24>
    }
    else{
    	TxHeader.ExtId = id;
 8000258:	887a      	ldrh	r2, [r7, #2]
 800025a:	68fb      	ldr	r3, [r7, #12]
 800025c:	605a      	str	r2, [r3, #4]
    }
	TxHeader.DLC = 8;
 800025e:	68fb      	ldr	r3, [r7, #12]
 8000260:	2208      	movs	r2, #8
 8000262:	611a      	str	r2, [r3, #16]
    HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox);
 8000264:	68f9      	ldr	r1, [r7, #12]
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	3318      	adds	r3, #24
 800026a:	687a      	ldr	r2, [r7, #4]
 800026c:	68b8      	ldr	r0, [r7, #8]
 800026e:	f001 ff8b 	bl	8002188 <HAL_CAN_AddTxMessage>
}
 8000272:	bf00      	nop
 8000274:	3710      	adds	r7, #16
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}

0800027a <_ZN6CANBus15configureFilterEP17CAN_HandleTypeDeftthh>:

void CANBus::configureFilter(CAN_HandleTypeDef* hcan, uint16_t ID, uint16_t Mask, uint8_t filterBank, uint8_t slaveFilterBank){
 800027a:	b580      	push	{r7, lr}
 800027c:	b08e      	sub	sp, #56	@ 0x38
 800027e:	af00      	add	r7, sp, #0
 8000280:	60f8      	str	r0, [r7, #12]
 8000282:	60b9      	str	r1, [r7, #8]
 8000284:	4611      	mov	r1, r2
 8000286:	461a      	mov	r2, r3
 8000288:	460b      	mov	r3, r1
 800028a:	80fb      	strh	r3, [r7, #6]
 800028c:	4613      	mov	r3, r2
 800028e:	80bb      	strh	r3, [r7, #4]

	  CAN_FilterTypeDef canFilterConfig;

	  canFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8000290:	2301      	movs	r3, #1
 8000292:	633b      	str	r3, [r7, #48]	@ 0x30
	  canFilterConfig.FilterBank = filterBank;
 8000294:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000298:	627b      	str	r3, [r7, #36]	@ 0x24
	  canFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800029a:	2300      	movs	r3, #0
 800029c:	623b      	str	r3, [r7, #32]
	  canFilterConfig.FilterIdHigh = 0 << 5;
 800029e:	2300      	movs	r3, #0
 80002a0:	613b      	str	r3, [r7, #16]
	  canFilterConfig.FilterIdLow = 0x0000;
 80002a2:	2300      	movs	r3, #0
 80002a4:	617b      	str	r3, [r7, #20]
	  canFilterConfig.FilterMaskIdHigh = 0 << 5;
 80002a6:	2300      	movs	r3, #0
 80002a8:	61bb      	str	r3, [r7, #24]
	  canFilterConfig.FilterMaskIdLow = 0x0000;
 80002aa:	2300      	movs	r3, #0
 80002ac:	61fb      	str	r3, [r7, #28]
	  canFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80002ae:	2300      	movs	r3, #0
 80002b0:	62bb      	str	r3, [r7, #40]	@ 0x28
	  canFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80002b2:	2301      	movs	r3, #1
 80002b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  canFilterConfig.SlaveStartFilterBank = slaveFilterBank;
 80002b6:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80002ba:	637b      	str	r3, [r7, #52]	@ 0x34

	  HAL_CAN_ConfigFilter(hcan, &canFilterConfig);
 80002bc:	f107 0310 	add.w	r3, r7, #16
 80002c0:	4619      	mov	r1, r3
 80002c2:	68b8      	ldr	r0, [r7, #8]
 80002c4:	f001 fdec 	bl	8001ea0 <HAL_CAN_ConfigFilter>
}
 80002c8:	bf00      	nop
 80002ca:	3738      	adds	r7, #56	@ 0x38
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}

080002d0 <_ZNSt12_Vector_baseImSaImEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b082      	sub	sp, #8
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80002d8:	6878      	ldr	r0, [r7, #4]
 80002da:	f000 f819 	bl	8000310 <_ZNSaImEC1Ev>
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	4618      	mov	r0, r3
 80002e2:	f000 f821 	bl	8000328 <_ZNSt12_Vector_baseImSaImEE17_Vector_impl_dataC1Ev>
	{ }
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	4618      	mov	r0, r3
 80002ea:	3708      	adds	r7, #8
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}

080002f0 <_ZNSt12_Vector_baseIySaIyEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80002f8:	6878      	ldr	r0, [r7, #4]
 80002fa:	f000 f853 	bl	80003a4 <_ZNSaIyEC1Ev>
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	4618      	mov	r0, r3
 8000302:	f000 f85b 	bl	80003bc <_ZNSt12_Vector_baseIySaIyEE17_Vector_impl_dataC1Ev>
	{ }
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	4618      	mov	r0, r3
 800030a:	3708      	adds	r7, #8
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}

08000310 <_ZNSaImEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
 8000318:	6878      	ldr	r0, [r7, #4]
 800031a:	f000 f88d 	bl	8000438 <_ZNSt15__new_allocatorImEC1Ev>
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	4618      	mov	r0, r3
 8000322:	3708      	adds	r7, #8
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}

08000328 <_ZNSt12_Vector_baseImSaImEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8000328:	b480      	push	{r7}
 800032a:	b083      	sub	sp, #12
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	2200      	movs	r2, #0
 8000334:	601a      	str	r2, [r3, #0]
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	2200      	movs	r2, #0
 800033a:	605a      	str	r2, [r3, #4]
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	2200      	movs	r2, #0
 8000340:	609a      	str	r2, [r3, #8]
	{ }
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	4618      	mov	r0, r3
 8000346:	370c      	adds	r7, #12
 8000348:	46bd      	mov	sp, r7
 800034a:	bc80      	pop	{r7}
 800034c:	4770      	bx	lr

0800034e <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj>:
      _M_deallocate(pointer __p, size_t __n)
 800034e:	b580      	push	{r7, lr}
 8000350:	b084      	sub	sp, #16
 8000352:	af00      	add	r7, sp, #0
 8000354:	60f8      	str	r0, [r7, #12]
 8000356:	60b9      	str	r1, [r7, #8]
 8000358:	607a      	str	r2, [r7, #4]
	if (__p)
 800035a:	68bb      	ldr	r3, [r7, #8]
 800035c:	2b00      	cmp	r3, #0
 800035e:	d005      	beq.n	800036c <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	687a      	ldr	r2, [r7, #4]
 8000364:	68b9      	ldr	r1, [r7, #8]
 8000366:	4618      	mov	r0, r3
 8000368:	f000 f870 	bl	800044c <_ZNSt16allocator_traitsISaImEE10deallocateERS0_Pmj>
      }
 800036c:	bf00      	nop
 800036e:	3710      	adds	r7, #16
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}

08000374 <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	4618      	mov	r0, r3
 8000380:	370c      	adds	r7, #12
 8000382:	46bd      	mov	sp, r7
 8000384:	bc80      	pop	{r7}
 8000386:	4770      	bx	lr

08000388 <_ZSt8_DestroyIPmmEvT_S1_RSaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8000388:	b580      	push	{r7, lr}
 800038a:	b084      	sub	sp, #16
 800038c:	af00      	add	r7, sp, #0
 800038e:	60f8      	str	r0, [r7, #12]
 8000390:	60b9      	str	r1, [r7, #8]
 8000392:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8000394:	68b9      	ldr	r1, [r7, #8]
 8000396:	68f8      	ldr	r0, [r7, #12]
 8000398:	f000 f867 	bl	800046a <_ZSt8_DestroyIPmEvT_S1_>
    }
 800039c:	bf00      	nop
 800039e:	3710      	adds	r7, #16
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}

080003a4 <_ZNSaIyEC1Ev>:
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
 80003ac:	6878      	ldr	r0, [r7, #4]
 80003ae:	f000 f869 	bl	8000484 <_ZNSt15__new_allocatorIyEC1Ev>
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	4618      	mov	r0, r3
 80003b6:	3708      	adds	r7, #8
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}

080003bc <_ZNSt12_Vector_baseIySaIyEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80003bc:	b480      	push	{r7}
 80003be:	b083      	sub	sp, #12
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	2200      	movs	r2, #0
 80003c8:	601a      	str	r2, [r3, #0]
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	2200      	movs	r2, #0
 80003ce:	605a      	str	r2, [r3, #4]
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	2200      	movs	r2, #0
 80003d4:	609a      	str	r2, [r3, #8]
	{ }
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	4618      	mov	r0, r3
 80003da:	370c      	adds	r7, #12
 80003dc:	46bd      	mov	sp, r7
 80003de:	bc80      	pop	{r7}
 80003e0:	4770      	bx	lr

080003e2 <_ZNSt12_Vector_baseIySaIyEE13_M_deallocateEPyj>:
      _M_deallocate(pointer __p, size_t __n)
 80003e2:	b580      	push	{r7, lr}
 80003e4:	b084      	sub	sp, #16
 80003e6:	af00      	add	r7, sp, #0
 80003e8:	60f8      	str	r0, [r7, #12]
 80003ea:	60b9      	str	r1, [r7, #8]
 80003ec:	607a      	str	r2, [r7, #4]
	if (__p)
 80003ee:	68bb      	ldr	r3, [r7, #8]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d005      	beq.n	8000400 <_ZNSt12_Vector_baseIySaIyEE13_M_deallocateEPyj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	687a      	ldr	r2, [r7, #4]
 80003f8:	68b9      	ldr	r1, [r7, #8]
 80003fa:	4618      	mov	r0, r3
 80003fc:	f000 f84c 	bl	8000498 <_ZNSt16allocator_traitsISaIyEE10deallocateERS0_Pyj>
      }
 8000400:	bf00      	nop
 8000402:	3710      	adds	r7, #16
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}

08000408 <_ZNSt12_Vector_baseIySaIyEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8000408:	b480      	push	{r7}
 800040a:	b083      	sub	sp, #12
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	4618      	mov	r0, r3
 8000414:	370c      	adds	r7, #12
 8000416:	46bd      	mov	sp, r7
 8000418:	bc80      	pop	{r7}
 800041a:	4770      	bx	lr

0800041c <_ZSt8_DestroyIPyyEvT_S1_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800041c:	b580      	push	{r7, lr}
 800041e:	b084      	sub	sp, #16
 8000420:	af00      	add	r7, sp, #0
 8000422:	60f8      	str	r0, [r7, #12]
 8000424:	60b9      	str	r1, [r7, #8]
 8000426:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8000428:	68b9      	ldr	r1, [r7, #8]
 800042a:	68f8      	ldr	r0, [r7, #12]
 800042c:	f000 f843 	bl	80004b6 <_ZSt8_DestroyIPyEvT_S1_>
    }
 8000430:	bf00      	nop
 8000432:	3710      	adds	r7, #16
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}

08000438 <_ZNSt15__new_allocatorImEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000438:	b480      	push	{r7}
 800043a:	b083      	sub	sp, #12
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	4618      	mov	r0, r3
 8000444:	370c      	adds	r7, #12
 8000446:	46bd      	mov	sp, r7
 8000448:	bc80      	pop	{r7}
 800044a:	4770      	bx	lr

0800044c <_ZNSt16allocator_traitsISaImEE10deallocateERS0_Pmj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800044c:	b580      	push	{r7, lr}
 800044e:	b084      	sub	sp, #16
 8000450:	af00      	add	r7, sp, #0
 8000452:	60f8      	str	r0, [r7, #12]
 8000454:	60b9      	str	r1, [r7, #8]
 8000456:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8000458:	687a      	ldr	r2, [r7, #4]
 800045a:	68b9      	ldr	r1, [r7, #8]
 800045c:	68f8      	ldr	r0, [r7, #12]
 800045e:	f000 f837 	bl	80004d0 <_ZNSt15__new_allocatorImE10deallocateEPmj>
 8000462:	bf00      	nop
 8000464:	3710      	adds	r7, #16
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}

0800046a <_ZSt8_DestroyIPmEvT_S1_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800046a:	b580      	push	{r7, lr}
 800046c:	b082      	sub	sp, #8
 800046e:	af00      	add	r7, sp, #0
 8000470:	6078      	str	r0, [r7, #4]
 8000472:	6039      	str	r1, [r7, #0]
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8000474:	6839      	ldr	r1, [r7, #0]
 8000476:	6878      	ldr	r0, [r7, #4]
 8000478:	f000 f83a 	bl	80004f0 <_ZNSt12_Destroy_auxILb1EE9__destroyIPmEEvT_S3_>
    }
 800047c:	bf00      	nop
 800047e:	3708      	adds	r7, #8
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}

08000484 <_ZNSt15__new_allocatorIyEC1Ev>:
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	4618      	mov	r0, r3
 8000490:	370c      	adds	r7, #12
 8000492:	46bd      	mov	sp, r7
 8000494:	bc80      	pop	{r7}
 8000496:	4770      	bx	lr

08000498 <_ZNSt16allocator_traitsISaIyEE10deallocateERS0_Pyj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8000498:	b580      	push	{r7, lr}
 800049a:	b084      	sub	sp, #16
 800049c:	af00      	add	r7, sp, #0
 800049e:	60f8      	str	r0, [r7, #12]
 80004a0:	60b9      	str	r1, [r7, #8]
 80004a2:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80004a4:	687a      	ldr	r2, [r7, #4]
 80004a6:	68b9      	ldr	r1, [r7, #8]
 80004a8:	68f8      	ldr	r0, [r7, #12]
 80004aa:	f000 f82b 	bl	8000504 <_ZNSt15__new_allocatorIyE10deallocateEPyj>
 80004ae:	bf00      	nop
 80004b0:	3710      	adds	r7, #16
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}

080004b6 <_ZSt8_DestroyIPyEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80004b6:	b580      	push	{r7, lr}
 80004b8:	b082      	sub	sp, #8
 80004ba:	af00      	add	r7, sp, #0
 80004bc:	6078      	str	r0, [r7, #4]
 80004be:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 80004c0:	6839      	ldr	r1, [r7, #0]
 80004c2:	6878      	ldr	r0, [r7, #4]
 80004c4:	f000 f82e 	bl	8000524 <_ZNSt12_Destroy_auxILb1EE9__destroyIPyEEvT_S3_>
    }
 80004c8:	bf00      	nop
 80004ca:	3708      	adds	r7, #8
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}

080004d0 <_ZNSt15__new_allocatorImE10deallocateEPmj>:
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	60b9      	str	r1, [r7, #8]
 80004da:	607a      	str	r2, [r7, #4]
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	009b      	lsls	r3, r3, #2
 80004e0:	4619      	mov	r1, r3
 80004e2:	68b8      	ldr	r0, [r7, #8]
 80004e4:	f004 fae2 	bl	8004aac <_ZdlPvj>
      }
 80004e8:	bf00      	nop
 80004ea:	3710      	adds	r7, #16
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}

080004f0 <_ZNSt12_Destroy_auxILb1EE9__destroyIPmEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
 80004f8:	6039      	str	r1, [r7, #0]
 80004fa:	bf00      	nop
 80004fc:	370c      	adds	r7, #12
 80004fe:	46bd      	mov	sp, r7
 8000500:	bc80      	pop	{r7}
 8000502:	4770      	bx	lr

08000504 <_ZNSt15__new_allocatorIyE10deallocateEPyj>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0
 800050a:	60f8      	str	r0, [r7, #12]
 800050c:	60b9      	str	r1, [r7, #8]
 800050e:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	00db      	lsls	r3, r3, #3
 8000514:	4619      	mov	r1, r3
 8000516:	68b8      	ldr	r0, [r7, #8]
 8000518:	f004 fac8 	bl	8004aac <_ZdlPvj>
      }
 800051c:	bf00      	nop
 800051e:	3710      	adds	r7, #16
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}

08000524 <_ZNSt12_Destroy_auxILb1EE9__destroyIPyEEvT_S3_>:
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
 800052c:	6039      	str	r1, [r7, #0]
 800052e:	bf00      	nop
 8000530:	370c      	adds	r7, #12
 8000532:	46bd      	mov	sp, r7
 8000534:	bc80      	pop	{r7}
 8000536:	4770      	bx	lr

08000538 <_ZN7EncoderC1EP17TIM_HandleTypeDefS1_mf>:
 
#include "encoder.hpp"
#include "motorControl.hpp"
#include "cmath"

Encoder::Encoder(TIM_HandleTypeDef* enc1, TIM_HandleTypeDef* enc2, uint32_t maxCount, float countsPerRevolution)
 8000538:	b480      	push	{r7}
 800053a:	b085      	sub	sp, #20
 800053c:	af00      	add	r7, sp, #0
 800053e:	60f8      	str	r0, [r7, #12]
 8000540:	60b9      	str	r1, [r7, #8]
 8000542:	607a      	str	r2, [r7, #4]
 8000544:	603b      	str	r3, [r7, #0]
    : encoder1(enc1), encoder2(enc2), maxEncoderCount(maxCount), countsPerRev(countsPerRevolution) {
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	68ba      	ldr	r2, [r7, #8]
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	687a      	ldr	r2, [r7, #4]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	683a      	ldr	r2, [r7, #0]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	69ba      	ldr	r2, [r7, #24]
 800055c:	60da      	str	r2, [r3, #12]
    // Constructor
};
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	4618      	mov	r0, r3
 8000562:	3714      	adds	r7, #20
 8000564:	46bd      	mov	sp, r7
 8000566:	bc80      	pop	{r7}
 8000568:	4770      	bx	lr

0800056a <_ZN6CANBusD1Ev>:
#include "stm32f1xx_hal.h"
#include "main.hpp"
#include <vector>
#include <cstdint>

class CANBus {
 800056a:	b580      	push	{r7, lr}
 800056c:	b082      	sub	sp, #8
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	3328      	adds	r3, #40	@ 0x28
 8000576:	4618      	mov	r0, r3
 8000578:	f000 fbbf 	bl	8000cfa <_ZNSt6vectorIySaIyEED1Ev>
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	331c      	adds	r3, #28
 8000580:	4618      	mov	r0, r3
 8000582:	f000 fb9f 	bl	8000cc4 <_ZNSt6vectorImSaImEED1Ev>
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	4618      	mov	r0, r3
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b09e      	sub	sp, #120	@ 0x78
 8000594:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	CANBus canBus;
 8000596:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800059a:	4618      	mov	r0, r3
 800059c:	f7ff fe0a 	bl	80001b4 <_ZN6CANBusC1Ev>
	CAN_ErrorFlags error_flags;

	MotorControl motorControl(&htim2, TIM_CHANNEL_3);
 80005a0:	f107 031c 	add.w	r3, r7, #28
 80005a4:	2208      	movs	r2, #8
 80005a6:	4921      	ldr	r1, [pc, #132]	@ (800062c <main+0x9c>)
 80005a8:	4618      	mov	r0, r3
 80005aa:	f000 fc37 	bl	8000e1c <_ZN12MotorControlC1EP17TIM_HandleTypeDefm>
	Encoder encoder(&htim2, &htim3, 65535, 1000);
 80005ae:	f107 000c 	add.w	r0, r7, #12
 80005b2:	4b1f      	ldr	r3, [pc, #124]	@ (8000630 <main+0xa0>)
 80005b4:	9300      	str	r3, [sp, #0]
 80005b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80005ba:	4a1e      	ldr	r2, [pc, #120]	@ (8000634 <main+0xa4>)
 80005bc:	491b      	ldr	r1, [pc, #108]	@ (800062c <main+0x9c>)
 80005be:	f7ff ffbb 	bl	8000538 <_ZN7EncoderC1EP17TIM_HandleTypeDefS1_mf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c2:	f000 fe5f 	bl	8001284 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c6:	f000 f83b 	bl	8000640 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ca:	f000 fae5 	bl	8000b98 <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 80005ce:	f000 f8a1 	bl	8000714 <_ZL12MX_ADC1_Initv>
  MX_CAN_Init();
 80005d2:	f000 f8e7 	bl	80007a4 <_ZL11MX_CAN_Initv>
  MX_TIM1_Init();
 80005d6:	f000 f937 	bl	8000848 <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 80005da:	f000 f9ef 	bl	80009bc <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 80005de:	f000 fa7d 	bl	8000adc <_ZL12MX_TIM3_Initv>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80005e2:	213c      	movs	r1, #60	@ 0x3c
 80005e4:	4811      	ldr	r0, [pc, #68]	@ (800062c <main+0x9c>)
 80005e6:	f003 fc39 	bl	8003e5c <HAL_TIM_Encoder_Start>
  uint8_t trump[8] = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08}; // Example data
 80005ea:	4a13      	ldr	r2, [pc, #76]	@ (8000638 <main+0xa8>)
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005f2:	e883 0003 	stmia.w	r3, {r0, r1}

  //Initializes the steering motor
  motorControl.start();
 80005f6:	f107 031c 	add.w	r3, r7, #28
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 fc2b 	bl	8000e56 <_ZN12MotorControl5startEv>
  //Initializes the CAN-Bus communication
  canBus.start(&hcan, CAN_ID_STD);
 8000600:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000604:	2200      	movs	r2, #0
 8000606:	490d      	ldr	r1, [pc, #52]	@ (800063c <main+0xac>)
 8000608:	4618      	mov	r0, r3
 800060a:	f7ff fde6 	bl	80001da <_ZN6CANBus5startEP17CAN_HandleTypeDefh>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  float currentAngle = encoder.encoderCompare();
//	  motorControl.steerToAngle(currentAngle, 50);
	  canBus.transmit(&hcan, trump, 446);
 800060e:	1d3a      	adds	r2, r7, #4
 8000610:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8000614:	f44f 73df 	mov.w	r3, #446	@ 0x1be
 8000618:	4908      	ldr	r1, [pc, #32]	@ (800063c <main+0xac>)
 800061a:	f7ff fe0e 	bl	800023a <_ZN6CANBus8transmitEP17CAN_HandleTypeDefPht>
	  HAL_Delay(300);
 800061e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000622:	f000 fe91 	bl	8001348 <HAL_Delay>
	  canBus.transmit(&hcan, trump, 446);
 8000626:	bf00      	nop
 8000628:	e7f1      	b.n	800060e <main+0x7e>
 800062a:	bf00      	nop
 800062c:	20000118 	.word	0x20000118
 8000630:	447a0000 	.word	0x447a0000
 8000634:	20000160 	.word	0x20000160
 8000638:	08004be0 	.word	0x08004be0
 800063c:	200000a8 	.word	0x200000a8

08000640 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b094      	sub	sp, #80	@ 0x50
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800064a:	2228      	movs	r2, #40	@ 0x28
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f004 fa44 	bl	8004adc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	f107 0314 	add.w	r3, r7, #20
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000664:	1d3b      	adds	r3, r7, #4
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]
 800066e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000670:	2301      	movs	r3, #1
 8000672:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000674:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000678:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800067a:	2300      	movs	r3, #0
 800067c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800067e:	2301      	movs	r3, #1
 8000680:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000682:	2302      	movs	r3, #2
 8000684:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000686:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800068a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800068c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000690:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000692:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000696:	4618      	mov	r0, r3
 8000698:	f002 fa52 	bl	8002b40 <HAL_RCC_OscConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	bf14      	ite	ne
 80006a2:	2301      	movne	r3, #1
 80006a4:	2300      	moveq	r3, #0
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 80006ac:	f000 fafa 	bl	8000ca4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b0:	230f      	movs	r3, #15
 80006b2:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b4:	2302      	movs	r3, #2
 80006b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006c0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006c6:	f107 0314 	add.w	r3, r7, #20
 80006ca:	2102      	movs	r1, #2
 80006cc:	4618      	mov	r0, r3
 80006ce:	f002 fda5 	bl	800321c <HAL_RCC_ClockConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	bf14      	ite	ne
 80006d8:	2301      	movne	r3, #1
 80006da:	2300      	moveq	r3, #0
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 80006e2:	f000 fadf 	bl	8000ca4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80006e6:	2302      	movs	r3, #2
 80006e8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80006ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80006ee:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	4618      	mov	r0, r3
 80006f4:	f002 ff94 	bl	8003620 <HAL_RCCEx_PeriphCLKConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	bf14      	ite	ne
 80006fe:	2301      	movne	r3, #1
 8000700:	2300      	moveq	r3, #0
 8000702:	b2db      	uxtb	r3, r3
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <_Z18SystemClock_Configv+0xcc>
  {
    Error_Handler();
 8000708:	f000 facc 	bl	8000ca4 <Error_Handler>
  }
}
 800070c:	bf00      	nop
 800070e:	3750      	adds	r7, #80	@ 0x50
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000724:	4b1d      	ldr	r3, [pc, #116]	@ (800079c <_ZL12MX_ADC1_Initv+0x88>)
 8000726:	4a1e      	ldr	r2, [pc, #120]	@ (80007a0 <_ZL12MX_ADC1_Initv+0x8c>)
 8000728:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800072a:	4b1c      	ldr	r3, [pc, #112]	@ (800079c <_ZL12MX_ADC1_Initv+0x88>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000730:	4b1a      	ldr	r3, [pc, #104]	@ (800079c <_ZL12MX_ADC1_Initv+0x88>)
 8000732:	2201      	movs	r2, #1
 8000734:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000736:	4b19      	ldr	r3, [pc, #100]	@ (800079c <_ZL12MX_ADC1_Initv+0x88>)
 8000738:	2200      	movs	r2, #0
 800073a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800073c:	4b17      	ldr	r3, [pc, #92]	@ (800079c <_ZL12MX_ADC1_Initv+0x88>)
 800073e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000742:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000744:	4b15      	ldr	r3, [pc, #84]	@ (800079c <_ZL12MX_ADC1_Initv+0x88>)
 8000746:	2200      	movs	r2, #0
 8000748:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800074a:	4b14      	ldr	r3, [pc, #80]	@ (800079c <_ZL12MX_ADC1_Initv+0x88>)
 800074c:	2201      	movs	r2, #1
 800074e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000750:	4812      	ldr	r0, [pc, #72]	@ (800079c <_ZL12MX_ADC1_Initv+0x88>)
 8000752:	f000 fe1d 	bl	8001390 <HAL_ADC_Init>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	bf14      	ite	ne
 800075c:	2301      	movne	r3, #1
 800075e:	2300      	moveq	r3, #0
 8000760:	b2db      	uxtb	r3, r3
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <_ZL12MX_ADC1_Initv+0x56>
  {
    Error_Handler();
 8000766:	f000 fa9d 	bl	8000ca4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800076a:	2303      	movs	r3, #3
 800076c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800076e:	2301      	movs	r3, #1
 8000770:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000772:	2300      	movs	r3, #0
 8000774:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000776:	1d3b      	adds	r3, r7, #4
 8000778:	4619      	mov	r1, r3
 800077a:	4808      	ldr	r0, [pc, #32]	@ (800079c <_ZL12MX_ADC1_Initv+0x88>)
 800077c:	f000 ff72 	bl	8001664 <HAL_ADC_ConfigChannel>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	bf14      	ite	ne
 8000786:	2301      	movne	r3, #1
 8000788:	2300      	moveq	r3, #0
 800078a:	b2db      	uxtb	r3, r3
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <_ZL12MX_ADC1_Initv+0x80>
  {
    Error_Handler();
 8000790:	f000 fa88 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000794:	bf00      	nop
 8000796:	3710      	adds	r7, #16
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20000078 	.word	0x20000078
 80007a0:	40012400 	.word	0x40012400

080007a4 <_ZL11MX_CAN_Initv>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b090      	sub	sp, #64	@ 0x40
 80007a8:	af02      	add	r7, sp, #8
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80007aa:	4b25      	ldr	r3, [pc, #148]	@ (8000840 <_ZL11MX_CAN_Initv+0x9c>)
 80007ac:	4a25      	ldr	r2, [pc, #148]	@ (8000844 <_ZL11MX_CAN_Initv+0xa0>)
 80007ae:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 36;
 80007b0:	4b23      	ldr	r3, [pc, #140]	@ (8000840 <_ZL11MX_CAN_Initv+0x9c>)
 80007b2:	2224      	movs	r2, #36	@ 0x24
 80007b4:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 80007b6:	4b22      	ldr	r3, [pc, #136]	@ (8000840 <_ZL11MX_CAN_Initv+0x9c>)
 80007b8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007bc:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007be:	4b20      	ldr	r3, [pc, #128]	@ (8000840 <_ZL11MX_CAN_Initv+0x9c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 80007c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000840 <_ZL11MX_CAN_Initv+0x9c>)
 80007c6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80007ca:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80007cc:	4b1c      	ldr	r3, [pc, #112]	@ (8000840 <_ZL11MX_CAN_Initv+0x9c>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80007d2:	4b1b      	ldr	r3, [pc, #108]	@ (8000840 <_ZL11MX_CAN_Initv+0x9c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80007d8:	4b19      	ldr	r3, [pc, #100]	@ (8000840 <_ZL11MX_CAN_Initv+0x9c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80007de:	4b18      	ldr	r3, [pc, #96]	@ (8000840 <_ZL11MX_CAN_Initv+0x9c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80007e4:	4b16      	ldr	r3, [pc, #88]	@ (8000840 <_ZL11MX_CAN_Initv+0x9c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80007ea:	4b15      	ldr	r3, [pc, #84]	@ (8000840 <_ZL11MX_CAN_Initv+0x9c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80007f0:	4b13      	ldr	r3, [pc, #76]	@ (8000840 <_ZL11MX_CAN_Initv+0x9c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80007f6:	4812      	ldr	r0, [pc, #72]	@ (8000840 <_ZL11MX_CAN_Initv+0x9c>)
 80007f8:	f001 f93a 	bl	8001a70 <HAL_CAN_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	bf14      	ite	ne
 8000802:	2301      	movne	r3, #1
 8000804:	2300      	moveq	r3, #0
 8000806:	b2db      	uxtb	r3, r3
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <_ZL11MX_CAN_Initv+0x6c>
  {
    Error_Handler();
 800080c:	f000 fa4a 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CANBus canBus;
 8000810:	1d3b      	adds	r3, r7, #4
 8000812:	4618      	mov	r0, r3
 8000814:	f7ff fcce 	bl	80001b4 <_ZN6CANBusC1Ev>

  canBus.configureFilter(&hcan, 0b00100010000, 0b00110110000, 10, 0);
 8000818:	1d38      	adds	r0, r7, #4
 800081a:	2300      	movs	r3, #0
 800081c:	9301      	str	r3, [sp, #4]
 800081e:	230a      	movs	r3, #10
 8000820:	9300      	str	r3, [sp, #0]
 8000822:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 8000826:	f44f 7288 	mov.w	r2, #272	@ 0x110
 800082a:	4905      	ldr	r1, [pc, #20]	@ (8000840 <_ZL11MX_CAN_Initv+0x9c>)
 800082c:	f7ff fd25 	bl	800027a <_ZN6CANBus15configureFilterEP17CAN_HandleTypeDeftthh>
  /* USER CODE END CAN_Init 2 */

}
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	4618      	mov	r0, r3
 8000834:	f7ff fe99 	bl	800056a <_ZN6CANBusD1Ev>
 8000838:	3738      	adds	r7, #56	@ 0x38
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	200000a8 	.word	0x200000a8
 8000844:	40006400 	.word	0x40006400

08000848 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b092      	sub	sp, #72	@ 0x48
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800084e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000858:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
 8000866:	611a      	str	r2, [r3, #16]
 8000868:	615a      	str	r2, [r3, #20]
 800086a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800086c:	1d3b      	adds	r3, r7, #4
 800086e:	2220      	movs	r2, #32
 8000870:	2100      	movs	r1, #0
 8000872:	4618      	mov	r0, r3
 8000874:	f004 f932 	bl	8004adc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000878:	4b4e      	ldr	r3, [pc, #312]	@ (80009b4 <_ZL12MX_TIM1_Initv+0x16c>)
 800087a:	4a4f      	ldr	r2, [pc, #316]	@ (80009b8 <_ZL12MX_TIM1_Initv+0x170>)
 800087c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800087e:	4b4d      	ldr	r3, [pc, #308]	@ (80009b4 <_ZL12MX_TIM1_Initv+0x16c>)
 8000880:	2200      	movs	r2, #0
 8000882:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000884:	4b4b      	ldr	r3, [pc, #300]	@ (80009b4 <_ZL12MX_TIM1_Initv+0x16c>)
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800088a:	4b4a      	ldr	r3, [pc, #296]	@ (80009b4 <_ZL12MX_TIM1_Initv+0x16c>)
 800088c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000890:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000892:	4b48      	ldr	r3, [pc, #288]	@ (80009b4 <_ZL12MX_TIM1_Initv+0x16c>)
 8000894:	2200      	movs	r2, #0
 8000896:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000898:	4b46      	ldr	r3, [pc, #280]	@ (80009b4 <_ZL12MX_TIM1_Initv+0x16c>)
 800089a:	2200      	movs	r2, #0
 800089c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800089e:	4b45      	ldr	r3, [pc, #276]	@ (80009b4 <_ZL12MX_TIM1_Initv+0x16c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008a4:	4843      	ldr	r0, [pc, #268]	@ (80009b4 <_ZL12MX_TIM1_Initv+0x16c>)
 80008a6:	f002 ffc5 	bl	8003834 <HAL_TIM_PWM_Init>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	bf14      	ite	ne
 80008b0:	2301      	movne	r3, #1
 80008b2:	2300      	moveq	r3, #0
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <_ZL12MX_TIM1_Initv+0x76>
  {
    Error_Handler();
 80008ba:	f000 f9f3 	bl	8000ca4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008be:	2300      	movs	r3, #0
 80008c0:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008c6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80008ca:	4619      	mov	r1, r3
 80008cc:	4839      	ldr	r0, [pc, #228]	@ (80009b4 <_ZL12MX_TIM1_Initv+0x16c>)
 80008ce:	f003 ff89 	bl	80047e4 <HAL_TIMEx_MasterConfigSynchronization>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	bf14      	ite	ne
 80008d8:	2301      	movne	r3, #1
 80008da:	2300      	moveq	r3, #0
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <_ZL12MX_TIM1_Initv+0x9e>
  {
    Error_Handler();
 80008e2:	f000 f9df 	bl	8000ca4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008e6:	2360      	movs	r3, #96	@ 0x60
 80008e8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008ee:	2300      	movs	r3, #0
 80008f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008f2:	2300      	movs	r3, #0
 80008f4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008f6:	2300      	movs	r3, #0
 80008f8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008fa:	2300      	movs	r3, #0
 80008fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008fe:	2300      	movs	r3, #0
 8000900:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000902:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000906:	2200      	movs	r2, #0
 8000908:	4619      	mov	r1, r3
 800090a:	482a      	ldr	r0, [pc, #168]	@ (80009b4 <_ZL12MX_TIM1_Initv+0x16c>)
 800090c:	f003 fb4e 	bl	8003fac <HAL_TIM_PWM_ConfigChannel>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	bf14      	ite	ne
 8000916:	2301      	movne	r3, #1
 8000918:	2300      	moveq	r3, #0
 800091a:	b2db      	uxtb	r3, r3
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <_ZL12MX_TIM1_Initv+0xdc>
  {
    Error_Handler();
 8000920:	f000 f9c0 	bl	8000ca4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000924:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000928:	2208      	movs	r2, #8
 800092a:	4619      	mov	r1, r3
 800092c:	4821      	ldr	r0, [pc, #132]	@ (80009b4 <_ZL12MX_TIM1_Initv+0x16c>)
 800092e:	f003 fb3d 	bl	8003fac <HAL_TIM_PWM_ConfigChannel>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	bf14      	ite	ne
 8000938:	2301      	movne	r3, #1
 800093a:	2300      	moveq	r3, #0
 800093c:	b2db      	uxtb	r3, r3
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <_ZL12MX_TIM1_Initv+0xfe>
  {
    Error_Handler();
 8000942:	f000 f9af 	bl	8000ca4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000946:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800094a:	220c      	movs	r2, #12
 800094c:	4619      	mov	r1, r3
 800094e:	4819      	ldr	r0, [pc, #100]	@ (80009b4 <_ZL12MX_TIM1_Initv+0x16c>)
 8000950:	f003 fb2c 	bl	8003fac <HAL_TIM_PWM_ConfigChannel>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	bf14      	ite	ne
 800095a:	2301      	movne	r3, #1
 800095c:	2300      	moveq	r3, #0
 800095e:	b2db      	uxtb	r3, r3
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <_ZL12MX_TIM1_Initv+0x120>
  {
    Error_Handler();
 8000964:	f000 f99e 	bl	8000ca4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000968:	2300      	movs	r3, #0
 800096a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800096c:	2300      	movs	r3, #0
 800096e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000970:	2300      	movs	r3, #0
 8000972:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000974:	2300      	movs	r3, #0
 8000976:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000978:	2300      	movs	r3, #0
 800097a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800097c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000980:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000982:	2300      	movs	r3, #0
 8000984:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000986:	1d3b      	adds	r3, r7, #4
 8000988:	4619      	mov	r1, r3
 800098a:	480a      	ldr	r0, [pc, #40]	@ (80009b4 <_ZL12MX_TIM1_Initv+0x16c>)
 800098c:	f003 ffc8 	bl	8004920 <HAL_TIMEx_ConfigBreakDeadTime>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	bf14      	ite	ne
 8000996:	2301      	movne	r3, #1
 8000998:	2300      	moveq	r3, #0
 800099a:	b2db      	uxtb	r3, r3
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <_ZL12MX_TIM1_Initv+0x15c>
  {
    Error_Handler();
 80009a0:	f000 f980 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009a4:	4803      	ldr	r0, [pc, #12]	@ (80009b4 <_ZL12MX_TIM1_Initv+0x16c>)
 80009a6:	f000 fbc3 	bl	8001130 <HAL_TIM_MspPostInit>

}
 80009aa:	bf00      	nop
 80009ac:	3748      	adds	r7, #72	@ 0x48
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	200000d0 	.word	0x200000d0
 80009b8:	40012c00 	.word	0x40012c00

080009bc <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b092      	sub	sp, #72	@ 0x48
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80009c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009c6:	2224      	movs	r2, #36	@ 0x24
 80009c8:	2100      	movs	r1, #0
 80009ca:	4618      	mov	r0, r3
 80009cc:	f004 f886 	bl	8004adc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009d0:	f107 031c 	add.w	r3, r7, #28
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009da:	463b      	mov	r3, r7
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
 80009e6:	611a      	str	r2, [r3, #16]
 80009e8:	615a      	str	r2, [r3, #20]
 80009ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009ec:	4b3a      	ldr	r3, [pc, #232]	@ (8000ad8 <_ZL12MX_TIM2_Initv+0x11c>)
 80009ee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80009f4:	4b38      	ldr	r3, [pc, #224]	@ (8000ad8 <_ZL12MX_TIM2_Initv+0x11c>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009fa:	4b37      	ldr	r3, [pc, #220]	@ (8000ad8 <_ZL12MX_TIM2_Initv+0x11c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 6553;
 8000a00:	4b35      	ldr	r3, [pc, #212]	@ (8000ad8 <_ZL12MX_TIM2_Initv+0x11c>)
 8000a02:	f641 1299 	movw	r2, #6553	@ 0x1999
 8000a06:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a08:	4b33      	ldr	r3, [pc, #204]	@ (8000ad8 <_ZL12MX_TIM2_Initv+0x11c>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a0e:	4b32      	ldr	r3, [pc, #200]	@ (8000ad8 <_ZL12MX_TIM2_Initv+0x11c>)
 8000a10:	2280      	movs	r2, #128	@ 0x80
 8000a12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a14:	4830      	ldr	r0, [pc, #192]	@ (8000ad8 <_ZL12MX_TIM2_Initv+0x11c>)
 8000a16:	f002 ff0d 	bl	8003834 <HAL_TIM_PWM_Init>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	bf14      	ite	ne
 8000a20:	2301      	movne	r3, #1
 8000a22:	2300      	moveq	r3, #0
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <_ZL12MX_TIM2_Initv+0x72>
  {
    Error_Handler();
 8000a2a:	f000 f93b 	bl	8000ca4 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000a2e:	2303      	movs	r3, #3
 8000a30:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a32:	2300      	movs	r3, #0
 8000a34:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a36:	2301      	movs	r3, #1
 8000a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfig.IC1Filter = 0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a42:	2300      	movs	r3, #0
 8000a44:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a46:	2301      	movs	r3, #1
 8000a48:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.IC2Filter = 0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000a52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a56:	4619      	mov	r1, r3
 8000a58:	481f      	ldr	r0, [pc, #124]	@ (8000ad8 <_ZL12MX_TIM2_Initv+0x11c>)
 8000a5a:	f003 f871 	bl	8003b40 <HAL_TIM_Encoder_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	bf14      	ite	ne
 8000a64:	2301      	movne	r3, #1
 8000a66:	2300      	moveq	r3, #0
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <_ZL12MX_TIM2_Initv+0xb6>
  {
    Error_Handler();
 8000a6e:	f000 f919 	bl	8000ca4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a72:	2300      	movs	r3, #0
 8000a74:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a76:	2300      	movs	r3, #0
 8000a78:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a7a:	f107 031c 	add.w	r3, r7, #28
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4815      	ldr	r0, [pc, #84]	@ (8000ad8 <_ZL12MX_TIM2_Initv+0x11c>)
 8000a82:	f003 feaf 	bl	80047e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	bf14      	ite	ne
 8000a8c:	2301      	movne	r3, #1
 8000a8e:	2300      	moveq	r3, #0
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <_ZL12MX_TIM2_Initv+0xde>
  {
    Error_Handler();
 8000a96:	f000 f905 	bl	8000ca4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a9a:	2360      	movs	r3, #96	@ 0x60
 8000a9c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000aaa:	463b      	mov	r3, r7
 8000aac:	2208      	movs	r2, #8
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4809      	ldr	r0, [pc, #36]	@ (8000ad8 <_ZL12MX_TIM2_Initv+0x11c>)
 8000ab2:	f003 fa7b 	bl	8003fac <HAL_TIM_PWM_ConfigChannel>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	bf14      	ite	ne
 8000abc:	2301      	movne	r3, #1
 8000abe:	2300      	moveq	r3, #0
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <_ZL12MX_TIM2_Initv+0x10e>
  {
    Error_Handler();
 8000ac6:	f000 f8ed 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000aca:	4803      	ldr	r0, [pc, #12]	@ (8000ad8 <_ZL12MX_TIM2_Initv+0x11c>)
 8000acc:	f000 fb30 	bl	8001130 <HAL_TIM_MspPostInit>

}
 8000ad0:	bf00      	nop
 8000ad2:	3748      	adds	r7, #72	@ 0x48
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20000118 	.word	0x20000118

08000adc <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08c      	sub	sp, #48	@ 0x30
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ae2:	f107 030c 	add.w	r3, r7, #12
 8000ae6:	2224      	movs	r2, #36	@ 0x24
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4618      	mov	r0, r3
 8000aec:	f003 fff6 	bl	8004adc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000af0:	1d3b      	adds	r3, r7, #4
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000af8:	4b25      	ldr	r3, [pc, #148]	@ (8000b90 <_ZL12MX_TIM3_Initv+0xb4>)
 8000afa:	4a26      	ldr	r2, [pc, #152]	@ (8000b94 <_ZL12MX_TIM3_Initv+0xb8>)
 8000afc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000afe:	4b24      	ldr	r3, [pc, #144]	@ (8000b90 <_ZL12MX_TIM3_Initv+0xb4>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b04:	4b22      	ldr	r3, [pc, #136]	@ (8000b90 <_ZL12MX_TIM3_Initv+0xb4>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000b0a:	4b21      	ldr	r3, [pc, #132]	@ (8000b90 <_ZL12MX_TIM3_Initv+0xb4>)
 8000b0c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b10:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b12:	4b1f      	ldr	r3, [pc, #124]	@ (8000b90 <_ZL12MX_TIM3_Initv+0xb4>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b18:	4b1d      	ldr	r3, [pc, #116]	@ (8000b90 <_ZL12MX_TIM3_Initv+0xb4>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b22:	2300      	movs	r3, #0
 8000b24:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b26:	2301      	movs	r3, #1
 8000b28:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b32:	2300      	movs	r3, #0
 8000b34:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b36:	2301      	movs	r3, #1
 8000b38:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000b42:	f107 030c 	add.w	r3, r7, #12
 8000b46:	4619      	mov	r1, r3
 8000b48:	4811      	ldr	r0, [pc, #68]	@ (8000b90 <_ZL12MX_TIM3_Initv+0xb4>)
 8000b4a:	f002 fff9 	bl	8003b40 <HAL_TIM_Encoder_Init>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	bf14      	ite	ne
 8000b54:	2301      	movne	r3, #1
 8000b56:	2300      	moveq	r3, #0
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <_ZL12MX_TIM3_Initv+0x86>
  {
    Error_Handler();
 8000b5e:	f000 f8a1 	bl	8000ca4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b62:	2300      	movs	r3, #0
 8000b64:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b66:	2300      	movs	r3, #0
 8000b68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4808      	ldr	r0, [pc, #32]	@ (8000b90 <_ZL12MX_TIM3_Initv+0xb4>)
 8000b70:	f003 fe38 	bl	80047e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	bf14      	ite	ne
 8000b7a:	2301      	movne	r3, #1
 8000b7c:	2300      	moveq	r3, #0
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <_ZL12MX_TIM3_Initv+0xac>
  {
    Error_Handler();
 8000b84:	f000 f88e 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b88:	bf00      	nop
 8000b8a:	3730      	adds	r7, #48	@ 0x30
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20000160 	.word	0x20000160
 8000b94:	40000400 	.word	0x40000400

08000b98 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b088      	sub	sp, #32
 8000b9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9e:	f107 0310 	add.w	r3, r7, #16
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	609a      	str	r2, [r3, #8]
 8000baa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bac:	4b39      	ldr	r3, [pc, #228]	@ (8000c94 <_ZL12MX_GPIO_Initv+0xfc>)
 8000bae:	699b      	ldr	r3, [r3, #24]
 8000bb0:	4a38      	ldr	r2, [pc, #224]	@ (8000c94 <_ZL12MX_GPIO_Initv+0xfc>)
 8000bb2:	f043 0310 	orr.w	r3, r3, #16
 8000bb6:	6193      	str	r3, [r2, #24]
 8000bb8:	4b36      	ldr	r3, [pc, #216]	@ (8000c94 <_ZL12MX_GPIO_Initv+0xfc>)
 8000bba:	699b      	ldr	r3, [r3, #24]
 8000bbc:	f003 0310 	and.w	r3, r3, #16
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bc4:	4b33      	ldr	r3, [pc, #204]	@ (8000c94 <_ZL12MX_GPIO_Initv+0xfc>)
 8000bc6:	699b      	ldr	r3, [r3, #24]
 8000bc8:	4a32      	ldr	r2, [pc, #200]	@ (8000c94 <_ZL12MX_GPIO_Initv+0xfc>)
 8000bca:	f043 0320 	orr.w	r3, r3, #32
 8000bce:	6193      	str	r3, [r2, #24]
 8000bd0:	4b30      	ldr	r3, [pc, #192]	@ (8000c94 <_ZL12MX_GPIO_Initv+0xfc>)
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	f003 0320 	and.w	r3, r3, #32
 8000bd8:	60bb      	str	r3, [r7, #8]
 8000bda:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bdc:	4b2d      	ldr	r3, [pc, #180]	@ (8000c94 <_ZL12MX_GPIO_Initv+0xfc>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	4a2c      	ldr	r2, [pc, #176]	@ (8000c94 <_ZL12MX_GPIO_Initv+0xfc>)
 8000be2:	f043 0304 	orr.w	r3, r3, #4
 8000be6:	6193      	str	r3, [r2, #24]
 8000be8:	4b2a      	ldr	r3, [pc, #168]	@ (8000c94 <_ZL12MX_GPIO_Initv+0xfc>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	f003 0304 	and.w	r3, r3, #4
 8000bf0:	607b      	str	r3, [r7, #4]
 8000bf2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf4:	4b27      	ldr	r3, [pc, #156]	@ (8000c94 <_ZL12MX_GPIO_Initv+0xfc>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	4a26      	ldr	r2, [pc, #152]	@ (8000c94 <_ZL12MX_GPIO_Initv+0xfc>)
 8000bfa:	f043 0308 	orr.w	r3, r3, #8
 8000bfe:	6193      	str	r3, [r2, #24]
 8000c00:	4b24      	ldr	r3, [pc, #144]	@ (8000c94 <_ZL12MX_GPIO_Initv+0xfc>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	f003 0308 	and.w	r3, r3, #8
 8000c08:	603b      	str	r3, [r7, #0]
 8000c0a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c12:	4821      	ldr	r0, [pc, #132]	@ (8000c98 <_ZL12MX_GPIO_Initv+0x100>)
 8000c14:	f001 ff68 	bl	8002ae8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c1e:	481f      	ldr	r0, [pc, #124]	@ (8000c9c <_ZL12MX_GPIO_Initv+0x104>)
 8000c20:	f001 ff62 	bl	8002ae8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000c24:	2200      	movs	r2, #0
 8000c26:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c2a:	481d      	ldr	r0, [pc, #116]	@ (8000ca0 <_ZL12MX_GPIO_Initv+0x108>)
 8000c2c:	f001 ff5c 	bl	8002ae8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c30:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c36:	2301      	movs	r3, #1
 8000c38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c42:	f107 0310 	add.w	r3, r7, #16
 8000c46:	4619      	mov	r1, r3
 8000c48:	4813      	ldr	r0, [pc, #76]	@ (8000c98 <_ZL12MX_GPIO_Initv+0x100>)
 8000c4a:	f001 fcf1 	bl	8002630 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c54:	2301      	movs	r3, #1
 8000c56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c60:	f107 0310 	add.w	r3, r7, #16
 8000c64:	4619      	mov	r1, r3
 8000c66:	480d      	ldr	r0, [pc, #52]	@ (8000c9c <_ZL12MX_GPIO_Initv+0x104>)
 8000c68:	f001 fce2 	bl	8002630 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c72:	2301      	movs	r3, #1
 8000c74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7e:	f107 0310 	add.w	r3, r7, #16
 8000c82:	4619      	mov	r1, r3
 8000c84:	4806      	ldr	r0, [pc, #24]	@ (8000ca0 <_ZL12MX_GPIO_Initv+0x108>)
 8000c86:	f001 fcd3 	bl	8002630 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c8a:	bf00      	nop
 8000c8c:	3720      	adds	r7, #32
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40021000 	.word	0x40021000
 8000c98:	40011000 	.word	0x40011000
 8000c9c:	40010c00 	.word	0x40010c00
 8000ca0:	40010800 	.word	0x40010800

08000ca4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca8:	b672      	cpsid	i
}
 8000caa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cac:	bf00      	nop
 8000cae:	e7fd      	b.n	8000cac <Error_Handler+0x8>

08000cb0 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000cba:	bf00      	nop
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bc80      	pop	{r7}
 8000cc2:	4770      	bx	lr

08000cc4 <_ZNSt6vectorImSaImEED1Ev>:
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      _GLIBCXX20_CONSTEXPR
      ~vector() _GLIBCXX_NOEXCEPT
 8000cc4:	b5b0      	push	{r4, r5, r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681c      	ldr	r4, [r3, #0]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff fb4c 	bl	8000374 <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 8000cdc:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000cde:	461a      	mov	r2, r3
 8000ce0:	4629      	mov	r1, r5
 8000ce2:	4620      	mov	r0, r4
 8000ce4:	f7ff fb50 	bl	8000388 <_ZSt8_DestroyIPmmEvT_S1_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	4618      	mov	r0, r3
 8000cec:	f000 f82c 	bl	8000d48 <_ZNSt12_Vector_baseImSaImEED1Ev>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bdb0      	pop	{r4, r5, r7, pc}

08000cfa <_ZNSt6vectorIySaIyEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8000cfa:	b5b0      	push	{r4, r5, r7, lr}
 8000cfc:	b082      	sub	sp, #8
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681c      	ldr	r4, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff fb7b 	bl	8000408 <_ZNSt12_Vector_baseIySaIyEE19_M_get_Tp_allocatorEv>
 8000d12:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000d14:	461a      	mov	r2, r3
 8000d16:	4629      	mov	r1, r5
 8000d18:	4620      	mov	r0, r4
 8000d1a:	f7ff fb7f 	bl	800041c <_ZSt8_DestroyIPyyEvT_S1_RSaIT0_E>
      }
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f000 f836 	bl	8000d92 <_ZNSt12_Vector_baseIySaIyEED1Ev>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bdb0      	pop	{r4, r5, r7, pc}

08000d30 <_ZNSt12_Vector_baseImSaImEE12_Vector_implD1Ev>:
      struct _Vector_impl
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	6878      	ldr	r0, [r7, #4]
 8000d3a:	f000 f843 	bl	8000dc4 <_ZNSaImED1Ev>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4618      	mov	r0, r3
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <_ZNSt12_Vector_baseImSaImEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	689a      	ldr	r2, [r3, #8]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8000d60:	461a      	mov	r2, r3
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	f7ff faf3 	bl	800034e <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj>
      }
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff ffe0 	bl	8000d30 <_ZNSt12_Vector_baseImSaImEE12_Vector_implD1Ev>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4618      	mov	r0, r3
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <_ZNSt12_Vector_baseIySaIyEE12_Vector_implD1Ev>:
      struct _Vector_impl
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b082      	sub	sp, #8
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
 8000d82:	6878      	ldr	r0, [r7, #4]
 8000d84:	f000 f82a 	bl	8000ddc <_ZNSaIyED1Ev>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <_ZNSt12_Vector_baseIySaIyEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b082      	sub	sp, #8
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	689a      	ldr	r2, [r3, #8]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	1ad3      	subs	r3, r2, r3
 8000da8:	10db      	asrs	r3, r3, #3
	_M_deallocate(_M_impl._M_start,
 8000daa:	461a      	mov	r2, r3
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f7ff fb18 	bl	80003e2 <_ZNSt12_Vector_baseIySaIyEE13_M_deallocateEPyj>
      }
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff ffe0 	bl	8000d7a <_ZNSt12_Vector_baseIySaIyEE12_Vector_implD1Ev>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <_ZNSaImED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f000 f811 	bl	8000df4 <_ZNSt15__new_allocatorImED1Ev>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <_ZNSaIyED1Ev>:
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6878      	ldr	r0, [r7, #4]
 8000de6:	f000 f80f 	bl	8000e08 <_ZNSt15__new_allocatorIyED1Ev>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4618      	mov	r0, r3
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <_ZNSt15__new_allocatorImED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr

08000e08 <_ZNSt15__new_allocatorIyED1Ev>:
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	4618      	mov	r0, r3
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bc80      	pop	{r7}
 8000e1a:	4770      	bx	lr

08000e1c <_ZN12MotorControlC1EP17TIM_HandleTypeDefm>:

#include "motorControl.hpp"
#include <cmath>

// Constructor
MotorControl::MotorControl(TIM_HandleTypeDef* timer, uint32_t channel)
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	60b9      	str	r1, [r7, #8]
 8000e26:	607a      	str	r2, [r7, #4]
    : htim(timer), channel(channel), lastDirection(GPIO_PIN_SET),
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	68ba      	ldr	r2, [r7, #8]
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	687a      	ldr	r2, [r7, #4]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	2201      	movs	r2, #1
 8000e38:	721a      	strb	r2, [r3, #8]
      integral(0.0f), previousError(0.0f) {}
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	f04f 0200 	mov.w	r2, #0
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	f04f 0200 	mov.w	r2, #0
 8000e48:	611a      	str	r2, [r3, #16]
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3714      	adds	r7, #20
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bc80      	pop	{r7}
 8000e54:	4770      	bx	lr

08000e56 <_ZN12MotorControl5startEv>:

// Starts PWM
void MotorControl::start() {
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b082      	sub	sp, #8
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Start(htim, channel);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	4619      	mov	r1, r3
 8000e68:	4610      	mov	r0, r2
 8000e6a:	f002 fd93 	bl	8003994 <HAL_TIM_PWM_Start>
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
	...

08000e78 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e7e:	4b15      	ldr	r3, [pc, #84]	@ (8000ed4 <HAL_MspInit+0x5c>)
 8000e80:	699b      	ldr	r3, [r3, #24]
 8000e82:	4a14      	ldr	r2, [pc, #80]	@ (8000ed4 <HAL_MspInit+0x5c>)
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	6193      	str	r3, [r2, #24]
 8000e8a:	4b12      	ldr	r3, [pc, #72]	@ (8000ed4 <HAL_MspInit+0x5c>)
 8000e8c:	699b      	ldr	r3, [r3, #24]
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	60bb      	str	r3, [r7, #8]
 8000e94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e96:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed4 <HAL_MspInit+0x5c>)
 8000e98:	69db      	ldr	r3, [r3, #28]
 8000e9a:	4a0e      	ldr	r2, [pc, #56]	@ (8000ed4 <HAL_MspInit+0x5c>)
 8000e9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ea0:	61d3      	str	r3, [r2, #28]
 8000ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed4 <HAL_MspInit+0x5c>)
 8000ea4:	69db      	ldr	r3, [r3, #28]
 8000ea6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eaa:	607b      	str	r3, [r7, #4]
 8000eac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000eae:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed8 <HAL_MspInit+0x60>)
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	4a04      	ldr	r2, [pc, #16]	@ (8000ed8 <HAL_MspInit+0x60>)
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	3714      	adds	r7, #20
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	40010000 	.word	0x40010000

08000edc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b088      	sub	sp, #32
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee4:	f107 0310 	add.w	r3, r7, #16
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a14      	ldr	r2, [pc, #80]	@ (8000f48 <HAL_ADC_MspInit+0x6c>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d121      	bne.n	8000f40 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000efc:	4b13      	ldr	r3, [pc, #76]	@ (8000f4c <HAL_ADC_MspInit+0x70>)
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	4a12      	ldr	r2, [pc, #72]	@ (8000f4c <HAL_ADC_MspInit+0x70>)
 8000f02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f06:	6193      	str	r3, [r2, #24]
 8000f08:	4b10      	ldr	r3, [pc, #64]	@ (8000f4c <HAL_ADC_MspInit+0x70>)
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f14:	4b0d      	ldr	r3, [pc, #52]	@ (8000f4c <HAL_ADC_MspInit+0x70>)
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	4a0c      	ldr	r2, [pc, #48]	@ (8000f4c <HAL_ADC_MspInit+0x70>)
 8000f1a:	f043 0304 	orr.w	r3, r3, #4
 8000f1e:	6193      	str	r3, [r2, #24]
 8000f20:	4b0a      	ldr	r3, [pc, #40]	@ (8000f4c <HAL_ADC_MspInit+0x70>)
 8000f22:	699b      	ldr	r3, [r3, #24]
 8000f24:	f003 0304 	and.w	r3, r3, #4
 8000f28:	60bb      	str	r3, [r7, #8]
 8000f2a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000f2c:	2318      	movs	r3, #24
 8000f2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f30:	2303      	movs	r3, #3
 8000f32:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f34:	f107 0310 	add.w	r3, r7, #16
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4805      	ldr	r0, [pc, #20]	@ (8000f50 <HAL_ADC_MspInit+0x74>)
 8000f3c:	f001 fb78 	bl	8002630 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000f40:	bf00      	nop
 8000f42:	3720      	adds	r7, #32
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40012400 	.word	0x40012400
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	40010800 	.word	0x40010800

08000f54 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b08a      	sub	sp, #40	@ 0x28
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5c:	f107 0314 	add.w	r3, r7, #20
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a25      	ldr	r2, [pc, #148]	@ (8001004 <HAL_CAN_MspInit+0xb0>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d143      	bne.n	8000ffc <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f74:	4b24      	ldr	r3, [pc, #144]	@ (8001008 <HAL_CAN_MspInit+0xb4>)
 8000f76:	69db      	ldr	r3, [r3, #28]
 8000f78:	4a23      	ldr	r2, [pc, #140]	@ (8001008 <HAL_CAN_MspInit+0xb4>)
 8000f7a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f7e:	61d3      	str	r3, [r2, #28]
 8000f80:	4b21      	ldr	r3, [pc, #132]	@ (8001008 <HAL_CAN_MspInit+0xb4>)
 8000f82:	69db      	ldr	r3, [r3, #28]
 8000f84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f88:	613b      	str	r3, [r7, #16]
 8000f8a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8c:	4b1e      	ldr	r3, [pc, #120]	@ (8001008 <HAL_CAN_MspInit+0xb4>)
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	4a1d      	ldr	r2, [pc, #116]	@ (8001008 <HAL_CAN_MspInit+0xb4>)
 8000f92:	f043 0308 	orr.w	r3, r3, #8
 8000f96:	6193      	str	r3, [r2, #24]
 8000f98:	4b1b      	ldr	r3, [pc, #108]	@ (8001008 <HAL_CAN_MspInit+0xb4>)
 8000f9a:	699b      	ldr	r3, [r3, #24]
 8000f9c:	f003 0308 	and.w	r3, r3, #8
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000fa4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb2:	f107 0314 	add.w	r3, r7, #20
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4814      	ldr	r0, [pc, #80]	@ (800100c <HAL_CAN_MspInit+0xb8>)
 8000fba:	f001 fb39 	bl	8002630 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fbe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	480e      	ldr	r0, [pc, #56]	@ (800100c <HAL_CAN_MspInit+0xb8>)
 8000fd4:	f001 fb2c 	bl	8002630 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000fd8:	4b0d      	ldr	r3, [pc, #52]	@ (8001010 <HAL_CAN_MspInit+0xbc>)
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fe0:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8000fe4:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fe8:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000fec:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ff0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ff4:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ff6:	4a06      	ldr	r2, [pc, #24]	@ (8001010 <HAL_CAN_MspInit+0xbc>)
 8000ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ffa:	6053      	str	r3, [r2, #4]

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000ffc:	bf00      	nop
 8000ffe:	3728      	adds	r7, #40	@ 0x28
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	40006400 	.word	0x40006400
 8001008:	40021000 	.word	0x40021000
 800100c:	40010c00 	.word	0x40010c00
 8001010:	40010000 	.word	0x40010000

08001014 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b08a      	sub	sp, #40	@ 0x28
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101c:	f107 0318 	add.w	r3, r7, #24
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
  if(htim_pwm->Instance==TIM1)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a1e      	ldr	r2, [pc, #120]	@ (80010a8 <HAL_TIM_PWM_MspInit+0x94>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d10c      	bne.n	800104e <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001034:	4b1d      	ldr	r3, [pc, #116]	@ (80010ac <HAL_TIM_PWM_MspInit+0x98>)
 8001036:	699b      	ldr	r3, [r3, #24]
 8001038:	4a1c      	ldr	r2, [pc, #112]	@ (80010ac <HAL_TIM_PWM_MspInit+0x98>)
 800103a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800103e:	6193      	str	r3, [r2, #24]
 8001040:	4b1a      	ldr	r3, [pc, #104]	@ (80010ac <HAL_TIM_PWM_MspInit+0x98>)
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001048:	617b      	str	r3, [r7, #20]
 800104a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800104c:	e028      	b.n	80010a0 <HAL_TIM_PWM_MspInit+0x8c>
  else if(htim_pwm->Instance==TIM2)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001056:	d123      	bne.n	80010a0 <HAL_TIM_PWM_MspInit+0x8c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001058:	4b14      	ldr	r3, [pc, #80]	@ (80010ac <HAL_TIM_PWM_MspInit+0x98>)
 800105a:	69db      	ldr	r3, [r3, #28]
 800105c:	4a13      	ldr	r2, [pc, #76]	@ (80010ac <HAL_TIM_PWM_MspInit+0x98>)
 800105e:	f043 0301 	orr.w	r3, r3, #1
 8001062:	61d3      	str	r3, [r2, #28]
 8001064:	4b11      	ldr	r3, [pc, #68]	@ (80010ac <HAL_TIM_PWM_MspInit+0x98>)
 8001066:	69db      	ldr	r3, [r3, #28]
 8001068:	f003 0301 	and.w	r3, r3, #1
 800106c:	613b      	str	r3, [r7, #16]
 800106e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001070:	4b0e      	ldr	r3, [pc, #56]	@ (80010ac <HAL_TIM_PWM_MspInit+0x98>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	4a0d      	ldr	r2, [pc, #52]	@ (80010ac <HAL_TIM_PWM_MspInit+0x98>)
 8001076:	f043 0304 	orr.w	r3, r3, #4
 800107a:	6193      	str	r3, [r2, #24]
 800107c:	4b0b      	ldr	r3, [pc, #44]	@ (80010ac <HAL_TIM_PWM_MspInit+0x98>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	f003 0304 	and.w	r3, r3, #4
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001088:	2303      	movs	r3, #3
 800108a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800108c:	2300      	movs	r3, #0
 800108e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001094:	f107 0318 	add.w	r3, r7, #24
 8001098:	4619      	mov	r1, r3
 800109a:	4805      	ldr	r0, [pc, #20]	@ (80010b0 <HAL_TIM_PWM_MspInit+0x9c>)
 800109c:	f001 fac8 	bl	8002630 <HAL_GPIO_Init>
}
 80010a0:	bf00      	nop
 80010a2:	3728      	adds	r7, #40	@ 0x28
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40012c00 	.word	0x40012c00
 80010ac:	40021000 	.word	0x40021000
 80010b0:	40010800 	.word	0x40010800

080010b4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b088      	sub	sp, #32
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010bc:	f107 0310 	add.w	r3, r7, #16
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a15      	ldr	r2, [pc, #84]	@ (8001124 <HAL_TIM_Encoder_MspInit+0x70>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d123      	bne.n	800111c <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010d4:	4b14      	ldr	r3, [pc, #80]	@ (8001128 <HAL_TIM_Encoder_MspInit+0x74>)
 80010d6:	69db      	ldr	r3, [r3, #28]
 80010d8:	4a13      	ldr	r2, [pc, #76]	@ (8001128 <HAL_TIM_Encoder_MspInit+0x74>)
 80010da:	f043 0302 	orr.w	r3, r3, #2
 80010de:	61d3      	str	r3, [r2, #28]
 80010e0:	4b11      	ldr	r3, [pc, #68]	@ (8001128 <HAL_TIM_Encoder_MspInit+0x74>)
 80010e2:	69db      	ldr	r3, [r3, #28]
 80010e4:	f003 0302 	and.w	r3, r3, #2
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001128 <HAL_TIM_Encoder_MspInit+0x74>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001128 <HAL_TIM_Encoder_MspInit+0x74>)
 80010f2:	f043 0304 	orr.w	r3, r3, #4
 80010f6:	6193      	str	r3, [r2, #24]
 80010f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001128 <HAL_TIM_Encoder_MspInit+0x74>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	f003 0304 	and.w	r3, r3, #4
 8001100:	60bb      	str	r3, [r7, #8]
 8001102:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001104:	23c0      	movs	r3, #192	@ 0xc0
 8001106:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001110:	f107 0310 	add.w	r3, r7, #16
 8001114:	4619      	mov	r1, r3
 8001116:	4805      	ldr	r0, [pc, #20]	@ (800112c <HAL_TIM_Encoder_MspInit+0x78>)
 8001118:	f001 fa8a 	bl	8002630 <HAL_GPIO_Init>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 800111c:	bf00      	nop
 800111e:	3720      	adds	r7, #32
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40000400 	.word	0x40000400
 8001128:	40021000 	.word	0x40021000
 800112c:	40010800 	.word	0x40010800

08001130 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b088      	sub	sp, #32
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001138:	f107 0310 	add.w	r3, r7, #16
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a1f      	ldr	r2, [pc, #124]	@ (80011c8 <HAL_TIM_MspPostInit+0x98>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d119      	bne.n	8001184 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001150:	4b1e      	ldr	r3, [pc, #120]	@ (80011cc <HAL_TIM_MspPostInit+0x9c>)
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	4a1d      	ldr	r2, [pc, #116]	@ (80011cc <HAL_TIM_MspPostInit+0x9c>)
 8001156:	f043 0304 	orr.w	r3, r3, #4
 800115a:	6193      	str	r3, [r2, #24]
 800115c:	4b1b      	ldr	r3, [pc, #108]	@ (80011cc <HAL_TIM_MspPostInit+0x9c>)
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	f003 0304 	and.w	r3, r3, #4
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11;
 8001168:	f44f 6350 	mov.w	r3, #3328	@ 0xd00
 800116c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116e:	2302      	movs	r3, #2
 8001170:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001172:	2302      	movs	r3, #2
 8001174:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001176:	f107 0310 	add.w	r3, r7, #16
 800117a:	4619      	mov	r1, r3
 800117c:	4814      	ldr	r0, [pc, #80]	@ (80011d0 <HAL_TIM_MspPostInit+0xa0>)
 800117e:	f001 fa57 	bl	8002630 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001182:	e01c      	b.n	80011be <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM2)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800118c:	d117      	bne.n	80011be <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118e:	4b0f      	ldr	r3, [pc, #60]	@ (80011cc <HAL_TIM_MspPostInit+0x9c>)
 8001190:	699b      	ldr	r3, [r3, #24]
 8001192:	4a0e      	ldr	r2, [pc, #56]	@ (80011cc <HAL_TIM_MspPostInit+0x9c>)
 8001194:	f043 0304 	orr.w	r3, r3, #4
 8001198:	6193      	str	r3, [r2, #24]
 800119a:	4b0c      	ldr	r3, [pc, #48]	@ (80011cc <HAL_TIM_MspPostInit+0x9c>)
 800119c:	699b      	ldr	r3, [r3, #24]
 800119e:	f003 0304 	and.w	r3, r3, #4
 80011a2:	60bb      	str	r3, [r7, #8]
 80011a4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011a6:	2304      	movs	r3, #4
 80011a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011aa:	2302      	movs	r3, #2
 80011ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ae:	2302      	movs	r3, #2
 80011b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b2:	f107 0310 	add.w	r3, r7, #16
 80011b6:	4619      	mov	r1, r3
 80011b8:	4805      	ldr	r0, [pc, #20]	@ (80011d0 <HAL_TIM_MspPostInit+0xa0>)
 80011ba:	f001 fa39 	bl	8002630 <HAL_GPIO_Init>
}
 80011be:	bf00      	nop
 80011c0:	3720      	adds	r7, #32
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40012c00 	.word	0x40012c00
 80011cc:	40021000 	.word	0x40021000
 80011d0:	40010800 	.word	0x40010800

080011d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011d8:	bf00      	nop
 80011da:	e7fd      	b.n	80011d8 <NMI_Handler+0x4>

080011dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011e0:	bf00      	nop
 80011e2:	e7fd      	b.n	80011e0 <HardFault_Handler+0x4>

080011e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011e8:	bf00      	nop
 80011ea:	e7fd      	b.n	80011e8 <MemManage_Handler+0x4>

080011ec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011f0:	bf00      	nop
 80011f2:	e7fd      	b.n	80011f0 <BusFault_Handler+0x4>

080011f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011f8:	bf00      	nop
 80011fa:	e7fd      	b.n	80011f8 <UsageFault_Handler+0x4>

080011fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	bc80      	pop	{r7}
 8001206:	4770      	bx	lr

08001208 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr

08001214 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	bc80      	pop	{r7}
 800121e:	4770      	bx	lr

08001220 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001224:	f000 f874 	bl	8001310 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001228:	bf00      	nop
 800122a:	bd80      	pop	{r7, pc}

0800122c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	bc80      	pop	{r7}
 8001236:	4770      	bx	lr

08001238 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001238:	f7ff fff8 	bl	800122c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800123c:	480b      	ldr	r0, [pc, #44]	@ (800126c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800123e:	490c      	ldr	r1, [pc, #48]	@ (8001270 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001240:	4a0c      	ldr	r2, [pc, #48]	@ (8001274 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001242:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001244:	e002      	b.n	800124c <LoopCopyDataInit>

08001246 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001246:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001248:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800124a:	3304      	adds	r3, #4

0800124c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800124c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800124e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001250:	d3f9      	bcc.n	8001246 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001252:	4a09      	ldr	r2, [pc, #36]	@ (8001278 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001254:	4c09      	ldr	r4, [pc, #36]	@ (800127c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001256:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001258:	e001      	b.n	800125e <LoopFillZerobss>

0800125a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800125a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800125c:	3204      	adds	r2, #4

0800125e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800125e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001260:	d3fb      	bcc.n	800125a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001262:	f003 fc43 	bl	8004aec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001266:	f7ff f993 	bl	8000590 <main>
  bx lr
 800126a:	4770      	bx	lr
  ldr r0, =_sdata
 800126c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001270:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001274:	08004de4 	.word	0x08004de4
  ldr r2, =_sbss
 8001278:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800127c:	200002ec 	.word	0x200002ec

08001280 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001280:	e7fe      	b.n	8001280 <ADC1_2_IRQHandler>
	...

08001284 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001288:	4b08      	ldr	r3, [pc, #32]	@ (80012ac <HAL_Init+0x28>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a07      	ldr	r2, [pc, #28]	@ (80012ac <HAL_Init+0x28>)
 800128e:	f043 0310 	orr.w	r3, r3, #16
 8001292:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001294:	2003      	movs	r0, #3
 8001296:	f001 f973 	bl	8002580 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800129a:	200f      	movs	r0, #15
 800129c:	f000 f808 	bl	80012b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012a0:	f7ff fdea 	bl	8000e78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40022000 	.word	0x40022000

080012b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012b8:	4b12      	ldr	r3, [pc, #72]	@ (8001304 <HAL_InitTick+0x54>)
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	4b12      	ldr	r3, [pc, #72]	@ (8001308 <HAL_InitTick+0x58>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	4619      	mov	r1, r3
 80012c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ce:	4618      	mov	r0, r3
 80012d0:	f001 f9a2 	bl	8002618 <HAL_SYSTICK_Config>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e00e      	b.n	80012fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2b0f      	cmp	r3, #15
 80012e2:	d80a      	bhi.n	80012fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012e4:	2200      	movs	r2, #0
 80012e6:	6879      	ldr	r1, [r7, #4]
 80012e8:	f04f 30ff 	mov.w	r0, #4294967295
 80012ec:	f001 f968 	bl	80025c0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012f0:	4a06      	ldr	r2, [pc, #24]	@ (800130c <HAL_InitTick+0x5c>)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012f6:	2300      	movs	r3, #0
 80012f8:	e000      	b.n	80012fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20000000 	.word	0x20000000
 8001308:	20000008 	.word	0x20000008
 800130c:	20000004 	.word	0x20000004

08001310 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001314:	4b05      	ldr	r3, [pc, #20]	@ (800132c <HAL_IncTick+0x1c>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	461a      	mov	r2, r3
 800131a:	4b05      	ldr	r3, [pc, #20]	@ (8001330 <HAL_IncTick+0x20>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4413      	add	r3, r2
 8001320:	4a03      	ldr	r2, [pc, #12]	@ (8001330 <HAL_IncTick+0x20>)
 8001322:	6013      	str	r3, [r2, #0]
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr
 800132c:	20000008 	.word	0x20000008
 8001330:	200001a8 	.word	0x200001a8

08001334 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  return uwTick;
 8001338:	4b02      	ldr	r3, [pc, #8]	@ (8001344 <HAL_GetTick+0x10>)
 800133a:	681b      	ldr	r3, [r3, #0]
}
 800133c:	4618      	mov	r0, r3
 800133e:	46bd      	mov	sp, r7
 8001340:	bc80      	pop	{r7}
 8001342:	4770      	bx	lr
 8001344:	200001a8 	.word	0x200001a8

08001348 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001350:	f7ff fff0 	bl	8001334 <HAL_GetTick>
 8001354:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001360:	d005      	beq.n	800136e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001362:	4b0a      	ldr	r3, [pc, #40]	@ (800138c <HAL_Delay+0x44>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	461a      	mov	r2, r3
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	4413      	add	r3, r2
 800136c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800136e:	bf00      	nop
 8001370:	f7ff ffe0 	bl	8001334 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	68fa      	ldr	r2, [r7, #12]
 800137c:	429a      	cmp	r2, r3
 800137e:	d8f7      	bhi.n	8001370 <HAL_Delay+0x28>
  {
  }
}
 8001380:	bf00      	nop
 8001382:	bf00      	nop
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000008 	.word	0x20000008

08001390 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001398:	2300      	movs	r3, #0
 800139a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800139c:	2300      	movs	r3, #0
 800139e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80013a0:	2300      	movs	r3, #0
 80013a2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80013a4:	2300      	movs	r3, #0
 80013a6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d101      	bne.n	80013b2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e154      	b.n	800165c <HAL_ADC_Init+0x2cc>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a97      	ldr	r2, [pc, #604]	@ (8001614 <HAL_ADC_Init+0x284>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d009      	beq.n	80013d0 <HAL_ADC_Init+0x40>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a95      	ldr	r2, [pc, #596]	@ (8001618 <HAL_ADC_Init+0x288>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d004      	beq.n	80013d0 <HAL_ADC_Init+0x40>
 80013c6:	f240 11a9 	movw	r1, #425	@ 0x1a9
 80013ca:	4894      	ldr	r0, [pc, #592]	@ (800161c <HAL_ADC_Init+0x28c>)
 80013cc:	f7ff fc70 	bl	8000cb0 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d009      	beq.n	80013ec <HAL_ADC_Init+0x5c>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80013e0:	d004      	beq.n	80013ec <HAL_ADC_Init+0x5c>
 80013e2:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80013e6:	488d      	ldr	r0, [pc, #564]	@ (800161c <HAL_ADC_Init+0x28c>)
 80013e8:	f7ff fc62 	bl	8000cb0 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d009      	beq.n	8001408 <HAL_ADC_Init+0x78>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80013fc:	d004      	beq.n	8001408 <HAL_ADC_Init+0x78>
 80013fe:	f240 11ab 	movw	r1, #427	@ 0x1ab
 8001402:	4886      	ldr	r0, [pc, #536]	@ (800161c <HAL_ADC_Init+0x28c>)
 8001404:	f7ff fc54 	bl	8000cb0 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	7b1b      	ldrb	r3, [r3, #12]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d008      	beq.n	8001422 <HAL_ADC_Init+0x92>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	7b1b      	ldrb	r3, [r3, #12]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d004      	beq.n	8001422 <HAL_ADC_Init+0x92>
 8001418:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 800141c:	487f      	ldr	r0, [pc, #508]	@ (800161c <HAL_ADC_Init+0x28c>)
 800141e:	f7ff fc47 	bl	8000cb0 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d022      	beq.n	8001470 <HAL_ADC_Init+0xe0>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	69db      	ldr	r3, [r3, #28]
 800142e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001432:	d01d      	beq.n	8001470 <HAL_ADC_Init+0xe0>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	69db      	ldr	r3, [r3, #28]
 8001438:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800143c:	d018      	beq.n	8001470 <HAL_ADC_Init+0xe0>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	69db      	ldr	r3, [r3, #28]
 8001442:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001446:	d013      	beq.n	8001470 <HAL_ADC_Init+0xe0>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	69db      	ldr	r3, [r3, #28]
 800144c:	f5b3 2f20 	cmp.w	r3, #655360	@ 0xa0000
 8001450:	d00e      	beq.n	8001470 <HAL_ADC_Init+0xe0>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	69db      	ldr	r3, [r3, #28]
 8001456:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800145a:	d009      	beq.n	8001470 <HAL_ADC_Init+0xe0>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	69db      	ldr	r3, [r3, #28]
 8001460:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001464:	d004      	beq.n	8001470 <HAL_ADC_Init+0xe0>
 8001466:	f240 11ad 	movw	r1, #429	@ 0x1ad
 800146a:	486c      	ldr	r0, [pc, #432]	@ (800161c <HAL_ADC_Init+0x28c>)
 800146c:	f7ff fc20 	bl	8000cb0 <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d02a      	beq.n	80014ce <HAL_ADC_Init+0x13e>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	691b      	ldr	r3, [r3, #16]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d003      	beq.n	8001488 <HAL_ADC_Init+0xf8>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	691b      	ldr	r3, [r3, #16]
 8001484:	2b10      	cmp	r3, #16
 8001486:	d904      	bls.n	8001492 <HAL_ADC_Init+0x102>
 8001488:	f240 11b1 	movw	r1, #433	@ 0x1b1
 800148c:	4863      	ldr	r0, [pc, #396]	@ (800161c <HAL_ADC_Init+0x28c>)
 800148e:	f7ff fc0f 	bl	8000cb0 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	7d1b      	ldrb	r3, [r3, #20]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d008      	beq.n	80014ac <HAL_ADC_Init+0x11c>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	7d1b      	ldrb	r3, [r3, #20]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d004      	beq.n	80014ac <HAL_ADC_Init+0x11c>
 80014a2:	f44f 71d9 	mov.w	r1, #434	@ 0x1b2
 80014a6:	485d      	ldr	r0, [pc, #372]	@ (800161c <HAL_ADC_Init+0x28c>)
 80014a8:	f7ff fc02 	bl	8000cb0 <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	7d1b      	ldrb	r3, [r3, #20]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d00c      	beq.n	80014ce <HAL_ADC_Init+0x13e>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d003      	beq.n	80014c4 <HAL_ADC_Init+0x134>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	2b08      	cmp	r3, #8
 80014c2:	d904      	bls.n	80014ce <HAL_ADC_Init+0x13e>
 80014c4:	f240 11b5 	movw	r1, #437	@ 0x1b5
 80014c8:	4854      	ldr	r0, [pc, #336]	@ (800161c <HAL_ADC_Init+0x28c>)
 80014ca:	f7ff fbf1 	bl	8000cb0 <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d109      	bne.n	80014ea <HAL_ADC_Init+0x15a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2200      	movs	r2, #0
 80014da:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2200      	movs	r2, #0
 80014e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f7ff fcf9 	bl	8000edc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f000 fa7e 	bl	80019ec <ADC_ConversionStop_Disable>
 80014f0:	4603      	mov	r3, r0
 80014f2:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014f8:	f003 0310 	and.w	r3, r3, #16
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	f040 80a4 	bne.w	800164a <HAL_ADC_Init+0x2ba>
 8001502:	7dfb      	ldrb	r3, [r7, #23]
 8001504:	2b00      	cmp	r3, #0
 8001506:	f040 80a0 	bne.w	800164a <HAL_ADC_Init+0x2ba>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800150e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001512:	f023 0302 	bic.w	r3, r3, #2
 8001516:	f043 0202 	orr.w	r2, r3, #2
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001526:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	7b1b      	ldrb	r3, [r3, #12]
 800152c:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800152e:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001530:	68ba      	ldr	r2, [r7, #8]
 8001532:	4313      	orrs	r3, r2
 8001534:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800153e:	d003      	beq.n	8001548 <HAL_ADC_Init+0x1b8>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d102      	bne.n	800154e <HAL_ADC_Init+0x1be>
 8001548:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800154c:	e000      	b.n	8001550 <HAL_ADC_Init+0x1c0>
 800154e:	2300      	movs	r3, #0
 8001550:	693a      	ldr	r2, [r7, #16]
 8001552:	4313      	orrs	r3, r2
 8001554:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	7d1b      	ldrb	r3, [r3, #20]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d119      	bne.n	8001592 <HAL_ADC_Init+0x202>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	7b1b      	ldrb	r3, [r3, #12]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d109      	bne.n	800157a <HAL_ADC_Init+0x1ea>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	699b      	ldr	r3, [r3, #24]
 800156a:	3b01      	subs	r3, #1
 800156c:	035a      	lsls	r2, r3, #13
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	4313      	orrs	r3, r2
 8001572:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001576:	613b      	str	r3, [r7, #16]
 8001578:	e00b      	b.n	8001592 <HAL_ADC_Init+0x202>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800157e:	f043 0220 	orr.w	r2, r3, #32
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800158a:	f043 0201 	orr.w	r2, r3, #1
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	693a      	ldr	r2, [r7, #16]
 80015a2:	430a      	orrs	r2, r1
 80015a4:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	689a      	ldr	r2, [r3, #8]
 80015ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001620 <HAL_ADC_Init+0x290>)
 80015ae:	4013      	ands	r3, r2
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	6812      	ldr	r2, [r2, #0]
 80015b4:	68b9      	ldr	r1, [r7, #8]
 80015b6:	430b      	orrs	r3, r1
 80015b8:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80015c2:	d003      	beq.n	80015cc <HAL_ADC_Init+0x23c>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d104      	bne.n	80015d6 <HAL_ADC_Init+0x246>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	691b      	ldr	r3, [r3, #16]
 80015d0:	3b01      	subs	r3, #1
 80015d2:	051b      	lsls	r3, r3, #20
 80015d4:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015dc:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	68fa      	ldr	r2, [r7, #12]
 80015e6:	430a      	orrs	r2, r1
 80015e8:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	689a      	ldr	r2, [r3, #8]
 80015f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001624 <HAL_ADC_Init+0x294>)
 80015f2:	4013      	ands	r3, r2
 80015f4:	68ba      	ldr	r2, [r7, #8]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d116      	bne.n	8001628 <HAL_ADC_Init+0x298>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001604:	f023 0303 	bic.w	r3, r3, #3
 8001608:	f043 0201 	orr.w	r2, r3, #1
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001610:	e023      	b.n	800165a <HAL_ADC_Init+0x2ca>
 8001612:	bf00      	nop
 8001614:	40012400 	.word	0x40012400
 8001618:	40012800 	.word	0x40012800
 800161c:	08004be8 	.word	0x08004be8
 8001620:	ffe1f7fd 	.word	0xffe1f7fd
 8001624:	ff1f0efe 	.word	0xff1f0efe
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800162c:	f023 0312 	bic.w	r3, r3, #18
 8001630:	f043 0210 	orr.w	r2, r3, #16
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800163c:	f043 0201 	orr.w	r2, r3, #1
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001648:	e007      	b.n	800165a <HAL_ADC_Init+0x2ca>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800164e:	f043 0210 	orr.w	r2, r3, #16
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800165a:	7dfb      	ldrb	r3, [r7, #23]
}
 800165c:	4618      	mov	r0, r3
 800165e:	3718      	adds	r7, #24
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800166e:	2300      	movs	r3, #0
 8001670:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001672:	2300      	movs	r3, #0
 8001674:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a88      	ldr	r2, [pc, #544]	@ (800189c <HAL_ADC_ConfigChannel+0x238>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d009      	beq.n	8001694 <HAL_ADC_ConfigChannel+0x30>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a86      	ldr	r2, [pc, #536]	@ (80018a0 <HAL_ADC_ConfigChannel+0x23c>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d004      	beq.n	8001694 <HAL_ADC_ConfigChannel+0x30>
 800168a:	f240 71d6 	movw	r1, #2006	@ 0x7d6
 800168e:	4885      	ldr	r0, [pc, #532]	@ (80018a4 <HAL_ADC_ConfigChannel+0x240>)
 8001690:	f7ff fb0e 	bl	8000cb0 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d048      	beq.n	800172e <HAL_ADC_ConfigChannel+0xca>
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d044      	beq.n	800172e <HAL_ADC_ConfigChannel+0xca>
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d040      	beq.n	800172e <HAL_ADC_ConfigChannel+0xca>
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2b03      	cmp	r3, #3
 80016b2:	d03c      	beq.n	800172e <HAL_ADC_ConfigChannel+0xca>
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2b04      	cmp	r3, #4
 80016ba:	d038      	beq.n	800172e <HAL_ADC_ConfigChannel+0xca>
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2b05      	cmp	r3, #5
 80016c2:	d034      	beq.n	800172e <HAL_ADC_ConfigChannel+0xca>
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2b06      	cmp	r3, #6
 80016ca:	d030      	beq.n	800172e <HAL_ADC_ConfigChannel+0xca>
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2b07      	cmp	r3, #7
 80016d2:	d02c      	beq.n	800172e <HAL_ADC_ConfigChannel+0xca>
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2b08      	cmp	r3, #8
 80016da:	d028      	beq.n	800172e <HAL_ADC_ConfigChannel+0xca>
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2b09      	cmp	r3, #9
 80016e2:	d024      	beq.n	800172e <HAL_ADC_ConfigChannel+0xca>
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2b0a      	cmp	r3, #10
 80016ea:	d020      	beq.n	800172e <HAL_ADC_ConfigChannel+0xca>
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2b0b      	cmp	r3, #11
 80016f2:	d01c      	beq.n	800172e <HAL_ADC_ConfigChannel+0xca>
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2b0c      	cmp	r3, #12
 80016fa:	d018      	beq.n	800172e <HAL_ADC_ConfigChannel+0xca>
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2b0d      	cmp	r3, #13
 8001702:	d014      	beq.n	800172e <HAL_ADC_ConfigChannel+0xca>
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2b0e      	cmp	r3, #14
 800170a:	d010      	beq.n	800172e <HAL_ADC_ConfigChannel+0xca>
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2b0f      	cmp	r3, #15
 8001712:	d00c      	beq.n	800172e <HAL_ADC_ConfigChannel+0xca>
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2b10      	cmp	r3, #16
 800171a:	d008      	beq.n	800172e <HAL_ADC_ConfigChannel+0xca>
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2b11      	cmp	r3, #17
 8001722:	d004      	beq.n	800172e <HAL_ADC_ConfigChannel+0xca>
 8001724:	f240 71d7 	movw	r1, #2007	@ 0x7d7
 8001728:	485e      	ldr	r0, [pc, #376]	@ (80018a4 <HAL_ADC_ConfigChannel+0x240>)
 800172a:	f7ff fac1 	bl	8000cb0 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d040      	beq.n	80017b8 <HAL_ADC_ConfigChannel+0x154>
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	2b02      	cmp	r3, #2
 800173c:	d03c      	beq.n	80017b8 <HAL_ADC_ConfigChannel+0x154>
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	2b03      	cmp	r3, #3
 8001744:	d038      	beq.n	80017b8 <HAL_ADC_ConfigChannel+0x154>
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	2b04      	cmp	r3, #4
 800174c:	d034      	beq.n	80017b8 <HAL_ADC_ConfigChannel+0x154>
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	2b05      	cmp	r3, #5
 8001754:	d030      	beq.n	80017b8 <HAL_ADC_ConfigChannel+0x154>
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	2b06      	cmp	r3, #6
 800175c:	d02c      	beq.n	80017b8 <HAL_ADC_ConfigChannel+0x154>
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	2b07      	cmp	r3, #7
 8001764:	d028      	beq.n	80017b8 <HAL_ADC_ConfigChannel+0x154>
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	2b08      	cmp	r3, #8
 800176c:	d024      	beq.n	80017b8 <HAL_ADC_ConfigChannel+0x154>
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	2b09      	cmp	r3, #9
 8001774:	d020      	beq.n	80017b8 <HAL_ADC_ConfigChannel+0x154>
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	2b0a      	cmp	r3, #10
 800177c:	d01c      	beq.n	80017b8 <HAL_ADC_ConfigChannel+0x154>
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	2b0b      	cmp	r3, #11
 8001784:	d018      	beq.n	80017b8 <HAL_ADC_ConfigChannel+0x154>
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	2b0c      	cmp	r3, #12
 800178c:	d014      	beq.n	80017b8 <HAL_ADC_ConfigChannel+0x154>
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	2b0d      	cmp	r3, #13
 8001794:	d010      	beq.n	80017b8 <HAL_ADC_ConfigChannel+0x154>
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	2b0e      	cmp	r3, #14
 800179c:	d00c      	beq.n	80017b8 <HAL_ADC_ConfigChannel+0x154>
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	2b0f      	cmp	r3, #15
 80017a4:	d008      	beq.n	80017b8 <HAL_ADC_ConfigChannel+0x154>
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	2b10      	cmp	r3, #16
 80017ac:	d004      	beq.n	80017b8 <HAL_ADC_ConfigChannel+0x154>
 80017ae:	f44f 61fb 	mov.w	r1, #2008	@ 0x7d8
 80017b2:	483c      	ldr	r0, [pc, #240]	@ (80018a4 <HAL_ADC_ConfigChannel+0x240>)
 80017b4:	f7ff fa7c 	bl	8000cb0 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d020      	beq.n	8001802 <HAL_ADC_ConfigChannel+0x19e>
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d01c      	beq.n	8001802 <HAL_ADC_ConfigChannel+0x19e>
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d018      	beq.n	8001802 <HAL_ADC_ConfigChannel+0x19e>
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	2b03      	cmp	r3, #3
 80017d6:	d014      	beq.n	8001802 <HAL_ADC_ConfigChannel+0x19e>
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	2b04      	cmp	r3, #4
 80017de:	d010      	beq.n	8001802 <HAL_ADC_ConfigChannel+0x19e>
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	2b05      	cmp	r3, #5
 80017e6:	d00c      	beq.n	8001802 <HAL_ADC_ConfigChannel+0x19e>
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	2b06      	cmp	r3, #6
 80017ee:	d008      	beq.n	8001802 <HAL_ADC_ConfigChannel+0x19e>
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	2b07      	cmp	r3, #7
 80017f6:	d004      	beq.n	8001802 <HAL_ADC_ConfigChannel+0x19e>
 80017f8:	f240 71d9 	movw	r1, #2009	@ 0x7d9
 80017fc:	4829      	ldr	r0, [pc, #164]	@ (80018a4 <HAL_ADC_ConfigChannel+0x240>)
 80017fe:	f7ff fa57 	bl	8000cb0 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001808:	2b01      	cmp	r3, #1
 800180a:	d101      	bne.n	8001810 <HAL_ADC_ConfigChannel+0x1ac>
 800180c:	2302      	movs	r3, #2
 800180e:	e0e2      	b.n	80019d6 <HAL_ADC_ConfigChannel+0x372>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2201      	movs	r2, #1
 8001814:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	2b06      	cmp	r3, #6
 800181e:	d81c      	bhi.n	800185a <HAL_ADC_ConfigChannel+0x1f6>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685a      	ldr	r2, [r3, #4]
 800182a:	4613      	mov	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	4413      	add	r3, r2
 8001830:	3b05      	subs	r3, #5
 8001832:	221f      	movs	r2, #31
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	43db      	mvns	r3, r3
 800183a:	4019      	ands	r1, r3
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	6818      	ldr	r0, [r3, #0]
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685a      	ldr	r2, [r3, #4]
 8001844:	4613      	mov	r3, r2
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	4413      	add	r3, r2
 800184a:	3b05      	subs	r3, #5
 800184c:	fa00 f203 	lsl.w	r2, r0, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	430a      	orrs	r2, r1
 8001856:	635a      	str	r2, [r3, #52]	@ 0x34
 8001858:	e042      	b.n	80018e0 <HAL_ADC_ConfigChannel+0x27c>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	2b0c      	cmp	r3, #12
 8001860:	d822      	bhi.n	80018a8 <HAL_ADC_ConfigChannel+0x244>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685a      	ldr	r2, [r3, #4]
 800186c:	4613      	mov	r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4413      	add	r3, r2
 8001872:	3b23      	subs	r3, #35	@ 0x23
 8001874:	221f      	movs	r2, #31
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	43db      	mvns	r3, r3
 800187c:	4019      	ands	r1, r3
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	6818      	ldr	r0, [r3, #0]
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685a      	ldr	r2, [r3, #4]
 8001886:	4613      	mov	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4413      	add	r3, r2
 800188c:	3b23      	subs	r3, #35	@ 0x23
 800188e:	fa00 f203 	lsl.w	r2, r0, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	430a      	orrs	r2, r1
 8001898:	631a      	str	r2, [r3, #48]	@ 0x30
 800189a:	e021      	b.n	80018e0 <HAL_ADC_ConfigChannel+0x27c>
 800189c:	40012400 	.word	0x40012400
 80018a0:	40012800 	.word	0x40012800
 80018a4:	08004be8 	.word	0x08004be8
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685a      	ldr	r2, [r3, #4]
 80018b2:	4613      	mov	r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	4413      	add	r3, r2
 80018b8:	3b41      	subs	r3, #65	@ 0x41
 80018ba:	221f      	movs	r2, #31
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	43db      	mvns	r3, r3
 80018c2:	4019      	ands	r1, r3
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	6818      	ldr	r0, [r3, #0]
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685a      	ldr	r2, [r3, #4]
 80018cc:	4613      	mov	r3, r2
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	4413      	add	r3, r2
 80018d2:	3b41      	subs	r3, #65	@ 0x41
 80018d4:	fa00 f203 	lsl.w	r2, r0, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	430a      	orrs	r2, r1
 80018de:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2b09      	cmp	r3, #9
 80018e6:	d91c      	bls.n	8001922 <HAL_ADC_ConfigChannel+0x2be>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	68d9      	ldr	r1, [r3, #12]
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	4613      	mov	r3, r2
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	4413      	add	r3, r2
 80018f8:	3b1e      	subs	r3, #30
 80018fa:	2207      	movs	r2, #7
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	43db      	mvns	r3, r3
 8001902:	4019      	ands	r1, r3
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	6898      	ldr	r0, [r3, #8]
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	4613      	mov	r3, r2
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	4413      	add	r3, r2
 8001912:	3b1e      	subs	r3, #30
 8001914:	fa00 f203 	lsl.w	r2, r0, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	430a      	orrs	r2, r1
 800191e:	60da      	str	r2, [r3, #12]
 8001920:	e019      	b.n	8001956 <HAL_ADC_ConfigChannel+0x2f2>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	6919      	ldr	r1, [r3, #16]
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	4613      	mov	r3, r2
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	4413      	add	r3, r2
 8001932:	2207      	movs	r2, #7
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	43db      	mvns	r3, r3
 800193a:	4019      	ands	r1, r3
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	6898      	ldr	r0, [r3, #8]
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	4613      	mov	r3, r2
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	4413      	add	r3, r2
 800194a:	fa00 f203 	lsl.w	r2, r0, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	430a      	orrs	r2, r1
 8001954:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2b10      	cmp	r3, #16
 800195c:	d003      	beq.n	8001966 <HAL_ADC_ConfigChannel+0x302>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001962:	2b11      	cmp	r3, #17
 8001964:	d132      	bne.n	80019cc <HAL_ADC_ConfigChannel+0x368>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a1d      	ldr	r2, [pc, #116]	@ (80019e0 <HAL_ADC_ConfigChannel+0x37c>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d125      	bne.n	80019bc <HAL_ADC_ConfigChannel+0x358>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d126      	bne.n	80019cc <HAL_ADC_ConfigChannel+0x368>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	689a      	ldr	r2, [r3, #8]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800198c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2b10      	cmp	r3, #16
 8001994:	d11a      	bne.n	80019cc <HAL_ADC_ConfigChannel+0x368>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001996:	4b13      	ldr	r3, [pc, #76]	@ (80019e4 <HAL_ADC_ConfigChannel+0x380>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a13      	ldr	r2, [pc, #76]	@ (80019e8 <HAL_ADC_ConfigChannel+0x384>)
 800199c:	fba2 2303 	umull	r2, r3, r2, r3
 80019a0:	0c9a      	lsrs	r2, r3, #18
 80019a2:	4613      	mov	r3, r2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	4413      	add	r3, r2
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80019ac:	e002      	b.n	80019b4 <HAL_ADC_ConfigChannel+0x350>
          {
            wait_loop_index--;
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	3b01      	subs	r3, #1
 80019b2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d1f9      	bne.n	80019ae <HAL_ADC_ConfigChannel+0x34a>
 80019ba:	e007      	b.n	80019cc <HAL_ADC_ConfigChannel+0x368>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019c0:	f043 0220 	orr.w	r2, r3, #32
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2200      	movs	r2, #0
 80019d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80019d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40012400 	.word	0x40012400
 80019e4:	20000000 	.word	0x20000000
 80019e8:	431bde83 	.word	0x431bde83

080019ec <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019f4:	2300      	movs	r3, #0
 80019f6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d12e      	bne.n	8001a64 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	689a      	ldr	r2, [r3, #8]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f022 0201 	bic.w	r2, r2, #1
 8001a14:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a16:	f7ff fc8d 	bl	8001334 <HAL_GetTick>
 8001a1a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a1c:	e01b      	b.n	8001a56 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001a1e:	f7ff fc89 	bl	8001334 <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d914      	bls.n	8001a56 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d10d      	bne.n	8001a56 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a3e:	f043 0210 	orr.w	r2, r3, #16
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a4a:	f043 0201 	orr.w	r2, r3, #1
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e007      	b.n	8001a66 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f003 0301 	and.w	r3, r3, #1
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d0dc      	beq.n	8001a1e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
	...

08001a70 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d101      	bne.n	8001a82 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e209      	b.n	8001e96 <HAL_CAN_Init+0x426>
  }

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a8f      	ldr	r2, [pc, #572]	@ (8001cc4 <HAL_CAN_Init+0x254>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d004      	beq.n	8001a96 <HAL_CAN_Init+0x26>
 8001a8c:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 8001a90:	488d      	ldr	r0, [pc, #564]	@ (8001cc8 <HAL_CAN_Init+0x258>)
 8001a92:	f7ff f90d 	bl	8000cb0 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TimeTriggeredMode));
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	7e1b      	ldrb	r3, [r3, #24]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d008      	beq.n	8001ab0 <HAL_CAN_Init+0x40>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	7e1b      	ldrb	r3, [r3, #24]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d004      	beq.n	8001ab0 <HAL_CAN_Init+0x40>
 8001aa6:	f240 111f 	movw	r1, #287	@ 0x11f
 8001aaa:	4887      	ldr	r0, [pc, #540]	@ (8001cc8 <HAL_CAN_Init+0x258>)
 8001aac:	f7ff f900 	bl	8000cb0 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoBusOff));
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	7e5b      	ldrb	r3, [r3, #25]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d008      	beq.n	8001aca <HAL_CAN_Init+0x5a>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	7e5b      	ldrb	r3, [r3, #25]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d004      	beq.n	8001aca <HAL_CAN_Init+0x5a>
 8001ac0:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8001ac4:	4880      	ldr	r0, [pc, #512]	@ (8001cc8 <HAL_CAN_Init+0x258>)
 8001ac6:	f7ff f8f3 	bl	8000cb0 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoWakeUp));
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	7e9b      	ldrb	r3, [r3, #26]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d008      	beq.n	8001ae4 <HAL_CAN_Init+0x74>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	7e9b      	ldrb	r3, [r3, #26]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d004      	beq.n	8001ae4 <HAL_CAN_Init+0x74>
 8001ada:	f240 1121 	movw	r1, #289	@ 0x121
 8001ade:	487a      	ldr	r0, [pc, #488]	@ (8001cc8 <HAL_CAN_Init+0x258>)
 8001ae0:	f7ff f8e6 	bl	8000cb0 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoRetransmission));
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	7edb      	ldrb	r3, [r3, #27]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d008      	beq.n	8001afe <HAL_CAN_Init+0x8e>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	7edb      	ldrb	r3, [r3, #27]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d004      	beq.n	8001afe <HAL_CAN_Init+0x8e>
 8001af4:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8001af8:	4873      	ldr	r0, [pc, #460]	@ (8001cc8 <HAL_CAN_Init+0x258>)
 8001afa:	f7ff f8d9 	bl	8000cb0 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.ReceiveFifoLocked));
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	7f1b      	ldrb	r3, [r3, #28]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d008      	beq.n	8001b18 <HAL_CAN_Init+0xa8>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	7f1b      	ldrb	r3, [r3, #28]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d004      	beq.n	8001b18 <HAL_CAN_Init+0xa8>
 8001b0e:	f240 1123 	movw	r1, #291	@ 0x123
 8001b12:	486d      	ldr	r0, [pc, #436]	@ (8001cc8 <HAL_CAN_Init+0x258>)
 8001b14:	f7ff f8cc 	bl	8000cb0 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TransmitFifoPriority));
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	7f5b      	ldrb	r3, [r3, #29]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d008      	beq.n	8001b32 <HAL_CAN_Init+0xc2>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	7f5b      	ldrb	r3, [r3, #29]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d004      	beq.n	8001b32 <HAL_CAN_Init+0xc2>
 8001b28:	f44f 7192 	mov.w	r1, #292	@ 0x124
 8001b2c:	4866      	ldr	r0, [pc, #408]	@ (8001cc8 <HAL_CAN_Init+0x258>)
 8001b2e:	f7ff f8bf 	bl	8000cb0 <assert_failed>
  assert_param(IS_CAN_MODE(hcan->Init.Mode));
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d013      	beq.n	8001b62 <HAL_CAN_Init+0xf2>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b42:	d00e      	beq.n	8001b62 <HAL_CAN_Init+0xf2>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001b4c:	d009      	beq.n	8001b62 <HAL_CAN_Init+0xf2>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001b56:	d004      	beq.n	8001b62 <HAL_CAN_Init+0xf2>
 8001b58:	f240 1125 	movw	r1, #293	@ 0x125
 8001b5c:	485a      	ldr	r0, [pc, #360]	@ (8001cc8 <HAL_CAN_Init+0x258>)
 8001b5e:	f7ff f8a7 	bl	8000cb0 <assert_failed>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d013      	beq.n	8001b92 <HAL_CAN_Init+0x122>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b72:	d00e      	beq.n	8001b92 <HAL_CAN_Init+0x122>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001b7c:	d009      	beq.n	8001b92 <HAL_CAN_Init+0x122>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001b86:	d004      	beq.n	8001b92 <HAL_CAN_Init+0x122>
 8001b88:	f44f 7193 	mov.w	r1, #294	@ 0x126
 8001b8c:	484e      	ldr	r0, [pc, #312]	@ (8001cc8 <HAL_CAN_Init+0x258>)
 8001b8e:	f7ff f88f 	bl	8000cb0 <assert_failed>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d04f      	beq.n	8001c3a <HAL_CAN_Init+0x1ca>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ba2:	d04a      	beq.n	8001c3a <HAL_CAN_Init+0x1ca>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001bac:	d045      	beq.n	8001c3a <HAL_CAN_Init+0x1ca>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8001bb6:	d040      	beq.n	8001c3a <HAL_CAN_Init+0x1ca>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	691b      	ldr	r3, [r3, #16]
 8001bbc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001bc0:	d03b      	beq.n	8001c3a <HAL_CAN_Init+0x1ca>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001bca:	d036      	beq.n	8001c3a <HAL_CAN_Init+0x1ca>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	691b      	ldr	r3, [r3, #16]
 8001bd0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8001bd4:	d031      	beq.n	8001c3a <HAL_CAN_Init+0x1ca>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
 8001bde:	d02c      	beq.n	8001c3a <HAL_CAN_Init+0x1ca>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001be8:	d027      	beq.n	8001c3a <HAL_CAN_Init+0x1ca>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	f5b3 2f10 	cmp.w	r3, #589824	@ 0x90000
 8001bf2:	d022      	beq.n	8001c3a <HAL_CAN_Init+0x1ca>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	691b      	ldr	r3, [r3, #16]
 8001bf8:	f5b3 2f20 	cmp.w	r3, #655360	@ 0xa0000
 8001bfc:	d01d      	beq.n	8001c3a <HAL_CAN_Init+0x1ca>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	f5b3 2f30 	cmp.w	r3, #720896	@ 0xb0000
 8001c06:	d018      	beq.n	8001c3a <HAL_CAN_Init+0x1ca>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	691b      	ldr	r3, [r3, #16]
 8001c0c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8001c10:	d013      	beq.n	8001c3a <HAL_CAN_Init+0x1ca>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	f5b3 2f50 	cmp.w	r3, #851968	@ 0xd0000
 8001c1a:	d00e      	beq.n	8001c3a <HAL_CAN_Init+0x1ca>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	691b      	ldr	r3, [r3, #16]
 8001c20:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001c24:	d009      	beq.n	8001c3a <HAL_CAN_Init+0x1ca>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	f5b3 2f70 	cmp.w	r3, #983040	@ 0xf0000
 8001c2e:	d004      	beq.n	8001c3a <HAL_CAN_Init+0x1ca>
 8001c30:	f240 1127 	movw	r1, #295	@ 0x127
 8001c34:	4824      	ldr	r0, [pc, #144]	@ (8001cc8 <HAL_CAN_Init+0x258>)
 8001c36:	f7ff f83b 	bl	8000cb0 <assert_failed>
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	695b      	ldr	r3, [r3, #20]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d027      	beq.n	8001c92 <HAL_CAN_Init+0x222>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	695b      	ldr	r3, [r3, #20]
 8001c46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001c4a:	d022      	beq.n	8001c92 <HAL_CAN_Init+0x222>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	695b      	ldr	r3, [r3, #20]
 8001c50:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001c54:	d01d      	beq.n	8001c92 <HAL_CAN_Init+0x222>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	695b      	ldr	r3, [r3, #20]
 8001c5a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8001c5e:	d018      	beq.n	8001c92 <HAL_CAN_Init+0x222>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	695b      	ldr	r3, [r3, #20]
 8001c64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c68:	d013      	beq.n	8001c92 <HAL_CAN_Init+0x222>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	695b      	ldr	r3, [r3, #20]
 8001c6e:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8001c72:	d00e      	beq.n	8001c92 <HAL_CAN_Init+0x222>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	695b      	ldr	r3, [r3, #20]
 8001c78:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8001c7c:	d009      	beq.n	8001c92 <HAL_CAN_Init+0x222>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	695b      	ldr	r3, [r3, #20]
 8001c82:	f5b3 0fe0 	cmp.w	r3, #7340032	@ 0x700000
 8001c86:	d004      	beq.n	8001c92 <HAL_CAN_Init+0x222>
 8001c88:	f44f 7194 	mov.w	r1, #296	@ 0x128
 8001c8c:	480e      	ldr	r0, [pc, #56]	@ (8001cc8 <HAL_CAN_Init+0x258>)
 8001c8e:	f7ff f80f 	bl	8000cb0 <assert_failed>
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d004      	beq.n	8001ca4 <HAL_CAN_Init+0x234>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ca2:	d904      	bls.n	8001cae <HAL_CAN_Init+0x23e>
 8001ca4:	f240 1129 	movw	r1, #297	@ 0x129
 8001ca8:	4807      	ldr	r0, [pc, #28]	@ (8001cc8 <HAL_CAN_Init+0x258>)
 8001caa:	f7ff f801 	bl	8000cb0 <assert_failed>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d108      	bne.n	8001ccc <HAL_CAN_Init+0x25c>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f7ff f94a 	bl	8000f54 <HAL_CAN_MspInit>
 8001cc0:	e004      	b.n	8001ccc <HAL_CAN_Init+0x25c>
 8001cc2:	bf00      	nop
 8001cc4:	40006400 	.word	0x40006400
 8001cc8:	08004c20 	.word	0x08004c20
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f042 0201 	orr.w	r2, r2, #1
 8001cda:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cdc:	f7ff fb2a 	bl	8001334 <HAL_GetTick>
 8001ce0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ce2:	e012      	b.n	8001d0a <HAL_CAN_Init+0x29a>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ce4:	f7ff fb26 	bl	8001334 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b0a      	cmp	r3, #10
 8001cf0:	d90b      	bls.n	8001d0a <HAL_CAN_Init+0x29a>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2205      	movs	r2, #5
 8001d02:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e0c5      	b.n	8001e96 <HAL_CAN_Init+0x426>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d0e5      	beq.n	8001ce4 <HAL_CAN_Init+0x274>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f022 0202 	bic.w	r2, r2, #2
 8001d26:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d28:	f7ff fb04 	bl	8001334 <HAL_GetTick>
 8001d2c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d2e:	e012      	b.n	8001d56 <HAL_CAN_Init+0x2e6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d30:	f7ff fb00 	bl	8001334 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b0a      	cmp	r3, #10
 8001d3c:	d90b      	bls.n	8001d56 <HAL_CAN_Init+0x2e6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d42:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2205      	movs	r2, #5
 8001d4e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e09f      	b.n	8001e96 <HAL_CAN_Init+0x426>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d1e5      	bne.n	8001d30 <HAL_CAN_Init+0x2c0>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	7e1b      	ldrb	r3, [r3, #24]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d108      	bne.n	8001d7e <HAL_CAN_Init+0x30e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	e007      	b.n	8001d8e <HAL_CAN_Init+0x31e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d8c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	7e5b      	ldrb	r3, [r3, #25]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d108      	bne.n	8001da8 <HAL_CAN_Init+0x338>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	e007      	b.n	8001db8 <HAL_CAN_Init+0x348>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001db6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	7e9b      	ldrb	r3, [r3, #26]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d108      	bne.n	8001dd2 <HAL_CAN_Init+0x362>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f042 0220 	orr.w	r2, r2, #32
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	e007      	b.n	8001de2 <HAL_CAN_Init+0x372>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f022 0220 	bic.w	r2, r2, #32
 8001de0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	7edb      	ldrb	r3, [r3, #27]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d108      	bne.n	8001dfc <HAL_CAN_Init+0x38c>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f022 0210 	bic.w	r2, r2, #16
 8001df8:	601a      	str	r2, [r3, #0]
 8001dfa:	e007      	b.n	8001e0c <HAL_CAN_Init+0x39c>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f042 0210 	orr.w	r2, r2, #16
 8001e0a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	7f1b      	ldrb	r3, [r3, #28]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d108      	bne.n	8001e26 <HAL_CAN_Init+0x3b6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f042 0208 	orr.w	r2, r2, #8
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	e007      	b.n	8001e36 <HAL_CAN_Init+0x3c6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f022 0208 	bic.w	r2, r2, #8
 8001e34:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	7f5b      	ldrb	r3, [r3, #29]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d108      	bne.n	8001e50 <HAL_CAN_Init+0x3e0>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f042 0204 	orr.w	r2, r2, #4
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	e007      	b.n	8001e60 <HAL_CAN_Init+0x3f0>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f022 0204 	bic.w	r2, r2, #4
 8001e5e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689a      	ldr	r2, [r3, #8]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	431a      	orrs	r2, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	431a      	orrs	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	695b      	ldr	r3, [r3, #20]
 8001e74:	ea42 0103 	orr.w	r1, r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	1e5a      	subs	r2, r3, #1
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	430a      	orrs	r2, r1
 8001e84:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop

08001ea0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001eb6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001eb8:	7cfb      	ldrb	r3, [r7, #19]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d003      	beq.n	8001ec6 <HAL_CAN_ConfigFilter+0x26>
 8001ebe:	7cfb      	ldrb	r3, [r7, #19]
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	f040 810f 	bne.w	80020e4 <HAL_CAN_ConfigFilter+0x244>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdHigh));
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ece:	d304      	bcc.n	8001eda <HAL_CAN_ConfigFilter+0x3a>
 8001ed0:	f240 3152 	movw	r1, #850	@ 0x352
 8001ed4:	4889      	ldr	r0, [pc, #548]	@ (80020fc <HAL_CAN_ConfigFilter+0x25c>)
 8001ed6:	f7fe feeb 	bl	8000cb0 <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdLow));
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ee2:	d304      	bcc.n	8001eee <HAL_CAN_ConfigFilter+0x4e>
 8001ee4:	f240 3153 	movw	r1, #851	@ 0x353
 8001ee8:	4884      	ldr	r0, [pc, #528]	@ (80020fc <HAL_CAN_ConfigFilter+0x25c>)
 8001eea:	f7fe fee1 	bl	8000cb0 <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdHigh));
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ef6:	d304      	bcc.n	8001f02 <HAL_CAN_ConfigFilter+0x62>
 8001ef8:	f44f 7155 	mov.w	r1, #852	@ 0x354
 8001efc:	487f      	ldr	r0, [pc, #508]	@ (80020fc <HAL_CAN_ConfigFilter+0x25c>)
 8001efe:	f7fe fed7 	bl	8000cb0 <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdLow));
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f0a:	d304      	bcc.n	8001f16 <HAL_CAN_ConfigFilter+0x76>
 8001f0c:	f240 3155 	movw	r1, #853	@ 0x355
 8001f10:	487a      	ldr	r0, [pc, #488]	@ (80020fc <HAL_CAN_ConfigFilter+0x25c>)
 8001f12:	f7fe fecd 	bl	8000cb0 <assert_failed>
    assert_param(IS_CAN_FILTER_MODE(sFilterConfig->FilterMode));
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d008      	beq.n	8001f30 <HAL_CAN_ConfigFilter+0x90>
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d004      	beq.n	8001f30 <HAL_CAN_ConfigFilter+0x90>
 8001f26:	f240 3156 	movw	r1, #854	@ 0x356
 8001f2a:	4874      	ldr	r0, [pc, #464]	@ (80020fc <HAL_CAN_ConfigFilter+0x25c>)
 8001f2c:	f7fe fec0 	bl	8000cb0 <assert_failed>
    assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	69db      	ldr	r3, [r3, #28]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d008      	beq.n	8001f4a <HAL_CAN_ConfigFilter+0xaa>
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	69db      	ldr	r3, [r3, #28]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d004      	beq.n	8001f4a <HAL_CAN_ConfigFilter+0xaa>
 8001f40:	f240 3157 	movw	r1, #855	@ 0x357
 8001f44:	486d      	ldr	r0, [pc, #436]	@ (80020fc <HAL_CAN_ConfigFilter+0x25c>)
 8001f46:	f7fe feb3 	bl	8000cb0 <assert_failed>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d008      	beq.n	8001f64 <HAL_CAN_ConfigFilter+0xc4>
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d004      	beq.n	8001f64 <HAL_CAN_ConfigFilter+0xc4>
 8001f5a:	f44f 7156 	mov.w	r1, #856	@ 0x358
 8001f5e:	4867      	ldr	r0, [pc, #412]	@ (80020fc <HAL_CAN_ConfigFilter+0x25c>)
 8001f60:	f7fe fea6 	bl	8000cb0 <assert_failed>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	6a1b      	ldr	r3, [r3, #32]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d008      	beq.n	8001f7e <HAL_CAN_ConfigFilter+0xde>
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	6a1b      	ldr	r3, [r3, #32]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d004      	beq.n	8001f7e <HAL_CAN_ConfigFilter+0xde>
 8001f74:	f240 3159 	movw	r1, #857	@ 0x359
 8001f78:	4860      	ldr	r0, [pc, #384]	@ (80020fc <HAL_CAN_ConfigFilter+0x25c>)
 8001f7a:	f7fe fe99 	bl	8000cb0 <assert_failed>
    assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
#else
    /* CAN1 is single instance with 14 dedicated filters banks */

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	2b0d      	cmp	r3, #13
 8001f84:	d904      	bls.n	8001f90 <HAL_CAN_ConfigFilter+0xf0>
 8001f86:	f240 3167 	movw	r1, #871	@ 0x367
 8001f8a:	485c      	ldr	r0, [pc, #368]	@ (80020fc <HAL_CAN_ConfigFilter+0x25c>)
 8001f8c:	f7fe fe90 	bl	8000cb0 <assert_failed>
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001f96:	f043 0201 	orr.w	r2, r3, #1
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	695b      	ldr	r3, [r3, #20]
 8001fa4:	f003 031f 	and.w	r3, r3, #31
 8001fa8:	2201      	movs	r2, #1
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	401a      	ands	r2, r3
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	69db      	ldr	r3, [r3, #28]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d123      	bne.n	8002012 <HAL_CAN_ConfigFilter+0x172>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	401a      	ands	r2, r3
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001fec:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	3248      	adds	r2, #72	@ 0x48
 8001ff2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002006:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002008:	6979      	ldr	r1, [r7, #20]
 800200a:	3348      	adds	r3, #72	@ 0x48
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	440b      	add	r3, r1
 8002010:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d122      	bne.n	8002060 <HAL_CAN_ConfigFilter+0x1c0>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	431a      	orrs	r2, r3
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800203a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	3248      	adds	r2, #72	@ 0x48
 8002040:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002054:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002056:	6979      	ldr	r1, [r7, #20]
 8002058:	3348      	adds	r3, #72	@ 0x48
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	440b      	add	r3, r1
 800205e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d109      	bne.n	800207c <HAL_CAN_ConfigFilter+0x1dc>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	43db      	mvns	r3, r3
 8002072:	401a      	ands	r2, r3
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800207a:	e007      	b.n	800208c <HAL_CAN_ConfigFilter+0x1ec>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	431a      	orrs	r2, r3
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d109      	bne.n	80020a8 <HAL_CAN_ConfigFilter+0x208>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	43db      	mvns	r3, r3
 800209e:	401a      	ands	r2, r3
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80020a6:	e007      	b.n	80020b8 <HAL_CAN_ConfigFilter+0x218>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	431a      	orrs	r2, r3
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	6a1b      	ldr	r3, [r3, #32]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d107      	bne.n	80020d0 <HAL_CAN_ConfigFilter+0x230>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	431a      	orrs	r2, r3
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80020d6:	f023 0201 	bic.w	r2, r3, #1
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80020e0:	2300      	movs	r3, #0
 80020e2:	e006      	b.n	80020f2 <HAL_CAN_ConfigFilter+0x252>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020e8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
  }
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3718      	adds	r7, #24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	08004c20 	.word	0x08004c20

08002100 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800210e:	b2db      	uxtb	r3, r3
 8002110:	2b01      	cmp	r3, #1
 8002112:	d12e      	bne.n	8002172 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2202      	movs	r2, #2
 8002118:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f022 0201 	bic.w	r2, r2, #1
 800212a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800212c:	f7ff f902 	bl	8001334 <HAL_GetTick>
 8002130:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002132:	e012      	b.n	800215a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002134:	f7ff f8fe 	bl	8001334 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b0a      	cmp	r3, #10
 8002140:	d90b      	bls.n	800215a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002146:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2205      	movs	r2, #5
 8002152:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e012      	b.n	8002180 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f003 0301 	and.w	r3, r3, #1
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1e5      	bne.n	8002134 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800216e:	2300      	movs	r3, #0
 8002170:	e006      	b.n	8002180 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002176:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
  }
}
 8002180:	4618      	mov	r0, r3
 8002182:	3710      	adds	r7, #16
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b088      	sub	sp, #32
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
 8002194:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f893 3020 	ldrb.w	r3, [r3, #32]
 800219c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_CAN_IDTYPE(pHeader->IDE));
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d008      	beq.n	80021c0 <HAL_CAN_AddTxMessage+0x38>
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	2b04      	cmp	r3, #4
 80021b4:	d004      	beq.n	80021c0 <HAL_CAN_AddTxMessage+0x38>
 80021b6:	f240 41ce 	movw	r1, #1230	@ 0x4ce
 80021ba:	487f      	ldr	r0, [pc, #508]	@ (80023b8 <HAL_CAN_AddTxMessage+0x230>)
 80021bc:	f7fe fd78 	bl	8000cb0 <assert_failed>
  assert_param(IS_CAN_RTR(pHeader->RTR));
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d008      	beq.n	80021da <HAL_CAN_AddTxMessage+0x52>
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d004      	beq.n	80021da <HAL_CAN_AddTxMessage+0x52>
 80021d0:	f240 41cf 	movw	r1, #1231	@ 0x4cf
 80021d4:	4878      	ldr	r0, [pc, #480]	@ (80023b8 <HAL_CAN_AddTxMessage+0x230>)
 80021d6:	f7fe fd6b 	bl	8000cb0 <assert_failed>
  assert_param(IS_CAN_DLC(pHeader->DLC));
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	2b08      	cmp	r3, #8
 80021e0:	d904      	bls.n	80021ec <HAL_CAN_AddTxMessage+0x64>
 80021e2:	f44f 619a 	mov.w	r1, #1232	@ 0x4d0
 80021e6:	4874      	ldr	r0, [pc, #464]	@ (80023b8 <HAL_CAN_AddTxMessage+0x230>)
 80021e8:	f7fe fd62 	bl	8000cb0 <assert_failed>
  if (pHeader->IDE == CAN_ID_STD)
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d10a      	bne.n	800220a <HAL_CAN_AddTxMessage+0x82>
  {
    assert_param(IS_CAN_STDID(pHeader->StdId));
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80021fc:	d30f      	bcc.n	800221e <HAL_CAN_AddTxMessage+0x96>
 80021fe:	f240 41d3 	movw	r1, #1235	@ 0x4d3
 8002202:	486d      	ldr	r0, [pc, #436]	@ (80023b8 <HAL_CAN_AddTxMessage+0x230>)
 8002204:	f7fe fd54 	bl	8000cb0 <assert_failed>
 8002208:	e009      	b.n	800221e <HAL_CAN_AddTxMessage+0x96>
  }
  else
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002212:	d304      	bcc.n	800221e <HAL_CAN_AddTxMessage+0x96>
 8002214:	f240 41d7 	movw	r1, #1239	@ 0x4d7
 8002218:	4867      	ldr	r0, [pc, #412]	@ (80023b8 <HAL_CAN_AddTxMessage+0x230>)
 800221a:	f7fe fd49 	bl	8000cb0 <assert_failed>
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	7d1b      	ldrb	r3, [r3, #20]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d008      	beq.n	8002238 <HAL_CAN_AddTxMessage+0xb0>
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	7d1b      	ldrb	r3, [r3, #20]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d004      	beq.n	8002238 <HAL_CAN_AddTxMessage+0xb0>
 800222e:	f240 41d9 	movw	r1, #1241	@ 0x4d9
 8002232:	4861      	ldr	r0, [pc, #388]	@ (80023b8 <HAL_CAN_AddTxMessage+0x230>)
 8002234:	f7fe fd3c 	bl	8000cb0 <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 8002238:	7ffb      	ldrb	r3, [r7, #31]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d003      	beq.n	8002246 <HAL_CAN_AddTxMessage+0xbe>
 800223e:	7ffb      	ldrb	r3, [r7, #31]
 8002240:	2b02      	cmp	r3, #2
 8002242:	f040 80ad 	bne.w	80023a0 <HAL_CAN_AddTxMessage+0x218>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d10a      	bne.n	8002266 <HAL_CAN_AddTxMessage+0xde>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002256:	2b00      	cmp	r3, #0
 8002258:	d105      	bne.n	8002266 <HAL_CAN_AddTxMessage+0xde>
        ((tsr & CAN_TSR_TME2) != 0U))
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002260:	2b00      	cmp	r3, #0
 8002262:	f000 8095 	beq.w	8002390 <HAL_CAN_AddTxMessage+0x208>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	0e1b      	lsrs	r3, r3, #24
 800226a:	f003 0303 	and.w	r3, r3, #3
 800226e:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002270:	2201      	movs	r2, #1
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	409a      	lsls	r2, r3
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d10d      	bne.n	800229e <HAL_CAN_AddTxMessage+0x116>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800228c:	68f9      	ldr	r1, [r7, #12]
 800228e:	6809      	ldr	r1, [r1, #0]
 8002290:	431a      	orrs	r2, r3
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	3318      	adds	r3, #24
 8002296:	011b      	lsls	r3, r3, #4
 8002298:	440b      	add	r3, r1
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	e00f      	b.n	80022be <HAL_CAN_AddTxMessage+0x136>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80022a8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80022ae:	68f9      	ldr	r1, [r7, #12]
 80022b0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80022b2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	3318      	adds	r3, #24
 80022b8:	011b      	lsls	r3, r3, #4
 80022ba:	440b      	add	r3, r1
 80022bc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6819      	ldr	r1, [r3, #0]
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	691a      	ldr	r2, [r3, #16]
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	3318      	adds	r3, #24
 80022ca:	011b      	lsls	r3, r3, #4
 80022cc:	440b      	add	r3, r1
 80022ce:	3304      	adds	r3, #4
 80022d0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	7d1b      	ldrb	r3, [r3, #20]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d111      	bne.n	80022fe <HAL_CAN_AddTxMessage+0x176>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	3318      	adds	r3, #24
 80022e2:	011b      	lsls	r3, r3, #4
 80022e4:	4413      	add	r3, r2
 80022e6:	3304      	adds	r3, #4
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	6811      	ldr	r1, [r2, #0]
 80022ee:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	3318      	adds	r3, #24
 80022f6:	011b      	lsls	r3, r3, #4
 80022f8:	440b      	add	r3, r1
 80022fa:	3304      	adds	r3, #4
 80022fc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	3307      	adds	r3, #7
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	061a      	lsls	r2, r3, #24
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	3306      	adds	r3, #6
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	041b      	lsls	r3, r3, #16
 800230e:	431a      	orrs	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	3305      	adds	r3, #5
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	021b      	lsls	r3, r3, #8
 8002318:	4313      	orrs	r3, r2
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	3204      	adds	r2, #4
 800231e:	7812      	ldrb	r2, [r2, #0]
 8002320:	4610      	mov	r0, r2
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	6811      	ldr	r1, [r2, #0]
 8002326:	ea43 0200 	orr.w	r2, r3, r0
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	011b      	lsls	r3, r3, #4
 800232e:	440b      	add	r3, r1
 8002330:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002334:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	3303      	adds	r3, #3
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	061a      	lsls	r2, r3, #24
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	3302      	adds	r3, #2
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	041b      	lsls	r3, r3, #16
 8002346:	431a      	orrs	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	3301      	adds	r3, #1
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	021b      	lsls	r3, r3, #8
 8002350:	4313      	orrs	r3, r2
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	7812      	ldrb	r2, [r2, #0]
 8002356:	4610      	mov	r0, r2
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	6811      	ldr	r1, [r2, #0]
 800235c:	ea43 0200 	orr.w	r2, r3, r0
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	011b      	lsls	r3, r3, #4
 8002364:	440b      	add	r3, r1
 8002366:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800236a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	3318      	adds	r3, #24
 8002374:	011b      	lsls	r3, r3, #4
 8002376:	4413      	add	r3, r2
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68fa      	ldr	r2, [r7, #12]
 800237c:	6811      	ldr	r1, [r2, #0]
 800237e:	f043 0201 	orr.w	r2, r3, #1
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	3318      	adds	r3, #24
 8002386:	011b      	lsls	r3, r3, #4
 8002388:	440b      	add	r3, r1
 800238a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800238c:	2300      	movs	r3, #0
 800238e:	e00e      	b.n	80023ae <HAL_CAN_AddTxMessage+0x226>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002394:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e006      	b.n	80023ae <HAL_CAN_AddTxMessage+0x226>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
  }
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3720      	adds	r7, #32
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	08004c20 	.word	0x08004c20

080023bc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023cc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	4a11      	ldr	r2, [pc, #68]	@ (8002418 <HAL_CAN_ActivateNotification+0x5c>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d904      	bls.n	80023e0 <HAL_CAN_ActivateNotification+0x24>
 80023d6:	f240 6166 	movw	r1, #1638	@ 0x666
 80023da:	4810      	ldr	r0, [pc, #64]	@ (800241c <HAL_CAN_ActivateNotification+0x60>)
 80023dc:	f7fe fc68 	bl	8000cb0 <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 80023e0:	7bfb      	ldrb	r3, [r7, #15]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d002      	beq.n	80023ec <HAL_CAN_ActivateNotification+0x30>
 80023e6:	7bfb      	ldrb	r3, [r7, #15]
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d109      	bne.n	8002400 <HAL_CAN_ActivateNotification+0x44>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	6959      	ldr	r1, [r3, #20]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	430a      	orrs	r2, r1
 80023fa:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80023fc:	2300      	movs	r3, #0
 80023fe:	e006      	b.n	800240e <HAL_CAN_ActivateNotification+0x52>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002404:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
  }
}
 800240e:	4618      	mov	r0, r3
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	00038f7f 	.word	0x00038f7f
 800241c:	08004c20 	.word	0x08004c20

08002420 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f003 0307 	and.w	r3, r3, #7
 800242e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002430:	4b0c      	ldr	r3, [pc, #48]	@ (8002464 <__NVIC_SetPriorityGrouping+0x44>)
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002436:	68ba      	ldr	r2, [r7, #8]
 8002438:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800243c:	4013      	ands	r3, r2
 800243e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002448:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800244c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002450:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002452:	4a04      	ldr	r2, [pc, #16]	@ (8002464 <__NVIC_SetPriorityGrouping+0x44>)
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	60d3      	str	r3, [r2, #12]
}
 8002458:	bf00      	nop
 800245a:	3714      	adds	r7, #20
 800245c:	46bd      	mov	sp, r7
 800245e:	bc80      	pop	{r7}
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	e000ed00 	.word	0xe000ed00

08002468 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800246c:	4b04      	ldr	r3, [pc, #16]	@ (8002480 <__NVIC_GetPriorityGrouping+0x18>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	0a1b      	lsrs	r3, r3, #8
 8002472:	f003 0307 	and.w	r3, r3, #7
}
 8002476:	4618      	mov	r0, r3
 8002478:	46bd      	mov	sp, r7
 800247a:	bc80      	pop	{r7}
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	e000ed00 	.word	0xe000ed00

08002484 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	4603      	mov	r3, r0
 800248c:	6039      	str	r1, [r7, #0]
 800248e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002494:	2b00      	cmp	r3, #0
 8002496:	db0a      	blt.n	80024ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	b2da      	uxtb	r2, r3
 800249c:	490c      	ldr	r1, [pc, #48]	@ (80024d0 <__NVIC_SetPriority+0x4c>)
 800249e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a2:	0112      	lsls	r2, r2, #4
 80024a4:	b2d2      	uxtb	r2, r2
 80024a6:	440b      	add	r3, r1
 80024a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024ac:	e00a      	b.n	80024c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	b2da      	uxtb	r2, r3
 80024b2:	4908      	ldr	r1, [pc, #32]	@ (80024d4 <__NVIC_SetPriority+0x50>)
 80024b4:	79fb      	ldrb	r3, [r7, #7]
 80024b6:	f003 030f 	and.w	r3, r3, #15
 80024ba:	3b04      	subs	r3, #4
 80024bc:	0112      	lsls	r2, r2, #4
 80024be:	b2d2      	uxtb	r2, r2
 80024c0:	440b      	add	r3, r1
 80024c2:	761a      	strb	r2, [r3, #24]
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bc80      	pop	{r7}
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	e000e100 	.word	0xe000e100
 80024d4:	e000ed00 	.word	0xe000ed00

080024d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024d8:	b480      	push	{r7}
 80024da:	b089      	sub	sp, #36	@ 0x24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f003 0307 	and.w	r3, r3, #7
 80024ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	f1c3 0307 	rsb	r3, r3, #7
 80024f2:	2b04      	cmp	r3, #4
 80024f4:	bf28      	it	cs
 80024f6:	2304      	movcs	r3, #4
 80024f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	3304      	adds	r3, #4
 80024fe:	2b06      	cmp	r3, #6
 8002500:	d902      	bls.n	8002508 <NVIC_EncodePriority+0x30>
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	3b03      	subs	r3, #3
 8002506:	e000      	b.n	800250a <NVIC_EncodePriority+0x32>
 8002508:	2300      	movs	r3, #0
 800250a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800250c:	f04f 32ff 	mov.w	r2, #4294967295
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	43da      	mvns	r2, r3
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	401a      	ands	r2, r3
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002520:	f04f 31ff 	mov.w	r1, #4294967295
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	fa01 f303 	lsl.w	r3, r1, r3
 800252a:	43d9      	mvns	r1, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002530:	4313      	orrs	r3, r2
         );
}
 8002532:	4618      	mov	r0, r3
 8002534:	3724      	adds	r7, #36	@ 0x24
 8002536:	46bd      	mov	sp, r7
 8002538:	bc80      	pop	{r7}
 800253a:	4770      	bx	lr

0800253c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	3b01      	subs	r3, #1
 8002548:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800254c:	d301      	bcc.n	8002552 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800254e:	2301      	movs	r3, #1
 8002550:	e00f      	b.n	8002572 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002552:	4a0a      	ldr	r2, [pc, #40]	@ (800257c <SysTick_Config+0x40>)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	3b01      	subs	r3, #1
 8002558:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800255a:	210f      	movs	r1, #15
 800255c:	f04f 30ff 	mov.w	r0, #4294967295
 8002560:	f7ff ff90 	bl	8002484 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002564:	4b05      	ldr	r3, [pc, #20]	@ (800257c <SysTick_Config+0x40>)
 8002566:	2200      	movs	r2, #0
 8002568:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800256a:	4b04      	ldr	r3, [pc, #16]	@ (800257c <SysTick_Config+0x40>)
 800256c:	2207      	movs	r2, #7
 800256e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	e000e010 	.word	0xe000e010

08002580 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2b07      	cmp	r3, #7
 800258c:	d00f      	beq.n	80025ae <HAL_NVIC_SetPriorityGrouping+0x2e>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2b06      	cmp	r3, #6
 8002592:	d00c      	beq.n	80025ae <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2b05      	cmp	r3, #5
 8002598:	d009      	beq.n	80025ae <HAL_NVIC_SetPriorityGrouping+0x2e>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2b04      	cmp	r3, #4
 800259e:	d006      	beq.n	80025ae <HAL_NVIC_SetPriorityGrouping+0x2e>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2b03      	cmp	r3, #3
 80025a4:	d003      	beq.n	80025ae <HAL_NVIC_SetPriorityGrouping+0x2e>
 80025a6:	2191      	movs	r1, #145	@ 0x91
 80025a8:	4804      	ldr	r0, [pc, #16]	@ (80025bc <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80025aa:	f7fe fb81 	bl	8000cb0 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f7ff ff36 	bl	8002420 <__NVIC_SetPriorityGrouping>
}
 80025b4:	bf00      	nop
 80025b6:	3708      	adds	r7, #8
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	08004c58 	.word	0x08004c58

080025c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	4603      	mov	r3, r0
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
 80025cc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025ce:	2300      	movs	r3, #0
 80025d0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2b0f      	cmp	r3, #15
 80025d6:	d903      	bls.n	80025e0 <HAL_NVIC_SetPriority+0x20>
 80025d8:	21a9      	movs	r1, #169	@ 0xa9
 80025da:	480e      	ldr	r0, [pc, #56]	@ (8002614 <HAL_NVIC_SetPriority+0x54>)
 80025dc:	f7fe fb68 	bl	8000cb0 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	2b0f      	cmp	r3, #15
 80025e4:	d903      	bls.n	80025ee <HAL_NVIC_SetPriority+0x2e>
 80025e6:	21aa      	movs	r1, #170	@ 0xaa
 80025e8:	480a      	ldr	r0, [pc, #40]	@ (8002614 <HAL_NVIC_SetPriority+0x54>)
 80025ea:	f7fe fb61 	bl	8000cb0 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025ee:	f7ff ff3b 	bl	8002468 <__NVIC_GetPriorityGrouping>
 80025f2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	68b9      	ldr	r1, [r7, #8]
 80025f8:	6978      	ldr	r0, [r7, #20]
 80025fa:	f7ff ff6d 	bl	80024d8 <NVIC_EncodePriority>
 80025fe:	4602      	mov	r2, r0
 8002600:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002604:	4611      	mov	r1, r2
 8002606:	4618      	mov	r0, r3
 8002608:	f7ff ff3c 	bl	8002484 <__NVIC_SetPriority>
}
 800260c:	bf00      	nop
 800260e:	3718      	adds	r7, #24
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	08004c58 	.word	0x08004c58

08002618 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f7ff ff8b 	bl	800253c <SysTick_Config>
 8002626:	4603      	mov	r3, r0
}
 8002628:	4618      	mov	r0, r3
 800262a:	3708      	adds	r7, #8
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b08a      	sub	sp, #40	@ 0x28
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800263a:	2300      	movs	r3, #0
 800263c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800263e:	2300      	movs	r3, #0
 8002640:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a92      	ldr	r2, [pc, #584]	@ (8002890 <HAL_GPIO_Init+0x260>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d00f      	beq.n	800266a <HAL_GPIO_Init+0x3a>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a91      	ldr	r2, [pc, #580]	@ (8002894 <HAL_GPIO_Init+0x264>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d00b      	beq.n	800266a <HAL_GPIO_Init+0x3a>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a90      	ldr	r2, [pc, #576]	@ (8002898 <HAL_GPIO_Init+0x268>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d007      	beq.n	800266a <HAL_GPIO_Init+0x3a>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a8f      	ldr	r2, [pc, #572]	@ (800289c <HAL_GPIO_Init+0x26c>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d003      	beq.n	800266a <HAL_GPIO_Init+0x3a>
 8002662:	21bd      	movs	r1, #189	@ 0xbd
 8002664:	488e      	ldr	r0, [pc, #568]	@ (80028a0 <HAL_GPIO_Init+0x270>)
 8002666:	f7fe fb23 	bl	8000cb0 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	b29b      	uxth	r3, r3
 8002670:	2b00      	cmp	r3, #0
 8002672:	d004      	beq.n	800267e <HAL_GPIO_Init+0x4e>
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800267c:	d303      	bcc.n	8002686 <HAL_GPIO_Init+0x56>
 800267e:	21be      	movs	r1, #190	@ 0xbe
 8002680:	4887      	ldr	r0, [pc, #540]	@ (80028a0 <HAL_GPIO_Init+0x270>)
 8002682:	f7fe fb15 	bl	8000cb0 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	2b00      	cmp	r3, #0
 800268c:	f000 8211 	beq.w	8002ab2 <HAL_GPIO_Init+0x482>
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	2b01      	cmp	r3, #1
 8002696:	f000 820c 	beq.w	8002ab2 <HAL_GPIO_Init+0x482>
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	2b11      	cmp	r3, #17
 80026a0:	f000 8207 	beq.w	8002ab2 <HAL_GPIO_Init+0x482>
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	f000 8202 	beq.w	8002ab2 <HAL_GPIO_Init+0x482>
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	2b12      	cmp	r3, #18
 80026b4:	f000 81fd 	beq.w	8002ab2 <HAL_GPIO_Init+0x482>
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	4a79      	ldr	r2, [pc, #484]	@ (80028a4 <HAL_GPIO_Init+0x274>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	f000 81f7 	beq.w	8002ab2 <HAL_GPIO_Init+0x482>
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	4a77      	ldr	r2, [pc, #476]	@ (80028a8 <HAL_GPIO_Init+0x278>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	f000 81f1 	beq.w	8002ab2 <HAL_GPIO_Init+0x482>
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	4a75      	ldr	r2, [pc, #468]	@ (80028ac <HAL_GPIO_Init+0x27c>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	f000 81eb 	beq.w	8002ab2 <HAL_GPIO_Init+0x482>
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	4a73      	ldr	r2, [pc, #460]	@ (80028b0 <HAL_GPIO_Init+0x280>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	f000 81e5 	beq.w	8002ab2 <HAL_GPIO_Init+0x482>
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	4a71      	ldr	r2, [pc, #452]	@ (80028b4 <HAL_GPIO_Init+0x284>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	f000 81df 	beq.w	8002ab2 <HAL_GPIO_Init+0x482>
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	4a6f      	ldr	r2, [pc, #444]	@ (80028b8 <HAL_GPIO_Init+0x288>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	f000 81d9 	beq.w	8002ab2 <HAL_GPIO_Init+0x482>
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	2b03      	cmp	r3, #3
 8002706:	f000 81d4 	beq.w	8002ab2 <HAL_GPIO_Init+0x482>
 800270a:	21bf      	movs	r1, #191	@ 0xbf
 800270c:	4864      	ldr	r0, [pc, #400]	@ (80028a0 <HAL_GPIO_Init+0x270>)
 800270e:	f7fe facf 	bl	8000cb0 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002712:	e1ce      	b.n	8002ab2 <HAL_GPIO_Init+0x482>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002714:	2201      	movs	r2, #1
 8002716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	69fa      	ldr	r2, [r7, #28]
 8002724:	4013      	ands	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	429a      	cmp	r2, r3
 800272e:	f040 81bd 	bne.w	8002aac <HAL_GPIO_Init+0x47c>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a56      	ldr	r2, [pc, #344]	@ (8002890 <HAL_GPIO_Init+0x260>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d00f      	beq.n	800275a <HAL_GPIO_Init+0x12a>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a55      	ldr	r2, [pc, #340]	@ (8002894 <HAL_GPIO_Init+0x264>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d00b      	beq.n	800275a <HAL_GPIO_Init+0x12a>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a54      	ldr	r2, [pc, #336]	@ (8002898 <HAL_GPIO_Init+0x268>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d007      	beq.n	800275a <HAL_GPIO_Init+0x12a>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a53      	ldr	r2, [pc, #332]	@ (800289c <HAL_GPIO_Init+0x26c>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d003      	beq.n	800275a <HAL_GPIO_Init+0x12a>
 8002752:	21cd      	movs	r1, #205	@ 0xcd
 8002754:	4852      	ldr	r0, [pc, #328]	@ (80028a0 <HAL_GPIO_Init+0x270>)
 8002756:	f7fe faab 	bl	8000cb0 <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	4a56      	ldr	r2, [pc, #344]	@ (80028b8 <HAL_GPIO_Init+0x288>)
 8002760:	4293      	cmp	r3, r2
 8002762:	f000 80c0 	beq.w	80028e6 <HAL_GPIO_Init+0x2b6>
 8002766:	4a54      	ldr	r2, [pc, #336]	@ (80028b8 <HAL_GPIO_Init+0x288>)
 8002768:	4293      	cmp	r3, r2
 800276a:	f200 80e6 	bhi.w	800293a <HAL_GPIO_Init+0x30a>
 800276e:	4a4f      	ldr	r2, [pc, #316]	@ (80028ac <HAL_GPIO_Init+0x27c>)
 8002770:	4293      	cmp	r3, r2
 8002772:	f000 80b8 	beq.w	80028e6 <HAL_GPIO_Init+0x2b6>
 8002776:	4a4d      	ldr	r2, [pc, #308]	@ (80028ac <HAL_GPIO_Init+0x27c>)
 8002778:	4293      	cmp	r3, r2
 800277a:	f200 80de 	bhi.w	800293a <HAL_GPIO_Init+0x30a>
 800277e:	4a4d      	ldr	r2, [pc, #308]	@ (80028b4 <HAL_GPIO_Init+0x284>)
 8002780:	4293      	cmp	r3, r2
 8002782:	f000 80b0 	beq.w	80028e6 <HAL_GPIO_Init+0x2b6>
 8002786:	4a4b      	ldr	r2, [pc, #300]	@ (80028b4 <HAL_GPIO_Init+0x284>)
 8002788:	4293      	cmp	r3, r2
 800278a:	f200 80d6 	bhi.w	800293a <HAL_GPIO_Init+0x30a>
 800278e:	4a46      	ldr	r2, [pc, #280]	@ (80028a8 <HAL_GPIO_Init+0x278>)
 8002790:	4293      	cmp	r3, r2
 8002792:	f000 80a8 	beq.w	80028e6 <HAL_GPIO_Init+0x2b6>
 8002796:	4a44      	ldr	r2, [pc, #272]	@ (80028a8 <HAL_GPIO_Init+0x278>)
 8002798:	4293      	cmp	r3, r2
 800279a:	f200 80ce 	bhi.w	800293a <HAL_GPIO_Init+0x30a>
 800279e:	4a44      	ldr	r2, [pc, #272]	@ (80028b0 <HAL_GPIO_Init+0x280>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	f000 80a0 	beq.w	80028e6 <HAL_GPIO_Init+0x2b6>
 80027a6:	4a42      	ldr	r2, [pc, #264]	@ (80028b0 <HAL_GPIO_Init+0x280>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	f200 80c6 	bhi.w	800293a <HAL_GPIO_Init+0x30a>
 80027ae:	2b12      	cmp	r3, #18
 80027b0:	d82c      	bhi.n	800280c <HAL_GPIO_Init+0x1dc>
 80027b2:	2b12      	cmp	r3, #18
 80027b4:	f200 80c1 	bhi.w	800293a <HAL_GPIO_Init+0x30a>
 80027b8:	a201      	add	r2, pc, #4	@ (adr r2, 80027c0 <HAL_GPIO_Init+0x190>)
 80027ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027be:	bf00      	nop
 80027c0:	080028e7 	.word	0x080028e7
 80027c4:	08002815 	.word	0x08002815
 80027c8:	08002867 	.word	0x08002867
 80027cc:	08002935 	.word	0x08002935
 80027d0:	0800293b 	.word	0x0800293b
 80027d4:	0800293b 	.word	0x0800293b
 80027d8:	0800293b 	.word	0x0800293b
 80027dc:	0800293b 	.word	0x0800293b
 80027e0:	0800293b 	.word	0x0800293b
 80027e4:	0800293b 	.word	0x0800293b
 80027e8:	0800293b 	.word	0x0800293b
 80027ec:	0800293b 	.word	0x0800293b
 80027f0:	0800293b 	.word	0x0800293b
 80027f4:	0800293b 	.word	0x0800293b
 80027f8:	0800293b 	.word	0x0800293b
 80027fc:	0800293b 	.word	0x0800293b
 8002800:	0800293b 	.word	0x0800293b
 8002804:	0800283d 	.word	0x0800283d
 8002808:	080028bd 	.word	0x080028bd
 800280c:	4a25      	ldr	r2, [pc, #148]	@ (80028a4 <HAL_GPIO_Init+0x274>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d069      	beq.n	80028e6 <HAL_GPIO_Init+0x2b6>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002812:	e092      	b.n	800293a <HAL_GPIO_Init+0x30a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	2b02      	cmp	r3, #2
 800281a:	d00b      	beq.n	8002834 <HAL_GPIO_Init+0x204>
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d007      	beq.n	8002834 <HAL_GPIO_Init+0x204>
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	2b03      	cmp	r3, #3
 800282a:	d003      	beq.n	8002834 <HAL_GPIO_Init+0x204>
 800282c:	21d5      	movs	r1, #213	@ 0xd5
 800282e:	481c      	ldr	r0, [pc, #112]	@ (80028a0 <HAL_GPIO_Init+0x270>)
 8002830:	f7fe fa3e 	bl	8000cb0 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	623b      	str	r3, [r7, #32]
          break;
 800283a:	e07f      	b.n	800293c <HAL_GPIO_Init+0x30c>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	2b02      	cmp	r3, #2
 8002842:	d00b      	beq.n	800285c <HAL_GPIO_Init+0x22c>
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	2b01      	cmp	r3, #1
 800284a:	d007      	beq.n	800285c <HAL_GPIO_Init+0x22c>
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	2b03      	cmp	r3, #3
 8002852:	d003      	beq.n	800285c <HAL_GPIO_Init+0x22c>
 8002854:	21dc      	movs	r1, #220	@ 0xdc
 8002856:	4812      	ldr	r0, [pc, #72]	@ (80028a0 <HAL_GPIO_Init+0x270>)
 8002858:	f7fe fa2a 	bl	8000cb0 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	3304      	adds	r3, #4
 8002862:	623b      	str	r3, [r7, #32]
          break;
 8002864:	e06a      	b.n	800293c <HAL_GPIO_Init+0x30c>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	2b02      	cmp	r3, #2
 800286c:	d00b      	beq.n	8002886 <HAL_GPIO_Init+0x256>
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d007      	beq.n	8002886 <HAL_GPIO_Init+0x256>
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	2b03      	cmp	r3, #3
 800287c:	d003      	beq.n	8002886 <HAL_GPIO_Init+0x256>
 800287e:	21e3      	movs	r1, #227	@ 0xe3
 8002880:	4807      	ldr	r0, [pc, #28]	@ (80028a0 <HAL_GPIO_Init+0x270>)
 8002882:	f7fe fa15 	bl	8000cb0 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	3308      	adds	r3, #8
 800288c:	623b      	str	r3, [r7, #32]
          break;
 800288e:	e055      	b.n	800293c <HAL_GPIO_Init+0x30c>
 8002890:	40010800 	.word	0x40010800
 8002894:	40010c00 	.word	0x40010c00
 8002898:	40011000 	.word	0x40011000
 800289c:	40011400 	.word	0x40011400
 80028a0:	08004c94 	.word	0x08004c94
 80028a4:	10110000 	.word	0x10110000
 80028a8:	10210000 	.word	0x10210000
 80028ac:	10310000 	.word	0x10310000
 80028b0:	10120000 	.word	0x10120000
 80028b4:	10220000 	.word	0x10220000
 80028b8:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d00b      	beq.n	80028dc <HAL_GPIO_Init+0x2ac>
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d007      	beq.n	80028dc <HAL_GPIO_Init+0x2ac>
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	2b03      	cmp	r3, #3
 80028d2:	d003      	beq.n	80028dc <HAL_GPIO_Init+0x2ac>
 80028d4:	21ea      	movs	r1, #234	@ 0xea
 80028d6:	487d      	ldr	r0, [pc, #500]	@ (8002acc <HAL_GPIO_Init+0x49c>)
 80028d8:	f7fe f9ea 	bl	8000cb0 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	330c      	adds	r3, #12
 80028e2:	623b      	str	r3, [r7, #32]
          break;
 80028e4:	e02a      	b.n	800293c <HAL_GPIO_Init+0x30c>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d00b      	beq.n	8002906 <HAL_GPIO_Init+0x2d6>
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d007      	beq.n	8002906 <HAL_GPIO_Init+0x2d6>
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d003      	beq.n	8002906 <HAL_GPIO_Init+0x2d6>
 80028fe:	21f7      	movs	r1, #247	@ 0xf7
 8002900:	4872      	ldr	r0, [pc, #456]	@ (8002acc <HAL_GPIO_Init+0x49c>)
 8002902:	f7fe f9d5 	bl	8000cb0 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d102      	bne.n	8002914 <HAL_GPIO_Init+0x2e4>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800290e:	2304      	movs	r3, #4
 8002910:	623b      	str	r3, [r7, #32]
          break;
 8002912:	e013      	b.n	800293c <HAL_GPIO_Init+0x30c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d105      	bne.n	8002928 <HAL_GPIO_Init+0x2f8>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800291c:	2308      	movs	r3, #8
 800291e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	69fa      	ldr	r2, [r7, #28]
 8002924:	611a      	str	r2, [r3, #16]
          break;
 8002926:	e009      	b.n	800293c <HAL_GPIO_Init+0x30c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002928:	2308      	movs	r3, #8
 800292a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	69fa      	ldr	r2, [r7, #28]
 8002930:	615a      	str	r2, [r3, #20]
          break;
 8002932:	e003      	b.n	800293c <HAL_GPIO_Init+0x30c>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002934:	2300      	movs	r3, #0
 8002936:	623b      	str	r3, [r7, #32]
          break;
 8002938:	e000      	b.n	800293c <HAL_GPIO_Init+0x30c>
          break;
 800293a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	2bff      	cmp	r3, #255	@ 0xff
 8002940:	d801      	bhi.n	8002946 <HAL_GPIO_Init+0x316>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	e001      	b.n	800294a <HAL_GPIO_Init+0x31a>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	3304      	adds	r3, #4
 800294a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	2bff      	cmp	r3, #255	@ 0xff
 8002950:	d802      	bhi.n	8002958 <HAL_GPIO_Init+0x328>
 8002952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	e002      	b.n	800295e <HAL_GPIO_Init+0x32e>
 8002958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800295a:	3b08      	subs	r3, #8
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	210f      	movs	r1, #15
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	fa01 f303 	lsl.w	r3, r1, r3
 800296c:	43db      	mvns	r3, r3
 800296e:	401a      	ands	r2, r3
 8002970:	6a39      	ldr	r1, [r7, #32]
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	fa01 f303 	lsl.w	r3, r1, r3
 8002978:	431a      	orrs	r2, r3
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002986:	2b00      	cmp	r3, #0
 8002988:	f000 8090 	beq.w	8002aac <HAL_GPIO_Init+0x47c>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800298c:	4b50      	ldr	r3, [pc, #320]	@ (8002ad0 <HAL_GPIO_Init+0x4a0>)
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	4a4f      	ldr	r2, [pc, #316]	@ (8002ad0 <HAL_GPIO_Init+0x4a0>)
 8002992:	f043 0301 	orr.w	r3, r3, #1
 8002996:	6193      	str	r3, [r2, #24]
 8002998:	4b4d      	ldr	r3, [pc, #308]	@ (8002ad0 <HAL_GPIO_Init+0x4a0>)
 800299a:	699b      	ldr	r3, [r3, #24]
 800299c:	f003 0301 	and.w	r3, r3, #1
 80029a0:	60bb      	str	r3, [r7, #8]
 80029a2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80029a4:	4a4b      	ldr	r2, [pc, #300]	@ (8002ad4 <HAL_GPIO_Init+0x4a4>)
 80029a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a8:	089b      	lsrs	r3, r3, #2
 80029aa:	3302      	adds	r3, #2
 80029ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029b0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80029b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b4:	f003 0303 	and.w	r3, r3, #3
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	220f      	movs	r2, #15
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	43db      	mvns	r3, r3
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	4013      	ands	r3, r2
 80029c6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4a43      	ldr	r2, [pc, #268]	@ (8002ad8 <HAL_GPIO_Init+0x4a8>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d00d      	beq.n	80029ec <HAL_GPIO_Init+0x3bc>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a42      	ldr	r2, [pc, #264]	@ (8002adc <HAL_GPIO_Init+0x4ac>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d007      	beq.n	80029e8 <HAL_GPIO_Init+0x3b8>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a41      	ldr	r2, [pc, #260]	@ (8002ae0 <HAL_GPIO_Init+0x4b0>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d101      	bne.n	80029e4 <HAL_GPIO_Init+0x3b4>
 80029e0:	2302      	movs	r3, #2
 80029e2:	e004      	b.n	80029ee <HAL_GPIO_Init+0x3be>
 80029e4:	2303      	movs	r3, #3
 80029e6:	e002      	b.n	80029ee <HAL_GPIO_Init+0x3be>
 80029e8:	2301      	movs	r3, #1
 80029ea:	e000      	b.n	80029ee <HAL_GPIO_Init+0x3be>
 80029ec:	2300      	movs	r3, #0
 80029ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029f0:	f002 0203 	and.w	r2, r2, #3
 80029f4:	0092      	lsls	r2, r2, #2
 80029f6:	4093      	lsls	r3, r2
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80029fe:	4935      	ldr	r1, [pc, #212]	@ (8002ad4 <HAL_GPIO_Init+0x4a4>)
 8002a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a02:	089b      	lsrs	r3, r3, #2
 8002a04:	3302      	adds	r3, #2
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d006      	beq.n	8002a26 <HAL_GPIO_Init+0x3f6>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a18:	4b32      	ldr	r3, [pc, #200]	@ (8002ae4 <HAL_GPIO_Init+0x4b4>)
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	4931      	ldr	r1, [pc, #196]	@ (8002ae4 <HAL_GPIO_Init+0x4b4>)
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	608b      	str	r3, [r1, #8]
 8002a24:	e006      	b.n	8002a34 <HAL_GPIO_Init+0x404>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a26:	4b2f      	ldr	r3, [pc, #188]	@ (8002ae4 <HAL_GPIO_Init+0x4b4>)
 8002a28:	689a      	ldr	r2, [r3, #8]
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	492d      	ldr	r1, [pc, #180]	@ (8002ae4 <HAL_GPIO_Init+0x4b4>)
 8002a30:	4013      	ands	r3, r2
 8002a32:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d006      	beq.n	8002a4e <HAL_GPIO_Init+0x41e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a40:	4b28      	ldr	r3, [pc, #160]	@ (8002ae4 <HAL_GPIO_Init+0x4b4>)
 8002a42:	68da      	ldr	r2, [r3, #12]
 8002a44:	4927      	ldr	r1, [pc, #156]	@ (8002ae4 <HAL_GPIO_Init+0x4b4>)
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	60cb      	str	r3, [r1, #12]
 8002a4c:	e006      	b.n	8002a5c <HAL_GPIO_Init+0x42c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a4e:	4b25      	ldr	r3, [pc, #148]	@ (8002ae4 <HAL_GPIO_Init+0x4b4>)
 8002a50:	68da      	ldr	r2, [r3, #12]
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	43db      	mvns	r3, r3
 8002a56:	4923      	ldr	r1, [pc, #140]	@ (8002ae4 <HAL_GPIO_Init+0x4b4>)
 8002a58:	4013      	ands	r3, r2
 8002a5a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d006      	beq.n	8002a76 <HAL_GPIO_Init+0x446>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a68:	4b1e      	ldr	r3, [pc, #120]	@ (8002ae4 <HAL_GPIO_Init+0x4b4>)
 8002a6a:	685a      	ldr	r2, [r3, #4]
 8002a6c:	491d      	ldr	r1, [pc, #116]	@ (8002ae4 <HAL_GPIO_Init+0x4b4>)
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	604b      	str	r3, [r1, #4]
 8002a74:	e006      	b.n	8002a84 <HAL_GPIO_Init+0x454>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a76:	4b1b      	ldr	r3, [pc, #108]	@ (8002ae4 <HAL_GPIO_Init+0x4b4>)
 8002a78:	685a      	ldr	r2, [r3, #4]
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	43db      	mvns	r3, r3
 8002a7e:	4919      	ldr	r1, [pc, #100]	@ (8002ae4 <HAL_GPIO_Init+0x4b4>)
 8002a80:	4013      	ands	r3, r2
 8002a82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d006      	beq.n	8002a9e <HAL_GPIO_Init+0x46e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a90:	4b14      	ldr	r3, [pc, #80]	@ (8002ae4 <HAL_GPIO_Init+0x4b4>)
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	4913      	ldr	r1, [pc, #76]	@ (8002ae4 <HAL_GPIO_Init+0x4b4>)
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	600b      	str	r3, [r1, #0]
 8002a9c:	e006      	b.n	8002aac <HAL_GPIO_Init+0x47c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a9e:	4b11      	ldr	r3, [pc, #68]	@ (8002ae4 <HAL_GPIO_Init+0x4b4>)
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	490f      	ldr	r1, [pc, #60]	@ (8002ae4 <HAL_GPIO_Init+0x4b4>)
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aae:	3301      	adds	r3, #1
 8002ab0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f47f ae29 	bne.w	8002714 <HAL_GPIO_Init+0xe4>
  }
}
 8002ac2:	bf00      	nop
 8002ac4:	bf00      	nop
 8002ac6:	3728      	adds	r7, #40	@ 0x28
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	08004c94 	.word	0x08004c94
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	40010000 	.word	0x40010000
 8002ad8:	40010800 	.word	0x40010800
 8002adc:	40010c00 	.word	0x40010c00
 8002ae0:	40011000 	.word	0x40011000
 8002ae4:	40010400 	.word	0x40010400

08002ae8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	460b      	mov	r3, r1
 8002af2:	807b      	strh	r3, [r7, #2]
 8002af4:	4613      	mov	r3, r2
 8002af6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002af8:	887b      	ldrh	r3, [r7, #2]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d104      	bne.n	8002b08 <HAL_GPIO_WritePin+0x20>
 8002afe:	f44f 71ea 	mov.w	r1, #468	@ 0x1d4
 8002b02:	480e      	ldr	r0, [pc, #56]	@ (8002b3c <HAL_GPIO_WritePin+0x54>)
 8002b04:	f7fe f8d4 	bl	8000cb0 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002b08:	787b      	ldrb	r3, [r7, #1]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d007      	beq.n	8002b1e <HAL_GPIO_WritePin+0x36>
 8002b0e:	787b      	ldrb	r3, [r7, #1]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d004      	beq.n	8002b1e <HAL_GPIO_WritePin+0x36>
 8002b14:	f240 11d5 	movw	r1, #469	@ 0x1d5
 8002b18:	4808      	ldr	r0, [pc, #32]	@ (8002b3c <HAL_GPIO_WritePin+0x54>)
 8002b1a:	f7fe f8c9 	bl	8000cb0 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8002b1e:	787b      	ldrb	r3, [r7, #1]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d003      	beq.n	8002b2c <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b24:	887a      	ldrh	r2, [r7, #2]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b2a:	e003      	b.n	8002b34 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b2c:	887b      	ldrh	r3, [r7, #2]
 8002b2e:	041a      	lsls	r2, r3, #16
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	611a      	str	r2, [r3, #16]
}
 8002b34:	bf00      	nop
 8002b36:	3708      	adds	r7, #8
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	08004c94 	.word	0x08004c94

08002b40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e35a      	b.n	8003208 <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d01c      	beq.n	8002b94 <HAL_RCC_OscConfig+0x54>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d116      	bne.n	8002b94 <HAL_RCC_OscConfig+0x54>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d110      	bne.n	8002b94 <HAL_RCC_OscConfig+0x54>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0308 	and.w	r3, r3, #8
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10a      	bne.n	8002b94 <HAL_RCC_OscConfig+0x54>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0304 	and.w	r3, r3, #4
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d104      	bne.n	8002b94 <HAL_RCC_OscConfig+0x54>
 8002b8a:	f240 1165 	movw	r1, #357	@ 0x165
 8002b8e:	488f      	ldr	r0, [pc, #572]	@ (8002dcc <HAL_RCC_OscConfig+0x28c>)
 8002b90:	f7fe f88e 	bl	8000cb0 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f000 809a 	beq.w	8002cd6 <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00e      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x88>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bb2:	d009      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x88>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002bbc:	d004      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x88>
 8002bbe:	f240 116b 	movw	r1, #363	@ 0x16b
 8002bc2:	4882      	ldr	r0, [pc, #520]	@ (8002dcc <HAL_RCC_OscConfig+0x28c>)
 8002bc4:	f7fe f874 	bl	8000cb0 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bc8:	4b81      	ldr	r3, [pc, #516]	@ (8002dd0 <HAL_RCC_OscConfig+0x290>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f003 030c 	and.w	r3, r3, #12
 8002bd0:	2b04      	cmp	r3, #4
 8002bd2:	d00c      	beq.n	8002bee <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bd4:	4b7e      	ldr	r3, [pc, #504]	@ (8002dd0 <HAL_RCC_OscConfig+0x290>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f003 030c 	and.w	r3, r3, #12
 8002bdc:	2b08      	cmp	r3, #8
 8002bde:	d112      	bne.n	8002c06 <HAL_RCC_OscConfig+0xc6>
 8002be0:	4b7b      	ldr	r3, [pc, #492]	@ (8002dd0 <HAL_RCC_OscConfig+0x290>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002be8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bec:	d10b      	bne.n	8002c06 <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bee:	4b78      	ldr	r3, [pc, #480]	@ (8002dd0 <HAL_RCC_OscConfig+0x290>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d06c      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x194>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d168      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e300      	b.n	8003208 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c0e:	d106      	bne.n	8002c1e <HAL_RCC_OscConfig+0xde>
 8002c10:	4b6f      	ldr	r3, [pc, #444]	@ (8002dd0 <HAL_RCC_OscConfig+0x290>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a6e      	ldr	r2, [pc, #440]	@ (8002dd0 <HAL_RCC_OscConfig+0x290>)
 8002c16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c1a:	6013      	str	r3, [r2, #0]
 8002c1c:	e02e      	b.n	8002c7c <HAL_RCC_OscConfig+0x13c>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d10c      	bne.n	8002c40 <HAL_RCC_OscConfig+0x100>
 8002c26:	4b6a      	ldr	r3, [pc, #424]	@ (8002dd0 <HAL_RCC_OscConfig+0x290>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a69      	ldr	r2, [pc, #420]	@ (8002dd0 <HAL_RCC_OscConfig+0x290>)
 8002c2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c30:	6013      	str	r3, [r2, #0]
 8002c32:	4b67      	ldr	r3, [pc, #412]	@ (8002dd0 <HAL_RCC_OscConfig+0x290>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a66      	ldr	r2, [pc, #408]	@ (8002dd0 <HAL_RCC_OscConfig+0x290>)
 8002c38:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c3c:	6013      	str	r3, [r2, #0]
 8002c3e:	e01d      	b.n	8002c7c <HAL_RCC_OscConfig+0x13c>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c48:	d10c      	bne.n	8002c64 <HAL_RCC_OscConfig+0x124>
 8002c4a:	4b61      	ldr	r3, [pc, #388]	@ (8002dd0 <HAL_RCC_OscConfig+0x290>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a60      	ldr	r2, [pc, #384]	@ (8002dd0 <HAL_RCC_OscConfig+0x290>)
 8002c50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c54:	6013      	str	r3, [r2, #0]
 8002c56:	4b5e      	ldr	r3, [pc, #376]	@ (8002dd0 <HAL_RCC_OscConfig+0x290>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a5d      	ldr	r2, [pc, #372]	@ (8002dd0 <HAL_RCC_OscConfig+0x290>)
 8002c5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c60:	6013      	str	r3, [r2, #0]
 8002c62:	e00b      	b.n	8002c7c <HAL_RCC_OscConfig+0x13c>
 8002c64:	4b5a      	ldr	r3, [pc, #360]	@ (8002dd0 <HAL_RCC_OscConfig+0x290>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a59      	ldr	r2, [pc, #356]	@ (8002dd0 <HAL_RCC_OscConfig+0x290>)
 8002c6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c6e:	6013      	str	r3, [r2, #0]
 8002c70:	4b57      	ldr	r3, [pc, #348]	@ (8002dd0 <HAL_RCC_OscConfig+0x290>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a56      	ldr	r2, [pc, #344]	@ (8002dd0 <HAL_RCC_OscConfig+0x290>)
 8002c76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c7a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d013      	beq.n	8002cac <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c84:	f7fe fb56 	bl	8001334 <HAL_GetTick>
 8002c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c8a:	e008      	b.n	8002c9e <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c8c:	f7fe fb52 	bl	8001334 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b64      	cmp	r3, #100	@ 0x64
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e2b4      	b.n	8003208 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c9e:	4b4c      	ldr	r3, [pc, #304]	@ (8002dd0 <HAL_RCC_OscConfig+0x290>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d0f0      	beq.n	8002c8c <HAL_RCC_OscConfig+0x14c>
 8002caa:	e014      	b.n	8002cd6 <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cac:	f7fe fb42 	bl	8001334 <HAL_GetTick>
 8002cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cb2:	e008      	b.n	8002cc6 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cb4:	f7fe fb3e 	bl	8001334 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b64      	cmp	r3, #100	@ 0x64
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e2a0      	b.n	8003208 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cc6:	4b42      	ldr	r3, [pc, #264]	@ (8002dd0 <HAL_RCC_OscConfig+0x290>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d1f0      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x174>
 8002cd2:	e000      	b.n	8002cd6 <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f000 8080 	beq.w	8002de4 <HAL_RCC_OscConfig+0x2a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	691b      	ldr	r3, [r3, #16]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d008      	beq.n	8002cfe <HAL_RCC_OscConfig+0x1be>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d004      	beq.n	8002cfe <HAL_RCC_OscConfig+0x1be>
 8002cf4:	f240 119f 	movw	r1, #415	@ 0x19f
 8002cf8:	4834      	ldr	r0, [pc, #208]	@ (8002dcc <HAL_RCC_OscConfig+0x28c>)
 8002cfa:	f7fd ffd9 	bl	8000cb0 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	695b      	ldr	r3, [r3, #20]
 8002d02:	2b1f      	cmp	r3, #31
 8002d04:	d904      	bls.n	8002d10 <HAL_RCC_OscConfig+0x1d0>
 8002d06:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
 8002d0a:	4830      	ldr	r0, [pc, #192]	@ (8002dcc <HAL_RCC_OscConfig+0x28c>)
 8002d0c:	f7fd ffd0 	bl	8000cb0 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d10:	4b2f      	ldr	r3, [pc, #188]	@ (8002dd0 <HAL_RCC_OscConfig+0x290>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f003 030c 	and.w	r3, r3, #12
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d00b      	beq.n	8002d34 <HAL_RCC_OscConfig+0x1f4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d1c:	4b2c      	ldr	r3, [pc, #176]	@ (8002dd0 <HAL_RCC_OscConfig+0x290>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f003 030c 	and.w	r3, r3, #12
 8002d24:	2b08      	cmp	r3, #8
 8002d26:	d11c      	bne.n	8002d62 <HAL_RCC_OscConfig+0x222>
 8002d28:	4b29      	ldr	r3, [pc, #164]	@ (8002dd0 <HAL_RCC_OscConfig+0x290>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d116      	bne.n	8002d62 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d34:	4b26      	ldr	r3, [pc, #152]	@ (8002dd0 <HAL_RCC_OscConfig+0x290>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d005      	beq.n	8002d4c <HAL_RCC_OscConfig+0x20c>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d001      	beq.n	8002d4c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e25d      	b.n	8003208 <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d4c:	4b20      	ldr	r3, [pc, #128]	@ (8002dd0 <HAL_RCC_OscConfig+0x290>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	695b      	ldr	r3, [r3, #20]
 8002d58:	00db      	lsls	r3, r3, #3
 8002d5a:	491d      	ldr	r1, [pc, #116]	@ (8002dd0 <HAL_RCC_OscConfig+0x290>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d60:	e040      	b.n	8002de4 <HAL_RCC_OscConfig+0x2a4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d020      	beq.n	8002dac <HAL_RCC_OscConfig+0x26c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d6a:	4b1a      	ldr	r3, [pc, #104]	@ (8002dd4 <HAL_RCC_OscConfig+0x294>)
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d70:	f7fe fae0 	bl	8001334 <HAL_GetTick>
 8002d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d76:	e008      	b.n	8002d8a <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d78:	f7fe fadc 	bl	8001334 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e23e      	b.n	8003208 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d8a:	4b11      	ldr	r3, [pc, #68]	@ (8002dd0 <HAL_RCC_OscConfig+0x290>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d0f0      	beq.n	8002d78 <HAL_RCC_OscConfig+0x238>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d96:	4b0e      	ldr	r3, [pc, #56]	@ (8002dd0 <HAL_RCC_OscConfig+0x290>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	490a      	ldr	r1, [pc, #40]	@ (8002dd0 <HAL_RCC_OscConfig+0x290>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	600b      	str	r3, [r1, #0]
 8002daa:	e01b      	b.n	8002de4 <HAL_RCC_OscConfig+0x2a4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dac:	4b09      	ldr	r3, [pc, #36]	@ (8002dd4 <HAL_RCC_OscConfig+0x294>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db2:	f7fe fabf 	bl	8001334 <HAL_GetTick>
 8002db6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002db8:	e00e      	b.n	8002dd8 <HAL_RCC_OscConfig+0x298>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dba:	f7fe fabb 	bl	8001334 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d907      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x298>
          {
            return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e21d      	b.n	8003208 <HAL_RCC_OscConfig+0x6c8>
 8002dcc:	08004cd0 	.word	0x08004cd0
 8002dd0:	40021000 	.word	0x40021000
 8002dd4:	42420000 	.word	0x42420000
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dd8:	4b7d      	ldr	r3, [pc, #500]	@ (8002fd0 <HAL_RCC_OscConfig+0x490>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d1ea      	bne.n	8002dba <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0308 	and.w	r3, r3, #8
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d040      	beq.n	8002e72 <HAL_RCC_OscConfig+0x332>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d008      	beq.n	8002e0a <HAL_RCC_OscConfig+0x2ca>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d004      	beq.n	8002e0a <HAL_RCC_OscConfig+0x2ca>
 8002e00:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8002e04:	4873      	ldr	r0, [pc, #460]	@ (8002fd4 <HAL_RCC_OscConfig+0x494>)
 8002e06:	f7fd ff53 	bl	8000cb0 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d019      	beq.n	8002e46 <HAL_RCC_OscConfig+0x306>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e12:	4b71      	ldr	r3, [pc, #452]	@ (8002fd8 <HAL_RCC_OscConfig+0x498>)
 8002e14:	2201      	movs	r2, #1
 8002e16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e18:	f7fe fa8c 	bl	8001334 <HAL_GetTick>
 8002e1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e1e:	e008      	b.n	8002e32 <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e20:	f7fe fa88 	bl	8001334 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_OscConfig+0x2f2>
        {
          return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e1ea      	b.n	8003208 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e32:	4b67      	ldr	r3, [pc, #412]	@ (8002fd0 <HAL_RCC_OscConfig+0x490>)
 8002e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d0f0      	beq.n	8002e20 <HAL_RCC_OscConfig+0x2e0>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e3e:	2001      	movs	r0, #1
 8002e40:	f000 fbd0 	bl	80035e4 <RCC_Delay>
 8002e44:	e015      	b.n	8002e72 <HAL_RCC_OscConfig+0x332>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e46:	4b64      	ldr	r3, [pc, #400]	@ (8002fd8 <HAL_RCC_OscConfig+0x498>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e4c:	f7fe fa72 	bl	8001334 <HAL_GetTick>
 8002e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e52:	e008      	b.n	8002e66 <HAL_RCC_OscConfig+0x326>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e54:	f7fe fa6e 	bl	8001334 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e1d0      	b.n	8003208 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e66:	4b5a      	ldr	r3, [pc, #360]	@ (8002fd0 <HAL_RCC_OscConfig+0x490>)
 8002e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1f0      	bne.n	8002e54 <HAL_RCC_OscConfig+0x314>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0304 	and.w	r3, r3, #4
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f000 80bf 	beq.w	8002ffe <HAL_RCC_OscConfig+0x4be>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e80:	2300      	movs	r3, #0
 8002e82:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00c      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x366>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d008      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x366>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	2b05      	cmp	r3, #5
 8002e9a:	d004      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x366>
 8002e9c:	f240 210f 	movw	r1, #527	@ 0x20f
 8002ea0:	484c      	ldr	r0, [pc, #304]	@ (8002fd4 <HAL_RCC_OscConfig+0x494>)
 8002ea2:	f7fd ff05 	bl	8000cb0 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ea6:	4b4a      	ldr	r3, [pc, #296]	@ (8002fd0 <HAL_RCC_OscConfig+0x490>)
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d10d      	bne.n	8002ece <HAL_RCC_OscConfig+0x38e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eb2:	4b47      	ldr	r3, [pc, #284]	@ (8002fd0 <HAL_RCC_OscConfig+0x490>)
 8002eb4:	69db      	ldr	r3, [r3, #28]
 8002eb6:	4a46      	ldr	r2, [pc, #280]	@ (8002fd0 <HAL_RCC_OscConfig+0x490>)
 8002eb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ebc:	61d3      	str	r3, [r2, #28]
 8002ebe:	4b44      	ldr	r3, [pc, #272]	@ (8002fd0 <HAL_RCC_OscConfig+0x490>)
 8002ec0:	69db      	ldr	r3, [r3, #28]
 8002ec2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ec6:	60bb      	str	r3, [r7, #8]
 8002ec8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ece:	4b43      	ldr	r3, [pc, #268]	@ (8002fdc <HAL_RCC_OscConfig+0x49c>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d118      	bne.n	8002f0c <HAL_RCC_OscConfig+0x3cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eda:	4b40      	ldr	r3, [pc, #256]	@ (8002fdc <HAL_RCC_OscConfig+0x49c>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a3f      	ldr	r2, [pc, #252]	@ (8002fdc <HAL_RCC_OscConfig+0x49c>)
 8002ee0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ee4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ee6:	f7fe fa25 	bl	8001334 <HAL_GetTick>
 8002eea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eec:	e008      	b.n	8002f00 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eee:	f7fe fa21 	bl	8001334 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b64      	cmp	r3, #100	@ 0x64
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e183      	b.n	8003208 <HAL_RCC_OscConfig+0x6c8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f00:	4b36      	ldr	r3, [pc, #216]	@ (8002fdc <HAL_RCC_OscConfig+0x49c>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d0f0      	beq.n	8002eee <HAL_RCC_OscConfig+0x3ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d106      	bne.n	8002f22 <HAL_RCC_OscConfig+0x3e2>
 8002f14:	4b2e      	ldr	r3, [pc, #184]	@ (8002fd0 <HAL_RCC_OscConfig+0x490>)
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	4a2d      	ldr	r2, [pc, #180]	@ (8002fd0 <HAL_RCC_OscConfig+0x490>)
 8002f1a:	f043 0301 	orr.w	r3, r3, #1
 8002f1e:	6213      	str	r3, [r2, #32]
 8002f20:	e02d      	b.n	8002f7e <HAL_RCC_OscConfig+0x43e>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10c      	bne.n	8002f44 <HAL_RCC_OscConfig+0x404>
 8002f2a:	4b29      	ldr	r3, [pc, #164]	@ (8002fd0 <HAL_RCC_OscConfig+0x490>)
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	4a28      	ldr	r2, [pc, #160]	@ (8002fd0 <HAL_RCC_OscConfig+0x490>)
 8002f30:	f023 0301 	bic.w	r3, r3, #1
 8002f34:	6213      	str	r3, [r2, #32]
 8002f36:	4b26      	ldr	r3, [pc, #152]	@ (8002fd0 <HAL_RCC_OscConfig+0x490>)
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	4a25      	ldr	r2, [pc, #148]	@ (8002fd0 <HAL_RCC_OscConfig+0x490>)
 8002f3c:	f023 0304 	bic.w	r3, r3, #4
 8002f40:	6213      	str	r3, [r2, #32]
 8002f42:	e01c      	b.n	8002f7e <HAL_RCC_OscConfig+0x43e>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	2b05      	cmp	r3, #5
 8002f4a:	d10c      	bne.n	8002f66 <HAL_RCC_OscConfig+0x426>
 8002f4c:	4b20      	ldr	r3, [pc, #128]	@ (8002fd0 <HAL_RCC_OscConfig+0x490>)
 8002f4e:	6a1b      	ldr	r3, [r3, #32]
 8002f50:	4a1f      	ldr	r2, [pc, #124]	@ (8002fd0 <HAL_RCC_OscConfig+0x490>)
 8002f52:	f043 0304 	orr.w	r3, r3, #4
 8002f56:	6213      	str	r3, [r2, #32]
 8002f58:	4b1d      	ldr	r3, [pc, #116]	@ (8002fd0 <HAL_RCC_OscConfig+0x490>)
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	4a1c      	ldr	r2, [pc, #112]	@ (8002fd0 <HAL_RCC_OscConfig+0x490>)
 8002f5e:	f043 0301 	orr.w	r3, r3, #1
 8002f62:	6213      	str	r3, [r2, #32]
 8002f64:	e00b      	b.n	8002f7e <HAL_RCC_OscConfig+0x43e>
 8002f66:	4b1a      	ldr	r3, [pc, #104]	@ (8002fd0 <HAL_RCC_OscConfig+0x490>)
 8002f68:	6a1b      	ldr	r3, [r3, #32]
 8002f6a:	4a19      	ldr	r2, [pc, #100]	@ (8002fd0 <HAL_RCC_OscConfig+0x490>)
 8002f6c:	f023 0301 	bic.w	r3, r3, #1
 8002f70:	6213      	str	r3, [r2, #32]
 8002f72:	4b17      	ldr	r3, [pc, #92]	@ (8002fd0 <HAL_RCC_OscConfig+0x490>)
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	4a16      	ldr	r2, [pc, #88]	@ (8002fd0 <HAL_RCC_OscConfig+0x490>)
 8002f78:	f023 0304 	bic.w	r3, r3, #4
 8002f7c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d015      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x472>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f86:	f7fe f9d5 	bl	8001334 <HAL_GetTick>
 8002f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f8c:	e00a      	b.n	8002fa4 <HAL_RCC_OscConfig+0x464>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f8e:	f7fe f9d1 	bl	8001334 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d901      	bls.n	8002fa4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e131      	b.n	8003208 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fa4:	4b0a      	ldr	r3, [pc, #40]	@ (8002fd0 <HAL_RCC_OscConfig+0x490>)
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	f003 0302 	and.w	r3, r3, #2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d0ee      	beq.n	8002f8e <HAL_RCC_OscConfig+0x44e>
 8002fb0:	e01c      	b.n	8002fec <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fb2:	f7fe f9bf 	bl	8001334 <HAL_GetTick>
 8002fb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fb8:	e012      	b.n	8002fe0 <HAL_RCC_OscConfig+0x4a0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fba:	f7fe f9bb 	bl	8001334 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d909      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e11b      	b.n	8003208 <HAL_RCC_OscConfig+0x6c8>
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	08004cd0 	.word	0x08004cd0
 8002fd8:	42420480 	.word	0x42420480
 8002fdc:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fe0:	4b8b      	ldr	r3, [pc, #556]	@ (8003210 <HAL_RCC_OscConfig+0x6d0>)
 8002fe2:	6a1b      	ldr	r3, [r3, #32]
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1e6      	bne.n	8002fba <HAL_RCC_OscConfig+0x47a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002fec:	7dfb      	ldrb	r3, [r7, #23]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d105      	bne.n	8002ffe <HAL_RCC_OscConfig+0x4be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ff2:	4b87      	ldr	r3, [pc, #540]	@ (8003210 <HAL_RCC_OscConfig+0x6d0>)
 8002ff4:	69db      	ldr	r3, [r3, #28]
 8002ff6:	4a86      	ldr	r2, [pc, #536]	@ (8003210 <HAL_RCC_OscConfig+0x6d0>)
 8002ff8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ffc:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	69db      	ldr	r3, [r3, #28]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00c      	beq.n	8003020 <HAL_RCC_OscConfig+0x4e0>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	69db      	ldr	r3, [r3, #28]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d008      	beq.n	8003020 <HAL_RCC_OscConfig+0x4e0>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	69db      	ldr	r3, [r3, #28]
 8003012:	2b02      	cmp	r3, #2
 8003014:	d004      	beq.n	8003020 <HAL_RCC_OscConfig+0x4e0>
 8003016:	f240 21ad 	movw	r1, #685	@ 0x2ad
 800301a:	487e      	ldr	r0, [pc, #504]	@ (8003214 <HAL_RCC_OscConfig+0x6d4>)
 800301c:	f7fd fe48 	bl	8000cb0 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	69db      	ldr	r3, [r3, #28]
 8003024:	2b00      	cmp	r3, #0
 8003026:	f000 80ee 	beq.w	8003206 <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800302a:	4b79      	ldr	r3, [pc, #484]	@ (8003210 <HAL_RCC_OscConfig+0x6d0>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f003 030c 	and.w	r3, r3, #12
 8003032:	2b08      	cmp	r3, #8
 8003034:	f000 80ce 	beq.w	80031d4 <HAL_RCC_OscConfig+0x694>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	69db      	ldr	r3, [r3, #28]
 800303c:	2b02      	cmp	r3, #2
 800303e:	f040 80b2 	bne.w	80031a6 <HAL_RCC_OscConfig+0x666>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a1b      	ldr	r3, [r3, #32]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d009      	beq.n	800305e <HAL_RCC_OscConfig+0x51e>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a1b      	ldr	r3, [r3, #32]
 800304e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003052:	d004      	beq.n	800305e <HAL_RCC_OscConfig+0x51e>
 8003054:	f240 21b6 	movw	r1, #694	@ 0x2b6
 8003058:	486e      	ldr	r0, [pc, #440]	@ (8003214 <HAL_RCC_OscConfig+0x6d4>)
 800305a:	f7fd fe29 	bl	8000cb0 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003062:	2b00      	cmp	r3, #0
 8003064:	d04a      	beq.n	80030fc <HAL_RCC_OscConfig+0x5bc>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800306a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800306e:	d045      	beq.n	80030fc <HAL_RCC_OscConfig+0x5bc>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003074:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003078:	d040      	beq.n	80030fc <HAL_RCC_OscConfig+0x5bc>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800307e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003082:	d03b      	beq.n	80030fc <HAL_RCC_OscConfig+0x5bc>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003088:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800308c:	d036      	beq.n	80030fc <HAL_RCC_OscConfig+0x5bc>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003092:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003096:	d031      	beq.n	80030fc <HAL_RCC_OscConfig+0x5bc>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800309c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80030a0:	d02c      	beq.n	80030fc <HAL_RCC_OscConfig+0x5bc>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a6:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80030aa:	d027      	beq.n	80030fc <HAL_RCC_OscConfig+0x5bc>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80030b4:	d022      	beq.n	80030fc <HAL_RCC_OscConfig+0x5bc>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ba:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80030be:	d01d      	beq.n	80030fc <HAL_RCC_OscConfig+0x5bc>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c4:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80030c8:	d018      	beq.n	80030fc <HAL_RCC_OscConfig+0x5bc>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ce:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80030d2:	d013      	beq.n	80030fc <HAL_RCC_OscConfig+0x5bc>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80030dc:	d00e      	beq.n	80030fc <HAL_RCC_OscConfig+0x5bc>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e2:	f5b3 1f50 	cmp.w	r3, #3407872	@ 0x340000
 80030e6:	d009      	beq.n	80030fc <HAL_RCC_OscConfig+0x5bc>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ec:	f5b3 1f60 	cmp.w	r3, #3670016	@ 0x380000
 80030f0:	d004      	beq.n	80030fc <HAL_RCC_OscConfig+0x5bc>
 80030f2:	f240 21b7 	movw	r1, #695	@ 0x2b7
 80030f6:	4847      	ldr	r0, [pc, #284]	@ (8003214 <HAL_RCC_OscConfig+0x6d4>)
 80030f8:	f7fd fdda 	bl	8000cb0 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030fc:	4b46      	ldr	r3, [pc, #280]	@ (8003218 <HAL_RCC_OscConfig+0x6d8>)
 80030fe:	2200      	movs	r2, #0
 8003100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003102:	f7fe f917 	bl	8001334 <HAL_GetTick>
 8003106:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003108:	e008      	b.n	800311c <HAL_RCC_OscConfig+0x5dc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800310a:	f7fe f913 	bl	8001334 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d901      	bls.n	800311c <HAL_RCC_OscConfig+0x5dc>
          {
            return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e075      	b.n	8003208 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800311c:	4b3c      	ldr	r3, [pc, #240]	@ (8003210 <HAL_RCC_OscConfig+0x6d0>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1f0      	bne.n	800310a <HAL_RCC_OscConfig+0x5ca>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a1b      	ldr	r3, [r3, #32]
 800312c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003130:	d116      	bne.n	8003160 <HAL_RCC_OscConfig+0x620>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d009      	beq.n	800314e <HAL_RCC_OscConfig+0x60e>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003142:	d004      	beq.n	800314e <HAL_RCC_OscConfig+0x60e>
 8003144:	f240 21cd 	movw	r1, #717	@ 0x2cd
 8003148:	4832      	ldr	r0, [pc, #200]	@ (8003214 <HAL_RCC_OscConfig+0x6d4>)
 800314a:	f7fd fdb1 	bl	8000cb0 <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800314e:	4b30      	ldr	r3, [pc, #192]	@ (8003210 <HAL_RCC_OscConfig+0x6d0>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	492d      	ldr	r1, [pc, #180]	@ (8003210 <HAL_RCC_OscConfig+0x6d0>)
 800315c:	4313      	orrs	r3, r2
 800315e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003160:	4b2b      	ldr	r3, [pc, #172]	@ (8003210 <HAL_RCC_OscConfig+0x6d0>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a19      	ldr	r1, [r3, #32]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003170:	430b      	orrs	r3, r1
 8003172:	4927      	ldr	r1, [pc, #156]	@ (8003210 <HAL_RCC_OscConfig+0x6d0>)
 8003174:	4313      	orrs	r3, r2
 8003176:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003178:	4b27      	ldr	r3, [pc, #156]	@ (8003218 <HAL_RCC_OscConfig+0x6d8>)
 800317a:	2201      	movs	r2, #1
 800317c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800317e:	f7fe f8d9 	bl	8001334 <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003184:	e008      	b.n	8003198 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003186:	f7fe f8d5 	bl	8001334 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e037      	b.n	8003208 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003198:	4b1d      	ldr	r3, [pc, #116]	@ (8003210 <HAL_RCC_OscConfig+0x6d0>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d0f0      	beq.n	8003186 <HAL_RCC_OscConfig+0x646>
 80031a4:	e02f      	b.n	8003206 <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031a6:	4b1c      	ldr	r3, [pc, #112]	@ (8003218 <HAL_RCC_OscConfig+0x6d8>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ac:	f7fe f8c2 	bl	8001334 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031b4:	f7fe f8be 	bl	8001334 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e020      	b.n	8003208 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031c6:	4b12      	ldr	r3, [pc, #72]	@ (8003210 <HAL_RCC_OscConfig+0x6d0>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1f0      	bne.n	80031b4 <HAL_RCC_OscConfig+0x674>
 80031d2:	e018      	b.n	8003206 <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	69db      	ldr	r3, [r3, #28]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d101      	bne.n	80031e0 <HAL_RCC_OscConfig+0x6a0>
      {
        return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e013      	b.n	8003208 <HAL_RCC_OscConfig+0x6c8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003210 <HAL_RCC_OscConfig+0x6d0>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a1b      	ldr	r3, [r3, #32]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d106      	bne.n	8003202 <HAL_RCC_OscConfig+0x6c2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031fe:	429a      	cmp	r2, r3
 8003200:	d001      	beq.n	8003206 <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e000      	b.n	8003208 <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }

  return HAL_OK;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	3718      	adds	r7, #24
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	40021000 	.word	0x40021000
 8003214:	08004cd0 	.word	0x08004cd0
 8003218:	42420060 	.word	0x42420060

0800321c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d101      	bne.n	8003230 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e176      	b.n	800351e <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0301 	and.w	r3, r3, #1
 8003238:	2b00      	cmp	r3, #0
 800323a:	d116      	bne.n	800326a <HAL_RCC_ClockConfig+0x4e>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0302 	and.w	r3, r3, #2
 8003244:	2b00      	cmp	r3, #0
 8003246:	d110      	bne.n	800326a <HAL_RCC_ClockConfig+0x4e>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0304 	and.w	r3, r3, #4
 8003250:	2b00      	cmp	r3, #0
 8003252:	d10a      	bne.n	800326a <HAL_RCC_ClockConfig+0x4e>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0308 	and.w	r3, r3, #8
 800325c:	2b00      	cmp	r3, #0
 800325e:	d104      	bne.n	800326a <HAL_RCC_ClockConfig+0x4e>
 8003260:	f240 3136 	movw	r1, #822	@ 0x336
 8003264:	4874      	ldr	r0, [pc, #464]	@ (8003438 <HAL_RCC_ClockConfig+0x21c>)
 8003266:	f7fd fd23 	bl	8000cb0 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00a      	beq.n	8003286 <HAL_RCC_ClockConfig+0x6a>
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d007      	beq.n	8003286 <HAL_RCC_ClockConfig+0x6a>
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	2b02      	cmp	r3, #2
 800327a:	d004      	beq.n	8003286 <HAL_RCC_ClockConfig+0x6a>
 800327c:	f240 3137 	movw	r1, #823	@ 0x337
 8003280:	486d      	ldr	r0, [pc, #436]	@ (8003438 <HAL_RCC_ClockConfig+0x21c>)
 8003282:	f7fd fd15 	bl	8000cb0 <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003286:	4b6d      	ldr	r3, [pc, #436]	@ (800343c <HAL_RCC_ClockConfig+0x220>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0307 	and.w	r3, r3, #7
 800328e:	683a      	ldr	r2, [r7, #0]
 8003290:	429a      	cmp	r2, r3
 8003292:	d910      	bls.n	80032b6 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003294:	4b69      	ldr	r3, [pc, #420]	@ (800343c <HAL_RCC_ClockConfig+0x220>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f023 0207 	bic.w	r2, r3, #7
 800329c:	4967      	ldr	r1, [pc, #412]	@ (800343c <HAL_RCC_ClockConfig+0x220>)
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032a4:	4b65      	ldr	r3, [pc, #404]	@ (800343c <HAL_RCC_ClockConfig+0x220>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0307 	and.w	r3, r3, #7
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d001      	beq.n	80032b6 <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e133      	b.n	800351e <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d049      	beq.n	8003356 <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0304 	and.w	r3, r3, #4
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d005      	beq.n	80032da <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032ce:	4b5c      	ldr	r3, [pc, #368]	@ (8003440 <HAL_RCC_ClockConfig+0x224>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	4a5b      	ldr	r2, [pc, #364]	@ (8003440 <HAL_RCC_ClockConfig+0x224>)
 80032d4:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80032d8:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0308 	and.w	r3, r3, #8
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d005      	beq.n	80032f2 <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032e6:	4b56      	ldr	r3, [pc, #344]	@ (8003440 <HAL_RCC_ClockConfig+0x224>)
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	4a55      	ldr	r2, [pc, #340]	@ (8003440 <HAL_RCC_ClockConfig+0x224>)
 80032ec:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80032f0:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d024      	beq.n	8003344 <HAL_RCC_ClockConfig+0x128>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	2b80      	cmp	r3, #128	@ 0x80
 8003300:	d020      	beq.n	8003344 <HAL_RCC_ClockConfig+0x128>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	2b90      	cmp	r3, #144	@ 0x90
 8003308:	d01c      	beq.n	8003344 <HAL_RCC_ClockConfig+0x128>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003310:	d018      	beq.n	8003344 <HAL_RCC_ClockConfig+0x128>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	2bb0      	cmp	r3, #176	@ 0xb0
 8003318:	d014      	beq.n	8003344 <HAL_RCC_ClockConfig+0x128>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003320:	d010      	beq.n	8003344 <HAL_RCC_ClockConfig+0x128>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	2bd0      	cmp	r3, #208	@ 0xd0
 8003328:	d00c      	beq.n	8003344 <HAL_RCC_ClockConfig+0x128>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	2be0      	cmp	r3, #224	@ 0xe0
 8003330:	d008      	beq.n	8003344 <HAL_RCC_ClockConfig+0x128>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	2bf0      	cmp	r3, #240	@ 0xf0
 8003338:	d004      	beq.n	8003344 <HAL_RCC_ClockConfig+0x128>
 800333a:	f240 315d 	movw	r1, #861	@ 0x35d
 800333e:	483e      	ldr	r0, [pc, #248]	@ (8003438 <HAL_RCC_ClockConfig+0x21c>)
 8003340:	f7fd fcb6 	bl	8000cb0 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003344:	4b3e      	ldr	r3, [pc, #248]	@ (8003440 <HAL_RCC_ClockConfig+0x224>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	493b      	ldr	r1, [pc, #236]	@ (8003440 <HAL_RCC_ClockConfig+0x224>)
 8003352:	4313      	orrs	r3, r2
 8003354:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	2b00      	cmp	r3, #0
 8003360:	d051      	beq.n	8003406 <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00c      	beq.n	8003384 <HAL_RCC_ClockConfig+0x168>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d008      	beq.n	8003384 <HAL_RCC_ClockConfig+0x168>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	2b02      	cmp	r3, #2
 8003378:	d004      	beq.n	8003384 <HAL_RCC_ClockConfig+0x168>
 800337a:	f44f 7159 	mov.w	r1, #868	@ 0x364
 800337e:	482e      	ldr	r0, [pc, #184]	@ (8003438 <HAL_RCC_ClockConfig+0x21c>)
 8003380:	f7fd fc96 	bl	8000cb0 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	2b01      	cmp	r3, #1
 800338a:	d107      	bne.n	800339c <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800338c:	4b2c      	ldr	r3, [pc, #176]	@ (8003440 <HAL_RCC_ClockConfig+0x224>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d115      	bne.n	80033c4 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e0c0      	b.n	800351e <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d107      	bne.n	80033b4 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033a4:	4b26      	ldr	r3, [pc, #152]	@ (8003440 <HAL_RCC_ClockConfig+0x224>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d109      	bne.n	80033c4 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e0b4      	b.n	800351e <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033b4:	4b22      	ldr	r3, [pc, #136]	@ (8003440 <HAL_RCC_ClockConfig+0x224>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0302 	and.w	r3, r3, #2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d101      	bne.n	80033c4 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e0ac      	b.n	800351e <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033c4:	4b1e      	ldr	r3, [pc, #120]	@ (8003440 <HAL_RCC_ClockConfig+0x224>)
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f023 0203 	bic.w	r2, r3, #3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	491b      	ldr	r1, [pc, #108]	@ (8003440 <HAL_RCC_ClockConfig+0x224>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033d6:	f7fd ffad 	bl	8001334 <HAL_GetTick>
 80033da:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033dc:	e00a      	b.n	80033f4 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033de:	f7fd ffa9 	bl	8001334 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d901      	bls.n	80033f4 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e094      	b.n	800351e <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033f4:	4b12      	ldr	r3, [pc, #72]	@ (8003440 <HAL_RCC_ClockConfig+0x224>)
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f003 020c 	and.w	r2, r3, #12
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	429a      	cmp	r2, r3
 8003404:	d1eb      	bne.n	80033de <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003406:	4b0d      	ldr	r3, [pc, #52]	@ (800343c <HAL_RCC_ClockConfig+0x220>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0307 	and.w	r3, r3, #7
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	429a      	cmp	r2, r3
 8003412:	d217      	bcs.n	8003444 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003414:	4b09      	ldr	r3, [pc, #36]	@ (800343c <HAL_RCC_ClockConfig+0x220>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f023 0207 	bic.w	r2, r3, #7
 800341c:	4907      	ldr	r1, [pc, #28]	@ (800343c <HAL_RCC_ClockConfig+0x220>)
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	4313      	orrs	r3, r2
 8003422:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003424:	4b05      	ldr	r3, [pc, #20]	@ (800343c <HAL_RCC_ClockConfig+0x220>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0307 	and.w	r3, r3, #7
 800342c:	683a      	ldr	r2, [r7, #0]
 800342e:	429a      	cmp	r2, r3
 8003430:	d008      	beq.n	8003444 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e073      	b.n	800351e <HAL_RCC_ClockConfig+0x302>
 8003436:	bf00      	nop
 8003438:	08004cd0 	.word	0x08004cd0
 800343c:	40022000 	.word	0x40022000
 8003440:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0304 	and.w	r3, r3, #4
 800344c:	2b00      	cmp	r3, #0
 800344e:	d025      	beq.n	800349c <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d018      	beq.n	800348a <HAL_RCC_ClockConfig+0x26e>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003460:	d013      	beq.n	800348a <HAL_RCC_ClockConfig+0x26e>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800346a:	d00e      	beq.n	800348a <HAL_RCC_ClockConfig+0x26e>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003474:	d009      	beq.n	800348a <HAL_RCC_ClockConfig+0x26e>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800347e:	d004      	beq.n	800348a <HAL_RCC_ClockConfig+0x26e>
 8003480:	f240 31a2 	movw	r1, #930	@ 0x3a2
 8003484:	4828      	ldr	r0, [pc, #160]	@ (8003528 <HAL_RCC_ClockConfig+0x30c>)
 8003486:	f7fd fc13 	bl	8000cb0 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800348a:	4b28      	ldr	r3, [pc, #160]	@ (800352c <HAL_RCC_ClockConfig+0x310>)
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	4925      	ldr	r1, [pc, #148]	@ (800352c <HAL_RCC_ClockConfig+0x310>)
 8003498:	4313      	orrs	r3, r2
 800349a:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0308 	and.w	r3, r3, #8
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d026      	beq.n	80034f6 <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	691b      	ldr	r3, [r3, #16]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d018      	beq.n	80034e2 <HAL_RCC_ClockConfig+0x2c6>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	691b      	ldr	r3, [r3, #16]
 80034b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034b8:	d013      	beq.n	80034e2 <HAL_RCC_ClockConfig+0x2c6>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80034c2:	d00e      	beq.n	80034e2 <HAL_RCC_ClockConfig+0x2c6>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	691b      	ldr	r3, [r3, #16]
 80034c8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80034cc:	d009      	beq.n	80034e2 <HAL_RCC_ClockConfig+0x2c6>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80034d6:	d004      	beq.n	80034e2 <HAL_RCC_ClockConfig+0x2c6>
 80034d8:	f240 31a9 	movw	r1, #937	@ 0x3a9
 80034dc:	4812      	ldr	r0, [pc, #72]	@ (8003528 <HAL_RCC_ClockConfig+0x30c>)
 80034de:	f7fd fbe7 	bl	8000cb0 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80034e2:	4b12      	ldr	r3, [pc, #72]	@ (800352c <HAL_RCC_ClockConfig+0x310>)
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	00db      	lsls	r3, r3, #3
 80034f0:	490e      	ldr	r1, [pc, #56]	@ (800352c <HAL_RCC_ClockConfig+0x310>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034f6:	f000 f821 	bl	800353c <HAL_RCC_GetSysClockFreq>
 80034fa:	4602      	mov	r2, r0
 80034fc:	4b0b      	ldr	r3, [pc, #44]	@ (800352c <HAL_RCC_ClockConfig+0x310>)
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	091b      	lsrs	r3, r3, #4
 8003502:	f003 030f 	and.w	r3, r3, #15
 8003506:	490a      	ldr	r1, [pc, #40]	@ (8003530 <HAL_RCC_ClockConfig+0x314>)
 8003508:	5ccb      	ldrb	r3, [r1, r3]
 800350a:	fa22 f303 	lsr.w	r3, r2, r3
 800350e:	4a09      	ldr	r2, [pc, #36]	@ (8003534 <HAL_RCC_ClockConfig+0x318>)
 8003510:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003512:	4b09      	ldr	r3, [pc, #36]	@ (8003538 <HAL_RCC_ClockConfig+0x31c>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4618      	mov	r0, r3
 8003518:	f7fd feca 	bl	80012b0 <HAL_InitTick>

  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3710      	adds	r7, #16
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	08004cd0 	.word	0x08004cd0
 800352c:	40021000 	.word	0x40021000
 8003530:	08004db8 	.word	0x08004db8
 8003534:	20000000 	.word	0x20000000
 8003538:	20000004 	.word	0x20000004

0800353c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800353c:	b480      	push	{r7}
 800353e:	b087      	sub	sp, #28
 8003540:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003542:	2300      	movs	r3, #0
 8003544:	60fb      	str	r3, [r7, #12]
 8003546:	2300      	movs	r3, #0
 8003548:	60bb      	str	r3, [r7, #8]
 800354a:	2300      	movs	r3, #0
 800354c:	617b      	str	r3, [r7, #20]
 800354e:	2300      	movs	r3, #0
 8003550:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003552:	2300      	movs	r3, #0
 8003554:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003556:	4b1e      	ldr	r3, [pc, #120]	@ (80035d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f003 030c 	and.w	r3, r3, #12
 8003562:	2b04      	cmp	r3, #4
 8003564:	d002      	beq.n	800356c <HAL_RCC_GetSysClockFreq+0x30>
 8003566:	2b08      	cmp	r3, #8
 8003568:	d003      	beq.n	8003572 <HAL_RCC_GetSysClockFreq+0x36>
 800356a:	e027      	b.n	80035bc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800356c:	4b19      	ldr	r3, [pc, #100]	@ (80035d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800356e:	613b      	str	r3, [r7, #16]
      break;
 8003570:	e027      	b.n	80035c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	0c9b      	lsrs	r3, r3, #18
 8003576:	f003 030f 	and.w	r3, r3, #15
 800357a:	4a17      	ldr	r2, [pc, #92]	@ (80035d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800357c:	5cd3      	ldrb	r3, [r2, r3]
 800357e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d010      	beq.n	80035ac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800358a:	4b11      	ldr	r3, [pc, #68]	@ (80035d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	0c5b      	lsrs	r3, r3, #17
 8003590:	f003 0301 	and.w	r3, r3, #1
 8003594:	4a11      	ldr	r2, [pc, #68]	@ (80035dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8003596:	5cd3      	ldrb	r3, [r2, r3]
 8003598:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a0d      	ldr	r2, [pc, #52]	@ (80035d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800359e:	fb03 f202 	mul.w	r2, r3, r2
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a8:	617b      	str	r3, [r7, #20]
 80035aa:	e004      	b.n	80035b6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a0c      	ldr	r2, [pc, #48]	@ (80035e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80035b0:	fb02 f303 	mul.w	r3, r2, r3
 80035b4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	613b      	str	r3, [r7, #16]
      break;
 80035ba:	e002      	b.n	80035c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035bc:	4b05      	ldr	r3, [pc, #20]	@ (80035d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80035be:	613b      	str	r3, [r7, #16]
      break;
 80035c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035c2:	693b      	ldr	r3, [r7, #16]
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	371c      	adds	r7, #28
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bc80      	pop	{r7}
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	40021000 	.word	0x40021000
 80035d4:	007a1200 	.word	0x007a1200
 80035d8:	08004dc8 	.word	0x08004dc8
 80035dc:	08004dd8 	.word	0x08004dd8
 80035e0:	003d0900 	.word	0x003d0900

080035e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80035ec:	4b0a      	ldr	r3, [pc, #40]	@ (8003618 <RCC_Delay+0x34>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a0a      	ldr	r2, [pc, #40]	@ (800361c <RCC_Delay+0x38>)
 80035f2:	fba2 2303 	umull	r2, r3, r2, r3
 80035f6:	0a5b      	lsrs	r3, r3, #9
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	fb02 f303 	mul.w	r3, r2, r3
 80035fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003600:	bf00      	nop
  }
  while (Delay --);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	1e5a      	subs	r2, r3, #1
 8003606:	60fa      	str	r2, [r7, #12]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d1f9      	bne.n	8003600 <RCC_Delay+0x1c>
}
 800360c:	bf00      	nop
 800360e:	bf00      	nop
 8003610:	3714      	adds	r7, #20
 8003612:	46bd      	mov	sp, r7
 8003614:	bc80      	pop	{r7}
 8003616:	4770      	bx	lr
 8003618:	20000000 	.word	0x20000000
 800361c:	10624dd3 	.word	0x10624dd3

08003620 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003628:	2300      	movs	r3, #0
 800362a:	613b      	str	r3, [r7, #16]
 800362c:	2300      	movs	r3, #0
 800362e:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0301 	and.w	r3, r3, #1
 8003638:	2b00      	cmp	r3, #0
 800363a:	d10f      	bne.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0302 	and.w	r3, r3, #2
 8003644:	2b00      	cmp	r3, #0
 8003646:	d109      	bne.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0310 	and.w	r3, r3, #16
 8003650:	2b00      	cmp	r3, #0
 8003652:	d103      	bne.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003654:	216a      	movs	r1, #106	@ 0x6a
 8003656:	4873      	ldr	r0, [pc, #460]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8003658:	f7fd fb2a 	bl	8000cb0 <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0301 	and.w	r3, r3, #1
 8003664:	2b00      	cmp	r3, #0
 8003666:	f000 8095 	beq.w	8003794 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    FlagStatus pwrclkchanged = RESET;
 800366a:	2300      	movs	r3, #0
 800366c:	75fb      	strb	r3, [r7, #23]

    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d012      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800367e:	d00d      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003688:	d008      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003692:	d003      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003694:	2172      	movs	r1, #114	@ 0x72
 8003696:	4863      	ldr	r0, [pc, #396]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8003698:	f7fd fb0a 	bl	8000cb0 <assert_failed>

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800369c:	4b62      	ldr	r3, [pc, #392]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800369e:	69db      	ldr	r3, [r3, #28]
 80036a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d10d      	bne.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036a8:	4b5f      	ldr	r3, [pc, #380]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80036aa:	69db      	ldr	r3, [r3, #28]
 80036ac:	4a5e      	ldr	r2, [pc, #376]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80036ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036b2:	61d3      	str	r3, [r2, #28]
 80036b4:	4b5c      	ldr	r3, [pc, #368]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80036b6:	69db      	ldr	r3, [r3, #28]
 80036b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036bc:	60bb      	str	r3, [r7, #8]
 80036be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036c0:	2301      	movs	r3, #1
 80036c2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036c4:	4b59      	ldr	r3, [pc, #356]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d118      	bne.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036d0:	4b56      	ldr	r3, [pc, #344]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a55      	ldr	r2, [pc, #340]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80036d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036dc:	f7fd fe2a 	bl	8001334 <HAL_GetTick>
 80036e0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036e2:	e008      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036e4:	f7fd fe26 	bl	8001334 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b64      	cmp	r3, #100	@ 0x64
 80036f0:	d901      	bls.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
        {
          return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e092      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036f6:	4b4d      	ldr	r3, [pc, #308]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d0f0      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003702:	4b49      	ldr	r3, [pc, #292]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003704:	6a1b      	ldr	r3, [r3, #32]
 8003706:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800370a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d02e      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	429a      	cmp	r2, r3
 800371e:	d027      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003720:	4b41      	ldr	r3, [pc, #260]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003722:	6a1b      	ldr	r3, [r3, #32]
 8003724:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003728:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800372a:	4b41      	ldr	r3, [pc, #260]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800372c:	2201      	movs	r2, #1
 800372e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003730:	4b3f      	ldr	r3, [pc, #252]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003732:	2200      	movs	r2, #0
 8003734:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003736:	4a3c      	ldr	r2, [pc, #240]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f003 0301 	and.w	r3, r3, #1
 8003742:	2b00      	cmp	r3, #0
 8003744:	d014      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003746:	f7fd fdf5 	bl	8001334 <HAL_GetTick>
 800374a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800374c:	e00a      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x144>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800374e:	f7fd fdf1 	bl	8001334 <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	f241 3288 	movw	r2, #5000	@ 0x1388
 800375c:	4293      	cmp	r3, r2
 800375e:	d901      	bls.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x144>
          {
            return HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	e05b      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003764:	4b30      	ldr	r3, [pc, #192]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003766:	6a1b      	ldr	r3, [r3, #32]
 8003768:	f003 0302 	and.w	r3, r3, #2
 800376c:	2b00      	cmp	r3, #0
 800376e:	d0ee      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003770:	4b2d      	ldr	r3, [pc, #180]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003772:	6a1b      	ldr	r3, [r3, #32]
 8003774:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	492a      	ldr	r1, [pc, #168]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800377e:	4313      	orrs	r3, r2
 8003780:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003782:	7dfb      	ldrb	r3, [r7, #23]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d105      	bne.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003788:	4b27      	ldr	r3, [pc, #156]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800378a:	69db      	ldr	r3, [r3, #28]
 800378c:	4a26      	ldr	r2, [pc, #152]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800378e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003792:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d01f      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d012      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037b0:	d00d      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037ba:	d008      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80037c4:	d003      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80037c6:	21b7      	movs	r1, #183	@ 0xb7
 80037c8:	4816      	ldr	r0, [pc, #88]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 80037ca:	f7fd fa71 	bl	8000cb0 <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037ce:	4b16      	ldr	r3, [pc, #88]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	4913      	ldr	r1, [pc, #76]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0310 	and.w	r3, r3, #16
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d016      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037f4:	d008      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d004      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80037fe:	f240 1113 	movw	r1, #275	@ 0x113
 8003802:	4808      	ldr	r0, [pc, #32]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8003804:	f7fd fa54 	bl	8000cb0 <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003808:	4b07      	ldr	r3, [pc, #28]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	4904      	ldr	r1, [pc, #16]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003816:	4313      	orrs	r3, r2
 8003818:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	3718      	adds	r7, #24
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	08004d08 	.word	0x08004d08
 8003828:	40021000 	.word	0x40021000
 800382c:	40007000 	.word	0x40007000
 8003830:	42420440 	.word	0x42420440

08003834 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d101      	bne.n	8003846 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e09c      	b.n	8003980 <HAL_TIM_PWM_Init+0x14c>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a4f      	ldr	r2, [pc, #316]	@ (8003988 <HAL_TIM_PWM_Init+0x154>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d00e      	beq.n	800386e <HAL_TIM_PWM_Init+0x3a>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003858:	d009      	beq.n	800386e <HAL_TIM_PWM_Init+0x3a>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a4b      	ldr	r2, [pc, #300]	@ (800398c <HAL_TIM_PWM_Init+0x158>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d004      	beq.n	800386e <HAL_TIM_PWM_Init+0x3a>
 8003864:	f240 512c 	movw	r1, #1324	@ 0x52c
 8003868:	4849      	ldr	r0, [pc, #292]	@ (8003990 <HAL_TIM_PWM_Init+0x15c>)
 800386a:	f7fd fa21 	bl	8000cb0 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d014      	beq.n	80038a0 <HAL_TIM_PWM_Init+0x6c>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	2b10      	cmp	r3, #16
 800387c:	d010      	beq.n	80038a0 <HAL_TIM_PWM_Init+0x6c>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	2b20      	cmp	r3, #32
 8003884:	d00c      	beq.n	80038a0 <HAL_TIM_PWM_Init+0x6c>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	2b40      	cmp	r3, #64	@ 0x40
 800388c:	d008      	beq.n	80038a0 <HAL_TIM_PWM_Init+0x6c>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	2b60      	cmp	r3, #96	@ 0x60
 8003894:	d004      	beq.n	80038a0 <HAL_TIM_PWM_Init+0x6c>
 8003896:	f240 512d 	movw	r1, #1325	@ 0x52d
 800389a:	483d      	ldr	r0, [pc, #244]	@ (8003990 <HAL_TIM_PWM_Init+0x15c>)
 800389c:	f7fd fa08 	bl	8000cb0 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00e      	beq.n	80038c6 <HAL_TIM_PWM_Init+0x92>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038b0:	d009      	beq.n	80038c6 <HAL_TIM_PWM_Init+0x92>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038ba:	d004      	beq.n	80038c6 <HAL_TIM_PWM_Init+0x92>
 80038bc:	f240 512e 	movw	r1, #1326	@ 0x52e
 80038c0:	4833      	ldr	r0, [pc, #204]	@ (8003990 <HAL_TIM_PWM_Init+0x15c>)
 80038c2:	f7fd f9f5 	bl	8000cb0 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d004      	beq.n	80038d8 <HAL_TIM_PWM_Init+0xa4>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038d6:	d304      	bcc.n	80038e2 <HAL_TIM_PWM_Init+0xae>
 80038d8:	f240 512f 	movw	r1, #1327	@ 0x52f
 80038dc:	482c      	ldr	r0, [pc, #176]	@ (8003990 <HAL_TIM_PWM_Init+0x15c>)
 80038de:	f7fd f9e7 	bl	8000cb0 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d008      	beq.n	80038fc <HAL_TIM_PWM_Init+0xc8>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	2b80      	cmp	r3, #128	@ 0x80
 80038f0:	d004      	beq.n	80038fc <HAL_TIM_PWM_Init+0xc8>
 80038f2:	f44f 61a6 	mov.w	r1, #1328	@ 0x530
 80038f6:	4826      	ldr	r0, [pc, #152]	@ (8003990 <HAL_TIM_PWM_Init+0x15c>)
 80038f8:	f7fd f9da 	bl	8000cb0 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003902:	b2db      	uxtb	r3, r3
 8003904:	2b00      	cmp	r3, #0
 8003906:	d106      	bne.n	8003916 <HAL_TIM_PWM_Init+0xe2>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f7fd fb7f 	bl	8001014 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2202      	movs	r2, #2
 800391a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	3304      	adds	r3, #4
 8003926:	4619      	mov	r1, r3
 8003928:	4610      	mov	r0, r2
 800392a:	f000 fc93 	bl	8004254 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2201      	movs	r2, #1
 800393a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2201      	movs	r2, #1
 800394a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2201      	movs	r2, #1
 8003952:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2201      	movs	r2, #1
 8003962:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2201      	movs	r2, #1
 800396a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2201      	movs	r2, #1
 8003972:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2201      	movs	r2, #1
 800397a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3708      	adds	r7, #8
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	40012c00 	.word	0x40012c00
 800398c:	40000400 	.word	0x40000400
 8003990:	08004d44 	.word	0x08004d44

08003994 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a64      	ldr	r2, [pc, #400]	@ (8003b34 <HAL_TIM_PWM_Start+0x1a0>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d10b      	bne.n	80039c0 <HAL_TIM_PWM_Start+0x2c>
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d02f      	beq.n	8003a0e <HAL_TIM_PWM_Start+0x7a>
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	2b04      	cmp	r3, #4
 80039b2:	d02c      	beq.n	8003a0e <HAL_TIM_PWM_Start+0x7a>
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	2b08      	cmp	r3, #8
 80039b8:	d029      	beq.n	8003a0e <HAL_TIM_PWM_Start+0x7a>
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	2b0c      	cmp	r3, #12
 80039be:	d026      	beq.n	8003a0e <HAL_TIM_PWM_Start+0x7a>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039c8:	d10b      	bne.n	80039e2 <HAL_TIM_PWM_Start+0x4e>
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d01e      	beq.n	8003a0e <HAL_TIM_PWM_Start+0x7a>
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	2b04      	cmp	r3, #4
 80039d4:	d01b      	beq.n	8003a0e <HAL_TIM_PWM_Start+0x7a>
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	2b08      	cmp	r3, #8
 80039da:	d018      	beq.n	8003a0e <HAL_TIM_PWM_Start+0x7a>
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	2b0c      	cmp	r3, #12
 80039e0:	d015      	beq.n	8003a0e <HAL_TIM_PWM_Start+0x7a>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a54      	ldr	r2, [pc, #336]	@ (8003b38 <HAL_TIM_PWM_Start+0x1a4>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d10b      	bne.n	8003a04 <HAL_TIM_PWM_Start+0x70>
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00d      	beq.n	8003a0e <HAL_TIM_PWM_Start+0x7a>
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	2b04      	cmp	r3, #4
 80039f6:	d00a      	beq.n	8003a0e <HAL_TIM_PWM_Start+0x7a>
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	2b08      	cmp	r3, #8
 80039fc:	d007      	beq.n	8003a0e <HAL_TIM_PWM_Start+0x7a>
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	2b0c      	cmp	r3, #12
 8003a02:	d004      	beq.n	8003a0e <HAL_TIM_PWM_Start+0x7a>
 8003a04:	f240 51b3 	movw	r1, #1459	@ 0x5b3
 8003a08:	484c      	ldr	r0, [pc, #304]	@ (8003b3c <HAL_TIM_PWM_Start+0x1a8>)
 8003a0a:	f7fd f951 	bl	8000cb0 <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d109      	bne.n	8003a28 <HAL_TIM_PWM_Start+0x94>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	bf14      	ite	ne
 8003a20:	2301      	movne	r3, #1
 8003a22:	2300      	moveq	r3, #0
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	e022      	b.n	8003a6e <HAL_TIM_PWM_Start+0xda>
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	2b04      	cmp	r3, #4
 8003a2c:	d109      	bne.n	8003a42 <HAL_TIM_PWM_Start+0xae>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	bf14      	ite	ne
 8003a3a:	2301      	movne	r3, #1
 8003a3c:	2300      	moveq	r3, #0
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	e015      	b.n	8003a6e <HAL_TIM_PWM_Start+0xda>
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	2b08      	cmp	r3, #8
 8003a46:	d109      	bne.n	8003a5c <HAL_TIM_PWM_Start+0xc8>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	bf14      	ite	ne
 8003a54:	2301      	movne	r3, #1
 8003a56:	2300      	moveq	r3, #0
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	e008      	b.n	8003a6e <HAL_TIM_PWM_Start+0xda>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	bf14      	ite	ne
 8003a68:	2301      	movne	r3, #1
 8003a6a:	2300      	moveq	r3, #0
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <HAL_TIM_PWM_Start+0xe2>
  {
    return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e059      	b.n	8003b2a <HAL_TIM_PWM_Start+0x196>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d104      	bne.n	8003a86 <HAL_TIM_PWM_Start+0xf2>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2202      	movs	r2, #2
 8003a80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a84:	e013      	b.n	8003aae <HAL_TIM_PWM_Start+0x11a>
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	2b04      	cmp	r3, #4
 8003a8a:	d104      	bne.n	8003a96 <HAL_TIM_PWM_Start+0x102>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2202      	movs	r2, #2
 8003a90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a94:	e00b      	b.n	8003aae <HAL_TIM_PWM_Start+0x11a>
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	2b08      	cmp	r3, #8
 8003a9a:	d104      	bne.n	8003aa6 <HAL_TIM_PWM_Start+0x112>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2202      	movs	r2, #2
 8003aa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003aa4:	e003      	b.n	8003aae <HAL_TIM_PWM_Start+0x11a>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2202      	movs	r2, #2
 8003aaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	6839      	ldr	r1, [r7, #0]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f000 fe46 	bl	8004748 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a1c      	ldr	r2, [pc, #112]	@ (8003b34 <HAL_TIM_PWM_Start+0x1a0>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d107      	bne.n	8003ad6 <HAL_TIM_PWM_Start+0x142>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ad4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a16      	ldr	r2, [pc, #88]	@ (8003b34 <HAL_TIM_PWM_Start+0x1a0>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d009      	beq.n	8003af4 <HAL_TIM_PWM_Start+0x160>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ae8:	d004      	beq.n	8003af4 <HAL_TIM_PWM_Start+0x160>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a12      	ldr	r2, [pc, #72]	@ (8003b38 <HAL_TIM_PWM_Start+0x1a4>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d111      	bne.n	8003b18 <HAL_TIM_PWM_Start+0x184>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f003 0307 	and.w	r3, r3, #7
 8003afe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2b06      	cmp	r3, #6
 8003b04:	d010      	beq.n	8003b28 <HAL_TIM_PWM_Start+0x194>
    {
      __HAL_TIM_ENABLE(htim);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f042 0201 	orr.w	r2, r2, #1
 8003b14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b16:	e007      	b.n	8003b28 <HAL_TIM_PWM_Start+0x194>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f042 0201 	orr.w	r2, r2, #1
 8003b26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3710      	adds	r7, #16
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	40012c00 	.word	0x40012c00
 8003b38:	40000400 	.word	0x40000400
 8003b3c:	08004d44 	.word	0x08004d44

08003b40 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b086      	sub	sp, #24
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d101      	bne.n	8003b54 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e17e      	b.n	8003e52 <HAL_TIM_Encoder_Init+0x312>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a77      	ldr	r2, [pc, #476]	@ (8003d38 <HAL_TIM_Encoder_Init+0x1f8>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d00e      	beq.n	8003b7c <HAL_TIM_Encoder_Init+0x3c>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b66:	d009      	beq.n	8003b7c <HAL_TIM_Encoder_Init+0x3c>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a73      	ldr	r2, [pc, #460]	@ (8003d3c <HAL_TIM_Encoder_Init+0x1fc>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d004      	beq.n	8003b7c <HAL_TIM_Encoder_Init+0x3c>
 8003b72:	f640 31d8 	movw	r1, #3032	@ 0xbd8
 8003b76:	4872      	ldr	r0, [pc, #456]	@ (8003d40 <HAL_TIM_Encoder_Init+0x200>)
 8003b78:	f7fd f89a 	bl	8000cb0 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d014      	beq.n	8003bae <HAL_TIM_Encoder_Init+0x6e>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	2b10      	cmp	r3, #16
 8003b8a:	d010      	beq.n	8003bae <HAL_TIM_Encoder_Init+0x6e>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	2b20      	cmp	r3, #32
 8003b92:	d00c      	beq.n	8003bae <HAL_TIM_Encoder_Init+0x6e>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	2b40      	cmp	r3, #64	@ 0x40
 8003b9a:	d008      	beq.n	8003bae <HAL_TIM_Encoder_Init+0x6e>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	2b60      	cmp	r3, #96	@ 0x60
 8003ba2:	d004      	beq.n	8003bae <HAL_TIM_Encoder_Init+0x6e>
 8003ba4:	f640 31d9 	movw	r1, #3033	@ 0xbd9
 8003ba8:	4865      	ldr	r0, [pc, #404]	@ (8003d40 <HAL_TIM_Encoder_Init+0x200>)
 8003baa:	f7fd f881 	bl	8000cb0 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00e      	beq.n	8003bd4 <HAL_TIM_Encoder_Init+0x94>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bbe:	d009      	beq.n	8003bd4 <HAL_TIM_Encoder_Init+0x94>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bc8:	d004      	beq.n	8003bd4 <HAL_TIM_Encoder_Init+0x94>
 8003bca:	f640 31da 	movw	r1, #3034	@ 0xbda
 8003bce:	485c      	ldr	r0, [pc, #368]	@ (8003d40 <HAL_TIM_Encoder_Init+0x200>)
 8003bd0:	f7fd f86e 	bl	8000cb0 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d008      	beq.n	8003bee <HAL_TIM_Encoder_Init+0xae>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	2b80      	cmp	r3, #128	@ 0x80
 8003be2:	d004      	beq.n	8003bee <HAL_TIM_Encoder_Init+0xae>
 8003be4:	f640 31db 	movw	r1, #3035	@ 0xbdb
 8003be8:	4855      	ldr	r0, [pc, #340]	@ (8003d40 <HAL_TIM_Encoder_Init+0x200>)
 8003bea:	f7fd f861 	bl	8000cb0 <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d00c      	beq.n	8003c10 <HAL_TIM_Encoder_Init+0xd0>
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d008      	beq.n	8003c10 <HAL_TIM_Encoder_Init+0xd0>
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2b03      	cmp	r3, #3
 8003c04:	d004      	beq.n	8003c10 <HAL_TIM_Encoder_Init+0xd0>
 8003c06:	f640 31dc 	movw	r1, #3036	@ 0xbdc
 8003c0a:	484d      	ldr	r0, [pc, #308]	@ (8003d40 <HAL_TIM_Encoder_Init+0x200>)
 8003c0c:	f7fd f850 	bl	8000cb0 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d00c      	beq.n	8003c32 <HAL_TIM_Encoder_Init+0xf2>
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d008      	beq.n	8003c32 <HAL_TIM_Encoder_Init+0xf2>
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	2b03      	cmp	r3, #3
 8003c26:	d004      	beq.n	8003c32 <HAL_TIM_Encoder_Init+0xf2>
 8003c28:	f640 31dd 	movw	r1, #3037	@ 0xbdd
 8003c2c:	4844      	ldr	r0, [pc, #272]	@ (8003d40 <HAL_TIM_Encoder_Init+0x200>)
 8003c2e:	f7fd f83f 	bl	8000cb0 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d00c      	beq.n	8003c54 <HAL_TIM_Encoder_Init+0x114>
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	699b      	ldr	r3, [r3, #24]
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d008      	beq.n	8003c54 <HAL_TIM_Encoder_Init+0x114>
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	2b03      	cmp	r3, #3
 8003c48:	d004      	beq.n	8003c54 <HAL_TIM_Encoder_Init+0x114>
 8003c4a:	f640 31de 	movw	r1, #3038	@ 0xbde
 8003c4e:	483c      	ldr	r0, [pc, #240]	@ (8003d40 <HAL_TIM_Encoder_Init+0x200>)
 8003c50:	f7fd f82e 	bl	8000cb0 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d008      	beq.n	8003c6e <HAL_TIM_Encoder_Init+0x12e>
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d004      	beq.n	8003c6e <HAL_TIM_Encoder_Init+0x12e>
 8003c64:	f640 31df 	movw	r1, #3039	@ 0xbdf
 8003c68:	4835      	ldr	r0, [pc, #212]	@ (8003d40 <HAL_TIM_Encoder_Init+0x200>)
 8003c6a:	f7fd f821 	bl	8000cb0 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d008      	beq.n	8003c88 <HAL_TIM_Encoder_Init+0x148>
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d004      	beq.n	8003c88 <HAL_TIM_Encoder_Init+0x148>
 8003c7e:	f44f 613e 	mov.w	r1, #3040	@ 0xbe0
 8003c82:	482f      	ldr	r0, [pc, #188]	@ (8003d40 <HAL_TIM_Encoder_Init+0x200>)
 8003c84:	f7fd f814 	bl	8000cb0 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d010      	beq.n	8003cb2 <HAL_TIM_Encoder_Init+0x172>
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	2b04      	cmp	r3, #4
 8003c96:	d00c      	beq.n	8003cb2 <HAL_TIM_Encoder_Init+0x172>
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	2b08      	cmp	r3, #8
 8003c9e:	d008      	beq.n	8003cb2 <HAL_TIM_Encoder_Init+0x172>
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	2b0c      	cmp	r3, #12
 8003ca6:	d004      	beq.n	8003cb2 <HAL_TIM_Encoder_Init+0x172>
 8003ca8:	f640 31e1 	movw	r1, #3041	@ 0xbe1
 8003cac:	4824      	ldr	r0, [pc, #144]	@ (8003d40 <HAL_TIM_Encoder_Init+0x200>)
 8003cae:	f7fc ffff 	bl	8000cb0 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	69db      	ldr	r3, [r3, #28]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d010      	beq.n	8003cdc <HAL_TIM_Encoder_Init+0x19c>
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	69db      	ldr	r3, [r3, #28]
 8003cbe:	2b04      	cmp	r3, #4
 8003cc0:	d00c      	beq.n	8003cdc <HAL_TIM_Encoder_Init+0x19c>
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	69db      	ldr	r3, [r3, #28]
 8003cc6:	2b08      	cmp	r3, #8
 8003cc8:	d008      	beq.n	8003cdc <HAL_TIM_Encoder_Init+0x19c>
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	69db      	ldr	r3, [r3, #28]
 8003cce:	2b0c      	cmp	r3, #12
 8003cd0:	d004      	beq.n	8003cdc <HAL_TIM_Encoder_Init+0x19c>
 8003cd2:	f640 31e2 	movw	r1, #3042	@ 0xbe2
 8003cd6:	481a      	ldr	r0, [pc, #104]	@ (8003d40 <HAL_TIM_Encoder_Init+0x200>)
 8003cd8:	f7fc ffea 	bl	8000cb0 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	2b0f      	cmp	r3, #15
 8003ce2:	d904      	bls.n	8003cee <HAL_TIM_Encoder_Init+0x1ae>
 8003ce4:	f640 31e3 	movw	r1, #3043	@ 0xbe3
 8003ce8:	4815      	ldr	r0, [pc, #84]	@ (8003d40 <HAL_TIM_Encoder_Init+0x200>)
 8003cea:	f7fc ffe1 	bl	8000cb0 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	2b0f      	cmp	r3, #15
 8003cf4:	d904      	bls.n	8003d00 <HAL_TIM_Encoder_Init+0x1c0>
 8003cf6:	f640 31e4 	movw	r1, #3044	@ 0xbe4
 8003cfa:	4811      	ldr	r0, [pc, #68]	@ (8003d40 <HAL_TIM_Encoder_Init+0x200>)
 8003cfc:	f7fc ffd8 	bl	8000cb0 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d004      	beq.n	8003d12 <HAL_TIM_Encoder_Init+0x1d2>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d10:	d304      	bcc.n	8003d1c <HAL_TIM_Encoder_Init+0x1dc>
 8003d12:	f640 31e5 	movw	r1, #3045	@ 0xbe5
 8003d16:	480a      	ldr	r0, [pc, #40]	@ (8003d40 <HAL_TIM_Encoder_Init+0x200>)
 8003d18:	f7fc ffca 	bl	8000cb0 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d10d      	bne.n	8003d44 <HAL_TIM_Encoder_Init+0x204>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f7fd f9bf 	bl	80010b4 <HAL_TIM_Encoder_MspInit>
 8003d36:	e005      	b.n	8003d44 <HAL_TIM_Encoder_Init+0x204>
 8003d38:	40012c00 	.word	0x40012c00
 8003d3c:	40000400 	.word	0x40000400
 8003d40:	08004d44 	.word	0x08004d44
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2202      	movs	r2, #2
 8003d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	6812      	ldr	r2, [r2, #0]
 8003d56:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003d5a:	f023 0307 	bic.w	r3, r3, #7
 8003d5e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	3304      	adds	r3, #4
 8003d68:	4619      	mov	r1, r3
 8003d6a:	4610      	mov	r0, r2
 8003d6c:	f000 fa72 	bl	8004254 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d98:	f023 0303 	bic.w	r3, r3, #3
 8003d9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	689a      	ldr	r2, [r3, #8]
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	021b      	lsls	r3, r3, #8
 8003da8:	4313      	orrs	r3, r2
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003db6:	f023 030c 	bic.w	r3, r3, #12
 8003dba:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003dc2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003dc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	68da      	ldr	r2, [r3, #12]
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	69db      	ldr	r3, [r3, #28]
 8003dd0:	021b      	lsls	r3, r3, #8
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	011a      	lsls	r2, r3, #4
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	6a1b      	ldr	r3, [r3, #32]
 8003de4:	031b      	lsls	r3, r3, #12
 8003de6:	4313      	orrs	r3, r2
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003df4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	685a      	ldr	r2, [r3, #4]
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	011b      	lsls	r3, r3, #4
 8003e00:	4313      	orrs	r3, r2
 8003e02:	68fa      	ldr	r2, [r7, #12]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	697a      	ldr	r2, [r7, #20]
 8003e0e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3718      	adds	r7, #24
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop

08003e5c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e6c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003e74:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e7c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003e84:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a45      	ldr	r2, [pc, #276]	@ (8003fa0 <HAL_TIM_Encoder_Start+0x144>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d00e      	beq.n	8003eae <HAL_TIM_Encoder_Start+0x52>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e98:	d009      	beq.n	8003eae <HAL_TIM_Encoder_Start+0x52>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a41      	ldr	r2, [pc, #260]	@ (8003fa4 <HAL_TIM_Encoder_Start+0x148>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d004      	beq.n	8003eae <HAL_TIM_Encoder_Start+0x52>
 8003ea4:	f640 4195 	movw	r1, #3221	@ 0xc95
 8003ea8:	483f      	ldr	r0, [pc, #252]	@ (8003fa8 <HAL_TIM_Encoder_Start+0x14c>)
 8003eaa:	f7fc ff01 	bl	8000cb0 <assert_failed>

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d110      	bne.n	8003ed6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003eb4:	7bfb      	ldrb	r3, [r7, #15]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d102      	bne.n	8003ec0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003eba:	7b7b      	ldrb	r3, [r7, #13]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d001      	beq.n	8003ec4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e069      	b.n	8003f98 <HAL_TIM_Encoder_Start+0x13c>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2202      	movs	r2, #2
 8003ec8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2202      	movs	r2, #2
 8003ed0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ed4:	e031      	b.n	8003f3a <HAL_TIM_Encoder_Start+0xde>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	2b04      	cmp	r3, #4
 8003eda:	d110      	bne.n	8003efe <HAL_TIM_Encoder_Start+0xa2>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003edc:	7bbb      	ldrb	r3, [r7, #14]
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d102      	bne.n	8003ee8 <HAL_TIM_Encoder_Start+0x8c>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ee2:	7b3b      	ldrb	r3, [r7, #12]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d001      	beq.n	8003eec <HAL_TIM_Encoder_Start+0x90>
    {
      return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e055      	b.n	8003f98 <HAL_TIM_Encoder_Start+0x13c>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2202      	movs	r2, #2
 8003ef0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2202      	movs	r2, #2
 8003ef8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003efc:	e01d      	b.n	8003f3a <HAL_TIM_Encoder_Start+0xde>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003efe:	7bfb      	ldrb	r3, [r7, #15]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d108      	bne.n	8003f16 <HAL_TIM_Encoder_Start+0xba>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f04:	7bbb      	ldrb	r3, [r7, #14]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d105      	bne.n	8003f16 <HAL_TIM_Encoder_Start+0xba>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f0a:	7b7b      	ldrb	r3, [r7, #13]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d102      	bne.n	8003f16 <HAL_TIM_Encoder_Start+0xba>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f10:	7b3b      	ldrb	r3, [r7, #12]
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d001      	beq.n	8003f1a <HAL_TIM_Encoder_Start+0xbe>
    {
      return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e03e      	b.n	8003f98 <HAL_TIM_Encoder_Start+0x13c>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2202      	movs	r2, #2
 8003f1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2202      	movs	r2, #2
 8003f26:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2202      	movs	r2, #2
 8003f2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2202      	movs	r2, #2
 8003f36:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d003      	beq.n	8003f48 <HAL_TIM_Encoder_Start+0xec>
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	2b04      	cmp	r3, #4
 8003f44:	d008      	beq.n	8003f58 <HAL_TIM_Encoder_Start+0xfc>
 8003f46:	e00f      	b.n	8003f68 <HAL_TIM_Encoder_Start+0x10c>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	2100      	movs	r1, #0
 8003f50:	4618      	mov	r0, r3
 8003f52:	f000 fbf9 	bl	8004748 <TIM_CCxChannelCmd>
      break;
 8003f56:	e016      	b.n	8003f86 <HAL_TIM_Encoder_Start+0x12a>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	2104      	movs	r1, #4
 8003f60:	4618      	mov	r0, r3
 8003f62:	f000 fbf1 	bl	8004748 <TIM_CCxChannelCmd>
      break;
 8003f66:	e00e      	b.n	8003f86 <HAL_TIM_Encoder_Start+0x12a>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	2100      	movs	r1, #0
 8003f70:	4618      	mov	r0, r3
 8003f72:	f000 fbe9 	bl	8004748 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	2104      	movs	r1, #4
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f000 fbe2 	bl	8004748 <TIM_CCxChannelCmd>
      break;
 8003f84:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f042 0201 	orr.w	r2, r2, #1
 8003f94:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3710      	adds	r7, #16
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	40012c00 	.word	0x40012c00
 8003fa4:	40000400 	.word	0x40000400
 8003fa8:	08004d44 	.word	0x08004d44

08003fac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d010      	beq.n	8003fe4 <HAL_TIM_PWM_ConfigChannel+0x38>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2b04      	cmp	r3, #4
 8003fc6:	d00d      	beq.n	8003fe4 <HAL_TIM_PWM_ConfigChannel+0x38>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2b08      	cmp	r3, #8
 8003fcc:	d00a      	beq.n	8003fe4 <HAL_TIM_PWM_ConfigChannel+0x38>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2b0c      	cmp	r3, #12
 8003fd2:	d007      	beq.n	8003fe4 <HAL_TIM_PWM_ConfigChannel+0x38>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2b3c      	cmp	r3, #60	@ 0x3c
 8003fd8:	d004      	beq.n	8003fe4 <HAL_TIM_PWM_ConfigChannel+0x38>
 8003fda:	f241 0181 	movw	r1, #4225	@ 0x1081
 8003fde:	489a      	ldr	r0, [pc, #616]	@ (8004248 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 8003fe0:	f7fc fe66 	bl	8000cb0 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2b60      	cmp	r3, #96	@ 0x60
 8003fea:	d008      	beq.n	8003ffe <HAL_TIM_PWM_ConfigChannel+0x52>
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2b70      	cmp	r3, #112	@ 0x70
 8003ff2:	d004      	beq.n	8003ffe <HAL_TIM_PWM_ConfigChannel+0x52>
 8003ff4:	f241 0182 	movw	r1, #4226	@ 0x1082
 8003ff8:	4893      	ldr	r0, [pc, #588]	@ (8004248 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 8003ffa:	f7fc fe59 	bl	8000cb0 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d008      	beq.n	8004018 <HAL_TIM_PWM_ConfigChannel+0x6c>
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	2b02      	cmp	r3, #2
 800400c:	d004      	beq.n	8004018 <HAL_TIM_PWM_ConfigChannel+0x6c>
 800400e:	f241 0183 	movw	r1, #4227	@ 0x1083
 8004012:	488d      	ldr	r0, [pc, #564]	@ (8004248 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 8004014:	f7fc fe4c 	bl	8000cb0 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d008      	beq.n	8004032 <HAL_TIM_PWM_ConfigChannel+0x86>
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	2b04      	cmp	r3, #4
 8004026:	d004      	beq.n	8004032 <HAL_TIM_PWM_ConfigChannel+0x86>
 8004028:	f241 0184 	movw	r1, #4228	@ 0x1084
 800402c:	4886      	ldr	r0, [pc, #536]	@ (8004248 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 800402e:	f7fc fe3f 	bl	8000cb0 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004038:	2b01      	cmp	r3, #1
 800403a:	d101      	bne.n	8004040 <HAL_TIM_PWM_ConfigChannel+0x94>
 800403c:	2302      	movs	r3, #2
 800403e:	e0ff      	b.n	8004240 <HAL_TIM_PWM_ConfigChannel+0x294>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2b0c      	cmp	r3, #12
 800404c:	f200 80f0 	bhi.w	8004230 <HAL_TIM_PWM_ConfigChannel+0x284>
 8004050:	a201      	add	r2, pc, #4	@ (adr r2, 8004058 <HAL_TIM_PWM_ConfigChannel+0xac>)
 8004052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004056:	bf00      	nop
 8004058:	0800408d 	.word	0x0800408d
 800405c:	08004231 	.word	0x08004231
 8004060:	08004231 	.word	0x08004231
 8004064:	08004231 	.word	0x08004231
 8004068:	080040f5 	.word	0x080040f5
 800406c:	08004231 	.word	0x08004231
 8004070:	08004231 	.word	0x08004231
 8004074:	08004231 	.word	0x08004231
 8004078:	0800415f 	.word	0x0800415f
 800407c:	08004231 	.word	0x08004231
 8004080:	08004231 	.word	0x08004231
 8004084:	08004231 	.word	0x08004231
 8004088:	080041c7 	.word	0x080041c7
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a6e      	ldr	r2, [pc, #440]	@ (800424c <HAL_TIM_PWM_ConfigChannel+0x2a0>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d00e      	beq.n	80040b4 <HAL_TIM_PWM_ConfigChannel+0x108>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800409e:	d009      	beq.n	80040b4 <HAL_TIM_PWM_ConfigChannel+0x108>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a6a      	ldr	r2, [pc, #424]	@ (8004250 <HAL_TIM_PWM_ConfigChannel+0x2a4>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d004      	beq.n	80040b4 <HAL_TIM_PWM_ConfigChannel+0x108>
 80040aa:	f241 018e 	movw	r1, #4238	@ 0x108e
 80040ae:	4866      	ldr	r0, [pc, #408]	@ (8004248 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 80040b0:	f7fc fdfe 	bl	8000cb0 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68b9      	ldr	r1, [r7, #8]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f000 f92e 	bl	800431c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	699a      	ldr	r2, [r3, #24]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f042 0208 	orr.w	r2, r2, #8
 80040ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	699a      	ldr	r2, [r3, #24]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f022 0204 	bic.w	r2, r2, #4
 80040de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	6999      	ldr	r1, [r3, #24]
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	691a      	ldr	r2, [r3, #16]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	430a      	orrs	r2, r1
 80040f0:	619a      	str	r2, [r3, #24]
      break;
 80040f2:	e0a0      	b.n	8004236 <HAL_TIM_PWM_ConfigChannel+0x28a>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a54      	ldr	r2, [pc, #336]	@ (800424c <HAL_TIM_PWM_ConfigChannel+0x2a0>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d00e      	beq.n	800411c <HAL_TIM_PWM_ConfigChannel+0x170>
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004106:	d009      	beq.n	800411c <HAL_TIM_PWM_ConfigChannel+0x170>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a50      	ldr	r2, [pc, #320]	@ (8004250 <HAL_TIM_PWM_ConfigChannel+0x2a4>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d004      	beq.n	800411c <HAL_TIM_PWM_ConfigChannel+0x170>
 8004112:	f241 019f 	movw	r1, #4255	@ 0x109f
 8004116:	484c      	ldr	r0, [pc, #304]	@ (8004248 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 8004118:	f7fc fdca 	bl	8000cb0 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68b9      	ldr	r1, [r7, #8]
 8004122:	4618      	mov	r0, r3
 8004124:	f000 f98a 	bl	800443c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	699a      	ldr	r2, [r3, #24]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004136:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	699a      	ldr	r2, [r3, #24]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004146:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	6999      	ldr	r1, [r3, #24]
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	021a      	lsls	r2, r3, #8
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	430a      	orrs	r2, r1
 800415a:	619a      	str	r2, [r3, #24]
      break;
 800415c:	e06b      	b.n	8004236 <HAL_TIM_PWM_ConfigChannel+0x28a>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a3a      	ldr	r2, [pc, #232]	@ (800424c <HAL_TIM_PWM_ConfigChannel+0x2a0>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d00e      	beq.n	8004186 <HAL_TIM_PWM_ConfigChannel+0x1da>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004170:	d009      	beq.n	8004186 <HAL_TIM_PWM_ConfigChannel+0x1da>
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a36      	ldr	r2, [pc, #216]	@ (8004250 <HAL_TIM_PWM_ConfigChannel+0x2a4>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d004      	beq.n	8004186 <HAL_TIM_PWM_ConfigChannel+0x1da>
 800417c:	f241 01b0 	movw	r1, #4272	@ 0x10b0
 8004180:	4831      	ldr	r0, [pc, #196]	@ (8004248 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 8004182:	f7fc fd95 	bl	8000cb0 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68b9      	ldr	r1, [r7, #8]
 800418c:	4618      	mov	r0, r3
 800418e:	f000 f9e9 	bl	8004564 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	69da      	ldr	r2, [r3, #28]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f042 0208 	orr.w	r2, r2, #8
 80041a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	69da      	ldr	r2, [r3, #28]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f022 0204 	bic.w	r2, r2, #4
 80041b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	69d9      	ldr	r1, [r3, #28]
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	691a      	ldr	r2, [r3, #16]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	430a      	orrs	r2, r1
 80041c2:	61da      	str	r2, [r3, #28]
      break;
 80041c4:	e037      	b.n	8004236 <HAL_TIM_PWM_ConfigChannel+0x28a>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a20      	ldr	r2, [pc, #128]	@ (800424c <HAL_TIM_PWM_ConfigChannel+0x2a0>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d00e      	beq.n	80041ee <HAL_TIM_PWM_ConfigChannel+0x242>
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041d8:	d009      	beq.n	80041ee <HAL_TIM_PWM_ConfigChannel+0x242>
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a1c      	ldr	r2, [pc, #112]	@ (8004250 <HAL_TIM_PWM_ConfigChannel+0x2a4>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d004      	beq.n	80041ee <HAL_TIM_PWM_ConfigChannel+0x242>
 80041e4:	f241 01c1 	movw	r1, #4289	@ 0x10c1
 80041e8:	4817      	ldr	r0, [pc, #92]	@ (8004248 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 80041ea:	f7fc fd61 	bl	8000cb0 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68b9      	ldr	r1, [r7, #8]
 80041f4:	4618      	mov	r0, r3
 80041f6:	f000 fa49 	bl	800468c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	69da      	ldr	r2, [r3, #28]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004208:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	69da      	ldr	r2, [r3, #28]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004218:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	69d9      	ldr	r1, [r3, #28]
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	021a      	lsls	r2, r3, #8
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	430a      	orrs	r2, r1
 800422c:	61da      	str	r2, [r3, #28]
      break;
 800422e:	e002      	b.n	8004236 <HAL_TIM_PWM_ConfigChannel+0x28a>
    }

    default:
      status = HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	75fb      	strb	r3, [r7, #23]
      break;
 8004234:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800423e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004240:	4618      	mov	r0, r3
 8004242:	3718      	adds	r7, #24
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	08004d44 	.word	0x08004d44
 800424c:	40012c00 	.word	0x40012c00
 8004250:	40000400 	.word	0x40000400

08004254 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004254:	b480      	push	{r7}
 8004256:	b085      	sub	sp, #20
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a2b      	ldr	r2, [pc, #172]	@ (8004314 <TIM_Base_SetConfig+0xc0>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d007      	beq.n	800427c <TIM_Base_SetConfig+0x28>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004272:	d003      	beq.n	800427c <TIM_Base_SetConfig+0x28>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a28      	ldr	r2, [pc, #160]	@ (8004318 <TIM_Base_SetConfig+0xc4>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d108      	bne.n	800428e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004282:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	4313      	orrs	r3, r2
 800428c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a20      	ldr	r2, [pc, #128]	@ (8004314 <TIM_Base_SetConfig+0xc0>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d007      	beq.n	80042a6 <TIM_Base_SetConfig+0x52>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800429c:	d003      	beq.n	80042a6 <TIM_Base_SetConfig+0x52>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a1d      	ldr	r2, [pc, #116]	@ (8004318 <TIM_Base_SetConfig+0xc4>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d108      	bne.n	80042b8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	689a      	ldr	r2, [r3, #8]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a0d      	ldr	r2, [pc, #52]	@ (8004314 <TIM_Base_SetConfig+0xc0>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d103      	bne.n	80042ec <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	691a      	ldr	r2, [r3, #16]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	f003 0301 	and.w	r3, r3, #1
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d005      	beq.n	800430a <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	f023 0201 	bic.w	r2, r3, #1
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	611a      	str	r2, [r3, #16]
  }
}
 800430a:	bf00      	nop
 800430c:	3714      	adds	r7, #20
 800430e:	46bd      	mov	sp, r7
 8004310:	bc80      	pop	{r7}
 8004312:	4770      	bx	lr
 8004314:	40012c00 	.word	0x40012c00
 8004318:	40000400 	.word	0x40000400

0800431c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b086      	sub	sp, #24
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a1b      	ldr	r3, [r3, #32]
 800432a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a1b      	ldr	r3, [r3, #32]
 8004330:	f023 0201 	bic.w	r2, r3, #1
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800434a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f023 0303 	bic.w	r3, r3, #3
 8004352:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	4313      	orrs	r3, r2
 800435c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	f023 0302 	bic.w	r3, r3, #2
 8004364:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	697a      	ldr	r2, [r7, #20]
 800436c:	4313      	orrs	r3, r2
 800436e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a30      	ldr	r2, [pc, #192]	@ (8004434 <TIM_OC1_SetConfig+0x118>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d119      	bne.n	80043ac <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d008      	beq.n	8004392 <TIM_OC1_SetConfig+0x76>
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	2b08      	cmp	r3, #8
 8004386:	d004      	beq.n	8004392 <TIM_OC1_SetConfig+0x76>
 8004388:	f641 21cf 	movw	r1, #6863	@ 0x1acf
 800438c:	482a      	ldr	r0, [pc, #168]	@ (8004438 <TIM_OC1_SetConfig+0x11c>)
 800438e:	f7fc fc8f 	bl	8000cb0 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	f023 0308 	bic.w	r3, r3, #8
 8004398:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	697a      	ldr	r2, [r7, #20]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	f023 0304 	bic.w	r3, r3, #4
 80043aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a21      	ldr	r2, [pc, #132]	@ (8004434 <TIM_OC1_SetConfig+0x118>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d12d      	bne.n	8004410 <TIM_OC1_SetConfig+0xf4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	699b      	ldr	r3, [r3, #24]
 80043b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043bc:	d008      	beq.n	80043d0 <TIM_OC1_SetConfig+0xb4>
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d004      	beq.n	80043d0 <TIM_OC1_SetConfig+0xb4>
 80043c6:	f641 21dc 	movw	r1, #6876	@ 0x1adc
 80043ca:	481b      	ldr	r0, [pc, #108]	@ (8004438 <TIM_OC1_SetConfig+0x11c>)
 80043cc:	f7fc fc70 	bl	8000cb0 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	695b      	ldr	r3, [r3, #20]
 80043d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043d8:	d008      	beq.n	80043ec <TIM_OC1_SetConfig+0xd0>
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d004      	beq.n	80043ec <TIM_OC1_SetConfig+0xd0>
 80043e2:	f641 21dd 	movw	r1, #6877	@ 0x1add
 80043e6:	4814      	ldr	r0, [pc, #80]	@ (8004438 <TIM_OC1_SetConfig+0x11c>)
 80043e8:	f7fc fc62 	bl	8000cb0 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80043fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	695b      	ldr	r3, [r3, #20]
 8004400:	693a      	ldr	r2, [r7, #16]
 8004402:	4313      	orrs	r3, r2
 8004404:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	4313      	orrs	r3, r2
 800440e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	693a      	ldr	r2, [r7, #16]
 8004414:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	68fa      	ldr	r2, [r7, #12]
 800441a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	685a      	ldr	r2, [r3, #4]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	697a      	ldr	r2, [r7, #20]
 8004428:	621a      	str	r2, [r3, #32]
}
 800442a:	bf00      	nop
 800442c:	3718      	adds	r7, #24
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	40012c00 	.word	0x40012c00
 8004438:	08004d44 	.word	0x08004d44

0800443c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b086      	sub	sp, #24
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a1b      	ldr	r3, [r3, #32]
 800444a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a1b      	ldr	r3, [r3, #32]
 8004450:	f023 0210 	bic.w	r2, r3, #16
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800446a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004472:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	021b      	lsls	r3, r3, #8
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	4313      	orrs	r3, r2
 800447e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	f023 0320 	bic.w	r3, r3, #32
 8004486:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	011b      	lsls	r3, r3, #4
 800448e:	697a      	ldr	r2, [r7, #20]
 8004490:	4313      	orrs	r3, r2
 8004492:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a31      	ldr	r2, [pc, #196]	@ (800455c <TIM_OC2_SetConfig+0x120>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d11a      	bne.n	80044d2 <TIM_OC2_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d008      	beq.n	80044b6 <TIM_OC2_SetConfig+0x7a>
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	2b08      	cmp	r3, #8
 80044aa:	d004      	beq.n	80044b6 <TIM_OC2_SetConfig+0x7a>
 80044ac:	f641 311b 	movw	r1, #6939	@ 0x1b1b
 80044b0:	482b      	ldr	r0, [pc, #172]	@ (8004560 <TIM_OC2_SetConfig+0x124>)
 80044b2:	f7fc fbfd 	bl	8000cb0 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	011b      	lsls	r3, r3, #4
 80044c4:	697a      	ldr	r2, [r7, #20]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a21      	ldr	r2, [pc, #132]	@ (800455c <TIM_OC2_SetConfig+0x120>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d12f      	bne.n	800453a <TIM_OC2_SetConfig+0xfe>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	699b      	ldr	r3, [r3, #24]
 80044de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044e2:	d008      	beq.n	80044f6 <TIM_OC2_SetConfig+0xba>
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d004      	beq.n	80044f6 <TIM_OC2_SetConfig+0xba>
 80044ec:	f641 3128 	movw	r1, #6952	@ 0x1b28
 80044f0:	481b      	ldr	r0, [pc, #108]	@ (8004560 <TIM_OC2_SetConfig+0x124>)
 80044f2:	f7fc fbdd 	bl	8000cb0 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044fe:	d008      	beq.n	8004512 <TIM_OC2_SetConfig+0xd6>
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	695b      	ldr	r3, [r3, #20]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d004      	beq.n	8004512 <TIM_OC2_SetConfig+0xd6>
 8004508:	f641 3129 	movw	r1, #6953	@ 0x1b29
 800450c:	4814      	ldr	r0, [pc, #80]	@ (8004560 <TIM_OC2_SetConfig+0x124>)
 800450e:	f7fc fbcf 	bl	8000cb0 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004518:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004520:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	4313      	orrs	r3, r2
 800452c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	693a      	ldr	r2, [r7, #16]
 8004536:	4313      	orrs	r3, r2
 8004538:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	685a      	ldr	r2, [r3, #4]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	697a      	ldr	r2, [r7, #20]
 8004552:	621a      	str	r2, [r3, #32]
}
 8004554:	bf00      	nop
 8004556:	3718      	adds	r7, #24
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	40012c00 	.word	0x40012c00
 8004560:	08004d44 	.word	0x08004d44

08004564 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b086      	sub	sp, #24
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a1b      	ldr	r3, [r3, #32]
 8004578:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	69db      	ldr	r3, [r3, #28]
 800458a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004592:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f023 0303 	bic.w	r3, r3, #3
 800459a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80045ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	021b      	lsls	r3, r3, #8
 80045b4:	697a      	ldr	r2, [r7, #20]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a31      	ldr	r2, [pc, #196]	@ (8004684 <TIM_OC3_SetConfig+0x120>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d11a      	bne.n	80045f8 <TIM_OC3_SetConfig+0x94>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d008      	beq.n	80045dc <TIM_OC3_SetConfig+0x78>
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	2b08      	cmp	r3, #8
 80045d0:	d004      	beq.n	80045dc <TIM_OC3_SetConfig+0x78>
 80045d2:	f641 3166 	movw	r1, #7014	@ 0x1b66
 80045d6:	482c      	ldr	r0, [pc, #176]	@ (8004688 <TIM_OC3_SetConfig+0x124>)
 80045d8:	f7fc fb6a 	bl	8000cb0 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80045e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	021b      	lsls	r3, r3, #8
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80045f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4a22      	ldr	r2, [pc, #136]	@ (8004684 <TIM_OC3_SetConfig+0x120>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d12f      	bne.n	8004660 <TIM_OC3_SetConfig+0xfc>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	699b      	ldr	r3, [r3, #24]
 8004604:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004608:	d008      	beq.n	800461c <TIM_OC3_SetConfig+0xb8>
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d004      	beq.n	800461c <TIM_OC3_SetConfig+0xb8>
 8004612:	f641 3173 	movw	r1, #7027	@ 0x1b73
 8004616:	481c      	ldr	r0, [pc, #112]	@ (8004688 <TIM_OC3_SetConfig+0x124>)
 8004618:	f7fc fb4a 	bl	8000cb0 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	695b      	ldr	r3, [r3, #20]
 8004620:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004624:	d008      	beq.n	8004638 <TIM_OC3_SetConfig+0xd4>
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	695b      	ldr	r3, [r3, #20]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d004      	beq.n	8004638 <TIM_OC3_SetConfig+0xd4>
 800462e:	f641 3174 	movw	r1, #7028	@ 0x1b74
 8004632:	4815      	ldr	r0, [pc, #84]	@ (8004688 <TIM_OC3_SetConfig+0x124>)
 8004634:	f7fc fb3c 	bl	8000cb0 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800463e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004646:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	695b      	ldr	r3, [r3, #20]
 800464c:	011b      	lsls	r3, r3, #4
 800464e:	693a      	ldr	r2, [r7, #16]
 8004650:	4313      	orrs	r3, r2
 8004652:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	011b      	lsls	r3, r3, #4
 800465a:	693a      	ldr	r2, [r7, #16]
 800465c:	4313      	orrs	r3, r2
 800465e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	685a      	ldr	r2, [r3, #4]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	697a      	ldr	r2, [r7, #20]
 8004678:	621a      	str	r2, [r3, #32]
}
 800467a:	bf00      	nop
 800467c:	3718      	adds	r7, #24
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	40012c00 	.word	0x40012c00
 8004688:	08004d44 	.word	0x08004d44

0800468c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b086      	sub	sp, #24
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a1b      	ldr	r3, [r3, #32]
 80046a0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	69db      	ldr	r3, [r3, #28]
 80046b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	021b      	lsls	r3, r3, #8
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80046d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	031b      	lsls	r3, r3, #12
 80046de:	693a      	ldr	r2, [r7, #16]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a16      	ldr	r2, [pc, #88]	@ (8004740 <TIM_OC4_SetConfig+0xb4>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d117      	bne.n	800471c <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	695b      	ldr	r3, [r3, #20]
 80046f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046f4:	d008      	beq.n	8004708 <TIM_OC4_SetConfig+0x7c>
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	695b      	ldr	r3, [r3, #20]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d004      	beq.n	8004708 <TIM_OC4_SetConfig+0x7c>
 80046fe:	f641 31b3 	movw	r1, #7091	@ 0x1bb3
 8004702:	4810      	ldr	r0, [pc, #64]	@ (8004744 <TIM_OC4_SetConfig+0xb8>)
 8004704:	f7fc fad4 	bl	8000cb0 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800470e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	695b      	ldr	r3, [r3, #20]
 8004714:	019b      	lsls	r3, r3, #6
 8004716:	697a      	ldr	r2, [r7, #20]
 8004718:	4313      	orrs	r3, r2
 800471a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	685a      	ldr	r2, [r3, #4]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	693a      	ldr	r2, [r7, #16]
 8004734:	621a      	str	r2, [r3, #32]
}
 8004736:	bf00      	nop
 8004738:	3718      	adds	r7, #24
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	40012c00 	.word	0x40012c00
 8004744:	08004d44 	.word	0x08004d44

08004748 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b086      	sub	sp, #24
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	4a20      	ldr	r2, [pc, #128]	@ (80047d8 <TIM_CCxChannelCmd+0x90>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d00c      	beq.n	8004776 <TIM_CCxChannelCmd+0x2e>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004762:	d008      	beq.n	8004776 <TIM_CCxChannelCmd+0x2e>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	4a1d      	ldr	r2, [pc, #116]	@ (80047dc <TIM_CCxChannelCmd+0x94>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d004      	beq.n	8004776 <TIM_CCxChannelCmd+0x2e>
 800476c:	f641 519c 	movw	r1, #7580	@ 0x1d9c
 8004770:	481b      	ldr	r0, [pc, #108]	@ (80047e0 <TIM_CCxChannelCmd+0x98>)
 8004772:	f7fc fa9d 	bl	8000cb0 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d010      	beq.n	800479e <TIM_CCxChannelCmd+0x56>
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	2b04      	cmp	r3, #4
 8004780:	d00d      	beq.n	800479e <TIM_CCxChannelCmd+0x56>
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	2b08      	cmp	r3, #8
 8004786:	d00a      	beq.n	800479e <TIM_CCxChannelCmd+0x56>
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	2b0c      	cmp	r3, #12
 800478c:	d007      	beq.n	800479e <TIM_CCxChannelCmd+0x56>
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	2b3c      	cmp	r3, #60	@ 0x3c
 8004792:	d004      	beq.n	800479e <TIM_CCxChannelCmd+0x56>
 8004794:	f641 519d 	movw	r1, #7581	@ 0x1d9d
 8004798:	4811      	ldr	r0, [pc, #68]	@ (80047e0 <TIM_CCxChannelCmd+0x98>)
 800479a:	f7fc fa89 	bl	8000cb0 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	f003 031f 	and.w	r3, r3, #31
 80047a4:	2201      	movs	r2, #1
 80047a6:	fa02 f303 	lsl.w	r3, r2, r3
 80047aa:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6a1a      	ldr	r2, [r3, #32]
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	43db      	mvns	r3, r3
 80047b4:	401a      	ands	r2, r3
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6a1a      	ldr	r2, [r3, #32]
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	f003 031f 	and.w	r3, r3, #31
 80047c4:	6879      	ldr	r1, [r7, #4]
 80047c6:	fa01 f303 	lsl.w	r3, r1, r3
 80047ca:	431a      	orrs	r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	621a      	str	r2, [r3, #32]
}
 80047d0:	bf00      	nop
 80047d2:	3718      	adds	r7, #24
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	40012c00 	.word	0x40012c00
 80047dc:	40000400 	.word	0x40000400
 80047e0:	08004d44 	.word	0x08004d44

080047e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a48      	ldr	r2, [pc, #288]	@ (8004914 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d00e      	beq.n	8004816 <HAL_TIMEx_MasterConfigSynchronization+0x32>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004800:	d009      	beq.n	8004816 <HAL_TIMEx_MasterConfigSynchronization+0x32>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a44      	ldr	r2, [pc, #272]	@ (8004918 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d004      	beq.n	8004816 <HAL_TIMEx_MasterConfigSynchronization+0x32>
 800480c:	f240 71a9 	movw	r1, #1961	@ 0x7a9
 8004810:	4842      	ldr	r0, [pc, #264]	@ (800491c <HAL_TIMEx_MasterConfigSynchronization+0x138>)
 8004812:	f7fc fa4d 	bl	8000cb0 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d020      	beq.n	8004860 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2b10      	cmp	r3, #16
 8004824:	d01c      	beq.n	8004860 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2b20      	cmp	r3, #32
 800482c:	d018      	beq.n	8004860 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2b30      	cmp	r3, #48	@ 0x30
 8004834:	d014      	beq.n	8004860 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2b40      	cmp	r3, #64	@ 0x40
 800483c:	d010      	beq.n	8004860 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2b50      	cmp	r3, #80	@ 0x50
 8004844:	d00c      	beq.n	8004860 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2b60      	cmp	r3, #96	@ 0x60
 800484c:	d008      	beq.n	8004860 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2b70      	cmp	r3, #112	@ 0x70
 8004854:	d004      	beq.n	8004860 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004856:	f240 71aa 	movw	r1, #1962	@ 0x7aa
 800485a:	4830      	ldr	r0, [pc, #192]	@ (800491c <HAL_TIMEx_MasterConfigSynchronization+0x138>)
 800485c:	f7fc fa28 	bl	8000cb0 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	2b80      	cmp	r3, #128	@ 0x80
 8004866:	d008      	beq.n	800487a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d004      	beq.n	800487a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004870:	f240 71ab 	movw	r1, #1963	@ 0x7ab
 8004874:	4829      	ldr	r0, [pc, #164]	@ (800491c <HAL_TIMEx_MasterConfigSynchronization+0x138>)
 8004876:	f7fc fa1b 	bl	8000cb0 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004880:	2b01      	cmp	r3, #1
 8004882:	d101      	bne.n	8004888 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8004884:	2302      	movs	r3, #2
 8004886:	e041      	b.n	800490c <HAL_TIMEx_MasterConfigSynchronization+0x128>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2202      	movs	r2, #2
 8004894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a13      	ldr	r2, [pc, #76]	@ (8004914 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d009      	beq.n	80048e0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048d4:	d004      	beq.n	80048e0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a0f      	ldr	r2, [pc, #60]	@ (8004918 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d10c      	bne.n	80048fa <HAL_TIMEx_MasterConfigSynchronization+0x116>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	68ba      	ldr	r2, [r7, #8]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68ba      	ldr	r2, [r7, #8]
 80048f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800490a:	2300      	movs	r3, #0
}
 800490c:	4618      	mov	r0, r3
 800490e:	3710      	adds	r7, #16
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}
 8004914:	40012c00 	.word	0x40012c00
 8004918:	40000400 	.word	0x40000400
 800491c:	08004d7c 	.word	0x08004d7c

08004920 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800492a:	2300      	movs	r3, #0
 800492c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a5c      	ldr	r2, [pc, #368]	@ (8004aa4 <HAL_TIMEx_ConfigBreakDeadTime+0x184>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d004      	beq.n	8004942 <HAL_TIMEx_ConfigBreakDeadTime+0x22>
 8004938:	f240 71e6 	movw	r1, #2022	@ 0x7e6
 800493c:	485a      	ldr	r0, [pc, #360]	@ (8004aa8 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 800493e:	f7fc f9b7 	bl	8000cb0 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800494a:	d008      	beq.n	800495e <HAL_TIMEx_ConfigBreakDeadTime+0x3e>
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d004      	beq.n	800495e <HAL_TIMEx_ConfigBreakDeadTime+0x3e>
 8004954:	f240 71e7 	movw	r1, #2023	@ 0x7e7
 8004958:	4853      	ldr	r0, [pc, #332]	@ (8004aa8 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 800495a:	f7fc f9a9 	bl	8000cb0 <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004966:	d008      	beq.n	800497a <HAL_TIMEx_ConfigBreakDeadTime+0x5a>
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d004      	beq.n	800497a <HAL_TIMEx_ConfigBreakDeadTime+0x5a>
 8004970:	f44f 61fd 	mov.w	r1, #2024	@ 0x7e8
 8004974:	484c      	ldr	r0, [pc, #304]	@ (8004aa8 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 8004976:	f7fc f99b 	bl	8000cb0 <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d013      	beq.n	80049aa <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800498a:	d00e      	beq.n	80049aa <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004994:	d009      	beq.n	80049aa <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800499e:	d004      	beq.n	80049aa <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 80049a0:	f240 71e9 	movw	r1, #2025	@ 0x7e9
 80049a4:	4840      	ldr	r0, [pc, #256]	@ (8004aa8 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 80049a6:	f7fc f983 	bl	8000cb0 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	2bff      	cmp	r3, #255	@ 0xff
 80049b0:	d904      	bls.n	80049bc <HAL_TIMEx_ConfigBreakDeadTime+0x9c>
 80049b2:	f240 71ea 	movw	r1, #2026	@ 0x7ea
 80049b6:	483c      	ldr	r0, [pc, #240]	@ (8004aa8 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 80049b8:	f7fc f97a 	bl	8000cb0 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	691b      	ldr	r3, [r3, #16]
 80049c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049c4:	d008      	beq.n	80049d8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d004      	beq.n	80049d8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80049ce:	f240 71eb 	movw	r1, #2027	@ 0x7eb
 80049d2:	4835      	ldr	r0, [pc, #212]	@ (8004aa8 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 80049d4:	f7fc f96c 	bl	8000cb0 <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	695b      	ldr	r3, [r3, #20]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d009      	beq.n	80049f4 <HAL_TIMEx_ConfigBreakDeadTime+0xd4>
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	695b      	ldr	r3, [r3, #20]
 80049e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049e8:	d004      	beq.n	80049f4 <HAL_TIMEx_ConfigBreakDeadTime+0xd4>
 80049ea:	f240 71ec 	movw	r1, #2028	@ 0x7ec
 80049ee:	482e      	ldr	r0, [pc, #184]	@ (8004aa8 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 80049f0:	f7fc f95e 	bl	8000cb0 <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	69db      	ldr	r3, [r3, #28]
 80049f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80049fc:	d008      	beq.n	8004a10 <HAL_TIMEx_ConfigBreakDeadTime+0xf0>
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	69db      	ldr	r3, [r3, #28]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d004      	beq.n	8004a10 <HAL_TIMEx_ConfigBreakDeadTime+0xf0>
 8004a06:	f240 71ed 	movw	r1, #2029	@ 0x7ed
 8004a0a:	4827      	ldr	r0, [pc, #156]	@ (8004aa8 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 8004a0c:	f7fc f950 	bl	8000cb0 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d101      	bne.n	8004a1e <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
 8004a1a:	2302      	movs	r3, #2
 8004a1c:	e03d      	b.n	8004a9a <HAL_TIMEx_ConfigBreakDeadTime+0x17a>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	695b      	ldr	r3, [r3, #20]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	69db      	ldr	r3, [r3, #28]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3710      	adds	r7, #16
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	40012c00 	.word	0x40012c00
 8004aa8:	08004d7c 	.word	0x08004d7c

08004aac <_ZdlPvj>:
 8004aac:	f000 b800 	b.w	8004ab0 <_ZdlPv>

08004ab0 <_ZdlPv>:
 8004ab0:	f000 b800 	b.w	8004ab4 <free>

08004ab4 <free>:
 8004ab4:	4b02      	ldr	r3, [pc, #8]	@ (8004ac0 <free+0xc>)
 8004ab6:	4601      	mov	r1, r0
 8004ab8:	6818      	ldr	r0, [r3, #0]
 8004aba:	f000 b83d 	b.w	8004b38 <_free_r>
 8004abe:	bf00      	nop
 8004ac0:	2000000c 	.word	0x2000000c

08004ac4 <__malloc_lock>:
 8004ac4:	4801      	ldr	r0, [pc, #4]	@ (8004acc <__malloc_lock+0x8>)
 8004ac6:	f000 b835 	b.w	8004b34 <__retarget_lock_acquire_recursive>
 8004aca:	bf00      	nop
 8004acc:	200002e8 	.word	0x200002e8

08004ad0 <__malloc_unlock>:
 8004ad0:	4801      	ldr	r0, [pc, #4]	@ (8004ad8 <__malloc_unlock+0x8>)
 8004ad2:	f000 b830 	b.w	8004b36 <__retarget_lock_release_recursive>
 8004ad6:	bf00      	nop
 8004ad8:	200002e8 	.word	0x200002e8

08004adc <memset>:
 8004adc:	4603      	mov	r3, r0
 8004ade:	4402      	add	r2, r0
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d100      	bne.n	8004ae6 <memset+0xa>
 8004ae4:	4770      	bx	lr
 8004ae6:	f803 1b01 	strb.w	r1, [r3], #1
 8004aea:	e7f9      	b.n	8004ae0 <memset+0x4>

08004aec <__libc_init_array>:
 8004aec:	b570      	push	{r4, r5, r6, lr}
 8004aee:	2600      	movs	r6, #0
 8004af0:	4d0c      	ldr	r5, [pc, #48]	@ (8004b24 <__libc_init_array+0x38>)
 8004af2:	4c0d      	ldr	r4, [pc, #52]	@ (8004b28 <__libc_init_array+0x3c>)
 8004af4:	1b64      	subs	r4, r4, r5
 8004af6:	10a4      	asrs	r4, r4, #2
 8004af8:	42a6      	cmp	r6, r4
 8004afa:	d109      	bne.n	8004b10 <__libc_init_array+0x24>
 8004afc:	f000 f864 	bl	8004bc8 <_init>
 8004b00:	2600      	movs	r6, #0
 8004b02:	4d0a      	ldr	r5, [pc, #40]	@ (8004b2c <__libc_init_array+0x40>)
 8004b04:	4c0a      	ldr	r4, [pc, #40]	@ (8004b30 <__libc_init_array+0x44>)
 8004b06:	1b64      	subs	r4, r4, r5
 8004b08:	10a4      	asrs	r4, r4, #2
 8004b0a:	42a6      	cmp	r6, r4
 8004b0c:	d105      	bne.n	8004b1a <__libc_init_array+0x2e>
 8004b0e:	bd70      	pop	{r4, r5, r6, pc}
 8004b10:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b14:	4798      	blx	r3
 8004b16:	3601      	adds	r6, #1
 8004b18:	e7ee      	b.n	8004af8 <__libc_init_array+0xc>
 8004b1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b1e:	4798      	blx	r3
 8004b20:	3601      	adds	r6, #1
 8004b22:	e7f2      	b.n	8004b0a <__libc_init_array+0x1e>
 8004b24:	08004ddc 	.word	0x08004ddc
 8004b28:	08004ddc 	.word	0x08004ddc
 8004b2c:	08004ddc 	.word	0x08004ddc
 8004b30:	08004de0 	.word	0x08004de0

08004b34 <__retarget_lock_acquire_recursive>:
 8004b34:	4770      	bx	lr

08004b36 <__retarget_lock_release_recursive>:
 8004b36:	4770      	bx	lr

08004b38 <_free_r>:
 8004b38:	b538      	push	{r3, r4, r5, lr}
 8004b3a:	4605      	mov	r5, r0
 8004b3c:	2900      	cmp	r1, #0
 8004b3e:	d040      	beq.n	8004bc2 <_free_r+0x8a>
 8004b40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b44:	1f0c      	subs	r4, r1, #4
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	bfb8      	it	lt
 8004b4a:	18e4      	addlt	r4, r4, r3
 8004b4c:	f7ff ffba 	bl	8004ac4 <__malloc_lock>
 8004b50:	4a1c      	ldr	r2, [pc, #112]	@ (8004bc4 <_free_r+0x8c>)
 8004b52:	6813      	ldr	r3, [r2, #0]
 8004b54:	b933      	cbnz	r3, 8004b64 <_free_r+0x2c>
 8004b56:	6063      	str	r3, [r4, #4]
 8004b58:	6014      	str	r4, [r2, #0]
 8004b5a:	4628      	mov	r0, r5
 8004b5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b60:	f7ff bfb6 	b.w	8004ad0 <__malloc_unlock>
 8004b64:	42a3      	cmp	r3, r4
 8004b66:	d908      	bls.n	8004b7a <_free_r+0x42>
 8004b68:	6820      	ldr	r0, [r4, #0]
 8004b6a:	1821      	adds	r1, r4, r0
 8004b6c:	428b      	cmp	r3, r1
 8004b6e:	bf01      	itttt	eq
 8004b70:	6819      	ldreq	r1, [r3, #0]
 8004b72:	685b      	ldreq	r3, [r3, #4]
 8004b74:	1809      	addeq	r1, r1, r0
 8004b76:	6021      	streq	r1, [r4, #0]
 8004b78:	e7ed      	b.n	8004b56 <_free_r+0x1e>
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	b10b      	cbz	r3, 8004b84 <_free_r+0x4c>
 8004b80:	42a3      	cmp	r3, r4
 8004b82:	d9fa      	bls.n	8004b7a <_free_r+0x42>
 8004b84:	6811      	ldr	r1, [r2, #0]
 8004b86:	1850      	adds	r0, r2, r1
 8004b88:	42a0      	cmp	r0, r4
 8004b8a:	d10b      	bne.n	8004ba4 <_free_r+0x6c>
 8004b8c:	6820      	ldr	r0, [r4, #0]
 8004b8e:	4401      	add	r1, r0
 8004b90:	1850      	adds	r0, r2, r1
 8004b92:	4283      	cmp	r3, r0
 8004b94:	6011      	str	r1, [r2, #0]
 8004b96:	d1e0      	bne.n	8004b5a <_free_r+0x22>
 8004b98:	6818      	ldr	r0, [r3, #0]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	4408      	add	r0, r1
 8004b9e:	6010      	str	r0, [r2, #0]
 8004ba0:	6053      	str	r3, [r2, #4]
 8004ba2:	e7da      	b.n	8004b5a <_free_r+0x22>
 8004ba4:	d902      	bls.n	8004bac <_free_r+0x74>
 8004ba6:	230c      	movs	r3, #12
 8004ba8:	602b      	str	r3, [r5, #0]
 8004baa:	e7d6      	b.n	8004b5a <_free_r+0x22>
 8004bac:	6820      	ldr	r0, [r4, #0]
 8004bae:	1821      	adds	r1, r4, r0
 8004bb0:	428b      	cmp	r3, r1
 8004bb2:	bf01      	itttt	eq
 8004bb4:	6819      	ldreq	r1, [r3, #0]
 8004bb6:	685b      	ldreq	r3, [r3, #4]
 8004bb8:	1809      	addeq	r1, r1, r0
 8004bba:	6021      	streq	r1, [r4, #0]
 8004bbc:	6063      	str	r3, [r4, #4]
 8004bbe:	6054      	str	r4, [r2, #4]
 8004bc0:	e7cb      	b.n	8004b5a <_free_r+0x22>
 8004bc2:	bd38      	pop	{r3, r4, r5, pc}
 8004bc4:	200001ac 	.word	0x200001ac

08004bc8 <_init>:
 8004bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bca:	bf00      	nop
 8004bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bce:	bc08      	pop	{r3}
 8004bd0:	469e      	mov	lr, r3
 8004bd2:	4770      	bx	lr

08004bd4 <_fini>:
 8004bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bd6:	bf00      	nop
 8004bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bda:	bc08      	pop	{r3}
 8004bdc:	469e      	mov	lr, r3
 8004bde:	4770      	bx	lr
