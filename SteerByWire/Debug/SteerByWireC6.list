
SteerByWireC6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003434  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003540  08003540  00004540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003564  08003564  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003564  08003564  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003564  08003564  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003564  08003564  00004564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003568  08003568  00004568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800356c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  2000000c  08003578  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  08003578  0000515c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b227  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e6e  00000000  00000000  0001025c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  000120d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000954  00000000  00000000  00012cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000324e  00000000  00000000  00013644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d285  00000000  00000000  00016892  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a060  00000000  00000000  00023b17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000adb77  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033bc  00000000  00000000  000adbbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000b0f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003528 	.word	0x08003528

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003528 	.word	0x08003528

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 800019e:	2afd      	cmp	r2, #253	@ 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	@ 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_frsub>:
 80002b4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80002b8:	e002      	b.n	80002c0 <__addsf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_fsub>:
 80002bc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080002c0 <__addsf3>:
 80002c0:	0042      	lsls	r2, r0, #1
 80002c2:	bf1f      	itttt	ne
 80002c4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002c8:	ea92 0f03 	teqne	r2, r3
 80002cc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002d0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002d4:	d06a      	beq.n	80003ac <__addsf3+0xec>
 80002d6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002da:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002de:	bfc1      	itttt	gt
 80002e0:	18d2      	addgt	r2, r2, r3
 80002e2:	4041      	eorgt	r1, r0
 80002e4:	4048      	eorgt	r0, r1
 80002e6:	4041      	eorgt	r1, r0
 80002e8:	bfb8      	it	lt
 80002ea:	425b      	neglt	r3, r3
 80002ec:	2b19      	cmp	r3, #25
 80002ee:	bf88      	it	hi
 80002f0:	4770      	bxhi	lr
 80002f2:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80002f6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002fa:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80002fe:	bf18      	it	ne
 8000300:	4240      	negne	r0, r0
 8000302:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000306:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800030a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800030e:	bf18      	it	ne
 8000310:	4249      	negne	r1, r1
 8000312:	ea92 0f03 	teq	r2, r3
 8000316:	d03f      	beq.n	8000398 <__addsf3+0xd8>
 8000318:	f1a2 0201 	sub.w	r2, r2, #1
 800031c:	fa41 fc03 	asr.w	ip, r1, r3
 8000320:	eb10 000c 	adds.w	r0, r0, ip
 8000324:	f1c3 0320 	rsb	r3, r3, #32
 8000328:	fa01 f103 	lsl.w	r1, r1, r3
 800032c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000330:	d502      	bpl.n	8000338 <__addsf3+0x78>
 8000332:	4249      	negs	r1, r1
 8000334:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000338:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 800033c:	d313      	bcc.n	8000366 <__addsf3+0xa6>
 800033e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000342:	d306      	bcc.n	8000352 <__addsf3+0x92>
 8000344:	0840      	lsrs	r0, r0, #1
 8000346:	ea4f 0131 	mov.w	r1, r1, rrx
 800034a:	f102 0201 	add.w	r2, r2, #1
 800034e:	2afe      	cmp	r2, #254	@ 0xfe
 8000350:	d251      	bcs.n	80003f6 <__addsf3+0x136>
 8000352:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000356:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800035a:	bf08      	it	eq
 800035c:	f020 0001 	biceq.w	r0, r0, #1
 8000360:	ea40 0003 	orr.w	r0, r0, r3
 8000364:	4770      	bx	lr
 8000366:	0049      	lsls	r1, r1, #1
 8000368:	eb40 0000 	adc.w	r0, r0, r0
 800036c:	3a01      	subs	r2, #1
 800036e:	bf28      	it	cs
 8000370:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000374:	d2ed      	bcs.n	8000352 <__addsf3+0x92>
 8000376:	fab0 fc80 	clz	ip, r0
 800037a:	f1ac 0c08 	sub.w	ip, ip, #8
 800037e:	ebb2 020c 	subs.w	r2, r2, ip
 8000382:	fa00 f00c 	lsl.w	r0, r0, ip
 8000386:	bfaa      	itet	ge
 8000388:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800038c:	4252      	neglt	r2, r2
 800038e:	4318      	orrge	r0, r3
 8000390:	bfbc      	itt	lt
 8000392:	40d0      	lsrlt	r0, r2
 8000394:	4318      	orrlt	r0, r3
 8000396:	4770      	bx	lr
 8000398:	f092 0f00 	teq	r2, #0
 800039c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80003a0:	bf06      	itte	eq
 80003a2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80003a6:	3201      	addeq	r2, #1
 80003a8:	3b01      	subne	r3, #1
 80003aa:	e7b5      	b.n	8000318 <__addsf3+0x58>
 80003ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003b4:	bf18      	it	ne
 80003b6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ba:	d021      	beq.n	8000400 <__addsf3+0x140>
 80003bc:	ea92 0f03 	teq	r2, r3
 80003c0:	d004      	beq.n	80003cc <__addsf3+0x10c>
 80003c2:	f092 0f00 	teq	r2, #0
 80003c6:	bf08      	it	eq
 80003c8:	4608      	moveq	r0, r1
 80003ca:	4770      	bx	lr
 80003cc:	ea90 0f01 	teq	r0, r1
 80003d0:	bf1c      	itt	ne
 80003d2:	2000      	movne	r0, #0
 80003d4:	4770      	bxne	lr
 80003d6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80003da:	d104      	bne.n	80003e6 <__addsf3+0x126>
 80003dc:	0040      	lsls	r0, r0, #1
 80003de:	bf28      	it	cs
 80003e0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80003e4:	4770      	bx	lr
 80003e6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80003ea:	bf3c      	itt	cc
 80003ec:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80003f0:	4770      	bxcc	lr
 80003f2:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80003f6:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80003fa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003fe:	4770      	bx	lr
 8000400:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000404:	bf16      	itet	ne
 8000406:	4608      	movne	r0, r1
 8000408:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800040c:	4601      	movne	r1, r0
 800040e:	0242      	lsls	r2, r0, #9
 8000410:	bf06      	itte	eq
 8000412:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000416:	ea90 0f01 	teqeq	r0, r1
 800041a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 800041e:	4770      	bx	lr

08000420 <__aeabi_ui2f>:
 8000420:	f04f 0300 	mov.w	r3, #0
 8000424:	e004      	b.n	8000430 <__aeabi_i2f+0x8>
 8000426:	bf00      	nop

08000428 <__aeabi_i2f>:
 8000428:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	ea5f 0c00 	movs.w	ip, r0
 8000434:	bf08      	it	eq
 8000436:	4770      	bxeq	lr
 8000438:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 800043c:	4601      	mov	r1, r0
 800043e:	f04f 0000 	mov.w	r0, #0
 8000442:	e01c      	b.n	800047e <__aeabi_l2f+0x2a>

08000444 <__aeabi_ul2f>:
 8000444:	ea50 0201 	orrs.w	r2, r0, r1
 8000448:	bf08      	it	eq
 800044a:	4770      	bxeq	lr
 800044c:	f04f 0300 	mov.w	r3, #0
 8000450:	e00a      	b.n	8000468 <__aeabi_l2f+0x14>
 8000452:	bf00      	nop

08000454 <__aeabi_l2f>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000460:	d502      	bpl.n	8000468 <__aeabi_l2f+0x14>
 8000462:	4240      	negs	r0, r0
 8000464:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000468:	ea5f 0c01 	movs.w	ip, r1
 800046c:	bf02      	ittt	eq
 800046e:	4684      	moveq	ip, r0
 8000470:	4601      	moveq	r1, r0
 8000472:	2000      	moveq	r0, #0
 8000474:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000478:	bf08      	it	eq
 800047a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800047e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000482:	fabc f28c 	clz	r2, ip
 8000486:	3a08      	subs	r2, #8
 8000488:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800048c:	db10      	blt.n	80004b0 <__aeabi_l2f+0x5c>
 800048e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000492:	4463      	add	r3, ip
 8000494:	fa00 fc02 	lsl.w	ip, r0, r2
 8000498:	f1c2 0220 	rsb	r2, r2, #32
 800049c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004a0:	fa20 f202 	lsr.w	r2, r0, r2
 80004a4:	eb43 0002 	adc.w	r0, r3, r2
 80004a8:	bf08      	it	eq
 80004aa:	f020 0001 	biceq.w	r0, r0, #1
 80004ae:	4770      	bx	lr
 80004b0:	f102 0220 	add.w	r2, r2, #32
 80004b4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004b8:	f1c2 0220 	rsb	r2, r2, #32
 80004bc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004c0:	fa21 f202 	lsr.w	r2, r1, r2
 80004c4:	eb43 0002 	adc.w	r0, r3, r2
 80004c8:	bf08      	it	eq
 80004ca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004ce:	4770      	bx	lr

080004d0 <__gesf2>:
 80004d0:	f04f 3cff 	mov.w	ip, #4294967295
 80004d4:	e006      	b.n	80004e4 <__cmpsf2+0x4>
 80004d6:	bf00      	nop

080004d8 <__lesf2>:
 80004d8:	f04f 0c01 	mov.w	ip, #1
 80004dc:	e002      	b.n	80004e4 <__cmpsf2+0x4>
 80004de:	bf00      	nop

080004e0 <__cmpsf2>:
 80004e0:	f04f 0c01 	mov.w	ip, #1
 80004e4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004e8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80004ec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80004f0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80004f4:	bf18      	it	ne
 80004f6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80004fa:	d011      	beq.n	8000520 <__cmpsf2+0x40>
 80004fc:	b001      	add	sp, #4
 80004fe:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000502:	bf18      	it	ne
 8000504:	ea90 0f01 	teqne	r0, r1
 8000508:	bf58      	it	pl
 800050a:	ebb2 0003 	subspl.w	r0, r2, r3
 800050e:	bf88      	it	hi
 8000510:	17c8      	asrhi	r0, r1, #31
 8000512:	bf38      	it	cc
 8000514:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000518:	bf18      	it	ne
 800051a:	f040 0001 	orrne.w	r0, r0, #1
 800051e:	4770      	bx	lr
 8000520:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000524:	d102      	bne.n	800052c <__cmpsf2+0x4c>
 8000526:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800052a:	d105      	bne.n	8000538 <__cmpsf2+0x58>
 800052c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000530:	d1e4      	bne.n	80004fc <__cmpsf2+0x1c>
 8000532:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000536:	d0e1      	beq.n	80004fc <__cmpsf2+0x1c>
 8000538:	f85d 0b04 	ldr.w	r0, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <__aeabi_cfrcmple>:
 8000540:	4684      	mov	ip, r0
 8000542:	4608      	mov	r0, r1
 8000544:	4661      	mov	r1, ip
 8000546:	e7ff      	b.n	8000548 <__aeabi_cfcmpeq>

08000548 <__aeabi_cfcmpeq>:
 8000548:	b50f      	push	{r0, r1, r2, r3, lr}
 800054a:	f7ff ffc9 	bl	80004e0 <__cmpsf2>
 800054e:	2800      	cmp	r0, #0
 8000550:	bf48      	it	mi
 8000552:	f110 0f00 	cmnmi.w	r0, #0
 8000556:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000558 <__aeabi_fcmpeq>:
 8000558:	f84d ed08 	str.w	lr, [sp, #-8]!
 800055c:	f7ff fff4 	bl	8000548 <__aeabi_cfcmpeq>
 8000560:	bf0c      	ite	eq
 8000562:	2001      	moveq	r0, #1
 8000564:	2000      	movne	r0, #0
 8000566:	f85d fb08 	ldr.w	pc, [sp], #8
 800056a:	bf00      	nop

0800056c <__aeabi_fcmplt>:
 800056c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000570:	f7ff ffea 	bl	8000548 <__aeabi_cfcmpeq>
 8000574:	bf34      	ite	cc
 8000576:	2001      	movcc	r0, #1
 8000578:	2000      	movcs	r0, #0
 800057a:	f85d fb08 	ldr.w	pc, [sp], #8
 800057e:	bf00      	nop

08000580 <__aeabi_fcmple>:
 8000580:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000584:	f7ff ffe0 	bl	8000548 <__aeabi_cfcmpeq>
 8000588:	bf94      	ite	ls
 800058a:	2001      	movls	r0, #1
 800058c:	2000      	movhi	r0, #0
 800058e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000592:	bf00      	nop

08000594 <__aeabi_fcmpge>:
 8000594:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000598:	f7ff ffd2 	bl	8000540 <__aeabi_cfrcmple>
 800059c:	bf94      	ite	ls
 800059e:	2001      	movls	r0, #1
 80005a0:	2000      	movhi	r0, #0
 80005a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005a6:	bf00      	nop

080005a8 <__aeabi_fcmpgt>:
 80005a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ac:	f7ff ffc8 	bl	8000540 <__aeabi_cfrcmple>
 80005b0:	bf34      	ite	cc
 80005b2:	2001      	movcc	r0, #1
 80005b4:	2000      	movcs	r0, #0
 80005b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ba:	bf00      	nop

080005bc <__aeabi_f2iz>:
 80005bc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80005c0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80005c4:	d30f      	bcc.n	80005e6 <__aeabi_f2iz+0x2a>
 80005c6:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80005ca:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80005ce:	d90d      	bls.n	80005ec <__aeabi_f2iz+0x30>
 80005d0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80005d4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80005d8:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80005dc:	fa23 f002 	lsr.w	r0, r3, r2
 80005e0:	bf18      	it	ne
 80005e2:	4240      	negne	r0, r0
 80005e4:	4770      	bx	lr
 80005e6:	f04f 0000 	mov.w	r0, #0
 80005ea:	4770      	bx	lr
 80005ec:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80005f0:	d101      	bne.n	80005f6 <__aeabi_f2iz+0x3a>
 80005f2:	0242      	lsls	r2, r0, #9
 80005f4:	d105      	bne.n	8000602 <__aeabi_f2iz+0x46>
 80005f6:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 80005fa:	bf08      	it	eq
 80005fc:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000600:	4770      	bx	lr
 8000602:	f04f 0000 	mov.w	r0, #0
 8000606:	4770      	bx	lr

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b08a      	sub	sp, #40	@ 0x28
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  MotorControl motorControl(&htim2, TIM_CHANNEL_1);
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	2200      	movs	r2, #0
 8000612:	490f      	ldr	r1, [pc, #60]	@ (8000650 <main+0x48>)
 8000614:	4618      	mov	r0, r3
 8000616:	f000 fb27 	bl	8000c68 <_ZN12MotorControlC1EP17TIM_HandleTypeDefm>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061a:	f000 fe29 	bl	8001270 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061e:	f000 f819 	bl	8000654 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000622:	f000 fab9 	bl	8000b98 <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 8000626:	f000 f87f 	bl	8000728 <_ZL12MX_ADC1_Initv>
  MX_CAN_Init();
 800062a:	f000 f8c5 	bl	80007b8 <_ZL11MX_CAN_Initv>
  MX_TIM1_Init();
 800062e:	f000 f8fd 	bl	800082c <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 8000632:	f000 f9b5 	bl	80009a0 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 8000636:	f000 fa51 	bl	8000adc <_ZL12MX_TIM3_Initv>
  /* USER CODE BEGIN 2 */
  motorControl.start();
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	4618      	mov	r0, r3
 800063e:	f000 fb45 	bl	8000ccc <_ZN12MotorControl5startEv>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  motorControl.steerToAngle(10, 50);
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	2232      	movs	r2, #50	@ 0x32
 8000646:	210a      	movs	r1, #10
 8000648:	4618      	mov	r0, r3
 800064a:	f000 fbed 	bl	8000e28 <_ZN12MotorControl12steerToAngleEhh>
 800064e:	e7f8      	b.n	8000642 <main+0x3a>
 8000650:	200000c8 	.word	0x200000c8

08000654 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b094      	sub	sp, #80	@ 0x50
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800065e:	2228      	movs	r2, #40	@ 0x28
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f002 ff33 	bl	80034ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	f107 0314 	add.w	r3, r7, #20
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000678:	1d3b      	adds	r3, r7, #4
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
 8000682:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000684:	2301      	movs	r3, #1
 8000686:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000688:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800068c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000692:	2301      	movs	r3, #1
 8000694:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000696:	2302      	movs	r3, #2
 8000698:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800069a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800069e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006a0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80006a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006aa:	4618      	mov	r0, r3
 80006ac:	f001 fbc6 	bl	8001e3c <HAL_RCC_OscConfig>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	bf14      	ite	ne
 80006b6:	2301      	movne	r3, #1
 80006b8:	2300      	moveq	r3, #0
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 80006c0:	f000 facc 	bl	8000c5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c4:	230f      	movs	r3, #15
 80006c6:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c8:	2302      	movs	r3, #2
 80006ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006d4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	2102      	movs	r1, #2
 80006e0:	4618      	mov	r0, r3
 80006e2:	f001 fe2d 	bl	8002340 <HAL_RCC_ClockConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	bf14      	ite	ne
 80006ec:	2301      	movne	r3, #1
 80006ee:	2300      	moveq	r3, #0
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 80006f6:	f000 fab1 	bl	8000c5c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80006fa:	2302      	movs	r3, #2
 80006fc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80006fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000702:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	4618      	mov	r0, r3
 8000708:	f001 ff76 	bl	80025f8 <HAL_RCCEx_PeriphCLKConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	bf14      	ite	ne
 8000712:	2301      	movne	r3, #1
 8000714:	2300      	moveq	r3, #0
 8000716:	b2db      	uxtb	r3, r3
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <_Z18SystemClock_Configv+0xcc>
  {
    Error_Handler();
 800071c:	f000 fa9e 	bl	8000c5c <Error_Handler>
  }
}
 8000720:	bf00      	nop
 8000722:	3750      	adds	r7, #80	@ 0x50
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}

08000728 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000738:	4b1d      	ldr	r3, [pc, #116]	@ (80007b0 <_ZL12MX_ADC1_Initv+0x88>)
 800073a:	4a1e      	ldr	r2, [pc, #120]	@ (80007b4 <_ZL12MX_ADC1_Initv+0x8c>)
 800073c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800073e:	4b1c      	ldr	r3, [pc, #112]	@ (80007b0 <_ZL12MX_ADC1_Initv+0x88>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000744:	4b1a      	ldr	r3, [pc, #104]	@ (80007b0 <_ZL12MX_ADC1_Initv+0x88>)
 8000746:	2201      	movs	r2, #1
 8000748:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800074a:	4b19      	ldr	r3, [pc, #100]	@ (80007b0 <_ZL12MX_ADC1_Initv+0x88>)
 800074c:	2200      	movs	r2, #0
 800074e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000750:	4b17      	ldr	r3, [pc, #92]	@ (80007b0 <_ZL12MX_ADC1_Initv+0x88>)
 8000752:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000756:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000758:	4b15      	ldr	r3, [pc, #84]	@ (80007b0 <_ZL12MX_ADC1_Initv+0x88>)
 800075a:	2200      	movs	r2, #0
 800075c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800075e:	4b14      	ldr	r3, [pc, #80]	@ (80007b0 <_ZL12MX_ADC1_Initv+0x88>)
 8000760:	2201      	movs	r2, #1
 8000762:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000764:	4812      	ldr	r0, [pc, #72]	@ (80007b0 <_ZL12MX_ADC1_Initv+0x88>)
 8000766:	f000 fde5 	bl	8001334 <HAL_ADC_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	bf14      	ite	ne
 8000770:	2301      	movne	r3, #1
 8000772:	2300      	moveq	r3, #0
 8000774:	b2db      	uxtb	r3, r3
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <_ZL12MX_ADC1_Initv+0x56>
  {
    Error_Handler();
 800077a:	f000 fa6f 	bl	8000c5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800077e:	2303      	movs	r3, #3
 8000780:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000782:	2301      	movs	r3, #1
 8000784:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000786:	2300      	movs	r3, #0
 8000788:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800078a:	1d3b      	adds	r3, r7, #4
 800078c:	4619      	mov	r1, r3
 800078e:	4808      	ldr	r0, [pc, #32]	@ (80007b0 <_ZL12MX_ADC1_Initv+0x88>)
 8000790:	f000 fea8 	bl	80014e4 <HAL_ADC_ConfigChannel>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	bf14      	ite	ne
 800079a:	2301      	movne	r3, #1
 800079c:	2300      	moveq	r3, #0
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <_ZL12MX_ADC1_Initv+0x80>
  {
    Error_Handler();
 80007a4:	f000 fa5a 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007a8:	bf00      	nop
 80007aa:	3710      	adds	r7, #16
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20000028 	.word	0x20000028
 80007b4:	40012400 	.word	0x40012400

080007b8 <_ZL11MX_CAN_Initv>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80007bc:	4b19      	ldr	r3, [pc, #100]	@ (8000824 <_ZL11MX_CAN_Initv+0x6c>)
 80007be:	4a1a      	ldr	r2, [pc, #104]	@ (8000828 <_ZL11MX_CAN_Initv+0x70>)
 80007c0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80007c2:	4b18      	ldr	r3, [pc, #96]	@ (8000824 <_ZL11MX_CAN_Initv+0x6c>)
 80007c4:	2210      	movs	r2, #16
 80007c6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80007c8:	4b16      	ldr	r3, [pc, #88]	@ (8000824 <_ZL11MX_CAN_Initv+0x6c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007ce:	4b15      	ldr	r3, [pc, #84]	@ (8000824 <_ZL11MX_CAN_Initv+0x6c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80007d4:	4b13      	ldr	r3, [pc, #76]	@ (8000824 <_ZL11MX_CAN_Initv+0x6c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80007da:	4b12      	ldr	r3, [pc, #72]	@ (8000824 <_ZL11MX_CAN_Initv+0x6c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80007e0:	4b10      	ldr	r3, [pc, #64]	@ (8000824 <_ZL11MX_CAN_Initv+0x6c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80007e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000824 <_ZL11MX_CAN_Initv+0x6c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80007ec:	4b0d      	ldr	r3, [pc, #52]	@ (8000824 <_ZL11MX_CAN_Initv+0x6c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80007f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000824 <_ZL11MX_CAN_Initv+0x6c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80007f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000824 <_ZL11MX_CAN_Initv+0x6c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80007fe:	4b09      	ldr	r3, [pc, #36]	@ (8000824 <_ZL11MX_CAN_Initv+0x6c>)
 8000800:	2200      	movs	r2, #0
 8000802:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000804:	4807      	ldr	r0, [pc, #28]	@ (8000824 <_ZL11MX_CAN_Initv+0x6c>)
 8000806:	f000 ffa6 	bl	8001756 <HAL_CAN_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	bf14      	ite	ne
 8000810:	2301      	movne	r3, #1
 8000812:	2300      	moveq	r3, #0
 8000814:	b2db      	uxtb	r3, r3
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <_ZL11MX_CAN_Initv+0x66>
  {
    Error_Handler();
 800081a:	f000 fa1f 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000058 	.word	0x20000058
 8000828:	40006400 	.word	0x40006400

0800082c <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b092      	sub	sp, #72	@ 0x48
 8000830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000832:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800083c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]
 800084c:	615a      	str	r2, [r3, #20]
 800084e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000850:	1d3b      	adds	r3, r7, #4
 8000852:	2220      	movs	r2, #32
 8000854:	2100      	movs	r1, #0
 8000856:	4618      	mov	r0, r3
 8000858:	f002 fe39 	bl	80034ce <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800085c:	4b4e      	ldr	r3, [pc, #312]	@ (8000998 <_ZL12MX_TIM1_Initv+0x16c>)
 800085e:	4a4f      	ldr	r2, [pc, #316]	@ (800099c <_ZL12MX_TIM1_Initv+0x170>)
 8000860:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000862:	4b4d      	ldr	r3, [pc, #308]	@ (8000998 <_ZL12MX_TIM1_Initv+0x16c>)
 8000864:	2200      	movs	r2, #0
 8000866:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000868:	4b4b      	ldr	r3, [pc, #300]	@ (8000998 <_ZL12MX_TIM1_Initv+0x16c>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800086e:	4b4a      	ldr	r3, [pc, #296]	@ (8000998 <_ZL12MX_TIM1_Initv+0x16c>)
 8000870:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000874:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000876:	4b48      	ldr	r3, [pc, #288]	@ (8000998 <_ZL12MX_TIM1_Initv+0x16c>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800087c:	4b46      	ldr	r3, [pc, #280]	@ (8000998 <_ZL12MX_TIM1_Initv+0x16c>)
 800087e:	2200      	movs	r2, #0
 8000880:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000882:	4b45      	ldr	r3, [pc, #276]	@ (8000998 <_ZL12MX_TIM1_Initv+0x16c>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000888:	4843      	ldr	r0, [pc, #268]	@ (8000998 <_ZL12MX_TIM1_Initv+0x16c>)
 800088a:	f001 ffba 	bl	8002802 <HAL_TIM_PWM_Init>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	bf14      	ite	ne
 8000894:	2301      	movne	r3, #1
 8000896:	2300      	moveq	r3, #0
 8000898:	b2db      	uxtb	r3, r3
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <_ZL12MX_TIM1_Initv+0x76>
  {
    Error_Handler();
 800089e:	f000 f9dd 	bl	8000c5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008a2:	2300      	movs	r3, #0
 80008a4:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008a6:	2300      	movs	r3, #0
 80008a8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008aa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80008ae:	4619      	mov	r1, r3
 80008b0:	4839      	ldr	r0, [pc, #228]	@ (8000998 <_ZL12MX_TIM1_Initv+0x16c>)
 80008b2:	f002 fd63 	bl	800337c <HAL_TIMEx_MasterConfigSynchronization>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	bf14      	ite	ne
 80008bc:	2301      	movne	r3, #1
 80008be:	2300      	moveq	r3, #0
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <_ZL12MX_TIM1_Initv+0x9e>
  {
    Error_Handler();
 80008c6:	f000 f9c9 	bl	8000c5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008ca:	2360      	movs	r3, #96	@ 0x60
 80008cc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008d2:	2300      	movs	r3, #0
 80008d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008d6:	2300      	movs	r3, #0
 80008d8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008da:	2300      	movs	r3, #0
 80008dc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008de:	2300      	movs	r3, #0
 80008e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008e2:	2300      	movs	r3, #0
 80008e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008ea:	2200      	movs	r2, #0
 80008ec:	4619      	mov	r1, r3
 80008ee:	482a      	ldr	r0, [pc, #168]	@ (8000998 <_ZL12MX_TIM1_Initv+0x16c>)
 80008f0:	f002 f914 	bl	8002b1c <HAL_TIM_PWM_ConfigChannel>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	bf14      	ite	ne
 80008fa:	2301      	movne	r3, #1
 80008fc:	2300      	moveq	r3, #0
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <_ZL12MX_TIM1_Initv+0xdc>
  {
    Error_Handler();
 8000904:	f000 f9aa 	bl	8000c5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000908:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800090c:	2208      	movs	r2, #8
 800090e:	4619      	mov	r1, r3
 8000910:	4821      	ldr	r0, [pc, #132]	@ (8000998 <_ZL12MX_TIM1_Initv+0x16c>)
 8000912:	f002 f903 	bl	8002b1c <HAL_TIM_PWM_ConfigChannel>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	bf14      	ite	ne
 800091c:	2301      	movne	r3, #1
 800091e:	2300      	moveq	r3, #0
 8000920:	b2db      	uxtb	r3, r3
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <_ZL12MX_TIM1_Initv+0xfe>
  {
    Error_Handler();
 8000926:	f000 f999 	bl	8000c5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800092a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800092e:	220c      	movs	r2, #12
 8000930:	4619      	mov	r1, r3
 8000932:	4819      	ldr	r0, [pc, #100]	@ (8000998 <_ZL12MX_TIM1_Initv+0x16c>)
 8000934:	f002 f8f2 	bl	8002b1c <HAL_TIM_PWM_ConfigChannel>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	bf14      	ite	ne
 800093e:	2301      	movne	r3, #1
 8000940:	2300      	moveq	r3, #0
 8000942:	b2db      	uxtb	r3, r3
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <_ZL12MX_TIM1_Initv+0x120>
  {
    Error_Handler();
 8000948:	f000 f988 	bl	8000c5c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800094c:	2300      	movs	r3, #0
 800094e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000950:	2300      	movs	r3, #0
 8000952:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000954:	2300      	movs	r3, #0
 8000956:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000960:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000964:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000966:	2300      	movs	r3, #0
 8000968:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	4619      	mov	r1, r3
 800096e:	480a      	ldr	r0, [pc, #40]	@ (8000998 <_ZL12MX_TIM1_Initv+0x16c>)
 8000970:	f002 fd5c 	bl	800342c <HAL_TIMEx_ConfigBreakDeadTime>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	bf14      	ite	ne
 800097a:	2301      	movne	r3, #1
 800097c:	2300      	moveq	r3, #0
 800097e:	b2db      	uxtb	r3, r3
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <_ZL12MX_TIM1_Initv+0x15c>
  {
    Error_Handler();
 8000984:	f000 f96a 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000988:	4803      	ldr	r0, [pc, #12]	@ (8000998 <_ZL12MX_TIM1_Initv+0x16c>)
 800098a:	f000 fbc7 	bl	800111c <HAL_TIM_MspPostInit>

}
 800098e:	bf00      	nop
 8000990:	3748      	adds	r7, #72	@ 0x48
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000080 	.word	0x20000080
 800099c:	40012c00 	.word	0x40012c00

080009a0 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08e      	sub	sp, #56	@ 0x38
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b4:	f107 0320 	add.w	r3, r7, #32
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009be:	1d3b      	adds	r3, r7, #4
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]
 80009ca:	611a      	str	r2, [r3, #16]
 80009cc:	615a      	str	r2, [r3, #20]
 80009ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009d0:	4b41      	ldr	r3, [pc, #260]	@ (8000ad8 <_ZL12MX_TIM2_Initv+0x138>)
 80009d2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80009d8:	4b3f      	ldr	r3, [pc, #252]	@ (8000ad8 <_ZL12MX_TIM2_Initv+0x138>)
 80009da:	2200      	movs	r2, #0
 80009dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009de:	4b3e      	ldr	r3, [pc, #248]	@ (8000ad8 <_ZL12MX_TIM2_Initv+0x138>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 6553;
 80009e4:	4b3c      	ldr	r3, [pc, #240]	@ (8000ad8 <_ZL12MX_TIM2_Initv+0x138>)
 80009e6:	f641 1299 	movw	r2, #6553	@ 0x1999
 80009ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ec:	4b3a      	ldr	r3, [pc, #232]	@ (8000ad8 <_ZL12MX_TIM2_Initv+0x138>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009f2:	4b39      	ldr	r3, [pc, #228]	@ (8000ad8 <_ZL12MX_TIM2_Initv+0x138>)
 80009f4:	2280      	movs	r2, #128	@ 0x80
 80009f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009f8:	4837      	ldr	r0, [pc, #220]	@ (8000ad8 <_ZL12MX_TIM2_Initv+0x138>)
 80009fa:	f001 feb3 	bl	8002764 <HAL_TIM_Base_Init>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	bf14      	ite	ne
 8000a04:	2301      	movne	r3, #1
 8000a06:	2300      	moveq	r3, #0
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <_ZL12MX_TIM2_Initv+0x72>
  {
    Error_Handler();
 8000a0e:	f000 f925 	bl	8000c5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a12:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a16:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a18:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	482e      	ldr	r0, [pc, #184]	@ (8000ad8 <_ZL12MX_TIM2_Initv+0x138>)
 8000a20:	f002 f93e 	bl	8002ca0 <HAL_TIM_ConfigClockSource>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	bf14      	ite	ne
 8000a2a:	2301      	movne	r3, #1
 8000a2c:	2300      	moveq	r3, #0
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <_ZL12MX_TIM2_Initv+0x98>
  {
    Error_Handler();
 8000a34:	f000 f912 	bl	8000c5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a38:	4827      	ldr	r0, [pc, #156]	@ (8000ad8 <_ZL12MX_TIM2_Initv+0x138>)
 8000a3a:	f001 fee2 	bl	8002802 <HAL_TIM_PWM_Init>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	bf14      	ite	ne
 8000a44:	2301      	movne	r3, #1
 8000a46:	2300      	moveq	r3, #0
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <_ZL12MX_TIM2_Initv+0xb2>
  {
    Error_Handler();
 8000a4e:	f000 f905 	bl	8000c5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a52:	2300      	movs	r3, #0
 8000a54:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a56:	2300      	movs	r3, #0
 8000a58:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a5a:	f107 0320 	add.w	r3, r7, #32
 8000a5e:	4619      	mov	r1, r3
 8000a60:	481d      	ldr	r0, [pc, #116]	@ (8000ad8 <_ZL12MX_TIM2_Initv+0x138>)
 8000a62:	f002 fc8b 	bl	800337c <HAL_TIMEx_MasterConfigSynchronization>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	bf14      	ite	ne
 8000a6c:	2301      	movne	r3, #1
 8000a6e:	2300      	moveq	r3, #0
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <_ZL12MX_TIM2_Initv+0xda>
  {
    Error_Handler();
 8000a76:	f000 f8f1 	bl	8000c5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a7a:	2360      	movs	r3, #96	@ 0x60
 8000a7c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a82:	2300      	movs	r3, #0
 8000a84:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a86:	2300      	movs	r3, #0
 8000a88:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a8a:	1d3b      	adds	r3, r7, #4
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4811      	ldr	r0, [pc, #68]	@ (8000ad8 <_ZL12MX_TIM2_Initv+0x138>)
 8000a92:	f002 f843 	bl	8002b1c <HAL_TIM_PWM_ConfigChannel>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	bf14      	ite	ne
 8000a9c:	2301      	movne	r3, #1
 8000a9e:	2300      	moveq	r3, #0
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <_ZL12MX_TIM2_Initv+0x10a>
  {
    Error_Handler();
 8000aa6:	f000 f8d9 	bl	8000c5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000aaa:	1d3b      	adds	r3, r7, #4
 8000aac:	2208      	movs	r2, #8
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4809      	ldr	r0, [pc, #36]	@ (8000ad8 <_ZL12MX_TIM2_Initv+0x138>)
 8000ab2:	f002 f833 	bl	8002b1c <HAL_TIM_PWM_ConfigChannel>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	bf14      	ite	ne
 8000abc:	2301      	movne	r3, #1
 8000abe:	2300      	moveq	r3, #0
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <_ZL12MX_TIM2_Initv+0x12a>
  {
    Error_Handler();
 8000ac6:	f000 f8c9 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000aca:	4803      	ldr	r0, [pc, #12]	@ (8000ad8 <_ZL12MX_TIM2_Initv+0x138>)
 8000acc:	f000 fb26 	bl	800111c <HAL_TIM_MspPostInit>

}
 8000ad0:	bf00      	nop
 8000ad2:	3738      	adds	r7, #56	@ 0x38
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	200000c8 	.word	0x200000c8

08000adc <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08c      	sub	sp, #48	@ 0x30
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ae2:	f107 030c 	add.w	r3, r7, #12
 8000ae6:	2224      	movs	r2, #36	@ 0x24
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4618      	mov	r0, r3
 8000aec:	f002 fcef 	bl	80034ce <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000af0:	1d3b      	adds	r3, r7, #4
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000af8:	4b25      	ldr	r3, [pc, #148]	@ (8000b90 <_ZL12MX_TIM3_Initv+0xb4>)
 8000afa:	4a26      	ldr	r2, [pc, #152]	@ (8000b94 <_ZL12MX_TIM3_Initv+0xb8>)
 8000afc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000afe:	4b24      	ldr	r3, [pc, #144]	@ (8000b90 <_ZL12MX_TIM3_Initv+0xb4>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b04:	4b22      	ldr	r3, [pc, #136]	@ (8000b90 <_ZL12MX_TIM3_Initv+0xb4>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000b0a:	4b21      	ldr	r3, [pc, #132]	@ (8000b90 <_ZL12MX_TIM3_Initv+0xb4>)
 8000b0c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b10:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b12:	4b1f      	ldr	r3, [pc, #124]	@ (8000b90 <_ZL12MX_TIM3_Initv+0xb4>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b18:	4b1d      	ldr	r3, [pc, #116]	@ (8000b90 <_ZL12MX_TIM3_Initv+0xb4>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b22:	2300      	movs	r3, #0
 8000b24:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b26:	2301      	movs	r3, #1
 8000b28:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b32:	2300      	movs	r3, #0
 8000b34:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b36:	2301      	movs	r3, #1
 8000b38:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000b42:	f107 030c 	add.w	r3, r7, #12
 8000b46:	4619      	mov	r1, r3
 8000b48:	4811      	ldr	r0, [pc, #68]	@ (8000b90 <_ZL12MX_TIM3_Initv+0xb4>)
 8000b4a:	f001 ff45 	bl	80029d8 <HAL_TIM_Encoder_Init>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	bf14      	ite	ne
 8000b54:	2301      	movne	r3, #1
 8000b56:	2300      	moveq	r3, #0
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <_ZL12MX_TIM3_Initv+0x86>
  {
    Error_Handler();
 8000b5e:	f000 f87d 	bl	8000c5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b62:	2300      	movs	r3, #0
 8000b64:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b66:	2300      	movs	r3, #0
 8000b68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4808      	ldr	r0, [pc, #32]	@ (8000b90 <_ZL12MX_TIM3_Initv+0xb4>)
 8000b70:	f002 fc04 	bl	800337c <HAL_TIMEx_MasterConfigSynchronization>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	bf14      	ite	ne
 8000b7a:	2301      	movne	r3, #1
 8000b7c:	2300      	moveq	r3, #0
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <_ZL12MX_TIM3_Initv+0xac>
  {
    Error_Handler();
 8000b84:	f000 f86a 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b88:	bf00      	nop
 8000b8a:	3730      	adds	r7, #48	@ 0x30
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20000110 	.word	0x20000110
 8000b94:	40000400 	.word	0x40000400

08000b98 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b088      	sub	sp, #32
 8000b9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9e:	f107 0310 	add.w	r3, r7, #16
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	609a      	str	r2, [r3, #8]
 8000baa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bac:	4b28      	ldr	r3, [pc, #160]	@ (8000c50 <_ZL12MX_GPIO_Initv+0xb8>)
 8000bae:	699b      	ldr	r3, [r3, #24]
 8000bb0:	4a27      	ldr	r2, [pc, #156]	@ (8000c50 <_ZL12MX_GPIO_Initv+0xb8>)
 8000bb2:	f043 0320 	orr.w	r3, r3, #32
 8000bb6:	6193      	str	r3, [r2, #24]
 8000bb8:	4b25      	ldr	r3, [pc, #148]	@ (8000c50 <_ZL12MX_GPIO_Initv+0xb8>)
 8000bba:	699b      	ldr	r3, [r3, #24]
 8000bbc:	f003 0320 	and.w	r3, r3, #32
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc4:	4b22      	ldr	r3, [pc, #136]	@ (8000c50 <_ZL12MX_GPIO_Initv+0xb8>)
 8000bc6:	699b      	ldr	r3, [r3, #24]
 8000bc8:	4a21      	ldr	r2, [pc, #132]	@ (8000c50 <_ZL12MX_GPIO_Initv+0xb8>)
 8000bca:	f043 0304 	orr.w	r3, r3, #4
 8000bce:	6193      	str	r3, [r2, #24]
 8000bd0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c50 <_ZL12MX_GPIO_Initv+0xb8>)
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	f003 0304 	and.w	r3, r3, #4
 8000bd8:	60bb      	str	r3, [r7, #8]
 8000bda:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bdc:	4b1c      	ldr	r3, [pc, #112]	@ (8000c50 <_ZL12MX_GPIO_Initv+0xb8>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	4a1b      	ldr	r2, [pc, #108]	@ (8000c50 <_ZL12MX_GPIO_Initv+0xb8>)
 8000be2:	f043 0308 	orr.w	r3, r3, #8
 8000be6:	6193      	str	r3, [r2, #24]
 8000be8:	4b19      	ldr	r3, [pc, #100]	@ (8000c50 <_ZL12MX_GPIO_Initv+0xb8>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	f003 0308 	and.w	r3, r3, #8
 8000bf0:	607b      	str	r3, [r7, #4]
 8000bf2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000bfa:	4816      	ldr	r0, [pc, #88]	@ (8000c54 <_ZL12MX_GPIO_Initv+0xbc>)
 8000bfc:	f001 f906 	bl	8001e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000c00:	2200      	movs	r2, #0
 8000c02:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c06:	4814      	ldr	r0, [pc, #80]	@ (8000c58 <_ZL12MX_GPIO_Initv+0xc0>)
 8000c08:	f001 f900 	bl	8001e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c0c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c12:	2301      	movs	r3, #1
 8000c14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c1e:	f107 0310 	add.w	r3, r7, #16
 8000c22:	4619      	mov	r1, r3
 8000c24:	480b      	ldr	r0, [pc, #44]	@ (8000c54 <_ZL12MX_GPIO_Initv+0xbc>)
 8000c26:	f000 ff75 	bl	8001b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c2a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c30:	2301      	movs	r3, #1
 8000c32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3c:	f107 0310 	add.w	r3, r7, #16
 8000c40:	4619      	mov	r1, r3
 8000c42:	4805      	ldr	r0, [pc, #20]	@ (8000c58 <_ZL12MX_GPIO_Initv+0xc0>)
 8000c44:	f000 ff66 	bl	8001b14 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c48:	bf00      	nop
 8000c4a:	3720      	adds	r7, #32
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40021000 	.word	0x40021000
 8000c54:	40010c00 	.word	0x40010c00
 8000c58:	40010800 	.word	0x40010800

08000c5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c60:	b672      	cpsid	i
}
 8000c62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <Error_Handler+0x8>

08000c68 <_ZN12MotorControlC1EP17TIM_HandleTypeDefm>:
 */

#include "motorControl.hpp"

// Constructor
MotorControl::MotorControl(TIM_HandleTypeDef* timer, uint32_t channel)
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	60f8      	str	r0, [r7, #12]
 8000c70:	60b9      	str	r1, [r7, #8]
 8000c72:	607a      	str	r2, [r7, #4]
    : htim(timer), channel(channel), lastDirection(GPIO_PIN_SET),
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	68ba      	ldr	r2, [r7, #8]
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	687a      	ldr	r2, [r7, #4]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	2201      	movs	r2, #1
 8000c84:	721a      	strb	r2, [r3, #8]
      kp(1.0f), ki(0.1f), kd(0.01f), integral(0), previousError(0) {}
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	4a0c      	ldr	r2, [pc, #48]	@ (8000cc4 <_ZN12MotorControlC1EP17TIM_HandleTypeDefm+0x5c>)
 8000c92:	611a      	str	r2, [r3, #16]
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	4a0c      	ldr	r2, [pc, #48]	@ (8000cc8 <_ZN12MotorControlC1EP17TIM_HandleTypeDefm+0x60>)
 8000c98:	615a      	str	r2, [r3, #20]
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	f04f 0200 	mov.w	r2, #0
 8000ca0:	619a      	str	r2, [r3, #24]
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	f04f 0200 	mov.w	r2, #0
 8000ca8:	61da      	str	r2, [r3, #28]
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cb0:	841a      	strh	r2, [r3, #32]
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	845a      	strh	r2, [r3, #34]	@ 0x22
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3714      	adds	r7, #20
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bc80      	pop	{r7}
 8000cc2:	4770      	bx	lr
 8000cc4:	3dcccccd 	.word	0x3dcccccd
 8000cc8:	3c23d70a 	.word	0x3c23d70a

08000ccc <_ZN12MotorControl5startEv>:

// Starts PWM
void MotorControl::start() {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Start(htim, channel);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4610      	mov	r0, r2
 8000ce0:	f001 fdde 	bl	80028a0 <HAL_TIM_PWM_Start>
}
 8000ce4:	bf00      	nop
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}

08000cec <_ZN12MotorControl12setDutyCycleEt>:

// Sets steer speed (duty cycle)
void MotorControl::setDutyCycle(uint16_t dutyCycle) {
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	460b      	mov	r3, r1
 8000cf6:	807b      	strh	r3, [r7, #2]
    __HAL_TIM_SET_COMPARE(htim, channel, dutyCycle);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d105      	bne.n	8000d0c <_ZN12MotorControl12setDutyCycleEt+0x20>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	887a      	ldrh	r2, [r7, #2]
 8000d08:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000d0a:	e018      	b.n	8000d3e <_ZN12MotorControl12setDutyCycleEt+0x52>
    __HAL_TIM_SET_COMPARE(htim, channel, dutyCycle);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	2b04      	cmp	r3, #4
 8000d12:	d105      	bne.n	8000d20 <_ZN12MotorControl12setDutyCycleEt+0x34>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	887a      	ldrh	r2, [r7, #2]
 8000d1c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000d1e:	e00e      	b.n	8000d3e <_ZN12MotorControl12setDutyCycleEt+0x52>
    __HAL_TIM_SET_COMPARE(htim, channel, dutyCycle);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	2b08      	cmp	r3, #8
 8000d26:	d105      	bne.n	8000d34 <_ZN12MotorControl12setDutyCycleEt+0x48>
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	887a      	ldrh	r2, [r7, #2]
 8000d30:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000d32:	e004      	b.n	8000d3e <_ZN12MotorControl12setDutyCycleEt+0x52>
    __HAL_TIM_SET_COMPARE(htim, channel, dutyCycle);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	887a      	ldrh	r2, [r7, #2]
 8000d3c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000d3e:	bf00      	nop
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr

08000d48 <_ZN12MotorControl12calculatePIDEhh>:

// PID controller implementation
int32_t MotorControl::calculatePID(uint8_t targetAngle, uint8_t currentAngle) {
 8000d48:	b590      	push	{r4, r7, lr}
 8000d4a:	b087      	sub	sp, #28
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	460b      	mov	r3, r1
 8000d52:	70fb      	strb	r3, [r7, #3]
 8000d54:	4613      	mov	r3, r2
 8000d56:	70bb      	strb	r3, [r7, #2]
    float error = (float)targetAngle - (float)currentAngle;
 8000d58:	78fb      	ldrb	r3, [r7, #3]
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff fb60 	bl	8000420 <__aeabi_ui2f>
 8000d60:	4604      	mov	r4, r0
 8000d62:	78bb      	ldrb	r3, [r7, #2]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff fb5b 	bl	8000420 <__aeabi_ui2f>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4620      	mov	r0, r4
 8000d70:	f7ff faa4 	bl	80002bc <__aeabi_fsub>
 8000d74:	4603      	mov	r3, r0
 8000d76:	613b      	str	r3, [r7, #16]

    // PID calculations
    integral += error;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	6939      	ldr	r1, [r7, #16]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff fa9e 	bl	80002c0 <__addsf3>
 8000d84:	4603      	mov	r3, r0
 8000d86:	461a      	mov	r2, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	619a      	str	r2, [r3, #24]
    float derivative = error - previousError;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	69db      	ldr	r3, [r3, #28]
 8000d90:	4619      	mov	r1, r3
 8000d92:	6938      	ldr	r0, [r7, #16]
 8000d94:	f7ff fa92 	bl	80002bc <__aeabi_fsub>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	60fb      	str	r3, [r7, #12]
    float output = (kp * error) + (ki * integral) + (kd * derivative);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	6939      	ldr	r1, [r7, #16]
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff f9d2 	bl	800014c <__aeabi_fmul>
 8000da8:	4603      	mov	r3, r0
 8000daa:	461c      	mov	r4, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	691a      	ldr	r2, [r3, #16]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	699b      	ldr	r3, [r3, #24]
 8000db4:	4619      	mov	r1, r3
 8000db6:	4610      	mov	r0, r2
 8000db8:	f7ff f9c8 	bl	800014c <__aeabi_fmul>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4620      	mov	r0, r4
 8000dc2:	f7ff fa7d 	bl	80002c0 <__addsf3>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	461c      	mov	r4, r3
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	695b      	ldr	r3, [r3, #20]
 8000dce:	68f9      	ldr	r1, [r7, #12]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff f9bb 	bl	800014c <__aeabi_fmul>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4620      	mov	r0, r4
 8000ddc:	f7ff fa70 	bl	80002c0 <__addsf3>
 8000de0:	4603      	mov	r3, r0
 8000de2:	617b      	str	r3, [r7, #20]

    // Constrain output to valid range
    if (output > 65535) output = 65535;
 8000de4:	490e      	ldr	r1, [pc, #56]	@ (8000e20 <_ZN12MotorControl12calculatePIDEhh+0xd8>)
 8000de6:	6978      	ldr	r0, [r7, #20]
 8000de8:	f7ff fbde 	bl	80005a8 <__aeabi_fcmpgt>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <_ZN12MotorControl12calculatePIDEhh+0xae>
 8000df2:	4b0b      	ldr	r3, [pc, #44]	@ (8000e20 <_ZN12MotorControl12calculatePIDEhh+0xd8>)
 8000df4:	617b      	str	r3, [r7, #20]
    if (output < -65535) output = -65535;
 8000df6:	490b      	ldr	r1, [pc, #44]	@ (8000e24 <_ZN12MotorControl12calculatePIDEhh+0xdc>)
 8000df8:	6978      	ldr	r0, [r7, #20]
 8000dfa:	f7ff fbb7 	bl	800056c <__aeabi_fcmplt>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <_ZN12MotorControl12calculatePIDEhh+0xc0>
 8000e04:	4b07      	ldr	r3, [pc, #28]	@ (8000e24 <_ZN12MotorControl12calculatePIDEhh+0xdc>)
 8000e06:	617b      	str	r3, [r7, #20]

    previousError = error;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	61da      	str	r2, [r3, #28]
    return static_cast<int32_t>(output);
 8000e0e:	6978      	ldr	r0, [r7, #20]
 8000e10:	f7ff fbd4 	bl	80005bc <__aeabi_f2iz>
 8000e14:	4603      	mov	r3, r0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	371c      	adds	r7, #28
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd90      	pop	{r4, r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	477fff00 	.word	0x477fff00
 8000e24:	c77fff00 	.word	0xc77fff00

08000e28 <_ZN12MotorControl12steerToAngleEhh>:

// Steers to target angle using PID
void MotorControl::steerToAngle(uint8_t currentAngle, uint8_t targetAngle) {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	460b      	mov	r3, r1
 8000e32:	70fb      	strb	r3, [r7, #3]
 8000e34:	4613      	mov	r3, r2
 8000e36:	70bb      	strb	r3, [r7, #2]
    // Calculate PID output
    int32_t pidOutput = calculatePID(targetAngle, currentAngle);
 8000e38:	78fa      	ldrb	r2, [r7, #3]
 8000e3a:	78bb      	ldrb	r3, [r7, #2]
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	6878      	ldr	r0, [r7, #4]
 8000e40:	f7ff ff82 	bl	8000d48 <_ZN12MotorControl12calculatePIDEhh>
 8000e44:	60f8      	str	r0, [r7, #12]

    // Determine direction and apply PWM
    if (pidOutput < 0) {
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	da0e      	bge.n	8000e6a <_ZN12MotorControl12steerToAngleEhh+0x42>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); // Change to one direction
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e52:	480e      	ldr	r0, [pc, #56]	@ (8000e8c <_ZN12MotorControl12steerToAngleEhh+0x64>)
 8000e54:	f000 ffda 	bl	8001e0c <HAL_GPIO_WritePin>
        setDutyCycle(static_cast<uint16_t>(-pidOutput));      // Use absolute value of PID
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	425b      	negs	r3, r3
 8000e5e:	b29b      	uxth	r3, r3
 8000e60:	4619      	mov	r1, r3
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f7ff ff42 	bl	8000cec <_ZN12MotorControl12setDutyCycleEt>
    } else {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);   // Change to the other direction
        setDutyCycle(static_cast<uint16_t>(pidOutput));
    }
}
 8000e68:	e00b      	b.n	8000e82 <_ZN12MotorControl12steerToAngleEhh+0x5a>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);   // Change to the other direction
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e70:	4806      	ldr	r0, [pc, #24]	@ (8000e8c <_ZN12MotorControl12steerToAngleEhh+0x64>)
 8000e72:	f000 ffcb 	bl	8001e0c <HAL_GPIO_WritePin>
        setDutyCycle(static_cast<uint16_t>(pidOutput));
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	b29b      	uxth	r3, r3
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f7ff ff35 	bl	8000cec <_ZN12MotorControl12setDutyCycleEt>
}
 8000e82:	bf00      	nop
 8000e84:	3710      	adds	r7, #16
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40010800 	.word	0x40010800

08000e90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e96:	4b15      	ldr	r3, [pc, #84]	@ (8000eec <HAL_MspInit+0x5c>)
 8000e98:	699b      	ldr	r3, [r3, #24]
 8000e9a:	4a14      	ldr	r2, [pc, #80]	@ (8000eec <HAL_MspInit+0x5c>)
 8000e9c:	f043 0301 	orr.w	r3, r3, #1
 8000ea0:	6193      	str	r3, [r2, #24]
 8000ea2:	4b12      	ldr	r3, [pc, #72]	@ (8000eec <HAL_MspInit+0x5c>)
 8000ea4:	699b      	ldr	r3, [r3, #24]
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	60bb      	str	r3, [r7, #8]
 8000eac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eae:	4b0f      	ldr	r3, [pc, #60]	@ (8000eec <HAL_MspInit+0x5c>)
 8000eb0:	69db      	ldr	r3, [r3, #28]
 8000eb2:	4a0e      	ldr	r2, [pc, #56]	@ (8000eec <HAL_MspInit+0x5c>)
 8000eb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000eb8:	61d3      	str	r3, [r2, #28]
 8000eba:	4b0c      	ldr	r3, [pc, #48]	@ (8000eec <HAL_MspInit+0x5c>)
 8000ebc:	69db      	ldr	r3, [r3, #28]
 8000ebe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ec2:	607b      	str	r3, [r7, #4]
 8000ec4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ec6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef0 <HAL_MspInit+0x60>)
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	4a04      	ldr	r2, [pc, #16]	@ (8000ef0 <HAL_MspInit+0x60>)
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	3714      	adds	r7, #20
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bc80      	pop	{r7}
 8000eea:	4770      	bx	lr
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	40010000 	.word	0x40010000

08000ef4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b088      	sub	sp, #32
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efc:	f107 0310 	add.w	r3, r7, #16
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a14      	ldr	r2, [pc, #80]	@ (8000f60 <HAL_ADC_MspInit+0x6c>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d121      	bne.n	8000f58 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f14:	4b13      	ldr	r3, [pc, #76]	@ (8000f64 <HAL_ADC_MspInit+0x70>)
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	4a12      	ldr	r2, [pc, #72]	@ (8000f64 <HAL_ADC_MspInit+0x70>)
 8000f1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f1e:	6193      	str	r3, [r2, #24]
 8000f20:	4b10      	ldr	r3, [pc, #64]	@ (8000f64 <HAL_ADC_MspInit+0x70>)
 8000f22:	699b      	ldr	r3, [r3, #24]
 8000f24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2c:	4b0d      	ldr	r3, [pc, #52]	@ (8000f64 <HAL_ADC_MspInit+0x70>)
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	4a0c      	ldr	r2, [pc, #48]	@ (8000f64 <HAL_ADC_MspInit+0x70>)
 8000f32:	f043 0304 	orr.w	r3, r3, #4
 8000f36:	6193      	str	r3, [r2, #24]
 8000f38:	4b0a      	ldr	r3, [pc, #40]	@ (8000f64 <HAL_ADC_MspInit+0x70>)
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	f003 0304 	and.w	r3, r3, #4
 8000f40:	60bb      	str	r3, [r7, #8]
 8000f42:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000f44:	2318      	movs	r3, #24
 8000f46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4c:	f107 0310 	add.w	r3, r7, #16
 8000f50:	4619      	mov	r1, r3
 8000f52:	4805      	ldr	r0, [pc, #20]	@ (8000f68 <HAL_ADC_MspInit+0x74>)
 8000f54:	f000 fdde 	bl	8001b14 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000f58:	bf00      	nop
 8000f5a:	3720      	adds	r7, #32
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	40012400 	.word	0x40012400
 8000f64:	40021000 	.word	0x40021000
 8000f68:	40010800 	.word	0x40010800

08000f6c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08a      	sub	sp, #40	@ 0x28
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f74:	f107 0314 	add.w	r3, r7, #20
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a25      	ldr	r2, [pc, #148]	@ (800101c <HAL_CAN_MspInit+0xb0>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d143      	bne.n	8001014 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f8c:	4b24      	ldr	r3, [pc, #144]	@ (8001020 <HAL_CAN_MspInit+0xb4>)
 8000f8e:	69db      	ldr	r3, [r3, #28]
 8000f90:	4a23      	ldr	r2, [pc, #140]	@ (8001020 <HAL_CAN_MspInit+0xb4>)
 8000f92:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f96:	61d3      	str	r3, [r2, #28]
 8000f98:	4b21      	ldr	r3, [pc, #132]	@ (8001020 <HAL_CAN_MspInit+0xb4>)
 8000f9a:	69db      	ldr	r3, [r3, #28]
 8000f9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fa0:	613b      	str	r3, [r7, #16]
 8000fa2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa4:	4b1e      	ldr	r3, [pc, #120]	@ (8001020 <HAL_CAN_MspInit+0xb4>)
 8000fa6:	699b      	ldr	r3, [r3, #24]
 8000fa8:	4a1d      	ldr	r2, [pc, #116]	@ (8001020 <HAL_CAN_MspInit+0xb4>)
 8000faa:	f043 0308 	orr.w	r3, r3, #8
 8000fae:	6193      	str	r3, [r2, #24]
 8000fb0:	4b1b      	ldr	r3, [pc, #108]	@ (8001020 <HAL_CAN_MspInit+0xb4>)
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	f003 0308 	and.w	r3, r3, #8
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000fbc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4814      	ldr	r0, [pc, #80]	@ (8001024 <HAL_CAN_MspInit+0xb8>)
 8000fd2:	f000 fd9f 	bl	8001b14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fd6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe4:	f107 0314 	add.w	r3, r7, #20
 8000fe8:	4619      	mov	r1, r3
 8000fea:	480e      	ldr	r0, [pc, #56]	@ (8001024 <HAL_CAN_MspInit+0xb8>)
 8000fec:	f000 fd92 	bl	8001b14 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000ff0:	4b0d      	ldr	r3, [pc, #52]	@ (8001028 <HAL_CAN_MspInit+0xbc>)
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ff8:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8000ffc:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001000:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001004:	627b      	str	r3, [r7, #36]	@ 0x24
 8001006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001008:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800100c:	627b      	str	r3, [r7, #36]	@ 0x24
 800100e:	4a06      	ldr	r2, [pc, #24]	@ (8001028 <HAL_CAN_MspInit+0xbc>)
 8001010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001012:	6053      	str	r3, [r2, #4]

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001014:	bf00      	nop
 8001016:	3728      	adds	r7, #40	@ 0x28
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40006400 	.word	0x40006400
 8001020:	40021000 	.word	0x40021000
 8001024:	40010c00 	.word	0x40010c00
 8001028:	40010000 	.word	0x40010000

0800102c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a09      	ldr	r2, [pc, #36]	@ (8001060 <HAL_TIM_PWM_MspInit+0x34>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d10b      	bne.n	8001056 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800103e:	4b09      	ldr	r3, [pc, #36]	@ (8001064 <HAL_TIM_PWM_MspInit+0x38>)
 8001040:	699b      	ldr	r3, [r3, #24]
 8001042:	4a08      	ldr	r2, [pc, #32]	@ (8001064 <HAL_TIM_PWM_MspInit+0x38>)
 8001044:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001048:	6193      	str	r3, [r2, #24]
 800104a:	4b06      	ldr	r3, [pc, #24]	@ (8001064 <HAL_TIM_PWM_MspInit+0x38>)
 800104c:	699b      	ldr	r3, [r3, #24]
 800104e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001056:	bf00      	nop
 8001058:	3714      	adds	r7, #20
 800105a:	46bd      	mov	sp, r7
 800105c:	bc80      	pop	{r7}
 800105e:	4770      	bx	lr
 8001060:	40012c00 	.word	0x40012c00
 8001064:	40021000 	.word	0x40021000

08001068 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001078:	d10b      	bne.n	8001092 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800107a:	4b08      	ldr	r3, [pc, #32]	@ (800109c <HAL_TIM_Base_MspInit+0x34>)
 800107c:	69db      	ldr	r3, [r3, #28]
 800107e:	4a07      	ldr	r2, [pc, #28]	@ (800109c <HAL_TIM_Base_MspInit+0x34>)
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	61d3      	str	r3, [r2, #28]
 8001086:	4b05      	ldr	r3, [pc, #20]	@ (800109c <HAL_TIM_Base_MspInit+0x34>)
 8001088:	69db      	ldr	r3, [r3, #28]
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001092:	bf00      	nop
 8001094:	3714      	adds	r7, #20
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr
 800109c:	40021000 	.word	0x40021000

080010a0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b088      	sub	sp, #32
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 0310 	add.w	r3, r7, #16
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a15      	ldr	r2, [pc, #84]	@ (8001110 <HAL_TIM_Encoder_MspInit+0x70>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d123      	bne.n	8001108 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010c0:	4b14      	ldr	r3, [pc, #80]	@ (8001114 <HAL_TIM_Encoder_MspInit+0x74>)
 80010c2:	69db      	ldr	r3, [r3, #28]
 80010c4:	4a13      	ldr	r2, [pc, #76]	@ (8001114 <HAL_TIM_Encoder_MspInit+0x74>)
 80010c6:	f043 0302 	orr.w	r3, r3, #2
 80010ca:	61d3      	str	r3, [r2, #28]
 80010cc:	4b11      	ldr	r3, [pc, #68]	@ (8001114 <HAL_TIM_Encoder_MspInit+0x74>)
 80010ce:	69db      	ldr	r3, [r3, #28]
 80010d0:	f003 0302 	and.w	r3, r3, #2
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001114 <HAL_TIM_Encoder_MspInit+0x74>)
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001114 <HAL_TIM_Encoder_MspInit+0x74>)
 80010de:	f043 0304 	orr.w	r3, r3, #4
 80010e2:	6193      	str	r3, [r2, #24]
 80010e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001114 <HAL_TIM_Encoder_MspInit+0x74>)
 80010e6:	699b      	ldr	r3, [r3, #24]
 80010e8:	f003 0304 	and.w	r3, r3, #4
 80010ec:	60bb      	str	r3, [r7, #8]
 80010ee:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010f0:	23c0      	movs	r3, #192	@ 0xc0
 80010f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fc:	f107 0310 	add.w	r3, r7, #16
 8001100:	4619      	mov	r1, r3
 8001102:	4805      	ldr	r0, [pc, #20]	@ (8001118 <HAL_TIM_Encoder_MspInit+0x78>)
 8001104:	f000 fd06 	bl	8001b14 <HAL_GPIO_Init>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001108:	bf00      	nop
 800110a:	3720      	adds	r7, #32
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40000400 	.word	0x40000400
 8001114:	40021000 	.word	0x40021000
 8001118:	40010800 	.word	0x40010800

0800111c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b088      	sub	sp, #32
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001124:	f107 0310 	add.w	r3, r7, #16
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a1f      	ldr	r2, [pc, #124]	@ (80011b4 <HAL_TIM_MspPostInit+0x98>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d119      	bne.n	8001170 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800113c:	4b1e      	ldr	r3, [pc, #120]	@ (80011b8 <HAL_TIM_MspPostInit+0x9c>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	4a1d      	ldr	r2, [pc, #116]	@ (80011b8 <HAL_TIM_MspPostInit+0x9c>)
 8001142:	f043 0304 	orr.w	r3, r3, #4
 8001146:	6193      	str	r3, [r2, #24]
 8001148:	4b1b      	ldr	r3, [pc, #108]	@ (80011b8 <HAL_TIM_MspPostInit+0x9c>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	f003 0304 	and.w	r3, r3, #4
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11;
 8001154:	f44f 6350 	mov.w	r3, #3328	@ 0xd00
 8001158:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115a:	2302      	movs	r3, #2
 800115c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115e:	2302      	movs	r3, #2
 8001160:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001162:	f107 0310 	add.w	r3, r7, #16
 8001166:	4619      	mov	r1, r3
 8001168:	4814      	ldr	r0, [pc, #80]	@ (80011bc <HAL_TIM_MspPostInit+0xa0>)
 800116a:	f000 fcd3 	bl	8001b14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800116e:	e01c      	b.n	80011aa <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM2)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001178:	d117      	bne.n	80011aa <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800117a:	4b0f      	ldr	r3, [pc, #60]	@ (80011b8 <HAL_TIM_MspPostInit+0x9c>)
 800117c:	699b      	ldr	r3, [r3, #24]
 800117e:	4a0e      	ldr	r2, [pc, #56]	@ (80011b8 <HAL_TIM_MspPostInit+0x9c>)
 8001180:	f043 0304 	orr.w	r3, r3, #4
 8001184:	6193      	str	r3, [r2, #24]
 8001186:	4b0c      	ldr	r3, [pc, #48]	@ (80011b8 <HAL_TIM_MspPostInit+0x9c>)
 8001188:	699b      	ldr	r3, [r3, #24]
 800118a:	f003 0304 	and.w	r3, r3, #4
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8001192:	2305      	movs	r3, #5
 8001194:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001196:	2302      	movs	r3, #2
 8001198:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119a:	2302      	movs	r3, #2
 800119c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119e:	f107 0310 	add.w	r3, r7, #16
 80011a2:	4619      	mov	r1, r3
 80011a4:	4805      	ldr	r0, [pc, #20]	@ (80011bc <HAL_TIM_MspPostInit+0xa0>)
 80011a6:	f000 fcb5 	bl	8001b14 <HAL_GPIO_Init>
}
 80011aa:	bf00      	nop
 80011ac:	3720      	adds	r7, #32
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40012c00 	.word	0x40012c00
 80011b8:	40021000 	.word	0x40021000
 80011bc:	40010800 	.word	0x40010800

080011c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011c4:	bf00      	nop
 80011c6:	e7fd      	b.n	80011c4 <NMI_Handler+0x4>

080011c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011cc:	bf00      	nop
 80011ce:	e7fd      	b.n	80011cc <HardFault_Handler+0x4>

080011d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d4:	bf00      	nop
 80011d6:	e7fd      	b.n	80011d4 <MemManage_Handler+0x4>

080011d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011dc:	bf00      	nop
 80011de:	e7fd      	b.n	80011dc <BusFault_Handler+0x4>

080011e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011e4:	bf00      	nop
 80011e6:	e7fd      	b.n	80011e4 <UsageFault_Handler+0x4>

080011e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr

080011f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bc80      	pop	{r7}
 80011fe:	4770      	bx	lr

08001200 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	bc80      	pop	{r7}
 800120a:	4770      	bx	lr

0800120c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001210:	f000 f874 	bl	80012fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001214:	bf00      	nop
 8001216:	bd80      	pop	{r7, pc}

08001218 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	bc80      	pop	{r7}
 8001222:	4770      	bx	lr

08001224 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001224:	f7ff fff8 	bl	8001218 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001228:	480b      	ldr	r0, [pc, #44]	@ (8001258 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800122a:	490c      	ldr	r1, [pc, #48]	@ (800125c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800122c:	4a0c      	ldr	r2, [pc, #48]	@ (8001260 <LoopFillZerobss+0x16>)
  movs r3, #0
 800122e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001230:	e002      	b.n	8001238 <LoopCopyDataInit>

08001232 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001232:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001234:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001236:	3304      	adds	r3, #4

08001238 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001238:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800123a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800123c:	d3f9      	bcc.n	8001232 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800123e:	4a09      	ldr	r2, [pc, #36]	@ (8001264 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001240:	4c09      	ldr	r4, [pc, #36]	@ (8001268 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001242:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001244:	e001      	b.n	800124a <LoopFillZerobss>

08001246 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001246:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001248:	3204      	adds	r2, #4

0800124a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800124a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800124c:	d3fb      	bcc.n	8001246 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800124e:	f002 f947 	bl	80034e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001252:	f7ff f9d9 	bl	8000608 <main>
  bx lr
 8001256:	4770      	bx	lr
  ldr r0, =_sdata
 8001258:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800125c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001260:	0800356c 	.word	0x0800356c
  ldr r2, =_sbss
 8001264:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001268:	2000015c 	.word	0x2000015c

0800126c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800126c:	e7fe      	b.n	800126c <ADC1_2_IRQHandler>
	...

08001270 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001274:	4b08      	ldr	r3, [pc, #32]	@ (8001298 <HAL_Init+0x28>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a07      	ldr	r2, [pc, #28]	@ (8001298 <HAL_Init+0x28>)
 800127a:	f043 0310 	orr.w	r3, r3, #16
 800127e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001280:	2003      	movs	r0, #3
 8001282:	f000 fc13 	bl	8001aac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001286:	200f      	movs	r0, #15
 8001288:	f000 f808 	bl	800129c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800128c:	f7ff fe00 	bl	8000e90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40022000 	.word	0x40022000

0800129c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012a4:	4b12      	ldr	r3, [pc, #72]	@ (80012f0 <HAL_InitTick+0x54>)
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	4b12      	ldr	r3, [pc, #72]	@ (80012f4 <HAL_InitTick+0x58>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	4619      	mov	r1, r3
 80012ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ba:	4618      	mov	r0, r3
 80012bc:	f000 fc1d 	bl	8001afa <HAL_SYSTICK_Config>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e00e      	b.n	80012e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2b0f      	cmp	r3, #15
 80012ce:	d80a      	bhi.n	80012e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012d0:	2200      	movs	r2, #0
 80012d2:	6879      	ldr	r1, [r7, #4]
 80012d4:	f04f 30ff 	mov.w	r0, #4294967295
 80012d8:	f000 fbf3 	bl	8001ac2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012dc:	4a06      	ldr	r2, [pc, #24]	@ (80012f8 <HAL_InitTick+0x5c>)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012e2:	2300      	movs	r3, #0
 80012e4:	e000      	b.n	80012e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000000 	.word	0x20000000
 80012f4:	20000008 	.word	0x20000008
 80012f8:	20000004 	.word	0x20000004

080012fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001300:	4b05      	ldr	r3, [pc, #20]	@ (8001318 <HAL_IncTick+0x1c>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	461a      	mov	r2, r3
 8001306:	4b05      	ldr	r3, [pc, #20]	@ (800131c <HAL_IncTick+0x20>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4413      	add	r3, r2
 800130c:	4a03      	ldr	r2, [pc, #12]	@ (800131c <HAL_IncTick+0x20>)
 800130e:	6013      	str	r3, [r2, #0]
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	bc80      	pop	{r7}
 8001316:	4770      	bx	lr
 8001318:	20000008 	.word	0x20000008
 800131c:	20000158 	.word	0x20000158

08001320 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  return uwTick;
 8001324:	4b02      	ldr	r3, [pc, #8]	@ (8001330 <HAL_GetTick+0x10>)
 8001326:	681b      	ldr	r3, [r3, #0]
}
 8001328:	4618      	mov	r0, r3
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr
 8001330:	20000158 	.word	0x20000158

08001334 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800133c:	2300      	movs	r3, #0
 800133e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001340:	2300      	movs	r3, #0
 8001342:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001344:	2300      	movs	r3, #0
 8001346:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001348:	2300      	movs	r3, #0
 800134a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d101      	bne.n	8001356 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e0be      	b.n	80014d4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001360:	2b00      	cmp	r3, #0
 8001362:	d109      	bne.n	8001378 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff fdbe 	bl	8000ef4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f000 f9ab 	bl	80016d4 <ADC_ConversionStop_Disable>
 800137e:	4603      	mov	r3, r0
 8001380:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001386:	f003 0310 	and.w	r3, r3, #16
 800138a:	2b00      	cmp	r3, #0
 800138c:	f040 8099 	bne.w	80014c2 <HAL_ADC_Init+0x18e>
 8001390:	7dfb      	ldrb	r3, [r7, #23]
 8001392:	2b00      	cmp	r3, #0
 8001394:	f040 8095 	bne.w	80014c2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800139c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80013a0:	f023 0302 	bic.w	r3, r3, #2
 80013a4:	f043 0202 	orr.w	r2, r3, #2
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80013b4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	7b1b      	ldrb	r3, [r3, #12]
 80013ba:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80013bc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80013be:	68ba      	ldr	r2, [r7, #8]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80013cc:	d003      	beq.n	80013d6 <HAL_ADC_Init+0xa2>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d102      	bne.n	80013dc <HAL_ADC_Init+0xa8>
 80013d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013da:	e000      	b.n	80013de <HAL_ADC_Init+0xaa>
 80013dc:	2300      	movs	r3, #0
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	7d1b      	ldrb	r3, [r3, #20]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d119      	bne.n	8001420 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	7b1b      	ldrb	r3, [r3, #12]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d109      	bne.n	8001408 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	3b01      	subs	r3, #1
 80013fa:	035a      	lsls	r2, r3, #13
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	4313      	orrs	r3, r2
 8001400:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001404:	613b      	str	r3, [r7, #16]
 8001406:	e00b      	b.n	8001420 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800140c:	f043 0220 	orr.w	r2, r3, #32
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001418:	f043 0201 	orr.w	r2, r3, #1
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	430a      	orrs	r2, r1
 8001432:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	689a      	ldr	r2, [r3, #8]
 800143a:	4b28      	ldr	r3, [pc, #160]	@ (80014dc <HAL_ADC_Init+0x1a8>)
 800143c:	4013      	ands	r3, r2
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	6812      	ldr	r2, [r2, #0]
 8001442:	68b9      	ldr	r1, [r7, #8]
 8001444:	430b      	orrs	r3, r1
 8001446:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001450:	d003      	beq.n	800145a <HAL_ADC_Init+0x126>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	2b01      	cmp	r3, #1
 8001458:	d104      	bne.n	8001464 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	691b      	ldr	r3, [r3, #16]
 800145e:	3b01      	subs	r3, #1
 8001460:	051b      	lsls	r3, r3, #20
 8001462:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800146a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	430a      	orrs	r2, r1
 8001476:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	689a      	ldr	r2, [r3, #8]
 800147e:	4b18      	ldr	r3, [pc, #96]	@ (80014e0 <HAL_ADC_Init+0x1ac>)
 8001480:	4013      	ands	r3, r2
 8001482:	68ba      	ldr	r2, [r7, #8]
 8001484:	429a      	cmp	r2, r3
 8001486:	d10b      	bne.n	80014a0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2200      	movs	r2, #0
 800148c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001492:	f023 0303 	bic.w	r3, r3, #3
 8001496:	f043 0201 	orr.w	r2, r3, #1
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800149e:	e018      	b.n	80014d2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014a4:	f023 0312 	bic.w	r3, r3, #18
 80014a8:	f043 0210 	orr.w	r2, r3, #16
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014b4:	f043 0201 	orr.w	r2, r3, #1
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80014c0:	e007      	b.n	80014d2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014c6:	f043 0210 	orr.w	r2, r3, #16
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80014d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3718      	adds	r7, #24
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	ffe1f7fd 	.word	0xffe1f7fd
 80014e0:	ff1f0efe 	.word	0xff1f0efe

080014e4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014ee:	2300      	movs	r3, #0
 80014f0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80014f2:	2300      	movs	r3, #0
 80014f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d101      	bne.n	8001504 <HAL_ADC_ConfigChannel+0x20>
 8001500:	2302      	movs	r3, #2
 8001502:	e0dc      	b.n	80016be <HAL_ADC_ConfigChannel+0x1da>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2201      	movs	r2, #1
 8001508:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	2b06      	cmp	r3, #6
 8001512:	d81c      	bhi.n	800154e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685a      	ldr	r2, [r3, #4]
 800151e:	4613      	mov	r3, r2
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	4413      	add	r3, r2
 8001524:	3b05      	subs	r3, #5
 8001526:	221f      	movs	r2, #31
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	43db      	mvns	r3, r3
 800152e:	4019      	ands	r1, r3
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	6818      	ldr	r0, [r3, #0]
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685a      	ldr	r2, [r3, #4]
 8001538:	4613      	mov	r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	4413      	add	r3, r2
 800153e:	3b05      	subs	r3, #5
 8001540:	fa00 f203 	lsl.w	r2, r0, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	430a      	orrs	r2, r1
 800154a:	635a      	str	r2, [r3, #52]	@ 0x34
 800154c:	e03c      	b.n	80015c8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	2b0c      	cmp	r3, #12
 8001554:	d81c      	bhi.n	8001590 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685a      	ldr	r2, [r3, #4]
 8001560:	4613      	mov	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4413      	add	r3, r2
 8001566:	3b23      	subs	r3, #35	@ 0x23
 8001568:	221f      	movs	r2, #31
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	43db      	mvns	r3, r3
 8001570:	4019      	ands	r1, r3
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	6818      	ldr	r0, [r3, #0]
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685a      	ldr	r2, [r3, #4]
 800157a:	4613      	mov	r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	4413      	add	r3, r2
 8001580:	3b23      	subs	r3, #35	@ 0x23
 8001582:	fa00 f203 	lsl.w	r2, r0, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	430a      	orrs	r2, r1
 800158c:	631a      	str	r2, [r3, #48]	@ 0x30
 800158e:	e01b      	b.n	80015c8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685a      	ldr	r2, [r3, #4]
 800159a:	4613      	mov	r3, r2
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	4413      	add	r3, r2
 80015a0:	3b41      	subs	r3, #65	@ 0x41
 80015a2:	221f      	movs	r2, #31
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	43db      	mvns	r3, r3
 80015aa:	4019      	ands	r1, r3
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	6818      	ldr	r0, [r3, #0]
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685a      	ldr	r2, [r3, #4]
 80015b4:	4613      	mov	r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	4413      	add	r3, r2
 80015ba:	3b41      	subs	r3, #65	@ 0x41
 80015bc:	fa00 f203 	lsl.w	r2, r0, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	430a      	orrs	r2, r1
 80015c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2b09      	cmp	r3, #9
 80015ce:	d91c      	bls.n	800160a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	68d9      	ldr	r1, [r3, #12]
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	4613      	mov	r3, r2
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	4413      	add	r3, r2
 80015e0:	3b1e      	subs	r3, #30
 80015e2:	2207      	movs	r2, #7
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	43db      	mvns	r3, r3
 80015ea:	4019      	ands	r1, r3
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	6898      	ldr	r0, [r3, #8]
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	4613      	mov	r3, r2
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	4413      	add	r3, r2
 80015fa:	3b1e      	subs	r3, #30
 80015fc:	fa00 f203 	lsl.w	r2, r0, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	430a      	orrs	r2, r1
 8001606:	60da      	str	r2, [r3, #12]
 8001608:	e019      	b.n	800163e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	6919      	ldr	r1, [r3, #16]
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	4613      	mov	r3, r2
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	4413      	add	r3, r2
 800161a:	2207      	movs	r2, #7
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	43db      	mvns	r3, r3
 8001622:	4019      	ands	r1, r3
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	6898      	ldr	r0, [r3, #8]
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	4613      	mov	r3, r2
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	4413      	add	r3, r2
 8001632:	fa00 f203 	lsl.w	r2, r0, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	430a      	orrs	r2, r1
 800163c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2b10      	cmp	r3, #16
 8001644:	d003      	beq.n	800164e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800164a:	2b11      	cmp	r3, #17
 800164c:	d132      	bne.n	80016b4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a1d      	ldr	r2, [pc, #116]	@ (80016c8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d125      	bne.n	80016a4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d126      	bne.n	80016b4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	689a      	ldr	r2, [r3, #8]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001674:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2b10      	cmp	r3, #16
 800167c:	d11a      	bne.n	80016b4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800167e:	4b13      	ldr	r3, [pc, #76]	@ (80016cc <HAL_ADC_ConfigChannel+0x1e8>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a13      	ldr	r2, [pc, #76]	@ (80016d0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001684:	fba2 2303 	umull	r2, r3, r2, r3
 8001688:	0c9a      	lsrs	r2, r3, #18
 800168a:	4613      	mov	r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	4413      	add	r3, r2
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001694:	e002      	b.n	800169c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	3b01      	subs	r3, #1
 800169a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1f9      	bne.n	8001696 <HAL_ADC_ConfigChannel+0x1b2>
 80016a2:	e007      	b.n	80016b4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016a8:	f043 0220 	orr.w	r2, r3, #32
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80016bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3714      	adds	r7, #20
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr
 80016c8:	40012400 	.word	0x40012400
 80016cc:	20000000 	.word	0x20000000
 80016d0:	431bde83 	.word	0x431bde83

080016d4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80016dc:	2300      	movs	r3, #0
 80016de:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d12e      	bne.n	800174c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	689a      	ldr	r2, [r3, #8]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f022 0201 	bic.w	r2, r2, #1
 80016fc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80016fe:	f7ff fe0f 	bl	8001320 <HAL_GetTick>
 8001702:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001704:	e01b      	b.n	800173e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001706:	f7ff fe0b 	bl	8001320 <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d914      	bls.n	800173e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	2b01      	cmp	r3, #1
 8001720:	d10d      	bne.n	800173e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001726:	f043 0210 	orr.w	r2, r3, #16
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001732:	f043 0201 	orr.w	r2, r3, #1
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e007      	b.n	800174e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f003 0301 	and.w	r3, r3, #1
 8001748:	2b01      	cmp	r3, #1
 800174a:	d0dc      	beq.n	8001706 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b084      	sub	sp, #16
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d101      	bne.n	8001768 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e0ed      	b.n	8001944 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800176e:	b2db      	uxtb	r3, r3
 8001770:	2b00      	cmp	r3, #0
 8001772:	d102      	bne.n	800177a <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f7ff fbf9 	bl	8000f6c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f042 0201 	orr.w	r2, r2, #1
 8001788:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800178a:	f7ff fdc9 	bl	8001320 <HAL_GetTick>
 800178e:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001790:	e012      	b.n	80017b8 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001792:	f7ff fdc5 	bl	8001320 <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	2b0a      	cmp	r3, #10
 800179e:	d90b      	bls.n	80017b8 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017a4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2205      	movs	r2, #5
 80017b0:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e0c5      	b.n	8001944 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d0e5      	beq.n	8001792 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f022 0202 	bic.w	r2, r2, #2
 80017d4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017d6:	f7ff fda3 	bl	8001320 <HAL_GetTick>
 80017da:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80017dc:	e012      	b.n	8001804 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017de:	f7ff fd9f 	bl	8001320 <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	2b0a      	cmp	r3, #10
 80017ea:	d90b      	bls.n	8001804 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017f0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2205      	movs	r2, #5
 80017fc:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e09f      	b.n	8001944 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1e5      	bne.n	80017de <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	7e1b      	ldrb	r3, [r3, #24]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d108      	bne.n	800182c <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	e007      	b.n	800183c <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800183a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	7e5b      	ldrb	r3, [r3, #25]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d108      	bne.n	8001856 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	e007      	b.n	8001866 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001864:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	7e9b      	ldrb	r3, [r3, #26]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d108      	bne.n	8001880 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f042 0220 	orr.w	r2, r2, #32
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	e007      	b.n	8001890 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f022 0220 	bic.w	r2, r2, #32
 800188e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	7edb      	ldrb	r3, [r3, #27]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d108      	bne.n	80018aa <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f022 0210 	bic.w	r2, r2, #16
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	e007      	b.n	80018ba <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f042 0210 	orr.w	r2, r2, #16
 80018b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	7f1b      	ldrb	r3, [r3, #28]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d108      	bne.n	80018d4 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f042 0208 	orr.w	r2, r2, #8
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	e007      	b.n	80018e4 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f022 0208 	bic.w	r2, r2, #8
 80018e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	7f5b      	ldrb	r3, [r3, #29]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d108      	bne.n	80018fe <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f042 0204 	orr.w	r2, r2, #4
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	e007      	b.n	800190e <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f022 0204 	bic.w	r2, r2, #4
 800190c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	689a      	ldr	r2, [r3, #8]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	431a      	orrs	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	691b      	ldr	r3, [r3, #16]
 800191c:	431a      	orrs	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	695b      	ldr	r3, [r3, #20]
 8001922:	ea42 0103 	orr.w	r1, r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	1e5a      	subs	r2, r3, #1
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	430a      	orrs	r2, r1
 8001932:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2201      	movs	r2, #1
 800193e:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001942:	2300      	movs	r3, #0
}
 8001944:	4618      	mov	r0, r3
 8001946:	3710      	adds	r7, #16
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800195c:	4b0c      	ldr	r3, [pc, #48]	@ (8001990 <__NVIC_SetPriorityGrouping+0x44>)
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001962:	68ba      	ldr	r2, [r7, #8]
 8001964:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001968:	4013      	ands	r3, r2
 800196a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001974:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001978:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800197c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800197e:	4a04      	ldr	r2, [pc, #16]	@ (8001990 <__NVIC_SetPriorityGrouping+0x44>)
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	60d3      	str	r3, [r2, #12]
}
 8001984:	bf00      	nop
 8001986:	3714      	adds	r7, #20
 8001988:	46bd      	mov	sp, r7
 800198a:	bc80      	pop	{r7}
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	e000ed00 	.word	0xe000ed00

08001994 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001998:	4b04      	ldr	r3, [pc, #16]	@ (80019ac <__NVIC_GetPriorityGrouping+0x18>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	0a1b      	lsrs	r3, r3, #8
 800199e:	f003 0307 	and.w	r3, r3, #7
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bc80      	pop	{r7}
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	6039      	str	r1, [r7, #0]
 80019ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	db0a      	blt.n	80019da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	b2da      	uxtb	r2, r3
 80019c8:	490c      	ldr	r1, [pc, #48]	@ (80019fc <__NVIC_SetPriority+0x4c>)
 80019ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ce:	0112      	lsls	r2, r2, #4
 80019d0:	b2d2      	uxtb	r2, r2
 80019d2:	440b      	add	r3, r1
 80019d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019d8:	e00a      	b.n	80019f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	b2da      	uxtb	r2, r3
 80019de:	4908      	ldr	r1, [pc, #32]	@ (8001a00 <__NVIC_SetPriority+0x50>)
 80019e0:	79fb      	ldrb	r3, [r7, #7]
 80019e2:	f003 030f 	and.w	r3, r3, #15
 80019e6:	3b04      	subs	r3, #4
 80019e8:	0112      	lsls	r2, r2, #4
 80019ea:	b2d2      	uxtb	r2, r2
 80019ec:	440b      	add	r3, r1
 80019ee:	761a      	strb	r2, [r3, #24]
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bc80      	pop	{r7}
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	e000e100 	.word	0xe000e100
 8001a00:	e000ed00 	.word	0xe000ed00

08001a04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b089      	sub	sp, #36	@ 0x24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f003 0307 	and.w	r3, r3, #7
 8001a16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	f1c3 0307 	rsb	r3, r3, #7
 8001a1e:	2b04      	cmp	r3, #4
 8001a20:	bf28      	it	cs
 8001a22:	2304      	movcs	r3, #4
 8001a24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	3304      	adds	r3, #4
 8001a2a:	2b06      	cmp	r3, #6
 8001a2c:	d902      	bls.n	8001a34 <NVIC_EncodePriority+0x30>
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	3b03      	subs	r3, #3
 8001a32:	e000      	b.n	8001a36 <NVIC_EncodePriority+0x32>
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a38:	f04f 32ff 	mov.w	r2, #4294967295
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	43da      	mvns	r2, r3
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	401a      	ands	r2, r3
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	fa01 f303 	lsl.w	r3, r1, r3
 8001a56:	43d9      	mvns	r1, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a5c:	4313      	orrs	r3, r2
         );
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3724      	adds	r7, #36	@ 0x24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bc80      	pop	{r7}
 8001a66:	4770      	bx	lr

08001a68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	3b01      	subs	r3, #1
 8001a74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a78:	d301      	bcc.n	8001a7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e00f      	b.n	8001a9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a7e:	4a0a      	ldr	r2, [pc, #40]	@ (8001aa8 <SysTick_Config+0x40>)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	3b01      	subs	r3, #1
 8001a84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a86:	210f      	movs	r1, #15
 8001a88:	f04f 30ff 	mov.w	r0, #4294967295
 8001a8c:	f7ff ff90 	bl	80019b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a90:	4b05      	ldr	r3, [pc, #20]	@ (8001aa8 <SysTick_Config+0x40>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a96:	4b04      	ldr	r3, [pc, #16]	@ (8001aa8 <SysTick_Config+0x40>)
 8001a98:	2207      	movs	r2, #7
 8001a9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	e000e010 	.word	0xe000e010

08001aac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f7ff ff49 	bl	800194c <__NVIC_SetPriorityGrouping>
}
 8001aba:	bf00      	nop
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b086      	sub	sp, #24
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	4603      	mov	r3, r0
 8001aca:	60b9      	str	r1, [r7, #8]
 8001acc:	607a      	str	r2, [r7, #4]
 8001ace:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ad4:	f7ff ff5e 	bl	8001994 <__NVIC_GetPriorityGrouping>
 8001ad8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	68b9      	ldr	r1, [r7, #8]
 8001ade:	6978      	ldr	r0, [r7, #20]
 8001ae0:	f7ff ff90 	bl	8001a04 <NVIC_EncodePriority>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aea:	4611      	mov	r1, r2
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff ff5f 	bl	80019b0 <__NVIC_SetPriority>
}
 8001af2:	bf00      	nop
 8001af4:	3718      	adds	r7, #24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b082      	sub	sp, #8
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7ff ffb0 	bl	8001a68 <SysTick_Config>
 8001b08:	4603      	mov	r3, r0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
	...

08001b14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b08b      	sub	sp, #44	@ 0x2c
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b22:	2300      	movs	r3, #0
 8001b24:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b26:	e161      	b.n	8001dec <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b28:	2201      	movs	r2, #1
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	69fa      	ldr	r2, [r7, #28]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	f040 8150 	bne.w	8001de6 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	4a97      	ldr	r2, [pc, #604]	@ (8001da8 <HAL_GPIO_Init+0x294>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d05e      	beq.n	8001c0e <HAL_GPIO_Init+0xfa>
 8001b50:	4a95      	ldr	r2, [pc, #596]	@ (8001da8 <HAL_GPIO_Init+0x294>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d875      	bhi.n	8001c42 <HAL_GPIO_Init+0x12e>
 8001b56:	4a95      	ldr	r2, [pc, #596]	@ (8001dac <HAL_GPIO_Init+0x298>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d058      	beq.n	8001c0e <HAL_GPIO_Init+0xfa>
 8001b5c:	4a93      	ldr	r2, [pc, #588]	@ (8001dac <HAL_GPIO_Init+0x298>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d86f      	bhi.n	8001c42 <HAL_GPIO_Init+0x12e>
 8001b62:	4a93      	ldr	r2, [pc, #588]	@ (8001db0 <HAL_GPIO_Init+0x29c>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d052      	beq.n	8001c0e <HAL_GPIO_Init+0xfa>
 8001b68:	4a91      	ldr	r2, [pc, #580]	@ (8001db0 <HAL_GPIO_Init+0x29c>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d869      	bhi.n	8001c42 <HAL_GPIO_Init+0x12e>
 8001b6e:	4a91      	ldr	r2, [pc, #580]	@ (8001db4 <HAL_GPIO_Init+0x2a0>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d04c      	beq.n	8001c0e <HAL_GPIO_Init+0xfa>
 8001b74:	4a8f      	ldr	r2, [pc, #572]	@ (8001db4 <HAL_GPIO_Init+0x2a0>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d863      	bhi.n	8001c42 <HAL_GPIO_Init+0x12e>
 8001b7a:	4a8f      	ldr	r2, [pc, #572]	@ (8001db8 <HAL_GPIO_Init+0x2a4>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d046      	beq.n	8001c0e <HAL_GPIO_Init+0xfa>
 8001b80:	4a8d      	ldr	r2, [pc, #564]	@ (8001db8 <HAL_GPIO_Init+0x2a4>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d85d      	bhi.n	8001c42 <HAL_GPIO_Init+0x12e>
 8001b86:	2b12      	cmp	r3, #18
 8001b88:	d82a      	bhi.n	8001be0 <HAL_GPIO_Init+0xcc>
 8001b8a:	2b12      	cmp	r3, #18
 8001b8c:	d859      	bhi.n	8001c42 <HAL_GPIO_Init+0x12e>
 8001b8e:	a201      	add	r2, pc, #4	@ (adr r2, 8001b94 <HAL_GPIO_Init+0x80>)
 8001b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b94:	08001c0f 	.word	0x08001c0f
 8001b98:	08001be9 	.word	0x08001be9
 8001b9c:	08001bfb 	.word	0x08001bfb
 8001ba0:	08001c3d 	.word	0x08001c3d
 8001ba4:	08001c43 	.word	0x08001c43
 8001ba8:	08001c43 	.word	0x08001c43
 8001bac:	08001c43 	.word	0x08001c43
 8001bb0:	08001c43 	.word	0x08001c43
 8001bb4:	08001c43 	.word	0x08001c43
 8001bb8:	08001c43 	.word	0x08001c43
 8001bbc:	08001c43 	.word	0x08001c43
 8001bc0:	08001c43 	.word	0x08001c43
 8001bc4:	08001c43 	.word	0x08001c43
 8001bc8:	08001c43 	.word	0x08001c43
 8001bcc:	08001c43 	.word	0x08001c43
 8001bd0:	08001c43 	.word	0x08001c43
 8001bd4:	08001c43 	.word	0x08001c43
 8001bd8:	08001bf1 	.word	0x08001bf1
 8001bdc:	08001c05 	.word	0x08001c05
 8001be0:	4a76      	ldr	r2, [pc, #472]	@ (8001dbc <HAL_GPIO_Init+0x2a8>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d013      	beq.n	8001c0e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001be6:	e02c      	b.n	8001c42 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	623b      	str	r3, [r7, #32]
          break;
 8001bee:	e029      	b.n	8001c44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	3304      	adds	r3, #4
 8001bf6:	623b      	str	r3, [r7, #32]
          break;
 8001bf8:	e024      	b.n	8001c44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	3308      	adds	r3, #8
 8001c00:	623b      	str	r3, [r7, #32]
          break;
 8001c02:	e01f      	b.n	8001c44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	330c      	adds	r3, #12
 8001c0a:	623b      	str	r3, [r7, #32]
          break;
 8001c0c:	e01a      	b.n	8001c44 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d102      	bne.n	8001c1c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c16:	2304      	movs	r3, #4
 8001c18:	623b      	str	r3, [r7, #32]
          break;
 8001c1a:	e013      	b.n	8001c44 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d105      	bne.n	8001c30 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c24:	2308      	movs	r3, #8
 8001c26:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	69fa      	ldr	r2, [r7, #28]
 8001c2c:	611a      	str	r2, [r3, #16]
          break;
 8001c2e:	e009      	b.n	8001c44 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c30:	2308      	movs	r3, #8
 8001c32:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	69fa      	ldr	r2, [r7, #28]
 8001c38:	615a      	str	r2, [r3, #20]
          break;
 8001c3a:	e003      	b.n	8001c44 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	623b      	str	r3, [r7, #32]
          break;
 8001c40:	e000      	b.n	8001c44 <HAL_GPIO_Init+0x130>
          break;
 8001c42:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	2bff      	cmp	r3, #255	@ 0xff
 8001c48:	d801      	bhi.n	8001c4e <HAL_GPIO_Init+0x13a>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	e001      	b.n	8001c52 <HAL_GPIO_Init+0x13e>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	3304      	adds	r3, #4
 8001c52:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	2bff      	cmp	r3, #255	@ 0xff
 8001c58:	d802      	bhi.n	8001c60 <HAL_GPIO_Init+0x14c>
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	e002      	b.n	8001c66 <HAL_GPIO_Init+0x152>
 8001c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c62:	3b08      	subs	r3, #8
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	210f      	movs	r1, #15
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	fa01 f303 	lsl.w	r3, r1, r3
 8001c74:	43db      	mvns	r3, r3
 8001c76:	401a      	ands	r2, r3
 8001c78:	6a39      	ldr	r1, [r7, #32]
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c80:	431a      	orrs	r2, r3
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	f000 80a9 	beq.w	8001de6 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c94:	4b4a      	ldr	r3, [pc, #296]	@ (8001dc0 <HAL_GPIO_Init+0x2ac>)
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	4a49      	ldr	r2, [pc, #292]	@ (8001dc0 <HAL_GPIO_Init+0x2ac>)
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	6193      	str	r3, [r2, #24]
 8001ca0:	4b47      	ldr	r3, [pc, #284]	@ (8001dc0 <HAL_GPIO_Init+0x2ac>)
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	60bb      	str	r3, [r7, #8]
 8001caa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001cac:	4a45      	ldr	r2, [pc, #276]	@ (8001dc4 <HAL_GPIO_Init+0x2b0>)
 8001cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb0:	089b      	lsrs	r3, r3, #2
 8001cb2:	3302      	adds	r3, #2
 8001cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cb8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cbc:	f003 0303 	and.w	r3, r3, #3
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	220f      	movs	r2, #15
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	68fa      	ldr	r2, [r7, #12]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4a3d      	ldr	r2, [pc, #244]	@ (8001dc8 <HAL_GPIO_Init+0x2b4>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d00d      	beq.n	8001cf4 <HAL_GPIO_Init+0x1e0>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4a3c      	ldr	r2, [pc, #240]	@ (8001dcc <HAL_GPIO_Init+0x2b8>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d007      	beq.n	8001cf0 <HAL_GPIO_Init+0x1dc>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4a3b      	ldr	r2, [pc, #236]	@ (8001dd0 <HAL_GPIO_Init+0x2bc>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d101      	bne.n	8001cec <HAL_GPIO_Init+0x1d8>
 8001ce8:	2302      	movs	r3, #2
 8001cea:	e004      	b.n	8001cf6 <HAL_GPIO_Init+0x1e2>
 8001cec:	2303      	movs	r3, #3
 8001cee:	e002      	b.n	8001cf6 <HAL_GPIO_Init+0x1e2>
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e000      	b.n	8001cf6 <HAL_GPIO_Init+0x1e2>
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cf8:	f002 0203 	and.w	r2, r2, #3
 8001cfc:	0092      	lsls	r2, r2, #2
 8001cfe:	4093      	lsls	r3, r2
 8001d00:	68fa      	ldr	r2, [r7, #12]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d06:	492f      	ldr	r1, [pc, #188]	@ (8001dc4 <HAL_GPIO_Init+0x2b0>)
 8001d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d0a:	089b      	lsrs	r3, r3, #2
 8001d0c:	3302      	adds	r3, #2
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d006      	beq.n	8001d2e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d20:	4b2c      	ldr	r3, [pc, #176]	@ (8001dd4 <HAL_GPIO_Init+0x2c0>)
 8001d22:	689a      	ldr	r2, [r3, #8]
 8001d24:	492b      	ldr	r1, [pc, #172]	@ (8001dd4 <HAL_GPIO_Init+0x2c0>)
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	608b      	str	r3, [r1, #8]
 8001d2c:	e006      	b.n	8001d3c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d2e:	4b29      	ldr	r3, [pc, #164]	@ (8001dd4 <HAL_GPIO_Init+0x2c0>)
 8001d30:	689a      	ldr	r2, [r3, #8]
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	43db      	mvns	r3, r3
 8001d36:	4927      	ldr	r1, [pc, #156]	@ (8001dd4 <HAL_GPIO_Init+0x2c0>)
 8001d38:	4013      	ands	r3, r2
 8001d3a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d006      	beq.n	8001d56 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d48:	4b22      	ldr	r3, [pc, #136]	@ (8001dd4 <HAL_GPIO_Init+0x2c0>)
 8001d4a:	68da      	ldr	r2, [r3, #12]
 8001d4c:	4921      	ldr	r1, [pc, #132]	@ (8001dd4 <HAL_GPIO_Init+0x2c0>)
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	60cb      	str	r3, [r1, #12]
 8001d54:	e006      	b.n	8001d64 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d56:	4b1f      	ldr	r3, [pc, #124]	@ (8001dd4 <HAL_GPIO_Init+0x2c0>)
 8001d58:	68da      	ldr	r2, [r3, #12]
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	491d      	ldr	r1, [pc, #116]	@ (8001dd4 <HAL_GPIO_Init+0x2c0>)
 8001d60:	4013      	ands	r3, r2
 8001d62:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d006      	beq.n	8001d7e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d70:	4b18      	ldr	r3, [pc, #96]	@ (8001dd4 <HAL_GPIO_Init+0x2c0>)
 8001d72:	685a      	ldr	r2, [r3, #4]
 8001d74:	4917      	ldr	r1, [pc, #92]	@ (8001dd4 <HAL_GPIO_Init+0x2c0>)
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	604b      	str	r3, [r1, #4]
 8001d7c:	e006      	b.n	8001d8c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d7e:	4b15      	ldr	r3, [pc, #84]	@ (8001dd4 <HAL_GPIO_Init+0x2c0>)
 8001d80:	685a      	ldr	r2, [r3, #4]
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	43db      	mvns	r3, r3
 8001d86:	4913      	ldr	r1, [pc, #76]	@ (8001dd4 <HAL_GPIO_Init+0x2c0>)
 8001d88:	4013      	ands	r3, r2
 8001d8a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d01f      	beq.n	8001dd8 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d98:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd4 <HAL_GPIO_Init+0x2c0>)
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	490d      	ldr	r1, [pc, #52]	@ (8001dd4 <HAL_GPIO_Init+0x2c0>)
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	600b      	str	r3, [r1, #0]
 8001da4:	e01f      	b.n	8001de6 <HAL_GPIO_Init+0x2d2>
 8001da6:	bf00      	nop
 8001da8:	10320000 	.word	0x10320000
 8001dac:	10310000 	.word	0x10310000
 8001db0:	10220000 	.word	0x10220000
 8001db4:	10210000 	.word	0x10210000
 8001db8:	10120000 	.word	0x10120000
 8001dbc:	10110000 	.word	0x10110000
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	40010000 	.word	0x40010000
 8001dc8:	40010800 	.word	0x40010800
 8001dcc:	40010c00 	.word	0x40010c00
 8001dd0:	40011000 	.word	0x40011000
 8001dd4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001dd8:	4b0b      	ldr	r3, [pc, #44]	@ (8001e08 <HAL_GPIO_Init+0x2f4>)
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	43db      	mvns	r3, r3
 8001de0:	4909      	ldr	r1, [pc, #36]	@ (8001e08 <HAL_GPIO_Init+0x2f4>)
 8001de2:	4013      	ands	r3, r2
 8001de4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de8:	3301      	adds	r3, #1
 8001dea:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df2:	fa22 f303 	lsr.w	r3, r2, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f47f ae96 	bne.w	8001b28 <HAL_GPIO_Init+0x14>
  }
}
 8001dfc:	bf00      	nop
 8001dfe:	bf00      	nop
 8001e00:	372c      	adds	r7, #44	@ 0x2c
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bc80      	pop	{r7}
 8001e06:	4770      	bx	lr
 8001e08:	40010400 	.word	0x40010400

08001e0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	460b      	mov	r3, r1
 8001e16:	807b      	strh	r3, [r7, #2]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e1c:	787b      	ldrb	r3, [r7, #1]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d003      	beq.n	8001e2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e22:	887a      	ldrh	r2, [r7, #2]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e28:	e003      	b.n	8001e32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e2a:	887b      	ldrh	r3, [r7, #2]
 8001e2c:	041a      	lsls	r2, r3, #16
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	611a      	str	r2, [r3, #16]
}
 8001e32:	bf00      	nop
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc80      	pop	{r7}
 8001e3a:	4770      	bx	lr

08001e3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d101      	bne.n	8001e4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e272      	b.n	8002334 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f000 8087 	beq.w	8001f6a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e5c:	4b92      	ldr	r3, [pc, #584]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f003 030c 	and.w	r3, r3, #12
 8001e64:	2b04      	cmp	r3, #4
 8001e66:	d00c      	beq.n	8001e82 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e68:	4b8f      	ldr	r3, [pc, #572]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f003 030c 	and.w	r3, r3, #12
 8001e70:	2b08      	cmp	r3, #8
 8001e72:	d112      	bne.n	8001e9a <HAL_RCC_OscConfig+0x5e>
 8001e74:	4b8c      	ldr	r3, [pc, #560]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e80:	d10b      	bne.n	8001e9a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e82:	4b89      	ldr	r3, [pc, #548]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d06c      	beq.n	8001f68 <HAL_RCC_OscConfig+0x12c>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d168      	bne.n	8001f68 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e24c      	b.n	8002334 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ea2:	d106      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x76>
 8001ea4:	4b80      	ldr	r3, [pc, #512]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a7f      	ldr	r2, [pc, #508]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001eaa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eae:	6013      	str	r3, [r2, #0]
 8001eb0:	e02e      	b.n	8001f10 <HAL_RCC_OscConfig+0xd4>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d10c      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x98>
 8001eba:	4b7b      	ldr	r3, [pc, #492]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a7a      	ldr	r2, [pc, #488]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001ec0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ec4:	6013      	str	r3, [r2, #0]
 8001ec6:	4b78      	ldr	r3, [pc, #480]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a77      	ldr	r2, [pc, #476]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001ecc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ed0:	6013      	str	r3, [r2, #0]
 8001ed2:	e01d      	b.n	8001f10 <HAL_RCC_OscConfig+0xd4>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001edc:	d10c      	bne.n	8001ef8 <HAL_RCC_OscConfig+0xbc>
 8001ede:	4b72      	ldr	r3, [pc, #456]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a71      	ldr	r2, [pc, #452]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001ee4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ee8:	6013      	str	r3, [r2, #0]
 8001eea:	4b6f      	ldr	r3, [pc, #444]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a6e      	ldr	r2, [pc, #440]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001ef0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ef4:	6013      	str	r3, [r2, #0]
 8001ef6:	e00b      	b.n	8001f10 <HAL_RCC_OscConfig+0xd4>
 8001ef8:	4b6b      	ldr	r3, [pc, #428]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a6a      	ldr	r2, [pc, #424]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001efe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f02:	6013      	str	r3, [r2, #0]
 8001f04:	4b68      	ldr	r3, [pc, #416]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a67      	ldr	r2, [pc, #412]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001f0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f0e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d013      	beq.n	8001f40 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f18:	f7ff fa02 	bl	8001320 <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f20:	f7ff f9fe 	bl	8001320 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b64      	cmp	r3, #100	@ 0x64
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e200      	b.n	8002334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f32:	4b5d      	ldr	r3, [pc, #372]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d0f0      	beq.n	8001f20 <HAL_RCC_OscConfig+0xe4>
 8001f3e:	e014      	b.n	8001f6a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f40:	f7ff f9ee 	bl	8001320 <HAL_GetTick>
 8001f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f48:	f7ff f9ea 	bl	8001320 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b64      	cmp	r3, #100	@ 0x64
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e1ec      	b.n	8002334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f5a:	4b53      	ldr	r3, [pc, #332]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1f0      	bne.n	8001f48 <HAL_RCC_OscConfig+0x10c>
 8001f66:	e000      	b.n	8001f6a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d063      	beq.n	800203e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f76:	4b4c      	ldr	r3, [pc, #304]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f003 030c 	and.w	r3, r3, #12
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d00b      	beq.n	8001f9a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f82:	4b49      	ldr	r3, [pc, #292]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f003 030c 	and.w	r3, r3, #12
 8001f8a:	2b08      	cmp	r3, #8
 8001f8c:	d11c      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x18c>
 8001f8e:	4b46      	ldr	r3, [pc, #280]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d116      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f9a:	4b43      	ldr	r3, [pc, #268]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d005      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x176>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d001      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e1c0      	b.n	8002334 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb2:	4b3d      	ldr	r3, [pc, #244]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	695b      	ldr	r3, [r3, #20]
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	4939      	ldr	r1, [pc, #228]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fc6:	e03a      	b.n	800203e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d020      	beq.n	8002012 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fd0:	4b36      	ldr	r3, [pc, #216]	@ (80020ac <HAL_RCC_OscConfig+0x270>)
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd6:	f7ff f9a3 	bl	8001320 <HAL_GetTick>
 8001fda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fdc:	e008      	b.n	8001ff0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fde:	f7ff f99f 	bl	8001320 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d901      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e1a1      	b.n	8002334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff0:	4b2d      	ldr	r3, [pc, #180]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d0f0      	beq.n	8001fde <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ffc:	4b2a      	ldr	r3, [pc, #168]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	695b      	ldr	r3, [r3, #20]
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	4927      	ldr	r1, [pc, #156]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 800200c:	4313      	orrs	r3, r2
 800200e:	600b      	str	r3, [r1, #0]
 8002010:	e015      	b.n	800203e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002012:	4b26      	ldr	r3, [pc, #152]	@ (80020ac <HAL_RCC_OscConfig+0x270>)
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002018:	f7ff f982 	bl	8001320 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002020:	f7ff f97e 	bl	8001320 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e180      	b.n	8002334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002032:	4b1d      	ldr	r3, [pc, #116]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1f0      	bne.n	8002020 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0308 	and.w	r3, r3, #8
 8002046:	2b00      	cmp	r3, #0
 8002048:	d03a      	beq.n	80020c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d019      	beq.n	8002086 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002052:	4b17      	ldr	r3, [pc, #92]	@ (80020b0 <HAL_RCC_OscConfig+0x274>)
 8002054:	2201      	movs	r2, #1
 8002056:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002058:	f7ff f962 	bl	8001320 <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800205e:	e008      	b.n	8002072 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002060:	f7ff f95e 	bl	8001320 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b02      	cmp	r3, #2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e160      	b.n	8002334 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002072:	4b0d      	ldr	r3, [pc, #52]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8002074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d0f0      	beq.n	8002060 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800207e:	2001      	movs	r0, #1
 8002080:	f000 fa9c 	bl	80025bc <RCC_Delay>
 8002084:	e01c      	b.n	80020c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002086:	4b0a      	ldr	r3, [pc, #40]	@ (80020b0 <HAL_RCC_OscConfig+0x274>)
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800208c:	f7ff f948 	bl	8001320 <HAL_GetTick>
 8002090:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002092:	e00f      	b.n	80020b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002094:	f7ff f944 	bl	8001320 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d908      	bls.n	80020b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e146      	b.n	8002334 <HAL_RCC_OscConfig+0x4f8>
 80020a6:	bf00      	nop
 80020a8:	40021000 	.word	0x40021000
 80020ac:	42420000 	.word	0x42420000
 80020b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020b4:	4b92      	ldr	r3, [pc, #584]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 80020b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d1e9      	bne.n	8002094 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0304 	and.w	r3, r3, #4
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f000 80a6 	beq.w	800221a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ce:	2300      	movs	r3, #0
 80020d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020d2:	4b8b      	ldr	r3, [pc, #556]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d10d      	bne.n	80020fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020de:	4b88      	ldr	r3, [pc, #544]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	4a87      	ldr	r2, [pc, #540]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 80020e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020e8:	61d3      	str	r3, [r2, #28]
 80020ea:	4b85      	ldr	r3, [pc, #532]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 80020ec:	69db      	ldr	r3, [r3, #28]
 80020ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020f2:	60bb      	str	r3, [r7, #8]
 80020f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020f6:	2301      	movs	r3, #1
 80020f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020fa:	4b82      	ldr	r3, [pc, #520]	@ (8002304 <HAL_RCC_OscConfig+0x4c8>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002102:	2b00      	cmp	r3, #0
 8002104:	d118      	bne.n	8002138 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002106:	4b7f      	ldr	r3, [pc, #508]	@ (8002304 <HAL_RCC_OscConfig+0x4c8>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a7e      	ldr	r2, [pc, #504]	@ (8002304 <HAL_RCC_OscConfig+0x4c8>)
 800210c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002110:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002112:	f7ff f905 	bl	8001320 <HAL_GetTick>
 8002116:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002118:	e008      	b.n	800212c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800211a:	f7ff f901 	bl	8001320 <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	2b64      	cmp	r3, #100	@ 0x64
 8002126:	d901      	bls.n	800212c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e103      	b.n	8002334 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800212c:	4b75      	ldr	r3, [pc, #468]	@ (8002304 <HAL_RCC_OscConfig+0x4c8>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002134:	2b00      	cmp	r3, #0
 8002136:	d0f0      	beq.n	800211a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d106      	bne.n	800214e <HAL_RCC_OscConfig+0x312>
 8002140:	4b6f      	ldr	r3, [pc, #444]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	4a6e      	ldr	r2, [pc, #440]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 8002146:	f043 0301 	orr.w	r3, r3, #1
 800214a:	6213      	str	r3, [r2, #32]
 800214c:	e02d      	b.n	80021aa <HAL_RCC_OscConfig+0x36e>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d10c      	bne.n	8002170 <HAL_RCC_OscConfig+0x334>
 8002156:	4b6a      	ldr	r3, [pc, #424]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 8002158:	6a1b      	ldr	r3, [r3, #32]
 800215a:	4a69      	ldr	r2, [pc, #420]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 800215c:	f023 0301 	bic.w	r3, r3, #1
 8002160:	6213      	str	r3, [r2, #32]
 8002162:	4b67      	ldr	r3, [pc, #412]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 8002164:	6a1b      	ldr	r3, [r3, #32]
 8002166:	4a66      	ldr	r2, [pc, #408]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 8002168:	f023 0304 	bic.w	r3, r3, #4
 800216c:	6213      	str	r3, [r2, #32]
 800216e:	e01c      	b.n	80021aa <HAL_RCC_OscConfig+0x36e>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	2b05      	cmp	r3, #5
 8002176:	d10c      	bne.n	8002192 <HAL_RCC_OscConfig+0x356>
 8002178:	4b61      	ldr	r3, [pc, #388]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 800217a:	6a1b      	ldr	r3, [r3, #32]
 800217c:	4a60      	ldr	r2, [pc, #384]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 800217e:	f043 0304 	orr.w	r3, r3, #4
 8002182:	6213      	str	r3, [r2, #32]
 8002184:	4b5e      	ldr	r3, [pc, #376]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 8002186:	6a1b      	ldr	r3, [r3, #32]
 8002188:	4a5d      	ldr	r2, [pc, #372]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 800218a:	f043 0301 	orr.w	r3, r3, #1
 800218e:	6213      	str	r3, [r2, #32]
 8002190:	e00b      	b.n	80021aa <HAL_RCC_OscConfig+0x36e>
 8002192:	4b5b      	ldr	r3, [pc, #364]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 8002194:	6a1b      	ldr	r3, [r3, #32]
 8002196:	4a5a      	ldr	r2, [pc, #360]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 8002198:	f023 0301 	bic.w	r3, r3, #1
 800219c:	6213      	str	r3, [r2, #32]
 800219e:	4b58      	ldr	r3, [pc, #352]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 80021a0:	6a1b      	ldr	r3, [r3, #32]
 80021a2:	4a57      	ldr	r2, [pc, #348]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 80021a4:	f023 0304 	bic.w	r3, r3, #4
 80021a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d015      	beq.n	80021de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021b2:	f7ff f8b5 	bl	8001320 <HAL_GetTick>
 80021b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b8:	e00a      	b.n	80021d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ba:	f7ff f8b1 	bl	8001320 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d901      	bls.n	80021d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e0b1      	b.n	8002334 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021d0:	4b4b      	ldr	r3, [pc, #300]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	f003 0302 	and.w	r3, r3, #2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d0ee      	beq.n	80021ba <HAL_RCC_OscConfig+0x37e>
 80021dc:	e014      	b.n	8002208 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021de:	f7ff f89f 	bl	8001320 <HAL_GetTick>
 80021e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021e4:	e00a      	b.n	80021fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021e6:	f7ff f89b 	bl	8001320 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d901      	bls.n	80021fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e09b      	b.n	8002334 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021fc:	4b40      	ldr	r3, [pc, #256]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 80021fe:	6a1b      	ldr	r3, [r3, #32]
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1ee      	bne.n	80021e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002208:	7dfb      	ldrb	r3, [r7, #23]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d105      	bne.n	800221a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800220e:	4b3c      	ldr	r3, [pc, #240]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	4a3b      	ldr	r2, [pc, #236]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 8002214:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002218:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	2b00      	cmp	r3, #0
 8002220:	f000 8087 	beq.w	8002332 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002224:	4b36      	ldr	r3, [pc, #216]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f003 030c 	and.w	r3, r3, #12
 800222c:	2b08      	cmp	r3, #8
 800222e:	d061      	beq.n	80022f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	69db      	ldr	r3, [r3, #28]
 8002234:	2b02      	cmp	r3, #2
 8002236:	d146      	bne.n	80022c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002238:	4b33      	ldr	r3, [pc, #204]	@ (8002308 <HAL_RCC_OscConfig+0x4cc>)
 800223a:	2200      	movs	r2, #0
 800223c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223e:	f7ff f86f 	bl	8001320 <HAL_GetTick>
 8002242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002244:	e008      	b.n	8002258 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002246:	f7ff f86b 	bl	8001320 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d901      	bls.n	8002258 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e06d      	b.n	8002334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002258:	4b29      	ldr	r3, [pc, #164]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1f0      	bne.n	8002246 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a1b      	ldr	r3, [r3, #32]
 8002268:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800226c:	d108      	bne.n	8002280 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800226e:	4b24      	ldr	r3, [pc, #144]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	4921      	ldr	r1, [pc, #132]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 800227c:	4313      	orrs	r3, r2
 800227e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002280:	4b1f      	ldr	r3, [pc, #124]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a19      	ldr	r1, [r3, #32]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002290:	430b      	orrs	r3, r1
 8002292:	491b      	ldr	r1, [pc, #108]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 8002294:	4313      	orrs	r3, r2
 8002296:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002298:	4b1b      	ldr	r3, [pc, #108]	@ (8002308 <HAL_RCC_OscConfig+0x4cc>)
 800229a:	2201      	movs	r2, #1
 800229c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800229e:	f7ff f83f 	bl	8001320 <HAL_GetTick>
 80022a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022a4:	e008      	b.n	80022b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022a6:	f7ff f83b 	bl	8001320 <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d901      	bls.n	80022b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e03d      	b.n	8002334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022b8:	4b11      	ldr	r3, [pc, #68]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d0f0      	beq.n	80022a6 <HAL_RCC_OscConfig+0x46a>
 80022c4:	e035      	b.n	8002332 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022c6:	4b10      	ldr	r3, [pc, #64]	@ (8002308 <HAL_RCC_OscConfig+0x4cc>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022cc:	f7ff f828 	bl	8001320 <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022d4:	f7ff f824 	bl	8001320 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e026      	b.n	8002334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022e6:	4b06      	ldr	r3, [pc, #24]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d1f0      	bne.n	80022d4 <HAL_RCC_OscConfig+0x498>
 80022f2:	e01e      	b.n	8002332 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	69db      	ldr	r3, [r3, #28]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d107      	bne.n	800230c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e019      	b.n	8002334 <HAL_RCC_OscConfig+0x4f8>
 8002300:	40021000 	.word	0x40021000
 8002304:	40007000 	.word	0x40007000
 8002308:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800230c:	4b0b      	ldr	r3, [pc, #44]	@ (800233c <HAL_RCC_OscConfig+0x500>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a1b      	ldr	r3, [r3, #32]
 800231c:	429a      	cmp	r2, r3
 800231e:	d106      	bne.n	800232e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800232a:	429a      	cmp	r2, r3
 800232c:	d001      	beq.n	8002332 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e000      	b.n	8002334 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	3718      	adds	r7, #24
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40021000 	.word	0x40021000

08002340 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d101      	bne.n	8002354 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e0d0      	b.n	80024f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002354:	4b6a      	ldr	r3, [pc, #424]	@ (8002500 <HAL_RCC_ClockConfig+0x1c0>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0307 	and.w	r3, r3, #7
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	429a      	cmp	r2, r3
 8002360:	d910      	bls.n	8002384 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002362:	4b67      	ldr	r3, [pc, #412]	@ (8002500 <HAL_RCC_ClockConfig+0x1c0>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f023 0207 	bic.w	r2, r3, #7
 800236a:	4965      	ldr	r1, [pc, #404]	@ (8002500 <HAL_RCC_ClockConfig+0x1c0>)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	4313      	orrs	r3, r2
 8002370:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002372:	4b63      	ldr	r3, [pc, #396]	@ (8002500 <HAL_RCC_ClockConfig+0x1c0>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0307 	and.w	r3, r3, #7
 800237a:	683a      	ldr	r2, [r7, #0]
 800237c:	429a      	cmp	r2, r3
 800237e:	d001      	beq.n	8002384 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e0b8      	b.n	80024f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d020      	beq.n	80023d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	2b00      	cmp	r3, #0
 800239a:	d005      	beq.n	80023a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800239c:	4b59      	ldr	r3, [pc, #356]	@ (8002504 <HAL_RCC_ClockConfig+0x1c4>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	4a58      	ldr	r2, [pc, #352]	@ (8002504 <HAL_RCC_ClockConfig+0x1c4>)
 80023a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80023a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0308 	and.w	r3, r3, #8
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d005      	beq.n	80023c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023b4:	4b53      	ldr	r3, [pc, #332]	@ (8002504 <HAL_RCC_ClockConfig+0x1c4>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	4a52      	ldr	r2, [pc, #328]	@ (8002504 <HAL_RCC_ClockConfig+0x1c4>)
 80023ba:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80023be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023c0:	4b50      	ldr	r3, [pc, #320]	@ (8002504 <HAL_RCC_ClockConfig+0x1c4>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	494d      	ldr	r1, [pc, #308]	@ (8002504 <HAL_RCC_ClockConfig+0x1c4>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d040      	beq.n	8002460 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d107      	bne.n	80023f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023e6:	4b47      	ldr	r3, [pc, #284]	@ (8002504 <HAL_RCC_ClockConfig+0x1c4>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d115      	bne.n	800241e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e07f      	b.n	80024f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d107      	bne.n	800240e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023fe:	4b41      	ldr	r3, [pc, #260]	@ (8002504 <HAL_RCC_ClockConfig+0x1c4>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d109      	bne.n	800241e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e073      	b.n	80024f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800240e:	4b3d      	ldr	r3, [pc, #244]	@ (8002504 <HAL_RCC_ClockConfig+0x1c4>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e06b      	b.n	80024f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800241e:	4b39      	ldr	r3, [pc, #228]	@ (8002504 <HAL_RCC_ClockConfig+0x1c4>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f023 0203 	bic.w	r2, r3, #3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	4936      	ldr	r1, [pc, #216]	@ (8002504 <HAL_RCC_ClockConfig+0x1c4>)
 800242c:	4313      	orrs	r3, r2
 800242e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002430:	f7fe ff76 	bl	8001320 <HAL_GetTick>
 8002434:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002436:	e00a      	b.n	800244e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002438:	f7fe ff72 	bl	8001320 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002446:	4293      	cmp	r3, r2
 8002448:	d901      	bls.n	800244e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e053      	b.n	80024f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800244e:	4b2d      	ldr	r3, [pc, #180]	@ (8002504 <HAL_RCC_ClockConfig+0x1c4>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f003 020c 	and.w	r2, r3, #12
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	429a      	cmp	r2, r3
 800245e:	d1eb      	bne.n	8002438 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002460:	4b27      	ldr	r3, [pc, #156]	@ (8002500 <HAL_RCC_ClockConfig+0x1c0>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0307 	and.w	r3, r3, #7
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	429a      	cmp	r2, r3
 800246c:	d210      	bcs.n	8002490 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800246e:	4b24      	ldr	r3, [pc, #144]	@ (8002500 <HAL_RCC_ClockConfig+0x1c0>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f023 0207 	bic.w	r2, r3, #7
 8002476:	4922      	ldr	r1, [pc, #136]	@ (8002500 <HAL_RCC_ClockConfig+0x1c0>)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	4313      	orrs	r3, r2
 800247c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800247e:	4b20      	ldr	r3, [pc, #128]	@ (8002500 <HAL_RCC_ClockConfig+0x1c0>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	429a      	cmp	r2, r3
 800248a:	d001      	beq.n	8002490 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e032      	b.n	80024f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0304 	and.w	r3, r3, #4
 8002498:	2b00      	cmp	r3, #0
 800249a:	d008      	beq.n	80024ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800249c:	4b19      	ldr	r3, [pc, #100]	@ (8002504 <HAL_RCC_ClockConfig+0x1c4>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	4916      	ldr	r1, [pc, #88]	@ (8002504 <HAL_RCC_ClockConfig+0x1c4>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0308 	and.w	r3, r3, #8
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d009      	beq.n	80024ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024ba:	4b12      	ldr	r3, [pc, #72]	@ (8002504 <HAL_RCC_ClockConfig+0x1c4>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	490e      	ldr	r1, [pc, #56]	@ (8002504 <HAL_RCC_ClockConfig+0x1c4>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024ce:	f000 f821 	bl	8002514 <HAL_RCC_GetSysClockFreq>
 80024d2:	4602      	mov	r2, r0
 80024d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002504 <HAL_RCC_ClockConfig+0x1c4>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	091b      	lsrs	r3, r3, #4
 80024da:	f003 030f 	and.w	r3, r3, #15
 80024de:	490a      	ldr	r1, [pc, #40]	@ (8002508 <HAL_RCC_ClockConfig+0x1c8>)
 80024e0:	5ccb      	ldrb	r3, [r1, r3]
 80024e2:	fa22 f303 	lsr.w	r3, r2, r3
 80024e6:	4a09      	ldr	r2, [pc, #36]	@ (800250c <HAL_RCC_ClockConfig+0x1cc>)
 80024e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024ea:	4b09      	ldr	r3, [pc, #36]	@ (8002510 <HAL_RCC_ClockConfig+0x1d0>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7fe fed4 	bl	800129c <HAL_InitTick>

  return HAL_OK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40022000 	.word	0x40022000
 8002504:	40021000 	.word	0x40021000
 8002508:	08003540 	.word	0x08003540
 800250c:	20000000 	.word	0x20000000
 8002510:	20000004 	.word	0x20000004

08002514 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002514:	b480      	push	{r7}
 8002516:	b087      	sub	sp, #28
 8002518:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800251a:	2300      	movs	r3, #0
 800251c:	60fb      	str	r3, [r7, #12]
 800251e:	2300      	movs	r3, #0
 8002520:	60bb      	str	r3, [r7, #8]
 8002522:	2300      	movs	r3, #0
 8002524:	617b      	str	r3, [r7, #20]
 8002526:	2300      	movs	r3, #0
 8002528:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800252a:	2300      	movs	r3, #0
 800252c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800252e:	4b1e      	ldr	r3, [pc, #120]	@ (80025a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f003 030c 	and.w	r3, r3, #12
 800253a:	2b04      	cmp	r3, #4
 800253c:	d002      	beq.n	8002544 <HAL_RCC_GetSysClockFreq+0x30>
 800253e:	2b08      	cmp	r3, #8
 8002540:	d003      	beq.n	800254a <HAL_RCC_GetSysClockFreq+0x36>
 8002542:	e027      	b.n	8002594 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002544:	4b19      	ldr	r3, [pc, #100]	@ (80025ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002546:	613b      	str	r3, [r7, #16]
      break;
 8002548:	e027      	b.n	800259a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	0c9b      	lsrs	r3, r3, #18
 800254e:	f003 030f 	and.w	r3, r3, #15
 8002552:	4a17      	ldr	r2, [pc, #92]	@ (80025b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002554:	5cd3      	ldrb	r3, [r2, r3]
 8002556:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d010      	beq.n	8002584 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002562:	4b11      	ldr	r3, [pc, #68]	@ (80025a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	0c5b      	lsrs	r3, r3, #17
 8002568:	f003 0301 	and.w	r3, r3, #1
 800256c:	4a11      	ldr	r2, [pc, #68]	@ (80025b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800256e:	5cd3      	ldrb	r3, [r2, r3]
 8002570:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a0d      	ldr	r2, [pc, #52]	@ (80025ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002576:	fb03 f202 	mul.w	r2, r3, r2
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002580:	617b      	str	r3, [r7, #20]
 8002582:	e004      	b.n	800258e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4a0c      	ldr	r2, [pc, #48]	@ (80025b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002588:	fb02 f303 	mul.w	r3, r2, r3
 800258c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	613b      	str	r3, [r7, #16]
      break;
 8002592:	e002      	b.n	800259a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002594:	4b05      	ldr	r3, [pc, #20]	@ (80025ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002596:	613b      	str	r3, [r7, #16]
      break;
 8002598:	bf00      	nop
    }
  }
  return sysclockfreq;
 800259a:	693b      	ldr	r3, [r7, #16]
}
 800259c:	4618      	mov	r0, r3
 800259e:	371c      	adds	r7, #28
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bc80      	pop	{r7}
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	40021000 	.word	0x40021000
 80025ac:	007a1200 	.word	0x007a1200
 80025b0:	08003550 	.word	0x08003550
 80025b4:	08003560 	.word	0x08003560
 80025b8:	003d0900 	.word	0x003d0900

080025bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025bc:	b480      	push	{r7}
 80025be:	b085      	sub	sp, #20
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025c4:	4b0a      	ldr	r3, [pc, #40]	@ (80025f0 <RCC_Delay+0x34>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a0a      	ldr	r2, [pc, #40]	@ (80025f4 <RCC_Delay+0x38>)
 80025ca:	fba2 2303 	umull	r2, r3, r2, r3
 80025ce:	0a5b      	lsrs	r3, r3, #9
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	fb02 f303 	mul.w	r3, r2, r3
 80025d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025d8:	bf00      	nop
  }
  while (Delay --);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	1e5a      	subs	r2, r3, #1
 80025de:	60fa      	str	r2, [r7, #12]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1f9      	bne.n	80025d8 <RCC_Delay+0x1c>
}
 80025e4:	bf00      	nop
 80025e6:	bf00      	nop
 80025e8:	3714      	adds	r7, #20
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bc80      	pop	{r7}
 80025ee:	4770      	bx	lr
 80025f0:	20000000 	.word	0x20000000
 80025f4:	10624dd3 	.word	0x10624dd3

080025f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002600:	2300      	movs	r3, #0
 8002602:	613b      	str	r3, [r7, #16]
 8002604:	2300      	movs	r3, #0
 8002606:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0301 	and.w	r3, r3, #1
 8002610:	2b00      	cmp	r3, #0
 8002612:	d07d      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002614:	2300      	movs	r3, #0
 8002616:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002618:	4b4f      	ldr	r3, [pc, #316]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800261a:	69db      	ldr	r3, [r3, #28]
 800261c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d10d      	bne.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002624:	4b4c      	ldr	r3, [pc, #304]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002626:	69db      	ldr	r3, [r3, #28]
 8002628:	4a4b      	ldr	r2, [pc, #300]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800262a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800262e:	61d3      	str	r3, [r2, #28]
 8002630:	4b49      	ldr	r3, [pc, #292]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002632:	69db      	ldr	r3, [r3, #28]
 8002634:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002638:	60bb      	str	r3, [r7, #8]
 800263a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800263c:	2301      	movs	r3, #1
 800263e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002640:	4b46      	ldr	r3, [pc, #280]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002648:	2b00      	cmp	r3, #0
 800264a:	d118      	bne.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800264c:	4b43      	ldr	r3, [pc, #268]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a42      	ldr	r2, [pc, #264]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002652:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002656:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002658:	f7fe fe62 	bl	8001320 <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800265e:	e008      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002660:	f7fe fe5e 	bl	8001320 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b64      	cmp	r3, #100	@ 0x64
 800266c:	d901      	bls.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e06d      	b.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002672:	4b3a      	ldr	r3, [pc, #232]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800267a:	2b00      	cmp	r3, #0
 800267c:	d0f0      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800267e:	4b36      	ldr	r3, [pc, #216]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002680:	6a1b      	ldr	r3, [r3, #32]
 8002682:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002686:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d02e      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	429a      	cmp	r2, r3
 800269a:	d027      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800269c:	4b2e      	ldr	r3, [pc, #184]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800269e:	6a1b      	ldr	r3, [r3, #32]
 80026a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026a4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80026a6:	4b2e      	ldr	r3, [pc, #184]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80026a8:	2201      	movs	r2, #1
 80026aa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026ac:	4b2c      	ldr	r3, [pc, #176]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80026b2:	4a29      	ldr	r2, [pc, #164]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d014      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c2:	f7fe fe2d 	bl	8001320 <HAL_GetTick>
 80026c6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026c8:	e00a      	b.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ca:	f7fe fe29 	bl	8001320 <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026d8:	4293      	cmp	r3, r2
 80026da:	d901      	bls.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e036      	b.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026e2:	6a1b      	ldr	r3, [r3, #32]
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d0ee      	beq.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026ee:	6a1b      	ldr	r3, [r3, #32]
 80026f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	4917      	ldr	r1, [pc, #92]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026fe:	7dfb      	ldrb	r3, [r7, #23]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d105      	bne.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002704:	4b14      	ldr	r3, [pc, #80]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002706:	69db      	ldr	r3, [r3, #28]
 8002708:	4a13      	ldr	r2, [pc, #76]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800270a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800270e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d008      	beq.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800271c:	4b0e      	ldr	r3, [pc, #56]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	490b      	ldr	r1, [pc, #44]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800272a:	4313      	orrs	r3, r2
 800272c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0310 	and.w	r3, r3, #16
 8002736:	2b00      	cmp	r3, #0
 8002738:	d008      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800273a:	4b07      	ldr	r3, [pc, #28]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	4904      	ldr	r1, [pc, #16]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002748:	4313      	orrs	r3, r2
 800274a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3718      	adds	r7, #24
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	40021000 	.word	0x40021000
 800275c:	40007000 	.word	0x40007000
 8002760:	42420440 	.word	0x42420440

08002764 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d101      	bne.n	8002776 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e041      	b.n	80027fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d106      	bne.n	8002790 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f7fe fc6c 	bl	8001068 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2202      	movs	r2, #2
 8002794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	3304      	adds	r3, #4
 80027a0:	4619      	mov	r1, r3
 80027a2:	4610      	mov	r0, r2
 80027a4:	f000 fb44 	bl	8002e30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b082      	sub	sp, #8
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d101      	bne.n	8002814 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e041      	b.n	8002898 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800281a:	b2db      	uxtb	r3, r3
 800281c:	2b00      	cmp	r3, #0
 800281e:	d106      	bne.n	800282e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f7fe fbff 	bl	800102c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2202      	movs	r2, #2
 8002832:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	3304      	adds	r3, #4
 800283e:	4619      	mov	r1, r3
 8002840:	4610      	mov	r0, r2
 8002842:	f000 faf5 	bl	8002e30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2201      	movs	r2, #1
 800284a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2201      	movs	r2, #1
 8002852:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2201      	movs	r2, #1
 800285a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2201      	movs	r2, #1
 8002862:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2201      	movs	r2, #1
 800286a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2201      	movs	r2, #1
 8002872:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2201      	movs	r2, #1
 800287a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2201      	movs	r2, #1
 8002882:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2201      	movs	r2, #1
 800288a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	3708      	adds	r7, #8
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d109      	bne.n	80028c4 <HAL_TIM_PWM_Start+0x24>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	bf14      	ite	ne
 80028bc:	2301      	movne	r3, #1
 80028be:	2300      	moveq	r3, #0
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	e022      	b.n	800290a <HAL_TIM_PWM_Start+0x6a>
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	2b04      	cmp	r3, #4
 80028c8:	d109      	bne.n	80028de <HAL_TIM_PWM_Start+0x3e>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	bf14      	ite	ne
 80028d6:	2301      	movne	r3, #1
 80028d8:	2300      	moveq	r3, #0
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	e015      	b.n	800290a <HAL_TIM_PWM_Start+0x6a>
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	2b08      	cmp	r3, #8
 80028e2:	d109      	bne.n	80028f8 <HAL_TIM_PWM_Start+0x58>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	bf14      	ite	ne
 80028f0:	2301      	movne	r3, #1
 80028f2:	2300      	moveq	r3, #0
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	e008      	b.n	800290a <HAL_TIM_PWM_Start+0x6a>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2b01      	cmp	r3, #1
 8002902:	bf14      	ite	ne
 8002904:	2301      	movne	r3, #1
 8002906:	2300      	moveq	r3, #0
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e059      	b.n	80029c6 <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d104      	bne.n	8002922 <HAL_TIM_PWM_Start+0x82>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2202      	movs	r2, #2
 800291c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002920:	e013      	b.n	800294a <HAL_TIM_PWM_Start+0xaa>
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	2b04      	cmp	r3, #4
 8002926:	d104      	bne.n	8002932 <HAL_TIM_PWM_Start+0x92>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2202      	movs	r2, #2
 800292c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002930:	e00b      	b.n	800294a <HAL_TIM_PWM_Start+0xaa>
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	2b08      	cmp	r3, #8
 8002936:	d104      	bne.n	8002942 <HAL_TIM_PWM_Start+0xa2>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2202      	movs	r2, #2
 800293c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002940:	e003      	b.n	800294a <HAL_TIM_PWM_Start+0xaa>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2202      	movs	r2, #2
 8002946:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2201      	movs	r2, #1
 8002950:	6839      	ldr	r1, [r7, #0]
 8002952:	4618      	mov	r0, r3
 8002954:	f000 fcee 	bl	8003334 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a1c      	ldr	r2, [pc, #112]	@ (80029d0 <HAL_TIM_PWM_Start+0x130>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d107      	bne.n	8002972 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002970:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a16      	ldr	r2, [pc, #88]	@ (80029d0 <HAL_TIM_PWM_Start+0x130>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d009      	beq.n	8002990 <HAL_TIM_PWM_Start+0xf0>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002984:	d004      	beq.n	8002990 <HAL_TIM_PWM_Start+0xf0>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a12      	ldr	r2, [pc, #72]	@ (80029d4 <HAL_TIM_PWM_Start+0x134>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d111      	bne.n	80029b4 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f003 0307 	and.w	r3, r3, #7
 800299a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2b06      	cmp	r3, #6
 80029a0:	d010      	beq.n	80029c4 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f042 0201 	orr.w	r2, r2, #1
 80029b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029b2:	e007      	b.n	80029c4 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f042 0201 	orr.w	r2, r2, #1
 80029c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	40012c00 	.word	0x40012c00
 80029d4:	40000400 	.word	0x40000400

080029d8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d101      	bne.n	80029ec <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e093      	b.n	8002b14 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d106      	bne.n	8002a06 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f7fe fb4d 	bl	80010a0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2202      	movs	r2, #2
 8002a0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	6812      	ldr	r2, [r2, #0]
 8002a18:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002a1c:	f023 0307 	bic.w	r3, r3, #7
 8002a20:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	3304      	adds	r3, #4
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	4610      	mov	r0, r2
 8002a2e:	f000 f9ff 	bl	8002e30 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6a1b      	ldr	r3, [r3, #32]
 8002a48:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	697a      	ldr	r2, [r7, #20]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a5a:	f023 0303 	bic.w	r3, r3, #3
 8002a5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	689a      	ldr	r2, [r3, #8]
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	021b      	lsls	r3, r3, #8
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002a78:	f023 030c 	bic.w	r3, r3, #12
 8002a7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002a84:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	68da      	ldr	r2, [r3, #12]
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	021b      	lsls	r3, r3, #8
 8002a94:	4313      	orrs	r3, r2
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	011a      	lsls	r2, r3, #4
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	6a1b      	ldr	r3, [r3, #32]
 8002aa6:	031b      	lsls	r3, r3, #12
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002ab6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685a      	ldr	r2, [r3, #4]
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	695b      	ldr	r3, [r3, #20]
 8002ac0:	011b      	lsls	r3, r3, #4
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2201      	movs	r2, #1
 8002aee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2201      	movs	r2, #1
 8002afe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3718      	adds	r7, #24
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d101      	bne.n	8002b3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002b36:	2302      	movs	r3, #2
 8002b38:	e0ae      	b.n	8002c98 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2b0c      	cmp	r3, #12
 8002b46:	f200 809f 	bhi.w	8002c88 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002b4a:	a201      	add	r2, pc, #4	@ (adr r2, 8002b50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b50:	08002b85 	.word	0x08002b85
 8002b54:	08002c89 	.word	0x08002c89
 8002b58:	08002c89 	.word	0x08002c89
 8002b5c:	08002c89 	.word	0x08002c89
 8002b60:	08002bc5 	.word	0x08002bc5
 8002b64:	08002c89 	.word	0x08002c89
 8002b68:	08002c89 	.word	0x08002c89
 8002b6c:	08002c89 	.word	0x08002c89
 8002b70:	08002c07 	.word	0x08002c07
 8002b74:	08002c89 	.word	0x08002c89
 8002b78:	08002c89 	.word	0x08002c89
 8002b7c:	08002c89 	.word	0x08002c89
 8002b80:	08002c47 	.word	0x08002c47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68b9      	ldr	r1, [r7, #8]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f000 f9b4 	bl	8002ef8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	699a      	ldr	r2, [r3, #24]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f042 0208 	orr.w	r2, r2, #8
 8002b9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	699a      	ldr	r2, [r3, #24]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 0204 	bic.w	r2, r2, #4
 8002bae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	6999      	ldr	r1, [r3, #24]
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	691a      	ldr	r2, [r3, #16]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	619a      	str	r2, [r3, #24]
      break;
 8002bc2:	e064      	b.n	8002c8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68b9      	ldr	r1, [r7, #8]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f000 f9fa 	bl	8002fc4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	699a      	ldr	r2, [r3, #24]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002bde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	699a      	ldr	r2, [r3, #24]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	6999      	ldr	r1, [r3, #24]
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	021a      	lsls	r2, r3, #8
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	430a      	orrs	r2, r1
 8002c02:	619a      	str	r2, [r3, #24]
      break;
 8002c04:	e043      	b.n	8002c8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68b9      	ldr	r1, [r7, #8]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f000 fa43 	bl	8003098 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	69da      	ldr	r2, [r3, #28]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f042 0208 	orr.w	r2, r2, #8
 8002c20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	69da      	ldr	r2, [r3, #28]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 0204 	bic.w	r2, r2, #4
 8002c30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	69d9      	ldr	r1, [r3, #28]
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	691a      	ldr	r2, [r3, #16]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	430a      	orrs	r2, r1
 8002c42:	61da      	str	r2, [r3, #28]
      break;
 8002c44:	e023      	b.n	8002c8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68b9      	ldr	r1, [r7, #8]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f000 fa8d 	bl	800316c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	69da      	ldr	r2, [r3, #28]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	69da      	ldr	r2, [r3, #28]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	69d9      	ldr	r1, [r3, #28]
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	021a      	lsls	r2, r3, #8
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	430a      	orrs	r2, r1
 8002c84:	61da      	str	r2, [r3, #28]
      break;
 8002c86:	e002      	b.n	8002c8e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	75fb      	strb	r3, [r7, #23]
      break;
 8002c8c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002c96:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3718      	adds	r7, #24
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002caa:	2300      	movs	r3, #0
 8002cac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d101      	bne.n	8002cbc <HAL_TIM_ConfigClockSource+0x1c>
 8002cb8:	2302      	movs	r3, #2
 8002cba:	e0b4      	b.n	8002e26 <HAL_TIM_ConfigClockSource+0x186>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2202      	movs	r2, #2
 8002cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002cda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002ce2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68ba      	ldr	r2, [r7, #8]
 8002cea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cf4:	d03e      	beq.n	8002d74 <HAL_TIM_ConfigClockSource+0xd4>
 8002cf6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cfa:	f200 8087 	bhi.w	8002e0c <HAL_TIM_ConfigClockSource+0x16c>
 8002cfe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d02:	f000 8086 	beq.w	8002e12 <HAL_TIM_ConfigClockSource+0x172>
 8002d06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d0a:	d87f      	bhi.n	8002e0c <HAL_TIM_ConfigClockSource+0x16c>
 8002d0c:	2b70      	cmp	r3, #112	@ 0x70
 8002d0e:	d01a      	beq.n	8002d46 <HAL_TIM_ConfigClockSource+0xa6>
 8002d10:	2b70      	cmp	r3, #112	@ 0x70
 8002d12:	d87b      	bhi.n	8002e0c <HAL_TIM_ConfigClockSource+0x16c>
 8002d14:	2b60      	cmp	r3, #96	@ 0x60
 8002d16:	d050      	beq.n	8002dba <HAL_TIM_ConfigClockSource+0x11a>
 8002d18:	2b60      	cmp	r3, #96	@ 0x60
 8002d1a:	d877      	bhi.n	8002e0c <HAL_TIM_ConfigClockSource+0x16c>
 8002d1c:	2b50      	cmp	r3, #80	@ 0x50
 8002d1e:	d03c      	beq.n	8002d9a <HAL_TIM_ConfigClockSource+0xfa>
 8002d20:	2b50      	cmp	r3, #80	@ 0x50
 8002d22:	d873      	bhi.n	8002e0c <HAL_TIM_ConfigClockSource+0x16c>
 8002d24:	2b40      	cmp	r3, #64	@ 0x40
 8002d26:	d058      	beq.n	8002dda <HAL_TIM_ConfigClockSource+0x13a>
 8002d28:	2b40      	cmp	r3, #64	@ 0x40
 8002d2a:	d86f      	bhi.n	8002e0c <HAL_TIM_ConfigClockSource+0x16c>
 8002d2c:	2b30      	cmp	r3, #48	@ 0x30
 8002d2e:	d064      	beq.n	8002dfa <HAL_TIM_ConfigClockSource+0x15a>
 8002d30:	2b30      	cmp	r3, #48	@ 0x30
 8002d32:	d86b      	bhi.n	8002e0c <HAL_TIM_ConfigClockSource+0x16c>
 8002d34:	2b20      	cmp	r3, #32
 8002d36:	d060      	beq.n	8002dfa <HAL_TIM_ConfigClockSource+0x15a>
 8002d38:	2b20      	cmp	r3, #32
 8002d3a:	d867      	bhi.n	8002e0c <HAL_TIM_ConfigClockSource+0x16c>
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d05c      	beq.n	8002dfa <HAL_TIM_ConfigClockSource+0x15a>
 8002d40:	2b10      	cmp	r3, #16
 8002d42:	d05a      	beq.n	8002dfa <HAL_TIM_ConfigClockSource+0x15a>
 8002d44:	e062      	b.n	8002e0c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d56:	f000 face 	bl	80032f6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002d68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68ba      	ldr	r2, [r7, #8]
 8002d70:	609a      	str	r2, [r3, #8]
      break;
 8002d72:	e04f      	b.n	8002e14 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d84:	f000 fab7 	bl	80032f6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689a      	ldr	r2, [r3, #8]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d96:	609a      	str	r2, [r3, #8]
      break;
 8002d98:	e03c      	b.n	8002e14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002da6:	461a      	mov	r2, r3
 8002da8:	f000 fa2e 	bl	8003208 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2150      	movs	r1, #80	@ 0x50
 8002db2:	4618      	mov	r0, r3
 8002db4:	f000 fa85 	bl	80032c2 <TIM_ITRx_SetConfig>
      break;
 8002db8:	e02c      	b.n	8002e14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	f000 fa4c 	bl	8003264 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2160      	movs	r1, #96	@ 0x60
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f000 fa75 	bl	80032c2 <TIM_ITRx_SetConfig>
      break;
 8002dd8:	e01c      	b.n	8002e14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002de6:	461a      	mov	r2, r3
 8002de8:	f000 fa0e 	bl	8003208 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2140      	movs	r1, #64	@ 0x40
 8002df2:	4618      	mov	r0, r3
 8002df4:	f000 fa65 	bl	80032c2 <TIM_ITRx_SetConfig>
      break;
 8002df8:	e00c      	b.n	8002e14 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4619      	mov	r1, r3
 8002e04:	4610      	mov	r0, r2
 8002e06:	f000 fa5c 	bl	80032c2 <TIM_ITRx_SetConfig>
      break;
 8002e0a:	e003      	b.n	8002e14 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e10:	e000      	b.n	8002e14 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3710      	adds	r7, #16
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
	...

08002e30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b085      	sub	sp, #20
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4a2b      	ldr	r2, [pc, #172]	@ (8002ef0 <TIM_Base_SetConfig+0xc0>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d007      	beq.n	8002e58 <TIM_Base_SetConfig+0x28>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e4e:	d003      	beq.n	8002e58 <TIM_Base_SetConfig+0x28>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4a28      	ldr	r2, [pc, #160]	@ (8002ef4 <TIM_Base_SetConfig+0xc4>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d108      	bne.n	8002e6a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a20      	ldr	r2, [pc, #128]	@ (8002ef0 <TIM_Base_SetConfig+0xc0>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d007      	beq.n	8002e82 <TIM_Base_SetConfig+0x52>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e78:	d003      	beq.n	8002e82 <TIM_Base_SetConfig+0x52>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a1d      	ldr	r2, [pc, #116]	@ (8002ef4 <TIM_Base_SetConfig+0xc4>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d108      	bne.n	8002e94 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a0d      	ldr	r2, [pc, #52]	@ (8002ef0 <TIM_Base_SetConfig+0xc0>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d103      	bne.n	8002ec8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	691a      	ldr	r2, [r3, #16]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d005      	beq.n	8002ee6 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	f023 0201 	bic.w	r2, r3, #1
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	611a      	str	r2, [r3, #16]
  }
}
 8002ee6:	bf00      	nop
 8002ee8:	3714      	adds	r7, #20
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bc80      	pop	{r7}
 8002eee:	4770      	bx	lr
 8002ef0:	40012c00 	.word	0x40012c00
 8002ef4:	40000400 	.word	0x40000400

08002ef8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b087      	sub	sp, #28
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	f023 0201 	bic.w	r2, r3, #1
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f023 0303 	bic.w	r3, r3, #3
 8002f2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68fa      	ldr	r2, [r7, #12]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	f023 0302 	bic.w	r3, r3, #2
 8002f40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a1c      	ldr	r2, [pc, #112]	@ (8002fc0 <TIM_OC1_SetConfig+0xc8>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d10c      	bne.n	8002f6e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	f023 0308 	bic.w	r3, r3, #8
 8002f5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	697a      	ldr	r2, [r7, #20]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	f023 0304 	bic.w	r3, r3, #4
 8002f6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a13      	ldr	r2, [pc, #76]	@ (8002fc0 <TIM_OC1_SetConfig+0xc8>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d111      	bne.n	8002f9a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002f84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	693a      	ldr	r2, [r7, #16]
 8002f9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	685a      	ldr	r2, [r3, #4]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	697a      	ldr	r2, [r7, #20]
 8002fb2:	621a      	str	r2, [r3, #32]
}
 8002fb4:	bf00      	nop
 8002fb6:	371c      	adds	r7, #28
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bc80      	pop	{r7}
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	40012c00 	.word	0x40012c00

08002fc4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b087      	sub	sp, #28
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a1b      	ldr	r3, [r3, #32]
 8002fd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a1b      	ldr	r3, [r3, #32]
 8002fd8:	f023 0210 	bic.w	r2, r3, #16
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002ff2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ffa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	021b      	lsls	r3, r3, #8
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	4313      	orrs	r3, r2
 8003006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	f023 0320 	bic.w	r3, r3, #32
 800300e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	011b      	lsls	r3, r3, #4
 8003016:	697a      	ldr	r2, [r7, #20]
 8003018:	4313      	orrs	r3, r2
 800301a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a1d      	ldr	r2, [pc, #116]	@ (8003094 <TIM_OC2_SetConfig+0xd0>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d10d      	bne.n	8003040 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800302a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	011b      	lsls	r3, r3, #4
 8003032:	697a      	ldr	r2, [r7, #20]
 8003034:	4313      	orrs	r3, r2
 8003036:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800303e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a14      	ldr	r2, [pc, #80]	@ (8003094 <TIM_OC2_SetConfig+0xd0>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d113      	bne.n	8003070 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800304e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003056:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	695b      	ldr	r3, [r3, #20]
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	4313      	orrs	r3, r2
 8003062:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	693a      	ldr	r2, [r7, #16]
 800306c:	4313      	orrs	r3, r2
 800306e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	693a      	ldr	r2, [r7, #16]
 8003074:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685a      	ldr	r2, [r3, #4]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	697a      	ldr	r2, [r7, #20]
 8003088:	621a      	str	r2, [r3, #32]
}
 800308a:	bf00      	nop
 800308c:	371c      	adds	r7, #28
 800308e:	46bd      	mov	sp, r7
 8003090:	bc80      	pop	{r7}
 8003092:	4770      	bx	lr
 8003094:	40012c00 	.word	0x40012c00

08003098 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003098:	b480      	push	{r7}
 800309a:	b087      	sub	sp, #28
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	69db      	ldr	r3, [r3, #28]
 80030be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f023 0303 	bic.w	r3, r3, #3
 80030ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80030e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	021b      	lsls	r3, r3, #8
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a1d      	ldr	r2, [pc, #116]	@ (8003168 <TIM_OC3_SetConfig+0xd0>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d10d      	bne.n	8003112 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80030fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	021b      	lsls	r3, r3, #8
 8003104:	697a      	ldr	r2, [r7, #20]
 8003106:	4313      	orrs	r3, r2
 8003108:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003110:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a14      	ldr	r2, [pc, #80]	@ (8003168 <TIM_OC3_SetConfig+0xd0>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d113      	bne.n	8003142 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003120:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003128:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	011b      	lsls	r3, r3, #4
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	4313      	orrs	r3, r2
 8003134:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	011b      	lsls	r3, r3, #4
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	4313      	orrs	r3, r2
 8003140:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685a      	ldr	r2, [r3, #4]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	621a      	str	r2, [r3, #32]
}
 800315c:	bf00      	nop
 800315e:	371c      	adds	r7, #28
 8003160:	46bd      	mov	sp, r7
 8003162:	bc80      	pop	{r7}
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	40012c00 	.word	0x40012c00

0800316c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800316c:	b480      	push	{r7}
 800316e:	b087      	sub	sp, #28
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a1b      	ldr	r3, [r3, #32]
 800317a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a1b      	ldr	r3, [r3, #32]
 8003180:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	69db      	ldr	r3, [r3, #28]
 8003192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800319a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	021b      	lsls	r3, r3, #8
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80031b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	031b      	lsls	r3, r3, #12
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a0f      	ldr	r2, [pc, #60]	@ (8003204 <TIM_OC4_SetConfig+0x98>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d109      	bne.n	80031e0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80031d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	695b      	ldr	r3, [r3, #20]
 80031d8:	019b      	lsls	r3, r3, #6
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	4313      	orrs	r3, r2
 80031de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	697a      	ldr	r2, [r7, #20]
 80031e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685a      	ldr	r2, [r3, #4]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	621a      	str	r2, [r3, #32]
}
 80031fa:	bf00      	nop
 80031fc:	371c      	adds	r7, #28
 80031fe:	46bd      	mov	sp, r7
 8003200:	bc80      	pop	{r7}
 8003202:	4770      	bx	lr
 8003204:	40012c00 	.word	0x40012c00

08003208 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003208:	b480      	push	{r7}
 800320a:	b087      	sub	sp, #28
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6a1b      	ldr	r3, [r3, #32]
 8003218:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6a1b      	ldr	r3, [r3, #32]
 800321e:	f023 0201 	bic.w	r2, r3, #1
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003232:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	011b      	lsls	r3, r3, #4
 8003238:	693a      	ldr	r2, [r7, #16]
 800323a:	4313      	orrs	r3, r2
 800323c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	f023 030a 	bic.w	r3, r3, #10
 8003244:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	4313      	orrs	r3, r2
 800324c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	697a      	ldr	r2, [r7, #20]
 8003258:	621a      	str	r2, [r3, #32]
}
 800325a:	bf00      	nop
 800325c:	371c      	adds	r7, #28
 800325e:	46bd      	mov	sp, r7
 8003260:	bc80      	pop	{r7}
 8003262:	4770      	bx	lr

08003264 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003264:	b480      	push	{r7}
 8003266:	b087      	sub	sp, #28
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6a1b      	ldr	r3, [r3, #32]
 8003274:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	f023 0210 	bic.w	r2, r3, #16
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800328e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	031b      	lsls	r3, r3, #12
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	4313      	orrs	r3, r2
 8003298:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80032a0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	011b      	lsls	r3, r3, #4
 80032a6:	697a      	ldr	r2, [r7, #20]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	693a      	ldr	r2, [r7, #16]
 80032b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	697a      	ldr	r2, [r7, #20]
 80032b6:	621a      	str	r2, [r3, #32]
}
 80032b8:	bf00      	nop
 80032ba:	371c      	adds	r7, #28
 80032bc:	46bd      	mov	sp, r7
 80032be:	bc80      	pop	{r7}
 80032c0:	4770      	bx	lr

080032c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032c2:	b480      	push	{r7}
 80032c4:	b085      	sub	sp, #20
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
 80032ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032da:	683a      	ldr	r2, [r7, #0]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	4313      	orrs	r3, r2
 80032e0:	f043 0307 	orr.w	r3, r3, #7
 80032e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	609a      	str	r2, [r3, #8]
}
 80032ec:	bf00      	nop
 80032ee:	3714      	adds	r7, #20
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bc80      	pop	{r7}
 80032f4:	4770      	bx	lr

080032f6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032f6:	b480      	push	{r7}
 80032f8:	b087      	sub	sp, #28
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	60f8      	str	r0, [r7, #12]
 80032fe:	60b9      	str	r1, [r7, #8]
 8003300:	607a      	str	r2, [r7, #4]
 8003302:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003310:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	021a      	lsls	r2, r3, #8
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	431a      	orrs	r2, r3
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	4313      	orrs	r3, r2
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	4313      	orrs	r3, r2
 8003322:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	609a      	str	r2, [r3, #8]
}
 800332a:	bf00      	nop
 800332c:	371c      	adds	r7, #28
 800332e:	46bd      	mov	sp, r7
 8003330:	bc80      	pop	{r7}
 8003332:	4770      	bx	lr

08003334 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003334:	b480      	push	{r7}
 8003336:	b087      	sub	sp, #28
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	f003 031f 	and.w	r3, r3, #31
 8003346:	2201      	movs	r2, #1
 8003348:	fa02 f303 	lsl.w	r3, r2, r3
 800334c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6a1a      	ldr	r2, [r3, #32]
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	43db      	mvns	r3, r3
 8003356:	401a      	ands	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6a1a      	ldr	r2, [r3, #32]
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	f003 031f 	and.w	r3, r3, #31
 8003366:	6879      	ldr	r1, [r7, #4]
 8003368:	fa01 f303 	lsl.w	r3, r1, r3
 800336c:	431a      	orrs	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	621a      	str	r2, [r3, #32]
}
 8003372:	bf00      	nop
 8003374:	371c      	adds	r7, #28
 8003376:	46bd      	mov	sp, r7
 8003378:	bc80      	pop	{r7}
 800337a:	4770      	bx	lr

0800337c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800337c:	b480      	push	{r7}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800338c:	2b01      	cmp	r3, #1
 800338e:	d101      	bne.n	8003394 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003390:	2302      	movs	r3, #2
 8003392:	e041      	b.n	8003418 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2202      	movs	r2, #2
 80033a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a14      	ldr	r2, [pc, #80]	@ (8003424 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d009      	beq.n	80033ec <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033e0:	d004      	beq.n	80033ec <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a10      	ldr	r2, [pc, #64]	@ (8003428 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d10c      	bne.n	8003406 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	68ba      	ldr	r2, [r7, #8]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68ba      	ldr	r2, [r7, #8]
 8003404:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2201      	movs	r2, #1
 800340a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3714      	adds	r7, #20
 800341c:	46bd      	mov	sp, r7
 800341e:	bc80      	pop	{r7}
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	40012c00 	.word	0x40012c00
 8003428:	40000400 	.word	0x40000400

0800342c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003436:	2300      	movs	r3, #0
 8003438:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003440:	2b01      	cmp	r3, #1
 8003442:	d101      	bne.n	8003448 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003444:	2302      	movs	r3, #2
 8003446:	e03d      	b.n	80034c4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	4313      	orrs	r3, r2
 800345c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	4313      	orrs	r3, r2
 800346a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	4313      	orrs	r3, r2
 8003478:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4313      	orrs	r3, r2
 8003486:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	4313      	orrs	r3, r2
 8003494:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	695b      	ldr	r3, [r3, #20]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	69db      	ldr	r3, [r3, #28]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3714      	adds	r7, #20
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bc80      	pop	{r7}
 80034cc:	4770      	bx	lr

080034ce <memset>:
 80034ce:	4603      	mov	r3, r0
 80034d0:	4402      	add	r2, r0
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d100      	bne.n	80034d8 <memset+0xa>
 80034d6:	4770      	bx	lr
 80034d8:	f803 1b01 	strb.w	r1, [r3], #1
 80034dc:	e7f9      	b.n	80034d2 <memset+0x4>
	...

080034e0 <__libc_init_array>:
 80034e0:	b570      	push	{r4, r5, r6, lr}
 80034e2:	2600      	movs	r6, #0
 80034e4:	4d0c      	ldr	r5, [pc, #48]	@ (8003518 <__libc_init_array+0x38>)
 80034e6:	4c0d      	ldr	r4, [pc, #52]	@ (800351c <__libc_init_array+0x3c>)
 80034e8:	1b64      	subs	r4, r4, r5
 80034ea:	10a4      	asrs	r4, r4, #2
 80034ec:	42a6      	cmp	r6, r4
 80034ee:	d109      	bne.n	8003504 <__libc_init_array+0x24>
 80034f0:	f000 f81a 	bl	8003528 <_init>
 80034f4:	2600      	movs	r6, #0
 80034f6:	4d0a      	ldr	r5, [pc, #40]	@ (8003520 <__libc_init_array+0x40>)
 80034f8:	4c0a      	ldr	r4, [pc, #40]	@ (8003524 <__libc_init_array+0x44>)
 80034fa:	1b64      	subs	r4, r4, r5
 80034fc:	10a4      	asrs	r4, r4, #2
 80034fe:	42a6      	cmp	r6, r4
 8003500:	d105      	bne.n	800350e <__libc_init_array+0x2e>
 8003502:	bd70      	pop	{r4, r5, r6, pc}
 8003504:	f855 3b04 	ldr.w	r3, [r5], #4
 8003508:	4798      	blx	r3
 800350a:	3601      	adds	r6, #1
 800350c:	e7ee      	b.n	80034ec <__libc_init_array+0xc>
 800350e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003512:	4798      	blx	r3
 8003514:	3601      	adds	r6, #1
 8003516:	e7f2      	b.n	80034fe <__libc_init_array+0x1e>
 8003518:	08003564 	.word	0x08003564
 800351c:	08003564 	.word	0x08003564
 8003520:	08003564 	.word	0x08003564
 8003524:	08003568 	.word	0x08003568

08003528 <_init>:
 8003528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800352a:	bf00      	nop
 800352c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800352e:	bc08      	pop	{r3}
 8003530:	469e      	mov	lr, r3
 8003532:	4770      	bx	lr

08003534 <_fini>:
 8003534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003536:	bf00      	nop
 8003538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800353a:	bc08      	pop	{r3}
 800353c:	469e      	mov	lr, r3
 800353e:	4770      	bx	lr
