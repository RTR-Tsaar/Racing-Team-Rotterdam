
SteerByWireC6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003680  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800378c  0800378c  0000478c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037b0  080037b0  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  080037b0  080037b0  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037b0  080037b0  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037b0  080037b0  000047b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080037b4  080037b4  000047b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080037b8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  2000000c  080037c4  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  080037c4  0000515c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016920  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cb7  00000000  00000000  0001b955  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001128  00000000  00000000  0001e610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d19  00000000  00000000  0001f738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001af63  00000000  00000000  00020451  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011534  00000000  00000000  0003b3b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009848c  00000000  00000000  0004c8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  000e4d74  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004adc  00000000  00000000  000e4dfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000e98d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003774 	.word	0x08003774

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003774 	.word	0x08003774

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ba:	2afd      	cmp	r2, #253	@ 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	@ 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	@ 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	@ 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2iz>:
 80006f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80006fc:	d30f      	bcc.n	800071e <__aeabi_f2iz+0x2a>
 80006fe:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d90d      	bls.n	8000724 <__aeabi_f2iz+0x30>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000710:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000714:	fa23 f002 	lsr.w	r0, r3, r2
 8000718:	bf18      	it	ne
 800071a:	4240      	negne	r0, r0
 800071c:	4770      	bx	lr
 800071e:	f04f 0000 	mov.w	r0, #0
 8000722:	4770      	bx	lr
 8000724:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000728:	d101      	bne.n	800072e <__aeabi_f2iz+0x3a>
 800072a:	0242      	lsls	r2, r0, #9
 800072c:	d105      	bne.n	800073a <__aeabi_f2iz+0x46>
 800072e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000732:	bf08      	it	eq
 8000734:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000738:	4770      	bx	lr
 800073a:	f04f 0000 	mov.w	r0, #0
 800073e:	4770      	bx	lr

08000740 <__aeabi_f2uiz>:
 8000740:	0042      	lsls	r2, r0, #1
 8000742:	d20e      	bcs.n	8000762 <__aeabi_f2uiz+0x22>
 8000744:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000748:	d30b      	bcc.n	8000762 <__aeabi_f2uiz+0x22>
 800074a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800074e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000752:	d409      	bmi.n	8000768 <__aeabi_f2uiz+0x28>
 8000754:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000758:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800075c:	fa23 f002 	lsr.w	r0, r3, r2
 8000760:	4770      	bx	lr
 8000762:	f04f 0000 	mov.w	r0, #0
 8000766:	4770      	bx	lr
 8000768:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800076c:	d101      	bne.n	8000772 <__aeabi_f2uiz+0x32>
 800076e:	0242      	lsls	r2, r0, #9
 8000770:	d102      	bne.n	8000778 <__aeabi_f2uiz+0x38>
 8000772:	f04f 30ff 	mov.w	r0, #4294967295
 8000776:	4770      	bx	lr
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop

08000780 <_ZNSt12_Vector_baseImSaImEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	4618      	mov	r0, r3
 800078c:	f000 f86f 	bl	800086e <_ZNSt12_Vector_baseImSaImEE12_Vector_implC1Ev>
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	4618      	mov	r0, r3
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}

0800079a <_ZNSt6vectorImSaImEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 800079a:	b580      	push	{r7, lr}
 800079c:	b082      	sub	sp, #8
 800079e:	af00      	add	r7, sp, #0
 80007a0:	6078      	str	r0, [r7, #4]
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff ffeb 	bl	8000780 <_ZNSt12_Vector_baseImSaImEEC1Ev>
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	4618      	mov	r0, r3
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <_ZNSt12_Vector_baseIySaIyEEC1Ev>:
      _Vector_base() = default;
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	4618      	mov	r0, r3
 80007c0:	f000 f865 	bl	800088e <_ZNSt12_Vector_baseIySaIyEE12_Vector_implC1Ev>
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	4618      	mov	r0, r3
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}

080007ce <_ZNSt6vectorIySaIyEEC1Ev>:
      vector() = default;
 80007ce:	b580      	push	{r7, lr}
 80007d0:	b082      	sub	sp, #8
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	6078      	str	r0, [r7, #4]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff ffeb 	bl	80007b4 <_ZNSt12_Vector_baseIySaIyEEC1Ev>
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	4618      	mov	r0, r3
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <_ZN6CANBusC1Ev>:
 *      Author: Dennis Boekholtz
 */

#include "CAN_bus.hpp"

CANBus::CANBus() {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	331c      	adds	r3, #28
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff ffd0 	bl	800079a <_ZNSt6vectorImSaImEEC1Ev>
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	3328      	adds	r3, #40	@ 0x28
 80007fe:	4618      	mov	r0, r3
 8000800:	f7ff ffe5 	bl	80007ce <_ZNSt6vectorIySaIyEEC1Ev>
    // Constructor implementation (if needed)
}
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	4618      	mov	r0, r3
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}

0800080e <_ZN6CANBus5startEP17CAN_HandleTypeDefh>:

void CANBus::start(CAN_HandleTypeDef* hcan, uint8_t LIDEE){
 800080e:	b580      	push	{r7, lr}
 8000810:	b084      	sub	sp, #16
 8000812:	af00      	add	r7, sp, #0
 8000814:	60f8      	str	r0, [r7, #12]
 8000816:	60b9      	str	r1, [r7, #8]
 8000818:	4613      	mov	r3, r2
 800081a:	71fb      	strb	r3, [r7, #7]

	// Start CAN bus
    HAL_CAN_Start(hcan);
 800081c:	68b8      	ldr	r0, [r7, #8]
 800081e:	f001 fafd 	bl	8001e1c <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000822:	2102      	movs	r1, #2
 8000824:	68b8      	ldr	r0, [r7, #8]
 8000826:	f001 fb3d 	bl	8001ea4 <HAL_CAN_ActivateNotification>

    if(LIDEE == CAN_ID_STD){
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d107      	bne.n	8000840 <_ZN6CANBus5startEP17CAN_HandleTypeDefh+0x32>
        TxHeader.ExtId = 0;		// 0 is standaard ID , 4 is extended ID
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	2200      	movs	r2, #0
 8000834:	605a      	str	r2, [r3, #4]
        TxHeader.StdId = 2047;  // Set CAN ID to 2047
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	e006      	b.n	800084e <_ZN6CANBus5startEP17CAN_HandleTypeDefh+0x40>
    }
    else{
        TxHeader.ExtId = 2047;		// 0 is standaard ID , 4 is extended ID
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000846:	605a      	str	r2, [r3, #4]
        TxHeader.StdId = 0;  // Set CAN ID to 2047
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
    }
    // Initialize default values for CAN headers
    TxHeader.DLC = 8;
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	2208      	movs	r2, #8
 8000852:	611a      	str	r2, [r3, #16]
    TxHeader.IDE = LIDEE;    // standaard ID = CAN_ID_STD, extended ID = CAN_ID_EXT
 8000854:	79fa      	ldrb	r2, [r7, #7]
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	609a      	str	r2, [r3, #8]
    TxHeader.RTR = CAN_RTR_DATA;
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	2200      	movs	r2, #0
 800085e:	60da      	str	r2, [r3, #12]
    TxHeader.TransmitGlobalTime = DISABLE;
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	2200      	movs	r2, #0
 8000864:	751a      	strb	r2, [r3, #20]

}
 8000866:	bf00      	nop
 8000868:	3710      	adds	r7, #16
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <_ZNSt12_Vector_baseImSaImEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800086e:	b580      	push	{r7, lr}
 8000870:	b082      	sub	sp, #8
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8000876:	6878      	ldr	r0, [r7, #4]
 8000878:	f000 f819 	bl	80008ae <_ZNSaImEC1Ev>
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	4618      	mov	r0, r3
 8000880:	f000 f821 	bl	80008c6 <_ZNSt12_Vector_baseImSaImEE17_Vector_impl_dataC1Ev>
	{ }
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	4618      	mov	r0, r3
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <_ZNSt12_Vector_baseIySaIyEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800088e:	b580      	push	{r7, lr}
 8000890:	b082      	sub	sp, #8
 8000892:	af00      	add	r7, sp, #0
 8000894:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8000896:	6878      	ldr	r0, [r7, #4]
 8000898:	f000 f828 	bl	80008ec <_ZNSaIyEC1Ev>
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	4618      	mov	r0, r3
 80008a0:	f000 f830 	bl	8000904 <_ZNSt12_Vector_baseIySaIyEE17_Vector_impl_dataC1Ev>
	{ }
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	4618      	mov	r0, r3
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}

080008ae <_ZNSaImEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 80008ae:	b580      	push	{r7, lr}
 80008b0:	b082      	sub	sp, #8
 80008b2:	af00      	add	r7, sp, #0
 80008b4:	6078      	str	r0, [r7, #4]
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f000 f837 	bl	800092a <_ZNSt15__new_allocatorImEC1Ev>
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	4618      	mov	r0, r3
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <_ZNSt12_Vector_baseImSaImEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80008c6:	b480      	push	{r7}
 80008c8:	b083      	sub	sp, #12
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	2200      	movs	r2, #0
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
	{ }
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	4618      	mov	r0, r3
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bc80      	pop	{r7}
 80008ea:	4770      	bx	lr

080008ec <_ZNSaIyEC1Ev>:
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	f000 f822 	bl	800093e <_ZNSt15__new_allocatorIyEC1Ev>
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	4618      	mov	r0, r3
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}

08000904 <_ZNSt12_Vector_baseIySaIyEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2200      	movs	r2, #0
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2200      	movs	r2, #0
 800091c:	609a      	str	r2, [r3, #8]
	{ }
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	4618      	mov	r0, r3
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	bc80      	pop	{r7}
 8000928:	4770      	bx	lr

0800092a <_ZNSt15__new_allocatorImEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800092a:	b480      	push	{r7}
 800092c:	b083      	sub	sp, #12
 800092e:	af00      	add	r7, sp, #0
 8000930:	6078      	str	r0, [r7, #4]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	4618      	mov	r0, r3
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	bc80      	pop	{r7}
 800093c:	4770      	bx	lr

0800093e <_ZNSt15__new_allocatorIyEC1Ev>:
 800093e:	b480      	push	{r7}
 8000940:	b083      	sub	sp, #12
 8000942:	af00      	add	r7, sp, #0
 8000944:	6078      	str	r0, [r7, #4]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4618      	mov	r0, r3
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	bc80      	pop	{r7}
 8000950:	4770      	bx	lr

08000952 <_ZN7EncoderC1EP17TIM_HandleTypeDefS1_mf>:
 
#include "encoder.hpp"
#include "motorControl.hpp"
#include "cmath"

Encoder::Encoder(TIM_HandleTypeDef* enc1, TIM_HandleTypeDef* enc2, uint32_t maxCount, float countsPerRevolution)
 8000952:	b480      	push	{r7}
 8000954:	b085      	sub	sp, #20
 8000956:	af00      	add	r7, sp, #0
 8000958:	60f8      	str	r0, [r7, #12]
 800095a:	60b9      	str	r1, [r7, #8]
 800095c:	607a      	str	r2, [r7, #4]
 800095e:	603b      	str	r3, [r7, #0]
    : encoder1(enc1), encoder2(enc2), maxEncoderCount(maxCount), countsPerRev(countsPerRevolution) {
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	68ba      	ldr	r2, [r7, #8]
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	687a      	ldr	r2, [r7, #4]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	683a      	ldr	r2, [r7, #0]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	69ba      	ldr	r2, [r7, #24]
 8000976:	60da      	str	r2, [r3, #12]
    // Constructor
};
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	4618      	mov	r0, r3
 800097c:	3714      	adds	r7, #20
 800097e:	46bd      	mov	sp, r7
 8000980:	bc80      	pop	{r7}
 8000982:	4770      	bx	lr

08000984 <_ZN7Encoder11readEncoderEP17TIM_HandleTypeDef>:

uint32_t Encoder::readEncoder(TIM_HandleTypeDef* enc) {
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	6039      	str	r1, [r7, #0]
    // Reads encoder data
    return __HAL_TIM_GET_COUNTER(enc);
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8000994:	4618      	mov	r0, r3
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	bc80      	pop	{r7}
 800099c:	4770      	bx	lr
	...

080009a0 <_ZN7Encoder14calculateAngleEm>:

float Encoder::calculateAngle(uint32_t count) {
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
 80009a8:	6039      	str	r1, [r7, #0]
    // Converts encoder count to angle
    return (static_cast<float>(count) / countsPerRev) * 360.0f;
 80009aa:	6838      	ldr	r0, [r7, #0]
 80009ac:	f7ff fc84 	bl	80002b8 <__aeabi_ui2f>
 80009b0:	4602      	mov	r2, r0
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	68db      	ldr	r3, [r3, #12]
 80009b6:	4619      	mov	r1, r3
 80009b8:	4610      	mov	r0, r2
 80009ba:	f7ff fd89 	bl	80004d0 <__aeabi_fdiv>
 80009be:	4603      	mov	r3, r0
 80009c0:	4904      	ldr	r1, [pc, #16]	@ (80009d4 <_ZN7Encoder14calculateAngleEm+0x34>)
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff fcd0 	bl	8000368 <__aeabi_fmul>
 80009c8:	4603      	mov	r3, r0
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	43b40000 	.word	0x43b40000

080009d8 <_ZN7Encoder14encoderCompareEv>:

float Encoder::encoderCompare() {
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
    uint32_t encoder1_count = readEncoder(encoder1);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4619      	mov	r1, r3
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f7ff ffcc 	bl	8000984 <_ZN7Encoder11readEncoderEP17TIM_HandleTypeDef>
 80009ec:	6178      	str	r0, [r7, #20]
    uint32_t encoder2_count = readEncoder(encoder2);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	4619      	mov	r1, r3
 80009f4:	6878      	ldr	r0, [r7, #4]
 80009f6:	f7ff ffc5 	bl	8000984 <_ZN7Encoder11readEncoderEP17TIM_HandleTypeDef>
 80009fa:	6138      	str	r0, [r7, #16]
    int32_t deficit = static_cast<int32_t>(encoder1_count) - static_cast<int32_t>(encoder2_count);
 80009fc:	697a      	ldr	r2, [r7, #20]
 80009fe:	693b      	ldr	r3, [r7, #16]
 8000a00:	1ad3      	subs	r3, r2, r3
 8000a02:	60fb      	str	r3, [r7, #12]

    if (abs(deficit) > 1) {
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	bfb8      	it	lt
 8000a0a:	425b      	neglt	r3, r3
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	dd01      	ble.n	8000a14 <_ZN7Encoder14encoderCompareEv+0x3c>
        // Return NaN or an error flag if counts are inconsistent
        return -1.0f;
 8000a10:	4b08      	ldr	r3, [pc, #32]	@ (8000a34 <_ZN7Encoder14encoderCompareEv+0x5c>)
 8000a12:	e00a      	b.n	8000a2a <_ZN7Encoder14encoderCompareEv+0x52>
    }

    uint32_t averageCount = (encoder1_count + encoder2_count) / 2;
 8000a14:	697a      	ldr	r2, [r7, #20]
 8000a16:	693b      	ldr	r3, [r7, #16]
 8000a18:	4413      	add	r3, r2
 8000a1a:	085b      	lsrs	r3, r3, #1
 8000a1c:	60bb      	str	r3, [r7, #8]
    return calculateAngle(averageCount);
 8000a1e:	68b9      	ldr	r1, [r7, #8]
 8000a20:	6878      	ldr	r0, [r7, #4]
 8000a22:	f7ff ffbd 	bl	80009a0 <_ZN7Encoder14calculateAngleEm>
 8000a26:	4603      	mov	r3, r0
 8000a28:	bf00      	nop
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3718      	adds	r7, #24
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	bf800000 	.word	0xbf800000

08000a38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b09c      	sub	sp, #112	@ 0x70
 8000a3c:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	CANBus canBus;
 8000a3e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff fed0 	bl	80007e8 <_ZN6CANBusC1Ev>
	CAN_ErrorFlags error_flags;

	MotorControl motorControl(&htim2, TIM_CHANNEL_3);
 8000a48:	f107 0310 	add.w	r3, r7, #16
 8000a4c:	2208      	movs	r2, #8
 8000a4e:	4924      	ldr	r1, [pc, #144]	@ (8000ae0 <main+0xa8>)
 8000a50:	4618      	mov	r0, r3
 8000a52:	f000 fb4b 	bl	80010ec <_ZN12MotorControlC1EP17TIM_HandleTypeDefm>
	Encoder encoder(&htim2, &htim3, 65535, 1000);
 8000a56:	4638      	mov	r0, r7
 8000a58:	4b22      	ldr	r3, [pc, #136]	@ (8000ae4 <main+0xac>)
 8000a5a:	9300      	str	r3, [sp, #0]
 8000a5c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a60:	4a21      	ldr	r2, [pc, #132]	@ (8000ae8 <main+0xb0>)
 8000a62:	491f      	ldr	r1, [pc, #124]	@ (8000ae0 <main+0xa8>)
 8000a64:	f7ff ff75 	bl	8000952 <_ZN7EncoderC1EP17TIM_HandleTypeDefS1_mf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a68:	f000 fe6a 	bl	8001740 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a6c:	f000 f842 	bl	8000af4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a70:	f000 fad4 	bl	800101c <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 8000a74:	f000 f8a8 	bl	8000bc8 <_ZL12MX_ADC1_Initv>
  MX_CAN_Init();
 8000a78:	f000 f8ee 	bl	8000c58 <_ZL11MX_CAN_Initv>
  MX_TIM1_Init();
 8000a7c:	f000 f926 	bl	8000ccc <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 8000a80:	f000 f9de 	bl	8000e40 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 8000a84:	f000 fa6c 	bl	8000f60 <_ZL12MX_TIM3_Initv>
  /* USER CODE BEGIN 2 */
  //Initializes the steering motor
  motorControl.start();
 8000a88:	f107 0310 	add.w	r3, r7, #16
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f000 fb4a 	bl	8001126 <_ZN12MotorControl5startEv>
  //Initializes the CAN-Bus communication
  canBus.start(&hcan, CAN_ID_STD);
 8000a92:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a96:	2200      	movs	r2, #0
 8000a98:	4914      	ldr	r1, [pc, #80]	@ (8000aec <main+0xb4>)
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f7ff feb7 	bl	800080e <_ZN6CANBus5startEP17CAN_HandleTypeDefh>

/* The following code is used to calibrate the encoders
 * We do this to make sure all angle measurements are accurate
 */

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000aa6:	4812      	ldr	r0, [pc, #72]	@ (8000af0 <main+0xb8>)
 8000aa8:	f001 fc82 	bl	80023b0 <HAL_GPIO_WritePin>
  motorControl.setDutyCycle(2000);
 8000aac:	f107 0310 	add.w	r3, r7, #16
 8000ab0:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f000 fb46 	bl	8001146 <_ZN12MotorControl12setDutyCycleEt>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  float currentAngle = encoder.encoderCompare();
 8000aba:	463b      	mov	r3, r7
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff ff8b 	bl	80009d8 <_ZN7Encoder14encoderCompareEv>
 8000ac2:	6678      	str	r0, [r7, #100]	@ 0x64
	  motorControl.steerToAngle(currentAngle, 50);
 8000ac4:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8000ac6:	f7ff fe3b 	bl	8000740 <__aeabi_f2uiz>
 8000aca:	4603      	mov	r3, r0
 8000acc:	b299      	uxth	r1, r3
 8000ace:	f107 0310 	add.w	r3, r7, #16
 8000ad2:	2232      	movs	r2, #50	@ 0x32
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f000 fbed 	bl	80012b4 <_ZN12MotorControl12steerToAngleEtt>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8000ada:	bf00      	nop
 8000adc:	e7ed      	b.n	8000aba <main+0x82>
 8000ade:	bf00      	nop
 8000ae0:	200000c8 	.word	0x200000c8
 8000ae4:	447a0000 	.word	0x447a0000
 8000ae8:	20000110 	.word	0x20000110
 8000aec:	20000058 	.word	0x20000058
 8000af0:	40010800 	.word	0x40010800

08000af4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b094      	sub	sp, #80	@ 0x50
 8000af8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000afa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000afe:	2228      	movs	r2, #40	@ 0x28
 8000b00:	2100      	movs	r1, #0
 8000b02:	4618      	mov	r0, r3
 8000b04:	f002 fe09 	bl	800371a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b18:	1d3b      	adds	r3, r7, #4
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	605a      	str	r2, [r3, #4]
 8000b20:	609a      	str	r2, [r3, #8]
 8000b22:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b24:	2301      	movs	r3, #1
 8000b26:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b28:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b32:	2301      	movs	r3, #1
 8000b34:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b36:	2302      	movs	r3, #2
 8000b38:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b3a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b3e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b40:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000b44:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b46:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f001 fc48 	bl	80023e0 <HAL_RCC_OscConfig>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	bf14      	ite	ne
 8000b56:	2301      	movne	r3, #1
 8000b58:	2300      	moveq	r3, #0
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8000b60:	f000 fabe 	bl	80010e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b64:	230f      	movs	r3, #15
 8000b66:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b74:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b76:	2300      	movs	r3, #0
 8000b78:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b7a:	f107 0314 	add.w	r3, r7, #20
 8000b7e:	2102      	movs	r1, #2
 8000b80:	4618      	mov	r0, r3
 8000b82:	f001 feaf 	bl	80028e4 <HAL_RCC_ClockConfig>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	bf14      	ite	ne
 8000b8c:	2301      	movne	r3, #1
 8000b8e:	2300      	moveq	r3, #0
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 8000b96:	f000 faa3 	bl	80010e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000b9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ba2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ba4:	1d3b      	adds	r3, r7, #4
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f001 fff8 	bl	8002b9c <HAL_RCCEx_PeriphCLKConfig>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	bf14      	ite	ne
 8000bb2:	2301      	movne	r3, #1
 8000bb4:	2300      	moveq	r3, #0
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <_Z18SystemClock_Configv+0xcc>
  {
    Error_Handler();
 8000bbc:	f000 fa90 	bl	80010e0 <Error_Handler>
  }
}
 8000bc0:	bf00      	nop
 8000bc2:	3750      	adds	r7, #80	@ 0x50
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bce:	1d3b      	adds	r3, r7, #4
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bd8:	4b1d      	ldr	r3, [pc, #116]	@ (8000c50 <_ZL12MX_ADC1_Initv+0x88>)
 8000bda:	4a1e      	ldr	r2, [pc, #120]	@ (8000c54 <_ZL12MX_ADC1_Initv+0x8c>)
 8000bdc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bde:	4b1c      	ldr	r3, [pc, #112]	@ (8000c50 <_ZL12MX_ADC1_Initv+0x88>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000be4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c50 <_ZL12MX_ADC1_Initv+0x88>)
 8000be6:	2201      	movs	r2, #1
 8000be8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bea:	4b19      	ldr	r3, [pc, #100]	@ (8000c50 <_ZL12MX_ADC1_Initv+0x88>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bf0:	4b17      	ldr	r3, [pc, #92]	@ (8000c50 <_ZL12MX_ADC1_Initv+0x88>)
 8000bf2:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000bf6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bf8:	4b15      	ldr	r3, [pc, #84]	@ (8000c50 <_ZL12MX_ADC1_Initv+0x88>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000bfe:	4b14      	ldr	r3, [pc, #80]	@ (8000c50 <_ZL12MX_ADC1_Initv+0x88>)
 8000c00:	2201      	movs	r2, #1
 8000c02:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c04:	4812      	ldr	r0, [pc, #72]	@ (8000c50 <_ZL12MX_ADC1_Initv+0x88>)
 8000c06:	f000 fdfd 	bl	8001804 <HAL_ADC_Init>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	bf14      	ite	ne
 8000c10:	2301      	movne	r3, #1
 8000c12:	2300      	moveq	r3, #0
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <_ZL12MX_ADC1_Initv+0x56>
  {
    Error_Handler();
 8000c1a:	f000 fa61 	bl	80010e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000c1e:	2303      	movs	r3, #3
 8000c20:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c22:	2301      	movs	r3, #1
 8000c24:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c2a:	1d3b      	adds	r3, r7, #4
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4808      	ldr	r0, [pc, #32]	@ (8000c50 <_ZL12MX_ADC1_Initv+0x88>)
 8000c30:	f000 fec0 	bl	80019b4 <HAL_ADC_ConfigChannel>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	bf14      	ite	ne
 8000c3a:	2301      	movne	r3, #1
 8000c3c:	2300      	moveq	r3, #0
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <_ZL12MX_ADC1_Initv+0x80>
  {
    Error_Handler();
 8000c44:	f000 fa4c 	bl	80010e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c48:	bf00      	nop
 8000c4a:	3710      	adds	r7, #16
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20000028 	.word	0x20000028
 8000c54:	40012400 	.word	0x40012400

08000c58 <_ZL11MX_CAN_Initv>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000c5c:	4b19      	ldr	r3, [pc, #100]	@ (8000cc4 <_ZL11MX_CAN_Initv+0x6c>)
 8000c5e:	4a1a      	ldr	r2, [pc, #104]	@ (8000cc8 <_ZL11MX_CAN_Initv+0x70>)
 8000c60:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000c62:	4b18      	ldr	r3, [pc, #96]	@ (8000cc4 <_ZL11MX_CAN_Initv+0x6c>)
 8000c64:	2210      	movs	r2, #16
 8000c66:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000c68:	4b16      	ldr	r3, [pc, #88]	@ (8000cc4 <_ZL11MX_CAN_Initv+0x6c>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000c6e:	4b15      	ldr	r3, [pc, #84]	@ (8000cc4 <_ZL11MX_CAN_Initv+0x6c>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000c74:	4b13      	ldr	r3, [pc, #76]	@ (8000cc4 <_ZL11MX_CAN_Initv+0x6c>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000c7a:	4b12      	ldr	r3, [pc, #72]	@ (8000cc4 <_ZL11MX_CAN_Initv+0x6c>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000c80:	4b10      	ldr	r3, [pc, #64]	@ (8000cc4 <_ZL11MX_CAN_Initv+0x6c>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000c86:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc4 <_ZL11MX_CAN_Initv+0x6c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000c8c:	4b0d      	ldr	r3, [pc, #52]	@ (8000cc4 <_ZL11MX_CAN_Initv+0x6c>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000c92:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc4 <_ZL11MX_CAN_Initv+0x6c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000c98:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc4 <_ZL11MX_CAN_Initv+0x6c>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000c9e:	4b09      	ldr	r3, [pc, #36]	@ (8000cc4 <_ZL11MX_CAN_Initv+0x6c>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000ca4:	4807      	ldr	r0, [pc, #28]	@ (8000cc4 <_ZL11MX_CAN_Initv+0x6c>)
 8000ca6:	f000 ffbe 	bl	8001c26 <HAL_CAN_Init>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	bf14      	ite	ne
 8000cb0:	2301      	movne	r3, #1
 8000cb2:	2300      	moveq	r3, #0
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <_ZL11MX_CAN_Initv+0x66>
  {
    Error_Handler();
 8000cba:	f000 fa11 	bl	80010e0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20000058 	.word	0x20000058
 8000cc8:	40006400 	.word	0x40006400

08000ccc <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b092      	sub	sp, #72	@ 0x48
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cd2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cdc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]
 8000cec:	615a      	str	r2, [r3, #20]
 8000cee:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000cf0:	1d3b      	adds	r3, r7, #4
 8000cf2:	2220      	movs	r2, #32
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f002 fd0f 	bl	800371a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cfc:	4b4e      	ldr	r3, [pc, #312]	@ (8000e38 <_ZL12MX_TIM1_Initv+0x16c>)
 8000cfe:	4a4f      	ldr	r2, [pc, #316]	@ (8000e3c <_ZL12MX_TIM1_Initv+0x170>)
 8000d00:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000d02:	4b4d      	ldr	r3, [pc, #308]	@ (8000e38 <_ZL12MX_TIM1_Initv+0x16c>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d08:	4b4b      	ldr	r3, [pc, #300]	@ (8000e38 <_ZL12MX_TIM1_Initv+0x16c>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000d0e:	4b4a      	ldr	r3, [pc, #296]	@ (8000e38 <_ZL12MX_TIM1_Initv+0x16c>)
 8000d10:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d14:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d16:	4b48      	ldr	r3, [pc, #288]	@ (8000e38 <_ZL12MX_TIM1_Initv+0x16c>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d1c:	4b46      	ldr	r3, [pc, #280]	@ (8000e38 <_ZL12MX_TIM1_Initv+0x16c>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d22:	4b45      	ldr	r3, [pc, #276]	@ (8000e38 <_ZL12MX_TIM1_Initv+0x16c>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d28:	4843      	ldr	r0, [pc, #268]	@ (8000e38 <_ZL12MX_TIM1_Initv+0x16c>)
 8000d2a:	f001 ffed 	bl	8002d08 <HAL_TIM_PWM_Init>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	bf14      	ite	ne
 8000d34:	2301      	movne	r3, #1
 8000d36:	2300      	moveq	r3, #0
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <_ZL12MX_TIM1_Initv+0x76>
  {
    Error_Handler();
 8000d3e:	f000 f9cf 	bl	80010e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d42:	2300      	movs	r3, #0
 8000d44:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d46:	2300      	movs	r3, #0
 8000d48:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d4a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4839      	ldr	r0, [pc, #228]	@ (8000e38 <_ZL12MX_TIM1_Initv+0x16c>)
 8000d52:	f002 fc39 	bl	80035c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	bf14      	ite	ne
 8000d5c:	2301      	movne	r3, #1
 8000d5e:	2300      	moveq	r3, #0
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <_ZL12MX_TIM1_Initv+0x9e>
  {
    Error_Handler();
 8000d66:	f000 f9bb 	bl	80010e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d6a:	2360      	movs	r3, #96	@ 0x60
 8000d6c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d72:	2300      	movs	r3, #0
 8000d74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d76:	2300      	movs	r3, #0
 8000d78:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d82:	2300      	movs	r3, #0
 8000d84:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	482a      	ldr	r0, [pc, #168]	@ (8000e38 <_ZL12MX_TIM1_Initv+0x16c>)
 8000d90:	f002 f948 	bl	8003024 <HAL_TIM_PWM_ConfigChannel>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	bf14      	ite	ne
 8000d9a:	2301      	movne	r3, #1
 8000d9c:	2300      	moveq	r3, #0
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <_ZL12MX_TIM1_Initv+0xdc>
  {
    Error_Handler();
 8000da4:	f000 f99c 	bl	80010e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000da8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dac:	2208      	movs	r2, #8
 8000dae:	4619      	mov	r1, r3
 8000db0:	4821      	ldr	r0, [pc, #132]	@ (8000e38 <_ZL12MX_TIM1_Initv+0x16c>)
 8000db2:	f002 f937 	bl	8003024 <HAL_TIM_PWM_ConfigChannel>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	bf14      	ite	ne
 8000dbc:	2301      	movne	r3, #1
 8000dbe:	2300      	moveq	r3, #0
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <_ZL12MX_TIM1_Initv+0xfe>
  {
    Error_Handler();
 8000dc6:	f000 f98b 	bl	80010e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000dca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dce:	220c      	movs	r2, #12
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4819      	ldr	r0, [pc, #100]	@ (8000e38 <_ZL12MX_TIM1_Initv+0x16c>)
 8000dd4:	f002 f926 	bl	8003024 <HAL_TIM_PWM_ConfigChannel>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	bf14      	ite	ne
 8000dde:	2301      	movne	r3, #1
 8000de0:	2300      	moveq	r3, #0
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <_ZL12MX_TIM1_Initv+0x120>
  {
    Error_Handler();
 8000de8:	f000 f97a 	bl	80010e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000dec:	2300      	movs	r3, #0
 8000dee:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000df0:	2300      	movs	r3, #0
 8000df2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000df4:	2300      	movs	r3, #0
 8000df6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e00:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e04:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e06:	2300      	movs	r3, #0
 8000e08:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e0a:	1d3b      	adds	r3, r7, #4
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	480a      	ldr	r0, [pc, #40]	@ (8000e38 <_ZL12MX_TIM1_Initv+0x16c>)
 8000e10:	f002 fc32 	bl	8003678 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	bf14      	ite	ne
 8000e1a:	2301      	movne	r3, #1
 8000e1c:	2300      	moveq	r3, #0
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <_ZL12MX_TIM1_Initv+0x15c>
  {
    Error_Handler();
 8000e24:	f000 f95c 	bl	80010e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e28:	4803      	ldr	r0, [pc, #12]	@ (8000e38 <_ZL12MX_TIM1_Initv+0x16c>)
 8000e2a:	f000 fbdf 	bl	80015ec <HAL_TIM_MspPostInit>

}
 8000e2e:	bf00      	nop
 8000e30:	3748      	adds	r7, #72	@ 0x48
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000080 	.word	0x20000080
 8000e3c:	40012c00 	.word	0x40012c00

08000e40 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b092      	sub	sp, #72	@ 0x48
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e4a:	2224      	movs	r2, #36	@ 0x24
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f002 fc63 	bl	800371a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e54:	f107 031c 	add.w	r3, r7, #28
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e5e:	463b      	mov	r3, r7
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	611a      	str	r2, [r3, #16]
 8000e6c:	615a      	str	r2, [r3, #20]
 8000e6e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e70:	4b3a      	ldr	r3, [pc, #232]	@ (8000f5c <_ZL12MX_TIM2_Initv+0x11c>)
 8000e72:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e78:	4b38      	ldr	r3, [pc, #224]	@ (8000f5c <_ZL12MX_TIM2_Initv+0x11c>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e7e:	4b37      	ldr	r3, [pc, #220]	@ (8000f5c <_ZL12MX_TIM2_Initv+0x11c>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 6553;
 8000e84:	4b35      	ldr	r3, [pc, #212]	@ (8000f5c <_ZL12MX_TIM2_Initv+0x11c>)
 8000e86:	f641 1299 	movw	r2, #6553	@ 0x1999
 8000e8a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e8c:	4b33      	ldr	r3, [pc, #204]	@ (8000f5c <_ZL12MX_TIM2_Initv+0x11c>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e92:	4b32      	ldr	r3, [pc, #200]	@ (8000f5c <_ZL12MX_TIM2_Initv+0x11c>)
 8000e94:	2280      	movs	r2, #128	@ 0x80
 8000e96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e98:	4830      	ldr	r0, [pc, #192]	@ (8000f5c <_ZL12MX_TIM2_Initv+0x11c>)
 8000e9a:	f001 ff35 	bl	8002d08 <HAL_TIM_PWM_Init>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	bf14      	ite	ne
 8000ea4:	2301      	movne	r3, #1
 8000ea6:	2300      	moveq	r3, #0
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <_ZL12MX_TIM2_Initv+0x72>
  {
    Error_Handler();
 8000eae:	f000 f917 	bl	80010e0 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfig.IC1Filter = 0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.IC2Filter = 0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000ed6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eda:	4619      	mov	r1, r3
 8000edc:	481f      	ldr	r0, [pc, #124]	@ (8000f5c <_ZL12MX_TIM2_Initv+0x11c>)
 8000ede:	f001 ffff 	bl	8002ee0 <HAL_TIM_Encoder_Init>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	bf14      	ite	ne
 8000ee8:	2301      	movne	r3, #1
 8000eea:	2300      	moveq	r3, #0
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <_ZL12MX_TIM2_Initv+0xb6>
  {
    Error_Handler();
 8000ef2:	f000 f8f5 	bl	80010e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000efa:	2300      	movs	r3, #0
 8000efc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000efe:	f107 031c 	add.w	r3, r7, #28
 8000f02:	4619      	mov	r1, r3
 8000f04:	4815      	ldr	r0, [pc, #84]	@ (8000f5c <_ZL12MX_TIM2_Initv+0x11c>)
 8000f06:	f002 fb5f 	bl	80035c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	bf14      	ite	ne
 8000f10:	2301      	movne	r3, #1
 8000f12:	2300      	moveq	r3, #0
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <_ZL12MX_TIM2_Initv+0xde>
  {
    Error_Handler();
 8000f1a:	f000 f8e1 	bl	80010e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f1e:	2360      	movs	r3, #96	@ 0x60
 8000f20:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f26:	2300      	movs	r3, #0
 8000f28:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f2e:	463b      	mov	r3, r7
 8000f30:	2208      	movs	r2, #8
 8000f32:	4619      	mov	r1, r3
 8000f34:	4809      	ldr	r0, [pc, #36]	@ (8000f5c <_ZL12MX_TIM2_Initv+0x11c>)
 8000f36:	f002 f875 	bl	8003024 <HAL_TIM_PWM_ConfigChannel>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	bf14      	ite	ne
 8000f40:	2301      	movne	r3, #1
 8000f42:	2300      	moveq	r3, #0
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <_ZL12MX_TIM2_Initv+0x10e>
  {
    Error_Handler();
 8000f4a:	f000 f8c9 	bl	80010e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f4e:	4803      	ldr	r0, [pc, #12]	@ (8000f5c <_ZL12MX_TIM2_Initv+0x11c>)
 8000f50:	f000 fb4c 	bl	80015ec <HAL_TIM_MspPostInit>

}
 8000f54:	bf00      	nop
 8000f56:	3748      	adds	r7, #72	@ 0x48
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	200000c8 	.word	0x200000c8

08000f60 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08c      	sub	sp, #48	@ 0x30
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f66:	f107 030c 	add.w	r3, r7, #12
 8000f6a:	2224      	movs	r2, #36	@ 0x24
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f002 fbd3 	bl	800371a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f74:	1d3b      	adds	r3, r7, #4
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f7c:	4b25      	ldr	r3, [pc, #148]	@ (8001014 <_ZL12MX_TIM3_Initv+0xb4>)
 8000f7e:	4a26      	ldr	r2, [pc, #152]	@ (8001018 <_ZL12MX_TIM3_Initv+0xb8>)
 8000f80:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f82:	4b24      	ldr	r3, [pc, #144]	@ (8001014 <_ZL12MX_TIM3_Initv+0xb4>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f88:	4b22      	ldr	r3, [pc, #136]	@ (8001014 <_ZL12MX_TIM3_Initv+0xb4>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000f8e:	4b21      	ldr	r3, [pc, #132]	@ (8001014 <_ZL12MX_TIM3_Initv+0xb4>)
 8000f90:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f94:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f96:	4b1f      	ldr	r3, [pc, #124]	@ (8001014 <_ZL12MX_TIM3_Initv+0xb4>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f9c:	4b1d      	ldr	r3, [pc, #116]	@ (8001014 <_ZL12MX_TIM3_Initv+0xb4>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000faa:	2301      	movs	r3, #1
 8000fac:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000fc6:	f107 030c 	add.w	r3, r7, #12
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4811      	ldr	r0, [pc, #68]	@ (8001014 <_ZL12MX_TIM3_Initv+0xb4>)
 8000fce:	f001 ff87 	bl	8002ee0 <HAL_TIM_Encoder_Init>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	bf14      	ite	ne
 8000fd8:	2301      	movne	r3, #1
 8000fda:	2300      	moveq	r3, #0
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <_ZL12MX_TIM3_Initv+0x86>
  {
    Error_Handler();
 8000fe2:	f000 f87d 	bl	80010e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fea:	2300      	movs	r3, #0
 8000fec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fee:	1d3b      	adds	r3, r7, #4
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4808      	ldr	r0, [pc, #32]	@ (8001014 <_ZL12MX_TIM3_Initv+0xb4>)
 8000ff4:	f002 fae8 	bl	80035c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	bf14      	ite	ne
 8000ffe:	2301      	movne	r3, #1
 8001000:	2300      	moveq	r3, #0
 8001002:	b2db      	uxtb	r3, r3
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <_ZL12MX_TIM3_Initv+0xac>
  {
    Error_Handler();
 8001008:	f000 f86a 	bl	80010e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800100c:	bf00      	nop
 800100e:	3730      	adds	r7, #48	@ 0x30
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20000110 	.word	0x20000110
 8001018:	40000400 	.word	0x40000400

0800101c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b088      	sub	sp, #32
 8001020:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001022:	f107 0310 	add.w	r3, r7, #16
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	609a      	str	r2, [r3, #8]
 800102e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001030:	4b28      	ldr	r3, [pc, #160]	@ (80010d4 <_ZL12MX_GPIO_Initv+0xb8>)
 8001032:	699b      	ldr	r3, [r3, #24]
 8001034:	4a27      	ldr	r2, [pc, #156]	@ (80010d4 <_ZL12MX_GPIO_Initv+0xb8>)
 8001036:	f043 0320 	orr.w	r3, r3, #32
 800103a:	6193      	str	r3, [r2, #24]
 800103c:	4b25      	ldr	r3, [pc, #148]	@ (80010d4 <_ZL12MX_GPIO_Initv+0xb8>)
 800103e:	699b      	ldr	r3, [r3, #24]
 8001040:	f003 0320 	and.w	r3, r3, #32
 8001044:	60fb      	str	r3, [r7, #12]
 8001046:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001048:	4b22      	ldr	r3, [pc, #136]	@ (80010d4 <_ZL12MX_GPIO_Initv+0xb8>)
 800104a:	699b      	ldr	r3, [r3, #24]
 800104c:	4a21      	ldr	r2, [pc, #132]	@ (80010d4 <_ZL12MX_GPIO_Initv+0xb8>)
 800104e:	f043 0304 	orr.w	r3, r3, #4
 8001052:	6193      	str	r3, [r2, #24]
 8001054:	4b1f      	ldr	r3, [pc, #124]	@ (80010d4 <_ZL12MX_GPIO_Initv+0xb8>)
 8001056:	699b      	ldr	r3, [r3, #24]
 8001058:	f003 0304 	and.w	r3, r3, #4
 800105c:	60bb      	str	r3, [r7, #8]
 800105e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001060:	4b1c      	ldr	r3, [pc, #112]	@ (80010d4 <_ZL12MX_GPIO_Initv+0xb8>)
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	4a1b      	ldr	r2, [pc, #108]	@ (80010d4 <_ZL12MX_GPIO_Initv+0xb8>)
 8001066:	f043 0308 	orr.w	r3, r3, #8
 800106a:	6193      	str	r3, [r2, #24]
 800106c:	4b19      	ldr	r3, [pc, #100]	@ (80010d4 <_ZL12MX_GPIO_Initv+0xb8>)
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	f003 0308 	and.w	r3, r3, #8
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8001078:	2200      	movs	r2, #0
 800107a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800107e:	4816      	ldr	r0, [pc, #88]	@ (80010d8 <_ZL12MX_GPIO_Initv+0xbc>)
 8001080:	f001 f996 	bl	80023b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001084:	2200      	movs	r2, #0
 8001086:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800108a:	4814      	ldr	r0, [pc, #80]	@ (80010dc <_ZL12MX_GPIO_Initv+0xc0>)
 800108c:	f001 f990 	bl	80023b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001090:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001094:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001096:	2301      	movs	r3, #1
 8001098:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109e:	2302      	movs	r3, #2
 80010a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a2:	f107 0310 	add.w	r3, r7, #16
 80010a6:	4619      	mov	r1, r3
 80010a8:	480b      	ldr	r0, [pc, #44]	@ (80010d8 <_ZL12MX_GPIO_Initv+0xbc>)
 80010aa:	f001 f805 	bl	80020b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b4:	2301      	movs	r3, #1
 80010b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010bc:	2302      	movs	r3, #2
 80010be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c0:	f107 0310 	add.w	r3, r7, #16
 80010c4:	4619      	mov	r1, r3
 80010c6:	4805      	ldr	r0, [pc, #20]	@ (80010dc <_ZL12MX_GPIO_Initv+0xc0>)
 80010c8:	f000 fff6 	bl	80020b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010cc:	bf00      	nop
 80010ce:	3720      	adds	r7, #32
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40021000 	.word	0x40021000
 80010d8:	40010c00 	.word	0x40010c00
 80010dc:	40010800 	.word	0x40010800

080010e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010e4:	b672      	cpsid	i
}
 80010e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010e8:	bf00      	nop
 80010ea:	e7fd      	b.n	80010e8 <Error_Handler+0x8>

080010ec <_ZN12MotorControlC1EP17TIM_HandleTypeDefm>:

#include "motorControl.hpp"
#include <cmath>

// Constructor
MotorControl::MotorControl(TIM_HandleTypeDef* timer, uint32_t channel)
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
    : htim(timer), channel(channel), lastDirection(GPIO_PIN_SET),
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	68ba      	ldr	r2, [r7, #8]
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	2201      	movs	r2, #1
 8001108:	721a      	strb	r2, [r3, #8]
      integral(0.0f), previousError(0.0f) {}
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	f04f 0200 	mov.w	r2, #0
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	f04f 0200 	mov.w	r2, #0
 8001118:	611a      	str	r2, [r3, #16]
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	4618      	mov	r0, r3
 800111e:	3714      	adds	r7, #20
 8001120:	46bd      	mov	sp, r7
 8001122:	bc80      	pop	{r7}
 8001124:	4770      	bx	lr

08001126 <_ZN12MotorControl5startEv>:

// Starts PWM
void MotorControl::start() {
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Start(htim, channel);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	4619      	mov	r1, r3
 8001138:	4610      	mov	r0, r2
 800113a:	f001 fe35 	bl	8002da8 <HAL_TIM_PWM_Start>
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <_ZN12MotorControl12setDutyCycleEt>:

// Sets steer speed (duty cycle)
void MotorControl::setDutyCycle(uint16_t dutyCycle) {
 8001146:	b480      	push	{r7}
 8001148:	b083      	sub	sp, #12
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
 800114e:	460b      	mov	r3, r1
 8001150:	807b      	strh	r3, [r7, #2]
    __HAL_TIM_SET_COMPARE(htim, channel, dutyCycle);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d105      	bne.n	8001166 <_ZN12MotorControl12setDutyCycleEt+0x20>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	887a      	ldrh	r2, [r7, #2]
 8001162:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001164:	e018      	b.n	8001198 <_ZN12MotorControl12setDutyCycleEt+0x52>
    __HAL_TIM_SET_COMPARE(htim, channel, dutyCycle);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	2b04      	cmp	r3, #4
 800116c:	d105      	bne.n	800117a <_ZN12MotorControl12setDutyCycleEt+0x34>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	887a      	ldrh	r2, [r7, #2]
 8001176:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001178:	e00e      	b.n	8001198 <_ZN12MotorControl12setDutyCycleEt+0x52>
    __HAL_TIM_SET_COMPARE(htim, channel, dutyCycle);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	2b08      	cmp	r3, #8
 8001180:	d105      	bne.n	800118e <_ZN12MotorControl12setDutyCycleEt+0x48>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	887a      	ldrh	r2, [r7, #2]
 800118a:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800118c:	e004      	b.n	8001198 <_ZN12MotorControl12setDutyCycleEt+0x52>
    __HAL_TIM_SET_COMPARE(htim, channel, dutyCycle);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	887a      	ldrh	r2, [r7, #2]
 8001196:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	bc80      	pop	{r7}
 80011a0:	4770      	bx	lr
	...

080011a4 <_ZN12MotorControl12calculatePIDEtt>:
void MotorControl::toggleDirection() {
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
}

// PID controller implementation
int16_t MotorControl::calculatePID(uint16_t targetAngle, uint16_t currentAngle) {
 80011a4:	b590      	push	{r4, r7, lr}
 80011a6:	b087      	sub	sp, #28
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	460b      	mov	r3, r1
 80011ae:	807b      	strh	r3, [r7, #2]
 80011b0:	4613      	mov	r3, r2
 80011b2:	803b      	strh	r3, [r7, #0]
    const float dt = 0.01f; // Fixed dt in seconds (10ms)
 80011b4:	4b3a      	ldr	r3, [pc, #232]	@ (80012a0 <_ZN12MotorControl12calculatePIDEtt+0xfc>)
 80011b6:	613b      	str	r3, [r7, #16]

    // Error calculation
    float error = static_cast<float>(targetAngle - currentAngle);
 80011b8:	887a      	ldrh	r2, [r7, #2]
 80011ba:	883b      	ldrh	r3, [r7, #0]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff f87e 	bl	80002c0 <__aeabi_i2f>
 80011c4:	4603      	mov	r3, r0
 80011c6:	60fb      	str	r3, [r7, #12]

    // Integral windup prevention
    integral += error * dt;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	68dc      	ldr	r4, [r3, #12]
 80011cc:	4934      	ldr	r1, [pc, #208]	@ (80012a0 <_ZN12MotorControl12calculatePIDEtt+0xfc>)
 80011ce:	68f8      	ldr	r0, [r7, #12]
 80011d0:	f7ff f8ca 	bl	8000368 <__aeabi_fmul>
 80011d4:	4603      	mov	r3, r0
 80011d6:	4619      	mov	r1, r3
 80011d8:	4620      	mov	r0, r4
 80011da:	f7fe ffbd 	bl	8000158 <__addsf3>
 80011de:	4603      	mov	r3, r0
 80011e0:	461a      	mov	r2, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	60da      	str	r2, [r3, #12]
    if (integral > MAX_INTEGRAL) integral = MAX_INTEGRAL;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	68db      	ldr	r3, [r3, #12]
 80011ea:	492e      	ldr	r1, [pc, #184]	@ (80012a4 <_ZN12MotorControl12calculatePIDEtt+0x100>)
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff fa77 	bl	80006e0 <__aeabi_fcmpgt>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d002      	beq.n	80011fe <_ZN12MotorControl12calculatePIDEtt+0x5a>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	4a2a      	ldr	r2, [pc, #168]	@ (80012a4 <_ZN12MotorControl12calculatePIDEtt+0x100>)
 80011fc:	60da      	str	r2, [r3, #12]
    if (integral < MIN_INTEGRAL) integral = MIN_INTEGRAL;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	68db      	ldr	r3, [r3, #12]
 8001202:	4929      	ldr	r1, [pc, #164]	@ (80012a8 <_ZN12MotorControl12calculatePIDEtt+0x104>)
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff fa4d 	bl	80006a4 <__aeabi_fcmplt>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d002      	beq.n	8001216 <_ZN12MotorControl12calculatePIDEtt+0x72>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4a25      	ldr	r2, [pc, #148]	@ (80012a8 <_ZN12MotorControl12calculatePIDEtt+0x104>)
 8001214:	60da      	str	r2, [r3, #12]

    // Derivative calculation
    float derivative = (error - previousError) / dt;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	691b      	ldr	r3, [r3, #16]
 800121a:	4619      	mov	r1, r3
 800121c:	68f8      	ldr	r0, [r7, #12]
 800121e:	f7fe ff99 	bl	8000154 <__aeabi_fsub>
 8001222:	4603      	mov	r3, r0
 8001224:	491e      	ldr	r1, [pc, #120]	@ (80012a0 <_ZN12MotorControl12calculatePIDEtt+0xfc>)
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff f952 	bl	80004d0 <__aeabi_fdiv>
 800122c:	4603      	mov	r3, r0
 800122e:	60bb      	str	r3, [r7, #8]

    // PID calculations
    float output = (KP * error) + (KI * integral) + (KD * derivative);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	491d      	ldr	r1, [pc, #116]	@ (80012ac <_ZN12MotorControl12calculatePIDEtt+0x108>)
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff f896 	bl	8000368 <__aeabi_fmul>
 800123c:	4603      	mov	r3, r0
 800123e:	68f9      	ldr	r1, [r7, #12]
 8001240:	4618      	mov	r0, r3
 8001242:	f7fe ff89 	bl	8000158 <__addsf3>
 8001246:	4603      	mov	r3, r0
 8001248:	461c      	mov	r4, r3
 800124a:	4915      	ldr	r1, [pc, #84]	@ (80012a0 <_ZN12MotorControl12calculatePIDEtt+0xfc>)
 800124c:	68b8      	ldr	r0, [r7, #8]
 800124e:	f7ff f88b 	bl	8000368 <__aeabi_fmul>
 8001252:	4603      	mov	r3, r0
 8001254:	4619      	mov	r1, r3
 8001256:	4620      	mov	r0, r4
 8001258:	f7fe ff7e 	bl	8000158 <__addsf3>
 800125c:	4603      	mov	r3, r0
 800125e:	617b      	str	r3, [r7, #20]

    // Constrain output to valid range
    if (output > MAX_OUTPUT) output = MAX_OUTPUT;
 8001260:	4913      	ldr	r1, [pc, #76]	@ (80012b0 <_ZN12MotorControl12calculatePIDEtt+0x10c>)
 8001262:	6978      	ldr	r0, [r7, #20]
 8001264:	f7ff fa3c 	bl	80006e0 <__aeabi_fcmpgt>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <_ZN12MotorControl12calculatePIDEtt+0xce>
 800126e:	4b10      	ldr	r3, [pc, #64]	@ (80012b0 <_ZN12MotorControl12calculatePIDEtt+0x10c>)
 8001270:	617b      	str	r3, [r7, #20]
    if (output < MIN_OUTPUT) output = MIN_OUTPUT;
 8001272:	f04f 0100 	mov.w	r1, #0
 8001276:	6978      	ldr	r0, [r7, #20]
 8001278:	f7ff fa14 	bl	80006a4 <__aeabi_fcmplt>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d002      	beq.n	8001288 <_ZN12MotorControl12calculatePIDEtt+0xe4>
 8001282:	f04f 0300 	mov.w	r3, #0
 8001286:	617b      	str	r3, [r7, #20]


    // Update previous error for the next iteration
    previousError = error;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	68fa      	ldr	r2, [r7, #12]
 800128c:	611a      	str	r2, [r3, #16]

    return static_cast<int16_t>(output);
 800128e:	6978      	ldr	r0, [r7, #20]
 8001290:	f7ff fa30 	bl	80006f4 <__aeabi_f2iz>
 8001294:	4603      	mov	r3, r0
 8001296:	b21b      	sxth	r3, r3
}
 8001298:	4618      	mov	r0, r3
 800129a:	371c      	adds	r7, #28
 800129c:	46bd      	mov	sp, r7
 800129e:	bd90      	pop	{r4, r7, pc}
 80012a0:	3c23d70a 	.word	0x3c23d70a
 80012a4:	43fa0000 	.word	0x43fa0000
 80012a8:	c3fa0000 	.word	0xc3fa0000
 80012ac:	3dcccccd 	.word	0x3dcccccd
 80012b0:	447a0000 	.word	0x447a0000

080012b4 <_ZN12MotorControl12steerToAngleEtt>:

// Steers to target angle using PID
void MotorControl::steerToAngle(uint16_t currentAngle, uint16_t targetAngle) {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	460b      	mov	r3, r1
 80012be:	807b      	strh	r3, [r7, #2]
 80012c0:	4613      	mov	r3, r2
 80012c2:	803b      	strh	r3, [r7, #0]
    int16_t pidOutput = calculatePID(targetAngle, currentAngle);
 80012c4:	887a      	ldrh	r2, [r7, #2]
 80012c6:	883b      	ldrh	r3, [r7, #0]
 80012c8:	4619      	mov	r1, r3
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff ff6a 	bl	80011a4 <_ZN12MotorControl12calculatePIDEtt>
 80012d0:	4603      	mov	r3, r0
 80012d2:	81fb      	strh	r3, [r7, #14]

    // Apply dead zone
    if (std::abs(pidOutput) < DEAD_ZONE_THRESHOLD) {
 80012d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	bfb8      	it	lt
 80012dc:	425b      	neglt	r3, r3
 80012de:	b29b      	uxth	r3, r3
 80012e0:	2b09      	cmp	r3, #9
 80012e2:	d804      	bhi.n	80012ee <_ZN12MotorControl12steerToAngleEtt+0x3a>
        setDutyCycle(0);
 80012e4:	2100      	movs	r1, #0
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f7ff ff2d 	bl	8001146 <_ZN12MotorControl12setDutyCycleEt>
        return;
 80012ec:	e01c      	b.n	8001328 <_ZN12MotorControl12steerToAngleEtt+0x74>
    }

    // Determine direction and apply PWM
    if (pidOutput < 0) {
 80012ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	da0d      	bge.n	8001312 <_ZN12MotorControl12steerToAngleEtt+0x5e>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); // Reverse direction
 80012f6:	2200      	movs	r2, #0
 80012f8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012fc:	480c      	ldr	r0, [pc, #48]	@ (8001330 <_ZN12MotorControl12steerToAngleEtt+0x7c>)
 80012fe:	f001 f857 	bl	80023b0 <HAL_GPIO_WritePin>
        setDutyCycle(static_cast<uint16_t>(-pidOutput));      // Positive duty cycle
 8001302:	89fb      	ldrh	r3, [r7, #14]
 8001304:	425b      	negs	r3, r3
 8001306:	b29b      	uxth	r3, r3
 8001308:	4619      	mov	r1, r3
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f7ff ff1b 	bl	8001146 <_ZN12MotorControl12setDutyCycleEt>
 8001310:	e00a      	b.n	8001328 <_ZN12MotorControl12steerToAngleEtt+0x74>
    } else {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);   // Forward direction
 8001312:	2201      	movs	r2, #1
 8001314:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001318:	4805      	ldr	r0, [pc, #20]	@ (8001330 <_ZN12MotorControl12steerToAngleEtt+0x7c>)
 800131a:	f001 f849 	bl	80023b0 <HAL_GPIO_WritePin>
        setDutyCycle(static_cast<uint16_t>(pidOutput));
 800131e:	89fb      	ldrh	r3, [r7, #14]
 8001320:	4619      	mov	r1, r3
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff ff0f 	bl	8001146 <_ZN12MotorControl12setDutyCycleEt>
    }
}
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40010800 	.word	0x40010800

08001334 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001334:	b480      	push	{r7}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800133a:	4b15      	ldr	r3, [pc, #84]	@ (8001390 <HAL_MspInit+0x5c>)
 800133c:	699b      	ldr	r3, [r3, #24]
 800133e:	4a14      	ldr	r2, [pc, #80]	@ (8001390 <HAL_MspInit+0x5c>)
 8001340:	f043 0301 	orr.w	r3, r3, #1
 8001344:	6193      	str	r3, [r2, #24]
 8001346:	4b12      	ldr	r3, [pc, #72]	@ (8001390 <HAL_MspInit+0x5c>)
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	60bb      	str	r3, [r7, #8]
 8001350:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001352:	4b0f      	ldr	r3, [pc, #60]	@ (8001390 <HAL_MspInit+0x5c>)
 8001354:	69db      	ldr	r3, [r3, #28]
 8001356:	4a0e      	ldr	r2, [pc, #56]	@ (8001390 <HAL_MspInit+0x5c>)
 8001358:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800135c:	61d3      	str	r3, [r2, #28]
 800135e:	4b0c      	ldr	r3, [pc, #48]	@ (8001390 <HAL_MspInit+0x5c>)
 8001360:	69db      	ldr	r3, [r3, #28]
 8001362:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001366:	607b      	str	r3, [r7, #4]
 8001368:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800136a:	4b0a      	ldr	r3, [pc, #40]	@ (8001394 <HAL_MspInit+0x60>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	4a04      	ldr	r2, [pc, #16]	@ (8001394 <HAL_MspInit+0x60>)
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001386:	bf00      	nop
 8001388:	3714      	adds	r7, #20
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr
 8001390:	40021000 	.word	0x40021000
 8001394:	40010000 	.word	0x40010000

08001398 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b088      	sub	sp, #32
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a0:	f107 0310 	add.w	r3, r7, #16
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a14      	ldr	r2, [pc, #80]	@ (8001404 <HAL_ADC_MspInit+0x6c>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d121      	bne.n	80013fc <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013b8:	4b13      	ldr	r3, [pc, #76]	@ (8001408 <HAL_ADC_MspInit+0x70>)
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	4a12      	ldr	r2, [pc, #72]	@ (8001408 <HAL_ADC_MspInit+0x70>)
 80013be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013c2:	6193      	str	r3, [r2, #24]
 80013c4:	4b10      	ldr	r3, [pc, #64]	@ (8001408 <HAL_ADC_MspInit+0x70>)
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001408 <HAL_ADC_MspInit+0x70>)
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	4a0c      	ldr	r2, [pc, #48]	@ (8001408 <HAL_ADC_MspInit+0x70>)
 80013d6:	f043 0304 	orr.w	r3, r3, #4
 80013da:	6193      	str	r3, [r2, #24]
 80013dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001408 <HAL_ADC_MspInit+0x70>)
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	f003 0304 	and.w	r3, r3, #4
 80013e4:	60bb      	str	r3, [r7, #8]
 80013e6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80013e8:	2318      	movs	r3, #24
 80013ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ec:	2303      	movs	r3, #3
 80013ee:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f0:	f107 0310 	add.w	r3, r7, #16
 80013f4:	4619      	mov	r1, r3
 80013f6:	4805      	ldr	r0, [pc, #20]	@ (800140c <HAL_ADC_MspInit+0x74>)
 80013f8:	f000 fe5e 	bl	80020b8 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80013fc:	bf00      	nop
 80013fe:	3720      	adds	r7, #32
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40012400 	.word	0x40012400
 8001408:	40021000 	.word	0x40021000
 800140c:	40010800 	.word	0x40010800

08001410 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08a      	sub	sp, #40	@ 0x28
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001418:	f107 0314 	add.w	r3, r7, #20
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a25      	ldr	r2, [pc, #148]	@ (80014c0 <HAL_CAN_MspInit+0xb0>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d143      	bne.n	80014b8 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001430:	4b24      	ldr	r3, [pc, #144]	@ (80014c4 <HAL_CAN_MspInit+0xb4>)
 8001432:	69db      	ldr	r3, [r3, #28]
 8001434:	4a23      	ldr	r2, [pc, #140]	@ (80014c4 <HAL_CAN_MspInit+0xb4>)
 8001436:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800143a:	61d3      	str	r3, [r2, #28]
 800143c:	4b21      	ldr	r3, [pc, #132]	@ (80014c4 <HAL_CAN_MspInit+0xb4>)
 800143e:	69db      	ldr	r3, [r3, #28]
 8001440:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001444:	613b      	str	r3, [r7, #16]
 8001446:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001448:	4b1e      	ldr	r3, [pc, #120]	@ (80014c4 <HAL_CAN_MspInit+0xb4>)
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	4a1d      	ldr	r2, [pc, #116]	@ (80014c4 <HAL_CAN_MspInit+0xb4>)
 800144e:	f043 0308 	orr.w	r3, r3, #8
 8001452:	6193      	str	r3, [r2, #24]
 8001454:	4b1b      	ldr	r3, [pc, #108]	@ (80014c4 <HAL_CAN_MspInit+0xb4>)
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	f003 0308 	and.w	r3, r3, #8
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001460:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001464:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001466:	2300      	movs	r3, #0
 8001468:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146e:	f107 0314 	add.w	r3, r7, #20
 8001472:	4619      	mov	r1, r3
 8001474:	4814      	ldr	r0, [pc, #80]	@ (80014c8 <HAL_CAN_MspInit+0xb8>)
 8001476:	f000 fe1f 	bl	80020b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800147a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800147e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001480:	2302      	movs	r3, #2
 8001482:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001484:	2303      	movs	r3, #3
 8001486:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001488:	f107 0314 	add.w	r3, r7, #20
 800148c:	4619      	mov	r1, r3
 800148e:	480e      	ldr	r0, [pc, #56]	@ (80014c8 <HAL_CAN_MspInit+0xb8>)
 8001490:	f000 fe12 	bl	80020b8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8001494:	4b0d      	ldr	r3, [pc, #52]	@ (80014cc <HAL_CAN_MspInit+0xbc>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	627b      	str	r3, [r7, #36]	@ 0x24
 800149a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800149c:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 80014a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80014a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014a4:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80014a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80014aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80014b2:	4a06      	ldr	r2, [pc, #24]	@ (80014cc <HAL_CAN_MspInit+0xbc>)
 80014b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b6:	6053      	str	r3, [r2, #4]

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 80014b8:	bf00      	nop
 80014ba:	3728      	adds	r7, #40	@ 0x28
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40006400 	.word	0x40006400
 80014c4:	40021000 	.word	0x40021000
 80014c8:	40010c00 	.word	0x40010c00
 80014cc:	40010000 	.word	0x40010000

080014d0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b08a      	sub	sp, #40	@ 0x28
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d8:	f107 0318 	add.w	r3, r7, #24
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
  if(htim_pwm->Instance==TIM1)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a1e      	ldr	r2, [pc, #120]	@ (8001564 <HAL_TIM_PWM_MspInit+0x94>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d10c      	bne.n	800150a <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001568 <HAL_TIM_PWM_MspInit+0x98>)
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	4a1c      	ldr	r2, [pc, #112]	@ (8001568 <HAL_TIM_PWM_MspInit+0x98>)
 80014f6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80014fa:	6193      	str	r3, [r2, #24]
 80014fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001568 <HAL_TIM_PWM_MspInit+0x98>)
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001504:	617b      	str	r3, [r7, #20]
 8001506:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001508:	e028      	b.n	800155c <HAL_TIM_PWM_MspInit+0x8c>
  else if(htim_pwm->Instance==TIM2)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001512:	d123      	bne.n	800155c <HAL_TIM_PWM_MspInit+0x8c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001514:	4b14      	ldr	r3, [pc, #80]	@ (8001568 <HAL_TIM_PWM_MspInit+0x98>)
 8001516:	69db      	ldr	r3, [r3, #28]
 8001518:	4a13      	ldr	r2, [pc, #76]	@ (8001568 <HAL_TIM_PWM_MspInit+0x98>)
 800151a:	f043 0301 	orr.w	r3, r3, #1
 800151e:	61d3      	str	r3, [r2, #28]
 8001520:	4b11      	ldr	r3, [pc, #68]	@ (8001568 <HAL_TIM_PWM_MspInit+0x98>)
 8001522:	69db      	ldr	r3, [r3, #28]
 8001524:	f003 0301 	and.w	r3, r3, #1
 8001528:	613b      	str	r3, [r7, #16]
 800152a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800152c:	4b0e      	ldr	r3, [pc, #56]	@ (8001568 <HAL_TIM_PWM_MspInit+0x98>)
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	4a0d      	ldr	r2, [pc, #52]	@ (8001568 <HAL_TIM_PWM_MspInit+0x98>)
 8001532:	f043 0304 	orr.w	r3, r3, #4
 8001536:	6193      	str	r3, [r2, #24]
 8001538:	4b0b      	ldr	r3, [pc, #44]	@ (8001568 <HAL_TIM_PWM_MspInit+0x98>)
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	f003 0304 	and.w	r3, r3, #4
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001544:	2303      	movs	r3, #3
 8001546:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001548:	2300      	movs	r3, #0
 800154a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001550:	f107 0318 	add.w	r3, r7, #24
 8001554:	4619      	mov	r1, r3
 8001556:	4805      	ldr	r0, [pc, #20]	@ (800156c <HAL_TIM_PWM_MspInit+0x9c>)
 8001558:	f000 fdae 	bl	80020b8 <HAL_GPIO_Init>
}
 800155c:	bf00      	nop
 800155e:	3728      	adds	r7, #40	@ 0x28
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40012c00 	.word	0x40012c00
 8001568:	40021000 	.word	0x40021000
 800156c:	40010800 	.word	0x40010800

08001570 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b088      	sub	sp, #32
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001578:	f107 0310 	add.w	r3, r7, #16
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a15      	ldr	r2, [pc, #84]	@ (80015e0 <HAL_TIM_Encoder_MspInit+0x70>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d123      	bne.n	80015d8 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001590:	4b14      	ldr	r3, [pc, #80]	@ (80015e4 <HAL_TIM_Encoder_MspInit+0x74>)
 8001592:	69db      	ldr	r3, [r3, #28]
 8001594:	4a13      	ldr	r2, [pc, #76]	@ (80015e4 <HAL_TIM_Encoder_MspInit+0x74>)
 8001596:	f043 0302 	orr.w	r3, r3, #2
 800159a:	61d3      	str	r3, [r2, #28]
 800159c:	4b11      	ldr	r3, [pc, #68]	@ (80015e4 <HAL_TIM_Encoder_MspInit+0x74>)
 800159e:	69db      	ldr	r3, [r3, #28]
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a8:	4b0e      	ldr	r3, [pc, #56]	@ (80015e4 <HAL_TIM_Encoder_MspInit+0x74>)
 80015aa:	699b      	ldr	r3, [r3, #24]
 80015ac:	4a0d      	ldr	r2, [pc, #52]	@ (80015e4 <HAL_TIM_Encoder_MspInit+0x74>)
 80015ae:	f043 0304 	orr.w	r3, r3, #4
 80015b2:	6193      	str	r3, [r2, #24]
 80015b4:	4b0b      	ldr	r3, [pc, #44]	@ (80015e4 <HAL_TIM_Encoder_MspInit+0x74>)
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	f003 0304 	and.w	r3, r3, #4
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015c0:	23c0      	movs	r3, #192	@ 0xc0
 80015c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015c4:	2300      	movs	r3, #0
 80015c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015cc:	f107 0310 	add.w	r3, r7, #16
 80015d0:	4619      	mov	r1, r3
 80015d2:	4805      	ldr	r0, [pc, #20]	@ (80015e8 <HAL_TIM_Encoder_MspInit+0x78>)
 80015d4:	f000 fd70 	bl	80020b8 <HAL_GPIO_Init>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80015d8:	bf00      	nop
 80015da:	3720      	adds	r7, #32
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40000400 	.word	0x40000400
 80015e4:	40021000 	.word	0x40021000
 80015e8:	40010800 	.word	0x40010800

080015ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b088      	sub	sp, #32
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f4:	f107 0310 	add.w	r3, r7, #16
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a1f      	ldr	r2, [pc, #124]	@ (8001684 <HAL_TIM_MspPostInit+0x98>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d119      	bne.n	8001640 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800160c:	4b1e      	ldr	r3, [pc, #120]	@ (8001688 <HAL_TIM_MspPostInit+0x9c>)
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	4a1d      	ldr	r2, [pc, #116]	@ (8001688 <HAL_TIM_MspPostInit+0x9c>)
 8001612:	f043 0304 	orr.w	r3, r3, #4
 8001616:	6193      	str	r3, [r2, #24]
 8001618:	4b1b      	ldr	r3, [pc, #108]	@ (8001688 <HAL_TIM_MspPostInit+0x9c>)
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	f003 0304 	and.w	r3, r3, #4
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11;
 8001624:	f44f 6350 	mov.w	r3, #3328	@ 0xd00
 8001628:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162a:	2302      	movs	r3, #2
 800162c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162e:	2302      	movs	r3, #2
 8001630:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001632:	f107 0310 	add.w	r3, r7, #16
 8001636:	4619      	mov	r1, r3
 8001638:	4814      	ldr	r0, [pc, #80]	@ (800168c <HAL_TIM_MspPostInit+0xa0>)
 800163a:	f000 fd3d 	bl	80020b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800163e:	e01c      	b.n	800167a <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM2)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001648:	d117      	bne.n	800167a <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800164a:	4b0f      	ldr	r3, [pc, #60]	@ (8001688 <HAL_TIM_MspPostInit+0x9c>)
 800164c:	699b      	ldr	r3, [r3, #24]
 800164e:	4a0e      	ldr	r2, [pc, #56]	@ (8001688 <HAL_TIM_MspPostInit+0x9c>)
 8001650:	f043 0304 	orr.w	r3, r3, #4
 8001654:	6193      	str	r3, [r2, #24]
 8001656:	4b0c      	ldr	r3, [pc, #48]	@ (8001688 <HAL_TIM_MspPostInit+0x9c>)
 8001658:	699b      	ldr	r3, [r3, #24]
 800165a:	f003 0304 	and.w	r3, r3, #4
 800165e:	60bb      	str	r3, [r7, #8]
 8001660:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001662:	2304      	movs	r3, #4
 8001664:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001666:	2302      	movs	r3, #2
 8001668:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166a:	2302      	movs	r3, #2
 800166c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166e:	f107 0310 	add.w	r3, r7, #16
 8001672:	4619      	mov	r1, r3
 8001674:	4805      	ldr	r0, [pc, #20]	@ (800168c <HAL_TIM_MspPostInit+0xa0>)
 8001676:	f000 fd1f 	bl	80020b8 <HAL_GPIO_Init>
}
 800167a:	bf00      	nop
 800167c:	3720      	adds	r7, #32
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40012c00 	.word	0x40012c00
 8001688:	40021000 	.word	0x40021000
 800168c:	40010800 	.word	0x40010800

08001690 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001694:	bf00      	nop
 8001696:	e7fd      	b.n	8001694 <NMI_Handler+0x4>

08001698 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800169c:	bf00      	nop
 800169e:	e7fd      	b.n	800169c <HardFault_Handler+0x4>

080016a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016a4:	bf00      	nop
 80016a6:	e7fd      	b.n	80016a4 <MemManage_Handler+0x4>

080016a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ac:	bf00      	nop
 80016ae:	e7fd      	b.n	80016ac <BusFault_Handler+0x4>

080016b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016b4:	bf00      	nop
 80016b6:	e7fd      	b.n	80016b4 <UsageFault_Handler+0x4>

080016b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr

080016c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bc80      	pop	{r7}
 80016ce:	4770      	bx	lr

080016d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bc80      	pop	{r7}
 80016da:	4770      	bx	lr

080016dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016e0:	f000 f874 	bl	80017cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016e4:	bf00      	nop
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bc80      	pop	{r7}
 80016f2:	4770      	bx	lr

080016f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016f4:	f7ff fff8 	bl	80016e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016f8:	480b      	ldr	r0, [pc, #44]	@ (8001728 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80016fa:	490c      	ldr	r1, [pc, #48]	@ (800172c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80016fc:	4a0c      	ldr	r2, [pc, #48]	@ (8001730 <LoopFillZerobss+0x16>)
  movs r3, #0
 80016fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001700:	e002      	b.n	8001708 <LoopCopyDataInit>

08001702 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001702:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001704:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001706:	3304      	adds	r3, #4

08001708 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001708:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800170a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800170c:	d3f9      	bcc.n	8001702 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800170e:	4a09      	ldr	r2, [pc, #36]	@ (8001734 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001710:	4c09      	ldr	r4, [pc, #36]	@ (8001738 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001712:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001714:	e001      	b.n	800171a <LoopFillZerobss>

08001716 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001716:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001718:	3204      	adds	r2, #4

0800171a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800171a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800171c:	d3fb      	bcc.n	8001716 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800171e:	f002 f805 	bl	800372c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001722:	f7ff f989 	bl	8000a38 <main>
  bx lr
 8001726:	4770      	bx	lr
  ldr r0, =_sdata
 8001728:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800172c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001730:	080037b8 	.word	0x080037b8
  ldr r2, =_sbss
 8001734:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001738:	2000015c 	.word	0x2000015c

0800173c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800173c:	e7fe      	b.n	800173c <ADC1_2_IRQHandler>
	...

08001740 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001744:	4b08      	ldr	r3, [pc, #32]	@ (8001768 <HAL_Init+0x28>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a07      	ldr	r2, [pc, #28]	@ (8001768 <HAL_Init+0x28>)
 800174a:	f043 0310 	orr.w	r3, r3, #16
 800174e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001750:	2003      	movs	r0, #3
 8001752:	f000 fc7d 	bl	8002050 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001756:	200f      	movs	r0, #15
 8001758:	f000 f808 	bl	800176c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800175c:	f7ff fdea 	bl	8001334 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40022000 	.word	0x40022000

0800176c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001774:	4b12      	ldr	r3, [pc, #72]	@ (80017c0 <HAL_InitTick+0x54>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	4b12      	ldr	r3, [pc, #72]	@ (80017c4 <HAL_InitTick+0x58>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	4619      	mov	r1, r3
 800177e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001782:	fbb3 f3f1 	udiv	r3, r3, r1
 8001786:	fbb2 f3f3 	udiv	r3, r2, r3
 800178a:	4618      	mov	r0, r3
 800178c:	f000 fc87 	bl	800209e <HAL_SYSTICK_Config>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e00e      	b.n	80017b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2b0f      	cmp	r3, #15
 800179e:	d80a      	bhi.n	80017b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017a0:	2200      	movs	r2, #0
 80017a2:	6879      	ldr	r1, [r7, #4]
 80017a4:	f04f 30ff 	mov.w	r0, #4294967295
 80017a8:	f000 fc5d 	bl	8002066 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017ac:	4a06      	ldr	r2, [pc, #24]	@ (80017c8 <HAL_InitTick+0x5c>)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017b2:	2300      	movs	r3, #0
 80017b4:	e000      	b.n	80017b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20000000 	.word	0x20000000
 80017c4:	20000008 	.word	0x20000008
 80017c8:	20000004 	.word	0x20000004

080017cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017d0:	4b05      	ldr	r3, [pc, #20]	@ (80017e8 <HAL_IncTick+0x1c>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	461a      	mov	r2, r3
 80017d6:	4b05      	ldr	r3, [pc, #20]	@ (80017ec <HAL_IncTick+0x20>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4413      	add	r3, r2
 80017dc:	4a03      	ldr	r2, [pc, #12]	@ (80017ec <HAL_IncTick+0x20>)
 80017de:	6013      	str	r3, [r2, #0]
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr
 80017e8:	20000008 	.word	0x20000008
 80017ec:	20000158 	.word	0x20000158

080017f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  return uwTick;
 80017f4:	4b02      	ldr	r3, [pc, #8]	@ (8001800 <HAL_GetTick+0x10>)
 80017f6:	681b      	ldr	r3, [r3, #0]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bc80      	pop	{r7}
 80017fe:	4770      	bx	lr
 8001800:	20000158 	.word	0x20000158

08001804 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800180c:	2300      	movs	r3, #0
 800180e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001810:	2300      	movs	r3, #0
 8001812:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001814:	2300      	movs	r3, #0
 8001816:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001818:	2300      	movs	r3, #0
 800181a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d101      	bne.n	8001826 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e0be      	b.n	80019a4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001830:	2b00      	cmp	r3, #0
 8001832:	d109      	bne.n	8001848 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f7ff fda8 	bl	8001398 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f000 f9ab 	bl	8001ba4 <ADC_ConversionStop_Disable>
 800184e:	4603      	mov	r3, r0
 8001850:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001856:	f003 0310 	and.w	r3, r3, #16
 800185a:	2b00      	cmp	r3, #0
 800185c:	f040 8099 	bne.w	8001992 <HAL_ADC_Init+0x18e>
 8001860:	7dfb      	ldrb	r3, [r7, #23]
 8001862:	2b00      	cmp	r3, #0
 8001864:	f040 8095 	bne.w	8001992 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800186c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001870:	f023 0302 	bic.w	r3, r3, #2
 8001874:	f043 0202 	orr.w	r2, r3, #2
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001884:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	7b1b      	ldrb	r3, [r3, #12]
 800188a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800188c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800188e:	68ba      	ldr	r2, [r7, #8]
 8001890:	4313      	orrs	r3, r2
 8001892:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800189c:	d003      	beq.n	80018a6 <HAL_ADC_Init+0xa2>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d102      	bne.n	80018ac <HAL_ADC_Init+0xa8>
 80018a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018aa:	e000      	b.n	80018ae <HAL_ADC_Init+0xaa>
 80018ac:	2300      	movs	r3, #0
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	7d1b      	ldrb	r3, [r3, #20]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d119      	bne.n	80018f0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	7b1b      	ldrb	r3, [r3, #12]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d109      	bne.n	80018d8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	3b01      	subs	r3, #1
 80018ca:	035a      	lsls	r2, r3, #13
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80018d4:	613b      	str	r3, [r7, #16]
 80018d6:	e00b      	b.n	80018f0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018dc:	f043 0220 	orr.w	r2, r3, #32
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018e8:	f043 0201 	orr.w	r2, r3, #1
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	430a      	orrs	r2, r1
 8001902:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	689a      	ldr	r2, [r3, #8]
 800190a:	4b28      	ldr	r3, [pc, #160]	@ (80019ac <HAL_ADC_Init+0x1a8>)
 800190c:	4013      	ands	r3, r2
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	6812      	ldr	r2, [r2, #0]
 8001912:	68b9      	ldr	r1, [r7, #8]
 8001914:	430b      	orrs	r3, r1
 8001916:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001920:	d003      	beq.n	800192a <HAL_ADC_Init+0x126>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d104      	bne.n	8001934 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	3b01      	subs	r3, #1
 8001930:	051b      	lsls	r3, r3, #20
 8001932:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800193a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	68fa      	ldr	r2, [r7, #12]
 8001944:	430a      	orrs	r2, r1
 8001946:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	689a      	ldr	r2, [r3, #8]
 800194e:	4b18      	ldr	r3, [pc, #96]	@ (80019b0 <HAL_ADC_Init+0x1ac>)
 8001950:	4013      	ands	r3, r2
 8001952:	68ba      	ldr	r2, [r7, #8]
 8001954:	429a      	cmp	r2, r3
 8001956:	d10b      	bne.n	8001970 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001962:	f023 0303 	bic.w	r3, r3, #3
 8001966:	f043 0201 	orr.w	r2, r3, #1
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800196e:	e018      	b.n	80019a2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001974:	f023 0312 	bic.w	r3, r3, #18
 8001978:	f043 0210 	orr.w	r2, r3, #16
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001984:	f043 0201 	orr.w	r2, r3, #1
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001990:	e007      	b.n	80019a2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001996:	f043 0210 	orr.w	r2, r3, #16
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80019a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3718      	adds	r7, #24
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	ffe1f7fd 	.word	0xffe1f7fd
 80019b0:	ff1f0efe 	.word	0xff1f0efe

080019b4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019be:	2300      	movs	r3, #0
 80019c0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80019c2:	2300      	movs	r3, #0
 80019c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d101      	bne.n	80019d4 <HAL_ADC_ConfigChannel+0x20>
 80019d0:	2302      	movs	r3, #2
 80019d2:	e0dc      	b.n	8001b8e <HAL_ADC_ConfigChannel+0x1da>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2201      	movs	r2, #1
 80019d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	2b06      	cmp	r3, #6
 80019e2:	d81c      	bhi.n	8001a1e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685a      	ldr	r2, [r3, #4]
 80019ee:	4613      	mov	r3, r2
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	4413      	add	r3, r2
 80019f4:	3b05      	subs	r3, #5
 80019f6:	221f      	movs	r2, #31
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	43db      	mvns	r3, r3
 80019fe:	4019      	ands	r1, r3
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	6818      	ldr	r0, [r3, #0]
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685a      	ldr	r2, [r3, #4]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	4413      	add	r3, r2
 8001a0e:	3b05      	subs	r3, #5
 8001a10:	fa00 f203 	lsl.w	r2, r0, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a1c:	e03c      	b.n	8001a98 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	2b0c      	cmp	r3, #12
 8001a24:	d81c      	bhi.n	8001a60 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685a      	ldr	r2, [r3, #4]
 8001a30:	4613      	mov	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4413      	add	r3, r2
 8001a36:	3b23      	subs	r3, #35	@ 0x23
 8001a38:	221f      	movs	r2, #31
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	4019      	ands	r1, r3
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	6818      	ldr	r0, [r3, #0]
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685a      	ldr	r2, [r3, #4]
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	4413      	add	r3, r2
 8001a50:	3b23      	subs	r3, #35	@ 0x23
 8001a52:	fa00 f203 	lsl.w	r2, r0, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a5e:	e01b      	b.n	8001a98 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685a      	ldr	r2, [r3, #4]
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	4413      	add	r3, r2
 8001a70:	3b41      	subs	r3, #65	@ 0x41
 8001a72:	221f      	movs	r2, #31
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	4019      	ands	r1, r3
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	6818      	ldr	r0, [r3, #0]
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685a      	ldr	r2, [r3, #4]
 8001a84:	4613      	mov	r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	4413      	add	r3, r2
 8001a8a:	3b41      	subs	r3, #65	@ 0x41
 8001a8c:	fa00 f203 	lsl.w	r2, r0, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	430a      	orrs	r2, r1
 8001a96:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2b09      	cmp	r3, #9
 8001a9e:	d91c      	bls.n	8001ada <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	68d9      	ldr	r1, [r3, #12]
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	4413      	add	r3, r2
 8001ab0:	3b1e      	subs	r3, #30
 8001ab2:	2207      	movs	r2, #7
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	4019      	ands	r1, r3
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	6898      	ldr	r0, [r3, #8]
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	4413      	add	r3, r2
 8001aca:	3b1e      	subs	r3, #30
 8001acc:	fa00 f203 	lsl.w	r2, r0, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	60da      	str	r2, [r3, #12]
 8001ad8:	e019      	b.n	8001b0e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	6919      	ldr	r1, [r3, #16]
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	4413      	add	r3, r2
 8001aea:	2207      	movs	r2, #7
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	43db      	mvns	r3, r3
 8001af2:	4019      	ands	r1, r3
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	6898      	ldr	r0, [r3, #8]
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	4613      	mov	r3, r2
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	4413      	add	r3, r2
 8001b02:	fa00 f203 	lsl.w	r2, r0, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2b10      	cmp	r3, #16
 8001b14:	d003      	beq.n	8001b1e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001b1a:	2b11      	cmp	r3, #17
 8001b1c:	d132      	bne.n	8001b84 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a1d      	ldr	r2, [pc, #116]	@ (8001b98 <HAL_ADC_ConfigChannel+0x1e4>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d125      	bne.n	8001b74 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d126      	bne.n	8001b84 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	689a      	ldr	r2, [r3, #8]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001b44:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2b10      	cmp	r3, #16
 8001b4c:	d11a      	bne.n	8001b84 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b4e:	4b13      	ldr	r3, [pc, #76]	@ (8001b9c <HAL_ADC_ConfigChannel+0x1e8>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a13      	ldr	r2, [pc, #76]	@ (8001ba0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001b54:	fba2 2303 	umull	r2, r3, r2, r3
 8001b58:	0c9a      	lsrs	r2, r3, #18
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	4413      	add	r3, r2
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b64:	e002      	b.n	8001b6c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	3b01      	subs	r3, #1
 8001b6a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1f9      	bne.n	8001b66 <HAL_ADC_ConfigChannel+0x1b2>
 8001b72:	e007      	b.n	8001b84 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b78:	f043 0220 	orr.w	r2, r3, #32
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3714      	adds	r7, #20
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr
 8001b98:	40012400 	.word	0x40012400
 8001b9c:	20000000 	.word	0x20000000
 8001ba0:	431bde83 	.word	0x431bde83

08001ba4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001bac:	2300      	movs	r3, #0
 8001bae:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d12e      	bne.n	8001c1c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	689a      	ldr	r2, [r3, #8]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f022 0201 	bic.w	r2, r2, #1
 8001bcc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001bce:	f7ff fe0f 	bl	80017f0 <HAL_GetTick>
 8001bd2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001bd4:	e01b      	b.n	8001c0e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001bd6:	f7ff fe0b 	bl	80017f0 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d914      	bls.n	8001c0e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d10d      	bne.n	8001c0e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bf6:	f043 0210 	orr.w	r2, r3, #16
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c02:	f043 0201 	orr.w	r2, r3, #1
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e007      	b.n	8001c1e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 0301 	and.w	r3, r3, #1
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d0dc      	beq.n	8001bd6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b084      	sub	sp, #16
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d101      	bne.n	8001c38 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e0ed      	b.n	8001e14 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d102      	bne.n	8001c4a <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f7ff fbe3 	bl	8001410 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f042 0201 	orr.w	r2, r2, #1
 8001c58:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c5a:	f7ff fdc9 	bl	80017f0 <HAL_GetTick>
 8001c5e:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c60:	e012      	b.n	8001c88 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c62:	f7ff fdc5 	bl	80017f0 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b0a      	cmp	r3, #10
 8001c6e:	d90b      	bls.n	8001c88 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c74:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2205      	movs	r2, #5
 8001c80:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e0c5      	b.n	8001e14 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d0e5      	beq.n	8001c62 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f022 0202 	bic.w	r2, r2, #2
 8001ca4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ca6:	f7ff fda3 	bl	80017f0 <HAL_GetTick>
 8001caa:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001cac:	e012      	b.n	8001cd4 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001cae:	f7ff fd9f 	bl	80017f0 <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	2b0a      	cmp	r3, #10
 8001cba:	d90b      	bls.n	8001cd4 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2205      	movs	r2, #5
 8001ccc:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e09f      	b.n	8001e14 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1e5      	bne.n	8001cae <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	7e1b      	ldrb	r3, [r3, #24]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d108      	bne.n	8001cfc <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	e007      	b.n	8001d0c <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d0a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	7e5b      	ldrb	r3, [r3, #25]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d108      	bne.n	8001d26 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	e007      	b.n	8001d36 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001d34:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	7e9b      	ldrb	r3, [r3, #26]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d108      	bne.n	8001d50 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f042 0220 	orr.w	r2, r2, #32
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	e007      	b.n	8001d60 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f022 0220 	bic.w	r2, r2, #32
 8001d5e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	7edb      	ldrb	r3, [r3, #27]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d108      	bne.n	8001d7a <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f022 0210 	bic.w	r2, r2, #16
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	e007      	b.n	8001d8a <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f042 0210 	orr.w	r2, r2, #16
 8001d88:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	7f1b      	ldrb	r3, [r3, #28]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d108      	bne.n	8001da4 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f042 0208 	orr.w	r2, r2, #8
 8001da0:	601a      	str	r2, [r3, #0]
 8001da2:	e007      	b.n	8001db4 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f022 0208 	bic.w	r2, r2, #8
 8001db2:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	7f5b      	ldrb	r3, [r3, #29]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d108      	bne.n	8001dce <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f042 0204 	orr.w	r2, r2, #4
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	e007      	b.n	8001dde <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f022 0204 	bic.w	r2, r2, #4
 8001ddc:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	689a      	ldr	r2, [r3, #8]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	431a      	orrs	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	431a      	orrs	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	695b      	ldr	r3, [r3, #20]
 8001df2:	ea42 0103 	orr.w	r1, r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	1e5a      	subs	r2, r3, #1
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	430a      	orrs	r2, r1
 8001e02:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3710      	adds	r7, #16
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d12e      	bne.n	8001e8e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2202      	movs	r2, #2
 8001e34:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f022 0201 	bic.w	r2, r2, #1
 8001e46:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001e48:	f7ff fcd2 	bl	80017f0 <HAL_GetTick>
 8001e4c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001e4e:	e012      	b.n	8001e76 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e50:	f7ff fcce 	bl	80017f0 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b0a      	cmp	r3, #10
 8001e5c:	d90b      	bls.n	8001e76 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e62:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2205      	movs	r2, #5
 8001e6e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e012      	b.n	8001e9c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f003 0301 	and.w	r3, r3, #1
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d1e5      	bne.n	8001e50 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	e006      	b.n	8001e9c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e92:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
  }
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3710      	adds	r7, #16
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001eb4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001eb6:	7bfb      	ldrb	r3, [r7, #15]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d002      	beq.n	8001ec2 <HAL_CAN_ActivateNotification+0x1e>
 8001ebc:	7bfb      	ldrb	r3, [r7, #15]
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d109      	bne.n	8001ed6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	6959      	ldr	r1, [r3, #20]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	683a      	ldr	r2, [r7, #0]
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	e006      	b.n	8001ee4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eda:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
  }
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3714      	adds	r7, #20
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bc80      	pop	{r7}
 8001eec:	4770      	bx	lr
	...

08001ef0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f003 0307 	and.w	r3, r3, #7
 8001efe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f00:	4b0c      	ldr	r3, [pc, #48]	@ (8001f34 <__NVIC_SetPriorityGrouping+0x44>)
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f06:	68ba      	ldr	r2, [r7, #8]
 8001f08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f22:	4a04      	ldr	r2, [pc, #16]	@ (8001f34 <__NVIC_SetPriorityGrouping+0x44>)
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	60d3      	str	r3, [r2, #12]
}
 8001f28:	bf00      	nop
 8001f2a:	3714      	adds	r7, #20
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bc80      	pop	{r7}
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	e000ed00 	.word	0xe000ed00

08001f38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f3c:	4b04      	ldr	r3, [pc, #16]	@ (8001f50 <__NVIC_GetPriorityGrouping+0x18>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	0a1b      	lsrs	r3, r3, #8
 8001f42:	f003 0307 	and.w	r3, r3, #7
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bc80      	pop	{r7}
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	e000ed00 	.word	0xe000ed00

08001f54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	6039      	str	r1, [r7, #0]
 8001f5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	db0a      	blt.n	8001f7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	b2da      	uxtb	r2, r3
 8001f6c:	490c      	ldr	r1, [pc, #48]	@ (8001fa0 <__NVIC_SetPriority+0x4c>)
 8001f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f72:	0112      	lsls	r2, r2, #4
 8001f74:	b2d2      	uxtb	r2, r2
 8001f76:	440b      	add	r3, r1
 8001f78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f7c:	e00a      	b.n	8001f94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	b2da      	uxtb	r2, r3
 8001f82:	4908      	ldr	r1, [pc, #32]	@ (8001fa4 <__NVIC_SetPriority+0x50>)
 8001f84:	79fb      	ldrb	r3, [r7, #7]
 8001f86:	f003 030f 	and.w	r3, r3, #15
 8001f8a:	3b04      	subs	r3, #4
 8001f8c:	0112      	lsls	r2, r2, #4
 8001f8e:	b2d2      	uxtb	r2, r2
 8001f90:	440b      	add	r3, r1
 8001f92:	761a      	strb	r2, [r3, #24]
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bc80      	pop	{r7}
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	e000e100 	.word	0xe000e100
 8001fa4:	e000ed00 	.word	0xe000ed00

08001fa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b089      	sub	sp, #36	@ 0x24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f003 0307 	and.w	r3, r3, #7
 8001fba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	f1c3 0307 	rsb	r3, r3, #7
 8001fc2:	2b04      	cmp	r3, #4
 8001fc4:	bf28      	it	cs
 8001fc6:	2304      	movcs	r3, #4
 8001fc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	3304      	adds	r3, #4
 8001fce:	2b06      	cmp	r3, #6
 8001fd0:	d902      	bls.n	8001fd8 <NVIC_EncodePriority+0x30>
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	3b03      	subs	r3, #3
 8001fd6:	e000      	b.n	8001fda <NVIC_EncodePriority+0x32>
 8001fd8:	2300      	movs	r3, #0
 8001fda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe6:	43da      	mvns	r2, r3
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	401a      	ands	r2, r3
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ff0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8001ffa:	43d9      	mvns	r1, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002000:	4313      	orrs	r3, r2
         );
}
 8002002:	4618      	mov	r0, r3
 8002004:	3724      	adds	r7, #36	@ 0x24
 8002006:	46bd      	mov	sp, r7
 8002008:	bc80      	pop	{r7}
 800200a:	4770      	bx	lr

0800200c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	3b01      	subs	r3, #1
 8002018:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800201c:	d301      	bcc.n	8002022 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800201e:	2301      	movs	r3, #1
 8002020:	e00f      	b.n	8002042 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002022:	4a0a      	ldr	r2, [pc, #40]	@ (800204c <SysTick_Config+0x40>)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	3b01      	subs	r3, #1
 8002028:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800202a:	210f      	movs	r1, #15
 800202c:	f04f 30ff 	mov.w	r0, #4294967295
 8002030:	f7ff ff90 	bl	8001f54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002034:	4b05      	ldr	r3, [pc, #20]	@ (800204c <SysTick_Config+0x40>)
 8002036:	2200      	movs	r2, #0
 8002038:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800203a:	4b04      	ldr	r3, [pc, #16]	@ (800204c <SysTick_Config+0x40>)
 800203c:	2207      	movs	r2, #7
 800203e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	e000e010 	.word	0xe000e010

08002050 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f7ff ff49 	bl	8001ef0 <__NVIC_SetPriorityGrouping>
}
 800205e:	bf00      	nop
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002066:	b580      	push	{r7, lr}
 8002068:	b086      	sub	sp, #24
 800206a:	af00      	add	r7, sp, #0
 800206c:	4603      	mov	r3, r0
 800206e:	60b9      	str	r1, [r7, #8]
 8002070:	607a      	str	r2, [r7, #4]
 8002072:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002074:	2300      	movs	r3, #0
 8002076:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002078:	f7ff ff5e 	bl	8001f38 <__NVIC_GetPriorityGrouping>
 800207c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	68b9      	ldr	r1, [r7, #8]
 8002082:	6978      	ldr	r0, [r7, #20]
 8002084:	f7ff ff90 	bl	8001fa8 <NVIC_EncodePriority>
 8002088:	4602      	mov	r2, r0
 800208a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800208e:	4611      	mov	r1, r2
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff ff5f 	bl	8001f54 <__NVIC_SetPriority>
}
 8002096:	bf00      	nop
 8002098:	3718      	adds	r7, #24
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b082      	sub	sp, #8
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7ff ffb0 	bl	800200c <SysTick_Config>
 80020ac:	4603      	mov	r3, r0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
	...

080020b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b08b      	sub	sp, #44	@ 0x2c
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020c2:	2300      	movs	r3, #0
 80020c4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80020c6:	2300      	movs	r3, #0
 80020c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020ca:	e161      	b.n	8002390 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80020cc:	2201      	movs	r2, #1
 80020ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	69fa      	ldr	r2, [r7, #28]
 80020dc:	4013      	ands	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	f040 8150 	bne.w	800238a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	4a97      	ldr	r2, [pc, #604]	@ (800234c <HAL_GPIO_Init+0x294>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d05e      	beq.n	80021b2 <HAL_GPIO_Init+0xfa>
 80020f4:	4a95      	ldr	r2, [pc, #596]	@ (800234c <HAL_GPIO_Init+0x294>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d875      	bhi.n	80021e6 <HAL_GPIO_Init+0x12e>
 80020fa:	4a95      	ldr	r2, [pc, #596]	@ (8002350 <HAL_GPIO_Init+0x298>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d058      	beq.n	80021b2 <HAL_GPIO_Init+0xfa>
 8002100:	4a93      	ldr	r2, [pc, #588]	@ (8002350 <HAL_GPIO_Init+0x298>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d86f      	bhi.n	80021e6 <HAL_GPIO_Init+0x12e>
 8002106:	4a93      	ldr	r2, [pc, #588]	@ (8002354 <HAL_GPIO_Init+0x29c>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d052      	beq.n	80021b2 <HAL_GPIO_Init+0xfa>
 800210c:	4a91      	ldr	r2, [pc, #580]	@ (8002354 <HAL_GPIO_Init+0x29c>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d869      	bhi.n	80021e6 <HAL_GPIO_Init+0x12e>
 8002112:	4a91      	ldr	r2, [pc, #580]	@ (8002358 <HAL_GPIO_Init+0x2a0>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d04c      	beq.n	80021b2 <HAL_GPIO_Init+0xfa>
 8002118:	4a8f      	ldr	r2, [pc, #572]	@ (8002358 <HAL_GPIO_Init+0x2a0>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d863      	bhi.n	80021e6 <HAL_GPIO_Init+0x12e>
 800211e:	4a8f      	ldr	r2, [pc, #572]	@ (800235c <HAL_GPIO_Init+0x2a4>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d046      	beq.n	80021b2 <HAL_GPIO_Init+0xfa>
 8002124:	4a8d      	ldr	r2, [pc, #564]	@ (800235c <HAL_GPIO_Init+0x2a4>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d85d      	bhi.n	80021e6 <HAL_GPIO_Init+0x12e>
 800212a:	2b12      	cmp	r3, #18
 800212c:	d82a      	bhi.n	8002184 <HAL_GPIO_Init+0xcc>
 800212e:	2b12      	cmp	r3, #18
 8002130:	d859      	bhi.n	80021e6 <HAL_GPIO_Init+0x12e>
 8002132:	a201      	add	r2, pc, #4	@ (adr r2, 8002138 <HAL_GPIO_Init+0x80>)
 8002134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002138:	080021b3 	.word	0x080021b3
 800213c:	0800218d 	.word	0x0800218d
 8002140:	0800219f 	.word	0x0800219f
 8002144:	080021e1 	.word	0x080021e1
 8002148:	080021e7 	.word	0x080021e7
 800214c:	080021e7 	.word	0x080021e7
 8002150:	080021e7 	.word	0x080021e7
 8002154:	080021e7 	.word	0x080021e7
 8002158:	080021e7 	.word	0x080021e7
 800215c:	080021e7 	.word	0x080021e7
 8002160:	080021e7 	.word	0x080021e7
 8002164:	080021e7 	.word	0x080021e7
 8002168:	080021e7 	.word	0x080021e7
 800216c:	080021e7 	.word	0x080021e7
 8002170:	080021e7 	.word	0x080021e7
 8002174:	080021e7 	.word	0x080021e7
 8002178:	080021e7 	.word	0x080021e7
 800217c:	08002195 	.word	0x08002195
 8002180:	080021a9 	.word	0x080021a9
 8002184:	4a76      	ldr	r2, [pc, #472]	@ (8002360 <HAL_GPIO_Init+0x2a8>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d013      	beq.n	80021b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800218a:	e02c      	b.n	80021e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	623b      	str	r3, [r7, #32]
          break;
 8002192:	e029      	b.n	80021e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	3304      	adds	r3, #4
 800219a:	623b      	str	r3, [r7, #32]
          break;
 800219c:	e024      	b.n	80021e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	3308      	adds	r3, #8
 80021a4:	623b      	str	r3, [r7, #32]
          break;
 80021a6:	e01f      	b.n	80021e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	330c      	adds	r3, #12
 80021ae:	623b      	str	r3, [r7, #32]
          break;
 80021b0:	e01a      	b.n	80021e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d102      	bne.n	80021c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80021ba:	2304      	movs	r3, #4
 80021bc:	623b      	str	r3, [r7, #32]
          break;
 80021be:	e013      	b.n	80021e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d105      	bne.n	80021d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021c8:	2308      	movs	r3, #8
 80021ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	69fa      	ldr	r2, [r7, #28]
 80021d0:	611a      	str	r2, [r3, #16]
          break;
 80021d2:	e009      	b.n	80021e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021d4:	2308      	movs	r3, #8
 80021d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	69fa      	ldr	r2, [r7, #28]
 80021dc:	615a      	str	r2, [r3, #20]
          break;
 80021de:	e003      	b.n	80021e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80021e0:	2300      	movs	r3, #0
 80021e2:	623b      	str	r3, [r7, #32]
          break;
 80021e4:	e000      	b.n	80021e8 <HAL_GPIO_Init+0x130>
          break;
 80021e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	2bff      	cmp	r3, #255	@ 0xff
 80021ec:	d801      	bhi.n	80021f2 <HAL_GPIO_Init+0x13a>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	e001      	b.n	80021f6 <HAL_GPIO_Init+0x13e>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	3304      	adds	r3, #4
 80021f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	2bff      	cmp	r3, #255	@ 0xff
 80021fc:	d802      	bhi.n	8002204 <HAL_GPIO_Init+0x14c>
 80021fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	e002      	b.n	800220a <HAL_GPIO_Init+0x152>
 8002204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002206:	3b08      	subs	r3, #8
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	210f      	movs	r1, #15
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	fa01 f303 	lsl.w	r3, r1, r3
 8002218:	43db      	mvns	r3, r3
 800221a:	401a      	ands	r2, r3
 800221c:	6a39      	ldr	r1, [r7, #32]
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	fa01 f303 	lsl.w	r3, r1, r3
 8002224:	431a      	orrs	r2, r3
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002232:	2b00      	cmp	r3, #0
 8002234:	f000 80a9 	beq.w	800238a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002238:	4b4a      	ldr	r3, [pc, #296]	@ (8002364 <HAL_GPIO_Init+0x2ac>)
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	4a49      	ldr	r2, [pc, #292]	@ (8002364 <HAL_GPIO_Init+0x2ac>)
 800223e:	f043 0301 	orr.w	r3, r3, #1
 8002242:	6193      	str	r3, [r2, #24]
 8002244:	4b47      	ldr	r3, [pc, #284]	@ (8002364 <HAL_GPIO_Init+0x2ac>)
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	60bb      	str	r3, [r7, #8]
 800224e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002250:	4a45      	ldr	r2, [pc, #276]	@ (8002368 <HAL_GPIO_Init+0x2b0>)
 8002252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002254:	089b      	lsrs	r3, r3, #2
 8002256:	3302      	adds	r3, #2
 8002258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800225c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800225e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002260:	f003 0303 	and.w	r3, r3, #3
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	220f      	movs	r2, #15
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	43db      	mvns	r3, r3
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	4013      	ands	r3, r2
 8002272:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a3d      	ldr	r2, [pc, #244]	@ (800236c <HAL_GPIO_Init+0x2b4>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d00d      	beq.n	8002298 <HAL_GPIO_Init+0x1e0>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a3c      	ldr	r2, [pc, #240]	@ (8002370 <HAL_GPIO_Init+0x2b8>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d007      	beq.n	8002294 <HAL_GPIO_Init+0x1dc>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a3b      	ldr	r2, [pc, #236]	@ (8002374 <HAL_GPIO_Init+0x2bc>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d101      	bne.n	8002290 <HAL_GPIO_Init+0x1d8>
 800228c:	2302      	movs	r3, #2
 800228e:	e004      	b.n	800229a <HAL_GPIO_Init+0x1e2>
 8002290:	2303      	movs	r3, #3
 8002292:	e002      	b.n	800229a <HAL_GPIO_Init+0x1e2>
 8002294:	2301      	movs	r3, #1
 8002296:	e000      	b.n	800229a <HAL_GPIO_Init+0x1e2>
 8002298:	2300      	movs	r3, #0
 800229a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800229c:	f002 0203 	and.w	r2, r2, #3
 80022a0:	0092      	lsls	r2, r2, #2
 80022a2:	4093      	lsls	r3, r2
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80022aa:	492f      	ldr	r1, [pc, #188]	@ (8002368 <HAL_GPIO_Init+0x2b0>)
 80022ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ae:	089b      	lsrs	r3, r3, #2
 80022b0:	3302      	adds	r3, #2
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d006      	beq.n	80022d2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022c4:	4b2c      	ldr	r3, [pc, #176]	@ (8002378 <HAL_GPIO_Init+0x2c0>)
 80022c6:	689a      	ldr	r2, [r3, #8]
 80022c8:	492b      	ldr	r1, [pc, #172]	@ (8002378 <HAL_GPIO_Init+0x2c0>)
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	608b      	str	r3, [r1, #8]
 80022d0:	e006      	b.n	80022e0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022d2:	4b29      	ldr	r3, [pc, #164]	@ (8002378 <HAL_GPIO_Init+0x2c0>)
 80022d4:	689a      	ldr	r2, [r3, #8]
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	43db      	mvns	r3, r3
 80022da:	4927      	ldr	r1, [pc, #156]	@ (8002378 <HAL_GPIO_Init+0x2c0>)
 80022dc:	4013      	ands	r3, r2
 80022de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d006      	beq.n	80022fa <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022ec:	4b22      	ldr	r3, [pc, #136]	@ (8002378 <HAL_GPIO_Init+0x2c0>)
 80022ee:	68da      	ldr	r2, [r3, #12]
 80022f0:	4921      	ldr	r1, [pc, #132]	@ (8002378 <HAL_GPIO_Init+0x2c0>)
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	60cb      	str	r3, [r1, #12]
 80022f8:	e006      	b.n	8002308 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022fa:	4b1f      	ldr	r3, [pc, #124]	@ (8002378 <HAL_GPIO_Init+0x2c0>)
 80022fc:	68da      	ldr	r2, [r3, #12]
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	43db      	mvns	r3, r3
 8002302:	491d      	ldr	r1, [pc, #116]	@ (8002378 <HAL_GPIO_Init+0x2c0>)
 8002304:	4013      	ands	r3, r2
 8002306:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d006      	beq.n	8002322 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002314:	4b18      	ldr	r3, [pc, #96]	@ (8002378 <HAL_GPIO_Init+0x2c0>)
 8002316:	685a      	ldr	r2, [r3, #4]
 8002318:	4917      	ldr	r1, [pc, #92]	@ (8002378 <HAL_GPIO_Init+0x2c0>)
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	4313      	orrs	r3, r2
 800231e:	604b      	str	r3, [r1, #4]
 8002320:	e006      	b.n	8002330 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002322:	4b15      	ldr	r3, [pc, #84]	@ (8002378 <HAL_GPIO_Init+0x2c0>)
 8002324:	685a      	ldr	r2, [r3, #4]
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	43db      	mvns	r3, r3
 800232a:	4913      	ldr	r1, [pc, #76]	@ (8002378 <HAL_GPIO_Init+0x2c0>)
 800232c:	4013      	ands	r3, r2
 800232e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d01f      	beq.n	800237c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800233c:	4b0e      	ldr	r3, [pc, #56]	@ (8002378 <HAL_GPIO_Init+0x2c0>)
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	490d      	ldr	r1, [pc, #52]	@ (8002378 <HAL_GPIO_Init+0x2c0>)
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	4313      	orrs	r3, r2
 8002346:	600b      	str	r3, [r1, #0]
 8002348:	e01f      	b.n	800238a <HAL_GPIO_Init+0x2d2>
 800234a:	bf00      	nop
 800234c:	10320000 	.word	0x10320000
 8002350:	10310000 	.word	0x10310000
 8002354:	10220000 	.word	0x10220000
 8002358:	10210000 	.word	0x10210000
 800235c:	10120000 	.word	0x10120000
 8002360:	10110000 	.word	0x10110000
 8002364:	40021000 	.word	0x40021000
 8002368:	40010000 	.word	0x40010000
 800236c:	40010800 	.word	0x40010800
 8002370:	40010c00 	.word	0x40010c00
 8002374:	40011000 	.word	0x40011000
 8002378:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800237c:	4b0b      	ldr	r3, [pc, #44]	@ (80023ac <HAL_GPIO_Init+0x2f4>)
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	43db      	mvns	r3, r3
 8002384:	4909      	ldr	r1, [pc, #36]	@ (80023ac <HAL_GPIO_Init+0x2f4>)
 8002386:	4013      	ands	r3, r2
 8002388:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800238a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800238c:	3301      	adds	r3, #1
 800238e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002396:	fa22 f303 	lsr.w	r3, r2, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	f47f ae96 	bne.w	80020cc <HAL_GPIO_Init+0x14>
  }
}
 80023a0:	bf00      	nop
 80023a2:	bf00      	nop
 80023a4:	372c      	adds	r7, #44	@ 0x2c
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bc80      	pop	{r7}
 80023aa:	4770      	bx	lr
 80023ac:	40010400 	.word	0x40010400

080023b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	460b      	mov	r3, r1
 80023ba:	807b      	strh	r3, [r7, #2]
 80023bc:	4613      	mov	r3, r2
 80023be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023c0:	787b      	ldrb	r3, [r7, #1]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023c6:	887a      	ldrh	r2, [r7, #2]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80023cc:	e003      	b.n	80023d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023ce:	887b      	ldrh	r3, [r7, #2]
 80023d0:	041a      	lsls	r2, r3, #16
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	611a      	str	r2, [r3, #16]
}
 80023d6:	bf00      	nop
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	bc80      	pop	{r7}
 80023de:	4770      	bx	lr

080023e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e272      	b.n	80028d8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f000 8087 	beq.w	800250e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002400:	4b92      	ldr	r3, [pc, #584]	@ (800264c <HAL_RCC_OscConfig+0x26c>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f003 030c 	and.w	r3, r3, #12
 8002408:	2b04      	cmp	r3, #4
 800240a:	d00c      	beq.n	8002426 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800240c:	4b8f      	ldr	r3, [pc, #572]	@ (800264c <HAL_RCC_OscConfig+0x26c>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f003 030c 	and.w	r3, r3, #12
 8002414:	2b08      	cmp	r3, #8
 8002416:	d112      	bne.n	800243e <HAL_RCC_OscConfig+0x5e>
 8002418:	4b8c      	ldr	r3, [pc, #560]	@ (800264c <HAL_RCC_OscConfig+0x26c>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002420:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002424:	d10b      	bne.n	800243e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002426:	4b89      	ldr	r3, [pc, #548]	@ (800264c <HAL_RCC_OscConfig+0x26c>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d06c      	beq.n	800250c <HAL_RCC_OscConfig+0x12c>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d168      	bne.n	800250c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e24c      	b.n	80028d8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002446:	d106      	bne.n	8002456 <HAL_RCC_OscConfig+0x76>
 8002448:	4b80      	ldr	r3, [pc, #512]	@ (800264c <HAL_RCC_OscConfig+0x26c>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a7f      	ldr	r2, [pc, #508]	@ (800264c <HAL_RCC_OscConfig+0x26c>)
 800244e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002452:	6013      	str	r3, [r2, #0]
 8002454:	e02e      	b.n	80024b4 <HAL_RCC_OscConfig+0xd4>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d10c      	bne.n	8002478 <HAL_RCC_OscConfig+0x98>
 800245e:	4b7b      	ldr	r3, [pc, #492]	@ (800264c <HAL_RCC_OscConfig+0x26c>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a7a      	ldr	r2, [pc, #488]	@ (800264c <HAL_RCC_OscConfig+0x26c>)
 8002464:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002468:	6013      	str	r3, [r2, #0]
 800246a:	4b78      	ldr	r3, [pc, #480]	@ (800264c <HAL_RCC_OscConfig+0x26c>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a77      	ldr	r2, [pc, #476]	@ (800264c <HAL_RCC_OscConfig+0x26c>)
 8002470:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002474:	6013      	str	r3, [r2, #0]
 8002476:	e01d      	b.n	80024b4 <HAL_RCC_OscConfig+0xd4>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002480:	d10c      	bne.n	800249c <HAL_RCC_OscConfig+0xbc>
 8002482:	4b72      	ldr	r3, [pc, #456]	@ (800264c <HAL_RCC_OscConfig+0x26c>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a71      	ldr	r2, [pc, #452]	@ (800264c <HAL_RCC_OscConfig+0x26c>)
 8002488:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800248c:	6013      	str	r3, [r2, #0]
 800248e:	4b6f      	ldr	r3, [pc, #444]	@ (800264c <HAL_RCC_OscConfig+0x26c>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a6e      	ldr	r2, [pc, #440]	@ (800264c <HAL_RCC_OscConfig+0x26c>)
 8002494:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002498:	6013      	str	r3, [r2, #0]
 800249a:	e00b      	b.n	80024b4 <HAL_RCC_OscConfig+0xd4>
 800249c:	4b6b      	ldr	r3, [pc, #428]	@ (800264c <HAL_RCC_OscConfig+0x26c>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a6a      	ldr	r2, [pc, #424]	@ (800264c <HAL_RCC_OscConfig+0x26c>)
 80024a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024a6:	6013      	str	r3, [r2, #0]
 80024a8:	4b68      	ldr	r3, [pc, #416]	@ (800264c <HAL_RCC_OscConfig+0x26c>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a67      	ldr	r2, [pc, #412]	@ (800264c <HAL_RCC_OscConfig+0x26c>)
 80024ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d013      	beq.n	80024e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024bc:	f7ff f998 	bl	80017f0 <HAL_GetTick>
 80024c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024c2:	e008      	b.n	80024d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024c4:	f7ff f994 	bl	80017f0 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b64      	cmp	r3, #100	@ 0x64
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e200      	b.n	80028d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024d6:	4b5d      	ldr	r3, [pc, #372]	@ (800264c <HAL_RCC_OscConfig+0x26c>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f0      	beq.n	80024c4 <HAL_RCC_OscConfig+0xe4>
 80024e2:	e014      	b.n	800250e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e4:	f7ff f984 	bl	80017f0 <HAL_GetTick>
 80024e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ea:	e008      	b.n	80024fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024ec:	f7ff f980 	bl	80017f0 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b64      	cmp	r3, #100	@ 0x64
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e1ec      	b.n	80028d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024fe:	4b53      	ldr	r3, [pc, #332]	@ (800264c <HAL_RCC_OscConfig+0x26c>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d1f0      	bne.n	80024ec <HAL_RCC_OscConfig+0x10c>
 800250a:	e000      	b.n	800250e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800250c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d063      	beq.n	80025e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800251a:	4b4c      	ldr	r3, [pc, #304]	@ (800264c <HAL_RCC_OscConfig+0x26c>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f003 030c 	and.w	r3, r3, #12
 8002522:	2b00      	cmp	r3, #0
 8002524:	d00b      	beq.n	800253e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002526:	4b49      	ldr	r3, [pc, #292]	@ (800264c <HAL_RCC_OscConfig+0x26c>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f003 030c 	and.w	r3, r3, #12
 800252e:	2b08      	cmp	r3, #8
 8002530:	d11c      	bne.n	800256c <HAL_RCC_OscConfig+0x18c>
 8002532:	4b46      	ldr	r3, [pc, #280]	@ (800264c <HAL_RCC_OscConfig+0x26c>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d116      	bne.n	800256c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800253e:	4b43      	ldr	r3, [pc, #268]	@ (800264c <HAL_RCC_OscConfig+0x26c>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d005      	beq.n	8002556 <HAL_RCC_OscConfig+0x176>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d001      	beq.n	8002556 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e1c0      	b.n	80028d8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002556:	4b3d      	ldr	r3, [pc, #244]	@ (800264c <HAL_RCC_OscConfig+0x26c>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	4939      	ldr	r1, [pc, #228]	@ (800264c <HAL_RCC_OscConfig+0x26c>)
 8002566:	4313      	orrs	r3, r2
 8002568:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800256a:	e03a      	b.n	80025e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d020      	beq.n	80025b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002574:	4b36      	ldr	r3, [pc, #216]	@ (8002650 <HAL_RCC_OscConfig+0x270>)
 8002576:	2201      	movs	r2, #1
 8002578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257a:	f7ff f939 	bl	80017f0 <HAL_GetTick>
 800257e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002580:	e008      	b.n	8002594 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002582:	f7ff f935 	bl	80017f0 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d901      	bls.n	8002594 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e1a1      	b.n	80028d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002594:	4b2d      	ldr	r3, [pc, #180]	@ (800264c <HAL_RCC_OscConfig+0x26c>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d0f0      	beq.n	8002582 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a0:	4b2a      	ldr	r3, [pc, #168]	@ (800264c <HAL_RCC_OscConfig+0x26c>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	695b      	ldr	r3, [r3, #20]
 80025ac:	00db      	lsls	r3, r3, #3
 80025ae:	4927      	ldr	r1, [pc, #156]	@ (800264c <HAL_RCC_OscConfig+0x26c>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	600b      	str	r3, [r1, #0]
 80025b4:	e015      	b.n	80025e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025b6:	4b26      	ldr	r3, [pc, #152]	@ (8002650 <HAL_RCC_OscConfig+0x270>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025bc:	f7ff f918 	bl	80017f0 <HAL_GetTick>
 80025c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025c4:	f7ff f914 	bl	80017f0 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e180      	b.n	80028d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025d6:	4b1d      	ldr	r3, [pc, #116]	@ (800264c <HAL_RCC_OscConfig+0x26c>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d1f0      	bne.n	80025c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0308 	and.w	r3, r3, #8
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d03a      	beq.n	8002664 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d019      	beq.n	800262a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025f6:	4b17      	ldr	r3, [pc, #92]	@ (8002654 <HAL_RCC_OscConfig+0x274>)
 80025f8:	2201      	movs	r2, #1
 80025fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025fc:	f7ff f8f8 	bl	80017f0 <HAL_GetTick>
 8002600:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002602:	e008      	b.n	8002616 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002604:	f7ff f8f4 	bl	80017f0 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e160      	b.n	80028d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002616:	4b0d      	ldr	r3, [pc, #52]	@ (800264c <HAL_RCC_OscConfig+0x26c>)
 8002618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d0f0      	beq.n	8002604 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002622:	2001      	movs	r0, #1
 8002624:	f000 fa9c 	bl	8002b60 <RCC_Delay>
 8002628:	e01c      	b.n	8002664 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800262a:	4b0a      	ldr	r3, [pc, #40]	@ (8002654 <HAL_RCC_OscConfig+0x274>)
 800262c:	2200      	movs	r2, #0
 800262e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002630:	f7ff f8de 	bl	80017f0 <HAL_GetTick>
 8002634:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002636:	e00f      	b.n	8002658 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002638:	f7ff f8da 	bl	80017f0 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b02      	cmp	r3, #2
 8002644:	d908      	bls.n	8002658 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e146      	b.n	80028d8 <HAL_RCC_OscConfig+0x4f8>
 800264a:	bf00      	nop
 800264c:	40021000 	.word	0x40021000
 8002650:	42420000 	.word	0x42420000
 8002654:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002658:	4b92      	ldr	r3, [pc, #584]	@ (80028a4 <HAL_RCC_OscConfig+0x4c4>)
 800265a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d1e9      	bne.n	8002638 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0304 	and.w	r3, r3, #4
 800266c:	2b00      	cmp	r3, #0
 800266e:	f000 80a6 	beq.w	80027be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002672:	2300      	movs	r3, #0
 8002674:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002676:	4b8b      	ldr	r3, [pc, #556]	@ (80028a4 <HAL_RCC_OscConfig+0x4c4>)
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d10d      	bne.n	800269e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002682:	4b88      	ldr	r3, [pc, #544]	@ (80028a4 <HAL_RCC_OscConfig+0x4c4>)
 8002684:	69db      	ldr	r3, [r3, #28]
 8002686:	4a87      	ldr	r2, [pc, #540]	@ (80028a4 <HAL_RCC_OscConfig+0x4c4>)
 8002688:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800268c:	61d3      	str	r3, [r2, #28]
 800268e:	4b85      	ldr	r3, [pc, #532]	@ (80028a4 <HAL_RCC_OscConfig+0x4c4>)
 8002690:	69db      	ldr	r3, [r3, #28]
 8002692:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002696:	60bb      	str	r3, [r7, #8]
 8002698:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800269a:	2301      	movs	r3, #1
 800269c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800269e:	4b82      	ldr	r3, [pc, #520]	@ (80028a8 <HAL_RCC_OscConfig+0x4c8>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d118      	bne.n	80026dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026aa:	4b7f      	ldr	r3, [pc, #508]	@ (80028a8 <HAL_RCC_OscConfig+0x4c8>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a7e      	ldr	r2, [pc, #504]	@ (80028a8 <HAL_RCC_OscConfig+0x4c8>)
 80026b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026b6:	f7ff f89b 	bl	80017f0 <HAL_GetTick>
 80026ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026bc:	e008      	b.n	80026d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026be:	f7ff f897 	bl	80017f0 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	2b64      	cmp	r3, #100	@ 0x64
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e103      	b.n	80028d8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d0:	4b75      	ldr	r3, [pc, #468]	@ (80028a8 <HAL_RCC_OscConfig+0x4c8>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d0f0      	beq.n	80026be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d106      	bne.n	80026f2 <HAL_RCC_OscConfig+0x312>
 80026e4:	4b6f      	ldr	r3, [pc, #444]	@ (80028a4 <HAL_RCC_OscConfig+0x4c4>)
 80026e6:	6a1b      	ldr	r3, [r3, #32]
 80026e8:	4a6e      	ldr	r2, [pc, #440]	@ (80028a4 <HAL_RCC_OscConfig+0x4c4>)
 80026ea:	f043 0301 	orr.w	r3, r3, #1
 80026ee:	6213      	str	r3, [r2, #32]
 80026f0:	e02d      	b.n	800274e <HAL_RCC_OscConfig+0x36e>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d10c      	bne.n	8002714 <HAL_RCC_OscConfig+0x334>
 80026fa:	4b6a      	ldr	r3, [pc, #424]	@ (80028a4 <HAL_RCC_OscConfig+0x4c4>)
 80026fc:	6a1b      	ldr	r3, [r3, #32]
 80026fe:	4a69      	ldr	r2, [pc, #420]	@ (80028a4 <HAL_RCC_OscConfig+0x4c4>)
 8002700:	f023 0301 	bic.w	r3, r3, #1
 8002704:	6213      	str	r3, [r2, #32]
 8002706:	4b67      	ldr	r3, [pc, #412]	@ (80028a4 <HAL_RCC_OscConfig+0x4c4>)
 8002708:	6a1b      	ldr	r3, [r3, #32]
 800270a:	4a66      	ldr	r2, [pc, #408]	@ (80028a4 <HAL_RCC_OscConfig+0x4c4>)
 800270c:	f023 0304 	bic.w	r3, r3, #4
 8002710:	6213      	str	r3, [r2, #32]
 8002712:	e01c      	b.n	800274e <HAL_RCC_OscConfig+0x36e>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	2b05      	cmp	r3, #5
 800271a:	d10c      	bne.n	8002736 <HAL_RCC_OscConfig+0x356>
 800271c:	4b61      	ldr	r3, [pc, #388]	@ (80028a4 <HAL_RCC_OscConfig+0x4c4>)
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	4a60      	ldr	r2, [pc, #384]	@ (80028a4 <HAL_RCC_OscConfig+0x4c4>)
 8002722:	f043 0304 	orr.w	r3, r3, #4
 8002726:	6213      	str	r3, [r2, #32]
 8002728:	4b5e      	ldr	r3, [pc, #376]	@ (80028a4 <HAL_RCC_OscConfig+0x4c4>)
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	4a5d      	ldr	r2, [pc, #372]	@ (80028a4 <HAL_RCC_OscConfig+0x4c4>)
 800272e:	f043 0301 	orr.w	r3, r3, #1
 8002732:	6213      	str	r3, [r2, #32]
 8002734:	e00b      	b.n	800274e <HAL_RCC_OscConfig+0x36e>
 8002736:	4b5b      	ldr	r3, [pc, #364]	@ (80028a4 <HAL_RCC_OscConfig+0x4c4>)
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	4a5a      	ldr	r2, [pc, #360]	@ (80028a4 <HAL_RCC_OscConfig+0x4c4>)
 800273c:	f023 0301 	bic.w	r3, r3, #1
 8002740:	6213      	str	r3, [r2, #32]
 8002742:	4b58      	ldr	r3, [pc, #352]	@ (80028a4 <HAL_RCC_OscConfig+0x4c4>)
 8002744:	6a1b      	ldr	r3, [r3, #32]
 8002746:	4a57      	ldr	r2, [pc, #348]	@ (80028a4 <HAL_RCC_OscConfig+0x4c4>)
 8002748:	f023 0304 	bic.w	r3, r3, #4
 800274c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d015      	beq.n	8002782 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002756:	f7ff f84b 	bl	80017f0 <HAL_GetTick>
 800275a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800275c:	e00a      	b.n	8002774 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800275e:	f7ff f847 	bl	80017f0 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	f241 3288 	movw	r2, #5000	@ 0x1388
 800276c:	4293      	cmp	r3, r2
 800276e:	d901      	bls.n	8002774 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e0b1      	b.n	80028d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002774:	4b4b      	ldr	r3, [pc, #300]	@ (80028a4 <HAL_RCC_OscConfig+0x4c4>)
 8002776:	6a1b      	ldr	r3, [r3, #32]
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d0ee      	beq.n	800275e <HAL_RCC_OscConfig+0x37e>
 8002780:	e014      	b.n	80027ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002782:	f7ff f835 	bl	80017f0 <HAL_GetTick>
 8002786:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002788:	e00a      	b.n	80027a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800278a:	f7ff f831 	bl	80017f0 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002798:	4293      	cmp	r3, r2
 800279a:	d901      	bls.n	80027a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e09b      	b.n	80028d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027a0:	4b40      	ldr	r3, [pc, #256]	@ (80028a4 <HAL_RCC_OscConfig+0x4c4>)
 80027a2:	6a1b      	ldr	r3, [r3, #32]
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d1ee      	bne.n	800278a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027ac:	7dfb      	ldrb	r3, [r7, #23]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d105      	bne.n	80027be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027b2:	4b3c      	ldr	r3, [pc, #240]	@ (80028a4 <HAL_RCC_OscConfig+0x4c4>)
 80027b4:	69db      	ldr	r3, [r3, #28]
 80027b6:	4a3b      	ldr	r2, [pc, #236]	@ (80028a4 <HAL_RCC_OscConfig+0x4c4>)
 80027b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	69db      	ldr	r3, [r3, #28]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f000 8087 	beq.w	80028d6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027c8:	4b36      	ldr	r3, [pc, #216]	@ (80028a4 <HAL_RCC_OscConfig+0x4c4>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f003 030c 	and.w	r3, r3, #12
 80027d0:	2b08      	cmp	r3, #8
 80027d2:	d061      	beq.n	8002898 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	69db      	ldr	r3, [r3, #28]
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d146      	bne.n	800286a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027dc:	4b33      	ldr	r3, [pc, #204]	@ (80028ac <HAL_RCC_OscConfig+0x4cc>)
 80027de:	2200      	movs	r2, #0
 80027e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e2:	f7ff f805 	bl	80017f0 <HAL_GetTick>
 80027e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027e8:	e008      	b.n	80027fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ea:	f7ff f801 	bl	80017f0 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d901      	bls.n	80027fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e06d      	b.n	80028d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027fc:	4b29      	ldr	r3, [pc, #164]	@ (80028a4 <HAL_RCC_OscConfig+0x4c4>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1f0      	bne.n	80027ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a1b      	ldr	r3, [r3, #32]
 800280c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002810:	d108      	bne.n	8002824 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002812:	4b24      	ldr	r3, [pc, #144]	@ (80028a4 <HAL_RCC_OscConfig+0x4c4>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	4921      	ldr	r1, [pc, #132]	@ (80028a4 <HAL_RCC_OscConfig+0x4c4>)
 8002820:	4313      	orrs	r3, r2
 8002822:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002824:	4b1f      	ldr	r3, [pc, #124]	@ (80028a4 <HAL_RCC_OscConfig+0x4c4>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a19      	ldr	r1, [r3, #32]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002834:	430b      	orrs	r3, r1
 8002836:	491b      	ldr	r1, [pc, #108]	@ (80028a4 <HAL_RCC_OscConfig+0x4c4>)
 8002838:	4313      	orrs	r3, r2
 800283a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800283c:	4b1b      	ldr	r3, [pc, #108]	@ (80028ac <HAL_RCC_OscConfig+0x4cc>)
 800283e:	2201      	movs	r2, #1
 8002840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002842:	f7fe ffd5 	bl	80017f0 <HAL_GetTick>
 8002846:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002848:	e008      	b.n	800285c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800284a:	f7fe ffd1 	bl	80017f0 <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	2b02      	cmp	r3, #2
 8002856:	d901      	bls.n	800285c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e03d      	b.n	80028d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800285c:	4b11      	ldr	r3, [pc, #68]	@ (80028a4 <HAL_RCC_OscConfig+0x4c4>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d0f0      	beq.n	800284a <HAL_RCC_OscConfig+0x46a>
 8002868:	e035      	b.n	80028d6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800286a:	4b10      	ldr	r3, [pc, #64]	@ (80028ac <HAL_RCC_OscConfig+0x4cc>)
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002870:	f7fe ffbe 	bl	80017f0 <HAL_GetTick>
 8002874:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002878:	f7fe ffba 	bl	80017f0 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e026      	b.n	80028d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800288a:	4b06      	ldr	r3, [pc, #24]	@ (80028a4 <HAL_RCC_OscConfig+0x4c4>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1f0      	bne.n	8002878 <HAL_RCC_OscConfig+0x498>
 8002896:	e01e      	b.n	80028d6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	69db      	ldr	r3, [r3, #28]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d107      	bne.n	80028b0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e019      	b.n	80028d8 <HAL_RCC_OscConfig+0x4f8>
 80028a4:	40021000 	.word	0x40021000
 80028a8:	40007000 	.word	0x40007000
 80028ac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028b0:	4b0b      	ldr	r3, [pc, #44]	@ (80028e0 <HAL_RCC_OscConfig+0x500>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a1b      	ldr	r3, [r3, #32]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d106      	bne.n	80028d2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d001      	beq.n	80028d6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e000      	b.n	80028d8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3718      	adds	r7, #24
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40021000 	.word	0x40021000

080028e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d101      	bne.n	80028f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e0d0      	b.n	8002a9a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028f8:	4b6a      	ldr	r3, [pc, #424]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1c0>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0307 	and.w	r3, r3, #7
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	429a      	cmp	r2, r3
 8002904:	d910      	bls.n	8002928 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002906:	4b67      	ldr	r3, [pc, #412]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f023 0207 	bic.w	r2, r3, #7
 800290e:	4965      	ldr	r1, [pc, #404]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	4313      	orrs	r3, r2
 8002914:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002916:	4b63      	ldr	r3, [pc, #396]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0307 	and.w	r3, r3, #7
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	429a      	cmp	r2, r3
 8002922:	d001      	beq.n	8002928 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e0b8      	b.n	8002a9a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d020      	beq.n	8002976 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0304 	and.w	r3, r3, #4
 800293c:	2b00      	cmp	r3, #0
 800293e:	d005      	beq.n	800294c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002940:	4b59      	ldr	r3, [pc, #356]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	4a58      	ldr	r2, [pc, #352]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8002946:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800294a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0308 	and.w	r3, r3, #8
 8002954:	2b00      	cmp	r3, #0
 8002956:	d005      	beq.n	8002964 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002958:	4b53      	ldr	r3, [pc, #332]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1c4>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	4a52      	ldr	r2, [pc, #328]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1c4>)
 800295e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002962:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002964:	4b50      	ldr	r3, [pc, #320]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	494d      	ldr	r1, [pc, #308]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8002972:	4313      	orrs	r3, r2
 8002974:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	2b00      	cmp	r3, #0
 8002980:	d040      	beq.n	8002a04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d107      	bne.n	800299a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800298a:	4b47      	ldr	r3, [pc, #284]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1c4>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d115      	bne.n	80029c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e07f      	b.n	8002a9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d107      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029a2:	4b41      	ldr	r3, [pc, #260]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1c4>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d109      	bne.n	80029c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e073      	b.n	8002a9a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b2:	4b3d      	ldr	r3, [pc, #244]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1c4>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e06b      	b.n	8002a9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029c2:	4b39      	ldr	r3, [pc, #228]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1c4>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f023 0203 	bic.w	r2, r3, #3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	4936      	ldr	r1, [pc, #216]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1c4>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029d4:	f7fe ff0c 	bl	80017f0 <HAL_GetTick>
 80029d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029da:	e00a      	b.n	80029f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029dc:	f7fe ff08 	bl	80017f0 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e053      	b.n	8002a9a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029f2:	4b2d      	ldr	r3, [pc, #180]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1c4>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f003 020c 	and.w	r2, r3, #12
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d1eb      	bne.n	80029dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a04:	4b27      	ldr	r3, [pc, #156]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0307 	and.w	r3, r3, #7
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d210      	bcs.n	8002a34 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a12:	4b24      	ldr	r3, [pc, #144]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f023 0207 	bic.w	r2, r3, #7
 8002a1a:	4922      	ldr	r1, [pc, #136]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a22:	4b20      	ldr	r3, [pc, #128]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0307 	and.w	r3, r3, #7
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d001      	beq.n	8002a34 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e032      	b.n	8002a9a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d008      	beq.n	8002a52 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a40:	4b19      	ldr	r3, [pc, #100]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	4916      	ldr	r1, [pc, #88]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0308 	and.w	r3, r3, #8
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d009      	beq.n	8002a72 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a5e:	4b12      	ldr	r3, [pc, #72]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	490e      	ldr	r1, [pc, #56]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a72:	f000 f821 	bl	8002ab8 <HAL_RCC_GetSysClockFreq>
 8002a76:	4602      	mov	r2, r0
 8002a78:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	091b      	lsrs	r3, r3, #4
 8002a7e:	f003 030f 	and.w	r3, r3, #15
 8002a82:	490a      	ldr	r1, [pc, #40]	@ (8002aac <HAL_RCC_ClockConfig+0x1c8>)
 8002a84:	5ccb      	ldrb	r3, [r1, r3]
 8002a86:	fa22 f303 	lsr.w	r3, r2, r3
 8002a8a:	4a09      	ldr	r2, [pc, #36]	@ (8002ab0 <HAL_RCC_ClockConfig+0x1cc>)
 8002a8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a8e:	4b09      	ldr	r3, [pc, #36]	@ (8002ab4 <HAL_RCC_ClockConfig+0x1d0>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7fe fe6a 	bl	800176c <HAL_InitTick>

  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	40022000 	.word	0x40022000
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	0800378c 	.word	0x0800378c
 8002ab0:	20000000 	.word	0x20000000
 8002ab4:	20000004 	.word	0x20000004

08002ab8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b087      	sub	sp, #28
 8002abc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	60fb      	str	r3, [r7, #12]
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	60bb      	str	r3, [r7, #8]
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	617b      	str	r3, [r7, #20]
 8002aca:	2300      	movs	r3, #0
 8002acc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ad2:	4b1e      	ldr	r3, [pc, #120]	@ (8002b4c <HAL_RCC_GetSysClockFreq+0x94>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f003 030c 	and.w	r3, r3, #12
 8002ade:	2b04      	cmp	r3, #4
 8002ae0:	d002      	beq.n	8002ae8 <HAL_RCC_GetSysClockFreq+0x30>
 8002ae2:	2b08      	cmp	r3, #8
 8002ae4:	d003      	beq.n	8002aee <HAL_RCC_GetSysClockFreq+0x36>
 8002ae6:	e027      	b.n	8002b38 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ae8:	4b19      	ldr	r3, [pc, #100]	@ (8002b50 <HAL_RCC_GetSysClockFreq+0x98>)
 8002aea:	613b      	str	r3, [r7, #16]
      break;
 8002aec:	e027      	b.n	8002b3e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	0c9b      	lsrs	r3, r3, #18
 8002af2:	f003 030f 	and.w	r3, r3, #15
 8002af6:	4a17      	ldr	r2, [pc, #92]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002af8:	5cd3      	ldrb	r3, [r2, r3]
 8002afa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d010      	beq.n	8002b28 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b06:	4b11      	ldr	r3, [pc, #68]	@ (8002b4c <HAL_RCC_GetSysClockFreq+0x94>)
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	0c5b      	lsrs	r3, r3, #17
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	4a11      	ldr	r2, [pc, #68]	@ (8002b58 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002b12:	5cd3      	ldrb	r3, [r2, r3]
 8002b14:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a0d      	ldr	r2, [pc, #52]	@ (8002b50 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b1a:	fb03 f202 	mul.w	r2, r3, r2
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b24:	617b      	str	r3, [r7, #20]
 8002b26:	e004      	b.n	8002b32 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4a0c      	ldr	r2, [pc, #48]	@ (8002b5c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b2c:	fb02 f303 	mul.w	r3, r2, r3
 8002b30:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	613b      	str	r3, [r7, #16]
      break;
 8002b36:	e002      	b.n	8002b3e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b38:	4b05      	ldr	r3, [pc, #20]	@ (8002b50 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b3a:	613b      	str	r3, [r7, #16]
      break;
 8002b3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b3e:	693b      	ldr	r3, [r7, #16]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	371c      	adds	r7, #28
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bc80      	pop	{r7}
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	40021000 	.word	0x40021000
 8002b50:	007a1200 	.word	0x007a1200
 8002b54:	0800379c 	.word	0x0800379c
 8002b58:	080037ac 	.word	0x080037ac
 8002b5c:	003d0900 	.word	0x003d0900

08002b60 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b68:	4b0a      	ldr	r3, [pc, #40]	@ (8002b94 <RCC_Delay+0x34>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a0a      	ldr	r2, [pc, #40]	@ (8002b98 <RCC_Delay+0x38>)
 8002b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b72:	0a5b      	lsrs	r3, r3, #9
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	fb02 f303 	mul.w	r3, r2, r3
 8002b7a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b7c:	bf00      	nop
  }
  while (Delay --);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	1e5a      	subs	r2, r3, #1
 8002b82:	60fa      	str	r2, [r7, #12]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d1f9      	bne.n	8002b7c <RCC_Delay+0x1c>
}
 8002b88:	bf00      	nop
 8002b8a:	bf00      	nop
 8002b8c:	3714      	adds	r7, #20
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bc80      	pop	{r7}
 8002b92:	4770      	bx	lr
 8002b94:	20000000 	.word	0x20000000
 8002b98:	10624dd3 	.word	0x10624dd3

08002b9c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	613b      	str	r3, [r7, #16]
 8002ba8:	2300      	movs	r3, #0
 8002baa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0301 	and.w	r3, r3, #1
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d07d      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bbc:	4b4f      	ldr	r3, [pc, #316]	@ (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bbe:	69db      	ldr	r3, [r3, #28]
 8002bc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d10d      	bne.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bc8:	4b4c      	ldr	r3, [pc, #304]	@ (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bca:	69db      	ldr	r3, [r3, #28]
 8002bcc:	4a4b      	ldr	r2, [pc, #300]	@ (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bd2:	61d3      	str	r3, [r2, #28]
 8002bd4:	4b49      	ldr	r3, [pc, #292]	@ (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bd6:	69db      	ldr	r3, [r3, #28]
 8002bd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bdc:	60bb      	str	r3, [r7, #8]
 8002bde:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002be0:	2301      	movs	r3, #1
 8002be2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002be4:	4b46      	ldr	r3, [pc, #280]	@ (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d118      	bne.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bf0:	4b43      	ldr	r3, [pc, #268]	@ (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a42      	ldr	r2, [pc, #264]	@ (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bf6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bfa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bfc:	f7fe fdf8 	bl	80017f0 <HAL_GetTick>
 8002c00:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c02:	e008      	b.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c04:	f7fe fdf4 	bl	80017f0 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b64      	cmp	r3, #100	@ 0x64
 8002c10:	d901      	bls.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e06d      	b.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c16:	4b3a      	ldr	r3, [pc, #232]	@ (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d0f0      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c22:	4b36      	ldr	r3, [pc, #216]	@ (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c2a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d02e      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d027      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c40:	4b2e      	ldr	r3, [pc, #184]	@ (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c42:	6a1b      	ldr	r3, [r3, #32]
 8002c44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c48:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c4a:	4b2e      	ldr	r3, [pc, #184]	@ (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c50:	4b2c      	ldr	r3, [pc, #176]	@ (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002c56:	4a29      	ldr	r2, [pc, #164]	@ (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d014      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c66:	f7fe fdc3 	bl	80017f0 <HAL_GetTick>
 8002c6a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c6c:	e00a      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c6e:	f7fe fdbf 	bl	80017f0 <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e036      	b.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c84:	4b1d      	ldr	r3, [pc, #116]	@ (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d0ee      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c90:	4b1a      	ldr	r3, [pc, #104]	@ (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c92:	6a1b      	ldr	r3, [r3, #32]
 8002c94:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	4917      	ldr	r1, [pc, #92]	@ (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ca2:	7dfb      	ldrb	r3, [r7, #23]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d105      	bne.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ca8:	4b14      	ldr	r3, [pc, #80]	@ (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002caa:	69db      	ldr	r3, [r3, #28]
 8002cac:	4a13      	ldr	r2, [pc, #76]	@ (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cb2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0302 	and.w	r3, r3, #2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d008      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002cc0:	4b0e      	ldr	r3, [pc, #56]	@ (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	490b      	ldr	r1, [pc, #44]	@ (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0310 	and.w	r3, r3, #16
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d008      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002cde:	4b07      	ldr	r3, [pc, #28]	@ (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	4904      	ldr	r1, [pc, #16]	@ (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3718      	adds	r7, #24
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	40021000 	.word	0x40021000
 8002d00:	40007000 	.word	0x40007000
 8002d04:	42420440 	.word	0x42420440

08002d08 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e041      	b.n	8002d9e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d106      	bne.n	8002d34 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f7fe fbce 	bl	80014d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2202      	movs	r2, #2
 8002d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	3304      	adds	r3, #4
 8002d44:	4619      	mov	r1, r3
 8002d46:	4610      	mov	r0, r2
 8002d48:	f000 fa2e 	bl	80031a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3708      	adds	r7, #8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
	...

08002da8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d109      	bne.n	8002dcc <HAL_TIM_PWM_Start+0x24>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	bf14      	ite	ne
 8002dc4:	2301      	movne	r3, #1
 8002dc6:	2300      	moveq	r3, #0
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	e022      	b.n	8002e12 <HAL_TIM_PWM_Start+0x6a>
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	2b04      	cmp	r3, #4
 8002dd0:	d109      	bne.n	8002de6 <HAL_TIM_PWM_Start+0x3e>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	bf14      	ite	ne
 8002dde:	2301      	movne	r3, #1
 8002de0:	2300      	moveq	r3, #0
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	e015      	b.n	8002e12 <HAL_TIM_PWM_Start+0x6a>
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	2b08      	cmp	r3, #8
 8002dea:	d109      	bne.n	8002e00 <HAL_TIM_PWM_Start+0x58>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	bf14      	ite	ne
 8002df8:	2301      	movne	r3, #1
 8002dfa:	2300      	moveq	r3, #0
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	e008      	b.n	8002e12 <HAL_TIM_PWM_Start+0x6a>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	bf14      	ite	ne
 8002e0c:	2301      	movne	r3, #1
 8002e0e:	2300      	moveq	r3, #0
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e059      	b.n	8002ece <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d104      	bne.n	8002e2a <HAL_TIM_PWM_Start+0x82>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2202      	movs	r2, #2
 8002e24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e28:	e013      	b.n	8002e52 <HAL_TIM_PWM_Start+0xaa>
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	2b04      	cmp	r3, #4
 8002e2e:	d104      	bne.n	8002e3a <HAL_TIM_PWM_Start+0x92>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2202      	movs	r2, #2
 8002e34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e38:	e00b      	b.n	8002e52 <HAL_TIM_PWM_Start+0xaa>
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	2b08      	cmp	r3, #8
 8002e3e:	d104      	bne.n	8002e4a <HAL_TIM_PWM_Start+0xa2>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2202      	movs	r2, #2
 8002e44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e48:	e003      	b.n	8002e52 <HAL_TIM_PWM_Start+0xaa>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2202      	movs	r2, #2
 8002e4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2201      	movs	r2, #1
 8002e58:	6839      	ldr	r1, [r7, #0]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f000 fb90 	bl	8003580 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a1c      	ldr	r2, [pc, #112]	@ (8002ed8 <HAL_TIM_PWM_Start+0x130>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d107      	bne.n	8002e7a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e78:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a16      	ldr	r2, [pc, #88]	@ (8002ed8 <HAL_TIM_PWM_Start+0x130>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d009      	beq.n	8002e98 <HAL_TIM_PWM_Start+0xf0>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e8c:	d004      	beq.n	8002e98 <HAL_TIM_PWM_Start+0xf0>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a12      	ldr	r2, [pc, #72]	@ (8002edc <HAL_TIM_PWM_Start+0x134>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d111      	bne.n	8002ebc <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f003 0307 	and.w	r3, r3, #7
 8002ea2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2b06      	cmp	r3, #6
 8002ea8:	d010      	beq.n	8002ecc <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f042 0201 	orr.w	r2, r2, #1
 8002eb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eba:	e007      	b.n	8002ecc <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f042 0201 	orr.w	r2, r2, #1
 8002eca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	40012c00 	.word	0x40012c00
 8002edc:	40000400 	.word	0x40000400

08002ee0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b086      	sub	sp, #24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d101      	bne.n	8002ef4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e093      	b.n	800301c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d106      	bne.n	8002f0e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f7fe fb31 	bl	8001570 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2202      	movs	r2, #2
 8002f12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	6812      	ldr	r2, [r2, #0]
 8002f20:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002f24:	f023 0307 	bic.w	r3, r3, #7
 8002f28:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	3304      	adds	r3, #4
 8002f32:	4619      	mov	r1, r3
 8002f34:	4610      	mov	r0, r2
 8002f36:	f000 f937 	bl	80031a8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	6a1b      	ldr	r3, [r3, #32]
 8002f50:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f62:	f023 0303 	bic.w	r3, r3, #3
 8002f66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	689a      	ldr	r2, [r3, #8]
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	021b      	lsls	r3, r3, #8
 8002f72:	4313      	orrs	r3, r2
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002f80:	f023 030c 	bic.w	r3, r3, #12
 8002f84:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002f8c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	68da      	ldr	r2, [r3, #12]
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	69db      	ldr	r3, [r3, #28]
 8002f9a:	021b      	lsls	r3, r3, #8
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	011a      	lsls	r2, r3, #4
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	031b      	lsls	r3, r3, #12
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	693a      	ldr	r2, [r7, #16]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002fbe:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	695b      	ldr	r3, [r3, #20]
 8002fc8:	011b      	lsls	r3, r3, #4
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	68fa      	ldr	r2, [r7, #12]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	697a      	ldr	r2, [r7, #20]
 8002fd8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	693a      	ldr	r2, [r7, #16]
 8002fe0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2201      	movs	r2, #1
 8002fee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2201      	movs	r2, #1
 8003006:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2201      	movs	r2, #1
 800300e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2201      	movs	r2, #1
 8003016:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	3718      	adds	r7, #24
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b086      	sub	sp, #24
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003030:	2300      	movs	r3, #0
 8003032:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800303a:	2b01      	cmp	r3, #1
 800303c:	d101      	bne.n	8003042 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800303e:	2302      	movs	r3, #2
 8003040:	e0ae      	b.n	80031a0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2b0c      	cmp	r3, #12
 800304e:	f200 809f 	bhi.w	8003190 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003052:	a201      	add	r2, pc, #4	@ (adr r2, 8003058 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003058:	0800308d 	.word	0x0800308d
 800305c:	08003191 	.word	0x08003191
 8003060:	08003191 	.word	0x08003191
 8003064:	08003191 	.word	0x08003191
 8003068:	080030cd 	.word	0x080030cd
 800306c:	08003191 	.word	0x08003191
 8003070:	08003191 	.word	0x08003191
 8003074:	08003191 	.word	0x08003191
 8003078:	0800310f 	.word	0x0800310f
 800307c:	08003191 	.word	0x08003191
 8003080:	08003191 	.word	0x08003191
 8003084:	08003191 	.word	0x08003191
 8003088:	0800314f 	.word	0x0800314f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68b9      	ldr	r1, [r7, #8]
 8003092:	4618      	mov	r0, r3
 8003094:	f000 f8ec 	bl	8003270 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	699a      	ldr	r2, [r3, #24]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f042 0208 	orr.w	r2, r2, #8
 80030a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	699a      	ldr	r2, [r3, #24]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 0204 	bic.w	r2, r2, #4
 80030b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6999      	ldr	r1, [r3, #24]
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	691a      	ldr	r2, [r3, #16]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	430a      	orrs	r2, r1
 80030c8:	619a      	str	r2, [r3, #24]
      break;
 80030ca:	e064      	b.n	8003196 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68b9      	ldr	r1, [r7, #8]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f000 f932 	bl	800333c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	699a      	ldr	r2, [r3, #24]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	699a      	ldr	r2, [r3, #24]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6999      	ldr	r1, [r3, #24]
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	021a      	lsls	r2, r3, #8
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	430a      	orrs	r2, r1
 800310a:	619a      	str	r2, [r3, #24]
      break;
 800310c:	e043      	b.n	8003196 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68b9      	ldr	r1, [r7, #8]
 8003114:	4618      	mov	r0, r3
 8003116:	f000 f97b 	bl	8003410 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	69da      	ldr	r2, [r3, #28]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f042 0208 	orr.w	r2, r2, #8
 8003128:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	69da      	ldr	r2, [r3, #28]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f022 0204 	bic.w	r2, r2, #4
 8003138:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	69d9      	ldr	r1, [r3, #28]
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	691a      	ldr	r2, [r3, #16]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	430a      	orrs	r2, r1
 800314a:	61da      	str	r2, [r3, #28]
      break;
 800314c:	e023      	b.n	8003196 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	68b9      	ldr	r1, [r7, #8]
 8003154:	4618      	mov	r0, r3
 8003156:	f000 f9c5 	bl	80034e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	69da      	ldr	r2, [r3, #28]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003168:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	69da      	ldr	r2, [r3, #28]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003178:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	69d9      	ldr	r1, [r3, #28]
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	021a      	lsls	r2, r3, #8
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	430a      	orrs	r2, r1
 800318c:	61da      	str	r2, [r3, #28]
      break;
 800318e:	e002      	b.n	8003196 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	75fb      	strb	r3, [r7, #23]
      break;
 8003194:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800319e:	7dfb      	ldrb	r3, [r7, #23]
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3718      	adds	r7, #24
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b085      	sub	sp, #20
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a2b      	ldr	r2, [pc, #172]	@ (8003268 <TIM_Base_SetConfig+0xc0>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d007      	beq.n	80031d0 <TIM_Base_SetConfig+0x28>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031c6:	d003      	beq.n	80031d0 <TIM_Base_SetConfig+0x28>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4a28      	ldr	r2, [pc, #160]	@ (800326c <TIM_Base_SetConfig+0xc4>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d108      	bne.n	80031e2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	4313      	orrs	r3, r2
 80031e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a20      	ldr	r2, [pc, #128]	@ (8003268 <TIM_Base_SetConfig+0xc0>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d007      	beq.n	80031fa <TIM_Base_SetConfig+0x52>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031f0:	d003      	beq.n	80031fa <TIM_Base_SetConfig+0x52>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a1d      	ldr	r2, [pc, #116]	@ (800326c <TIM_Base_SetConfig+0xc4>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d108      	bne.n	800320c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003200:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	4313      	orrs	r3, r2
 800320a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	4313      	orrs	r3, r2
 8003218:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68fa      	ldr	r2, [r7, #12]
 800321e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	689a      	ldr	r2, [r3, #8]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a0d      	ldr	r2, [pc, #52]	@ (8003268 <TIM_Base_SetConfig+0xc0>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d103      	bne.n	8003240 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	691a      	ldr	r2, [r3, #16]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	2b00      	cmp	r3, #0
 8003250:	d005      	beq.n	800325e <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	f023 0201 	bic.w	r2, r3, #1
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	611a      	str	r2, [r3, #16]
  }
}
 800325e:	bf00      	nop
 8003260:	3714      	adds	r7, #20
 8003262:	46bd      	mov	sp, r7
 8003264:	bc80      	pop	{r7}
 8003266:	4770      	bx	lr
 8003268:	40012c00 	.word	0x40012c00
 800326c:	40000400 	.word	0x40000400

08003270 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003270:	b480      	push	{r7}
 8003272:	b087      	sub	sp, #28
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a1b      	ldr	r3, [r3, #32]
 800327e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a1b      	ldr	r3, [r3, #32]
 8003284:	f023 0201 	bic.w	r2, r3, #1
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800329e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f023 0303 	bic.w	r3, r3, #3
 80032a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	f023 0302 	bic.w	r3, r3, #2
 80032b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	697a      	ldr	r2, [r7, #20]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a1c      	ldr	r2, [pc, #112]	@ (8003338 <TIM_OC1_SetConfig+0xc8>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d10c      	bne.n	80032e6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	f023 0308 	bic.w	r3, r3, #8
 80032d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	4313      	orrs	r3, r2
 80032dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	f023 0304 	bic.w	r3, r3, #4
 80032e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a13      	ldr	r2, [pc, #76]	@ (8003338 <TIM_OC1_SetConfig+0xc8>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d111      	bne.n	8003312 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80032f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80032fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	693a      	ldr	r2, [r7, #16]
 8003304:	4313      	orrs	r3, r2
 8003306:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	693a      	ldr	r2, [r7, #16]
 800330e:	4313      	orrs	r3, r2
 8003310:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685a      	ldr	r2, [r3, #4]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	697a      	ldr	r2, [r7, #20]
 800332a:	621a      	str	r2, [r3, #32]
}
 800332c:	bf00      	nop
 800332e:	371c      	adds	r7, #28
 8003330:	46bd      	mov	sp, r7
 8003332:	bc80      	pop	{r7}
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	40012c00 	.word	0x40012c00

0800333c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800333c:	b480      	push	{r7}
 800333e:	b087      	sub	sp, #28
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	f023 0210 	bic.w	r2, r3, #16
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800336a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003372:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	021b      	lsls	r3, r3, #8
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	4313      	orrs	r3, r2
 800337e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	f023 0320 	bic.w	r3, r3, #32
 8003386:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	011b      	lsls	r3, r3, #4
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	4313      	orrs	r3, r2
 8003392:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a1d      	ldr	r2, [pc, #116]	@ (800340c <TIM_OC2_SetConfig+0xd0>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d10d      	bne.n	80033b8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	011b      	lsls	r3, r3, #4
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033b6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a14      	ldr	r2, [pc, #80]	@ (800340c <TIM_OC2_SetConfig+0xd0>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d113      	bne.n	80033e8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80033c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80033ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	695b      	ldr	r3, [r3, #20]
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	4313      	orrs	r3, r2
 80033da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	693a      	ldr	r2, [r7, #16]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685a      	ldr	r2, [r3, #4]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	621a      	str	r2, [r3, #32]
}
 8003402:	bf00      	nop
 8003404:	371c      	adds	r7, #28
 8003406:	46bd      	mov	sp, r7
 8003408:	bc80      	pop	{r7}
 800340a:	4770      	bx	lr
 800340c:	40012c00 	.word	0x40012c00

08003410 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003410:	b480      	push	{r7}
 8003412:	b087      	sub	sp, #28
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a1b      	ldr	r3, [r3, #32]
 800341e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	69db      	ldr	r3, [r3, #28]
 8003436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800343e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f023 0303 	bic.w	r3, r3, #3
 8003446:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	4313      	orrs	r3, r2
 8003450:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003458:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	021b      	lsls	r3, r3, #8
 8003460:	697a      	ldr	r2, [r7, #20]
 8003462:	4313      	orrs	r3, r2
 8003464:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a1d      	ldr	r2, [pc, #116]	@ (80034e0 <TIM_OC3_SetConfig+0xd0>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d10d      	bne.n	800348a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003474:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	021b      	lsls	r3, r3, #8
 800347c:	697a      	ldr	r2, [r7, #20]
 800347e:	4313      	orrs	r3, r2
 8003480:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003488:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a14      	ldr	r2, [pc, #80]	@ (80034e0 <TIM_OC3_SetConfig+0xd0>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d113      	bne.n	80034ba <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003498:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80034a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	011b      	lsls	r3, r3, #4
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	011b      	lsls	r3, r3, #4
 80034b4:	693a      	ldr	r2, [r7, #16]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	685a      	ldr	r2, [r3, #4]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	697a      	ldr	r2, [r7, #20]
 80034d2:	621a      	str	r2, [r3, #32]
}
 80034d4:	bf00      	nop
 80034d6:	371c      	adds	r7, #28
 80034d8:	46bd      	mov	sp, r7
 80034da:	bc80      	pop	{r7}
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	40012c00 	.word	0x40012c00

080034e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b087      	sub	sp, #28
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a1b      	ldr	r3, [r3, #32]
 80034f2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	69db      	ldr	r3, [r3, #28]
 800350a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003512:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800351a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	021b      	lsls	r3, r3, #8
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	4313      	orrs	r3, r2
 8003526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800352e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	031b      	lsls	r3, r3, #12
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	4313      	orrs	r3, r2
 800353a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a0f      	ldr	r2, [pc, #60]	@ (800357c <TIM_OC4_SetConfig+0x98>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d109      	bne.n	8003558 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800354a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	695b      	ldr	r3, [r3, #20]
 8003550:	019b      	lsls	r3, r3, #6
 8003552:	697a      	ldr	r2, [r7, #20]
 8003554:	4313      	orrs	r3, r2
 8003556:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	697a      	ldr	r2, [r7, #20]
 800355c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685a      	ldr	r2, [r3, #4]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	621a      	str	r2, [r3, #32]
}
 8003572:	bf00      	nop
 8003574:	371c      	adds	r7, #28
 8003576:	46bd      	mov	sp, r7
 8003578:	bc80      	pop	{r7}
 800357a:	4770      	bx	lr
 800357c:	40012c00 	.word	0x40012c00

08003580 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003580:	b480      	push	{r7}
 8003582:	b087      	sub	sp, #28
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	f003 031f 	and.w	r3, r3, #31
 8003592:	2201      	movs	r2, #1
 8003594:	fa02 f303 	lsl.w	r3, r2, r3
 8003598:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6a1a      	ldr	r2, [r3, #32]
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	43db      	mvns	r3, r3
 80035a2:	401a      	ands	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6a1a      	ldr	r2, [r3, #32]
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	f003 031f 	and.w	r3, r3, #31
 80035b2:	6879      	ldr	r1, [r7, #4]
 80035b4:	fa01 f303 	lsl.w	r3, r1, r3
 80035b8:	431a      	orrs	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	621a      	str	r2, [r3, #32]
}
 80035be:	bf00      	nop
 80035c0:	371c      	adds	r7, #28
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bc80      	pop	{r7}
 80035c6:	4770      	bx	lr

080035c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b085      	sub	sp, #20
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d101      	bne.n	80035e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035dc:	2302      	movs	r3, #2
 80035de:	e041      	b.n	8003664 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2202      	movs	r2, #2
 80035ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003606:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68fa      	ldr	r2, [r7, #12]
 800360e:	4313      	orrs	r3, r2
 8003610:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a14      	ldr	r2, [pc, #80]	@ (8003670 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d009      	beq.n	8003638 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800362c:	d004      	beq.n	8003638 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a10      	ldr	r2, [pc, #64]	@ (8003674 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d10c      	bne.n	8003652 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800363e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	68ba      	ldr	r2, [r7, #8]
 8003646:	4313      	orrs	r3, r2
 8003648:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68ba      	ldr	r2, [r7, #8]
 8003650:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2201      	movs	r2, #1
 8003656:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	3714      	adds	r7, #20
 8003668:	46bd      	mov	sp, r7
 800366a:	bc80      	pop	{r7}
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	40012c00 	.word	0x40012c00
 8003674:	40000400 	.word	0x40000400

08003678 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003678:	b480      	push	{r7}
 800367a:	b085      	sub	sp, #20
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003682:	2300      	movs	r3, #0
 8003684:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800368c:	2b01      	cmp	r3, #1
 800368e:	d101      	bne.n	8003694 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003690:	2302      	movs	r3, #2
 8003692:	e03d      	b.n	8003710 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	4313      	orrs	r3, r2
 80036e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	695b      	ldr	r3, [r3, #20]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	69db      	ldr	r3, [r3, #28]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3714      	adds	r7, #20
 8003714:	46bd      	mov	sp, r7
 8003716:	bc80      	pop	{r7}
 8003718:	4770      	bx	lr

0800371a <memset>:
 800371a:	4603      	mov	r3, r0
 800371c:	4402      	add	r2, r0
 800371e:	4293      	cmp	r3, r2
 8003720:	d100      	bne.n	8003724 <memset+0xa>
 8003722:	4770      	bx	lr
 8003724:	f803 1b01 	strb.w	r1, [r3], #1
 8003728:	e7f9      	b.n	800371e <memset+0x4>
	...

0800372c <__libc_init_array>:
 800372c:	b570      	push	{r4, r5, r6, lr}
 800372e:	2600      	movs	r6, #0
 8003730:	4d0c      	ldr	r5, [pc, #48]	@ (8003764 <__libc_init_array+0x38>)
 8003732:	4c0d      	ldr	r4, [pc, #52]	@ (8003768 <__libc_init_array+0x3c>)
 8003734:	1b64      	subs	r4, r4, r5
 8003736:	10a4      	asrs	r4, r4, #2
 8003738:	42a6      	cmp	r6, r4
 800373a:	d109      	bne.n	8003750 <__libc_init_array+0x24>
 800373c:	f000 f81a 	bl	8003774 <_init>
 8003740:	2600      	movs	r6, #0
 8003742:	4d0a      	ldr	r5, [pc, #40]	@ (800376c <__libc_init_array+0x40>)
 8003744:	4c0a      	ldr	r4, [pc, #40]	@ (8003770 <__libc_init_array+0x44>)
 8003746:	1b64      	subs	r4, r4, r5
 8003748:	10a4      	asrs	r4, r4, #2
 800374a:	42a6      	cmp	r6, r4
 800374c:	d105      	bne.n	800375a <__libc_init_array+0x2e>
 800374e:	bd70      	pop	{r4, r5, r6, pc}
 8003750:	f855 3b04 	ldr.w	r3, [r5], #4
 8003754:	4798      	blx	r3
 8003756:	3601      	adds	r6, #1
 8003758:	e7ee      	b.n	8003738 <__libc_init_array+0xc>
 800375a:	f855 3b04 	ldr.w	r3, [r5], #4
 800375e:	4798      	blx	r3
 8003760:	3601      	adds	r6, #1
 8003762:	e7f2      	b.n	800374a <__libc_init_array+0x1e>
 8003764:	080037b0 	.word	0x080037b0
 8003768:	080037b0 	.word	0x080037b0
 800376c:	080037b0 	.word	0x080037b0
 8003770:	080037b4 	.word	0x080037b4

08003774 <_init>:
 8003774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003776:	bf00      	nop
 8003778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800377a:	bc08      	pop	{r3}
 800377c:	469e      	mov	lr, r3
 800377e:	4770      	bx	lr

08003780 <_fini>:
 8003780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003782:	bf00      	nop
 8003784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003786:	bc08      	pop	{r3}
 8003788:	469e      	mov	lr, r3
 800378a:	4770      	bx	lr
