
SteerByWireC6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000348c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003598  08003598  00004598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035c4  080035c4  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  080035c4  080035c4  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080035c4  080035c4  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035c4  080035c4  000045c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080035c8  080035c8  000045c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080035cc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  2000000c  080035d8  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  080035d8  0000515c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016998  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cdb  00000000  00000000  0001b9cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001128  00000000  00000000  0001e6a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d19  00000000  00000000  0001f7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001af63  00000000  00000000  000204e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011562  00000000  00000000  0003b44c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098493  00000000  00000000  0004c9ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  000e4e41  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000494c  00000000  00000000  000e4ec8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000e9814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003580 	.word	0x08003580

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003580 	.word	0x08003580

0800014c <_ZNSt12_Vector_baseImSaImEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	4618      	mov	r0, r3
 8000158:	f000 f8c4 	bl	80002e4 <_ZNSt12_Vector_baseImSaImEE12_Vector_implC1Ev>
 800015c:	687b      	ldr	r3, [r7, #4]
 800015e:	4618      	mov	r0, r3
 8000160:	3708      	adds	r7, #8
 8000162:	46bd      	mov	sp, r7
 8000164:	bd80      	pop	{r7, pc}

08000166 <_ZNSt6vectorImSaImEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8000166:	b580      	push	{r7, lr}
 8000168:	b082      	sub	sp, #8
 800016a:	af00      	add	r7, sp, #0
 800016c:	6078      	str	r0, [r7, #4]
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	4618      	mov	r0, r3
 8000172:	f7ff ffeb 	bl	800014c <_ZNSt12_Vector_baseImSaImEEC1Ev>
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	4618      	mov	r0, r3
 800017a:	3708      	adds	r7, #8
 800017c:	46bd      	mov	sp, r7
 800017e:	bd80      	pop	{r7, pc}

08000180 <_ZNSt12_Vector_baseIySaIyEEC1Ev>:
      _Vector_base() = default;
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	4618      	mov	r0, r3
 800018c:	f000 f8ba 	bl	8000304 <_ZNSt12_Vector_baseIySaIyEE12_Vector_implC1Ev>
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	4618      	mov	r0, r3
 8000194:	3708      	adds	r7, #8
 8000196:	46bd      	mov	sp, r7
 8000198:	bd80      	pop	{r7, pc}

0800019a <_ZNSt6vectorIySaIyEEC1Ev>:
      vector() = default;
 800019a:	b580      	push	{r7, lr}
 800019c:	b082      	sub	sp, #8
 800019e:	af00      	add	r7, sp, #0
 80001a0:	6078      	str	r0, [r7, #4]
 80001a2:	687b      	ldr	r3, [r7, #4]
 80001a4:	4618      	mov	r0, r3
 80001a6:	f7ff ffeb 	bl	8000180 <_ZNSt12_Vector_baseIySaIyEEC1Ev>
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	4618      	mov	r0, r3
 80001ae:	3708      	adds	r7, #8
 80001b0:	46bd      	mov	sp, r7
 80001b2:	bd80      	pop	{r7, pc}

080001b4 <_ZN6CANBusC1Ev>:
 *      Author: Dennis Boekholtz
 */

#include "CAN_bus.hpp"

CANBus::CANBus() {
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b082      	sub	sp, #8
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	331c      	adds	r3, #28
 80001c0:	4618      	mov	r0, r3
 80001c2:	f7ff ffd0 	bl	8000166 <_ZNSt6vectorImSaImEEC1Ev>
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	3328      	adds	r3, #40	@ 0x28
 80001ca:	4618      	mov	r0, r3
 80001cc:	f7ff ffe5 	bl	800019a <_ZNSt6vectorIySaIyEEC1Ev>
    // Constructor implementation (if needed)
}
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	4618      	mov	r0, r3
 80001d4:	3708      	adds	r7, #8
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bd80      	pop	{r7, pc}

080001da <_ZN6CANBus5startEP17CAN_HandleTypeDefh>:

void CANBus::start(CAN_HandleTypeDef* hcan, uint8_t LIDEE){
 80001da:	b580      	push	{r7, lr}
 80001dc:	b084      	sub	sp, #16
 80001de:	af00      	add	r7, sp, #0
 80001e0:	60f8      	str	r0, [r7, #12]
 80001e2:	60b9      	str	r1, [r7, #8]
 80001e4:	4613      	mov	r3, r2
 80001e6:	71fb      	strb	r3, [r7, #7]

	// Start CAN bus
    HAL_CAN_Start(hcan);
 80001e8:	68b8      	ldr	r0, [r7, #8]
 80001ea:	f001 fb9c 	bl	8001926 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80001ee:	2102      	movs	r1, #2
 80001f0:	68b8      	ldr	r0, [r7, #8]
 80001f2:	f001 fcab 	bl	8001b4c <HAL_CAN_ActivateNotification>

    if(LIDEE == CAN_ID_STD){
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d107      	bne.n	800020c <_ZN6CANBus5startEP17CAN_HandleTypeDefh+0x32>
        TxHeader.ExtId = 0;		// 0 is standaard ID , 4 is extended ID
 80001fc:	68fb      	ldr	r3, [r7, #12]
 80001fe:	2200      	movs	r2, #0
 8000200:	605a      	str	r2, [r3, #4]
        TxHeader.StdId = 2047;  // Set CAN ID to 2047
 8000202:	68fb      	ldr	r3, [r7, #12]
 8000204:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000208:	601a      	str	r2, [r3, #0]
 800020a:	e006      	b.n	800021a <_ZN6CANBus5startEP17CAN_HandleTypeDefh+0x40>
    }
    else{
        TxHeader.ExtId = 2047;		// 0 is standaard ID , 4 is extended ID
 800020c:	68fb      	ldr	r3, [r7, #12]
 800020e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000212:	605a      	str	r2, [r3, #4]
        TxHeader.StdId = 0;  // Set CAN ID to 2047
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	2200      	movs	r2, #0
 8000218:	601a      	str	r2, [r3, #0]
    }
    // Initialize default values for CAN headers
    TxHeader.DLC = 8;
 800021a:	68fb      	ldr	r3, [r7, #12]
 800021c:	2208      	movs	r2, #8
 800021e:	611a      	str	r2, [r3, #16]
    TxHeader.IDE = LIDEE;    // standaard ID = CAN_ID_STD, extended ID = CAN_ID_EXT
 8000220:	79fa      	ldrb	r2, [r7, #7]
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	609a      	str	r2, [r3, #8]
    TxHeader.RTR = CAN_RTR_DATA;
 8000226:	68fb      	ldr	r3, [r7, #12]
 8000228:	2200      	movs	r2, #0
 800022a:	60da      	str	r2, [r3, #12]
    TxHeader.TransmitGlobalTime = DISABLE;
 800022c:	68fb      	ldr	r3, [r7, #12]
 800022e:	2200      	movs	r2, #0
 8000230:	751a      	strb	r2, [r3, #20]

}
 8000232:	bf00      	nop
 8000234:	3710      	adds	r7, #16
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}

0800023a <_ZN6CANBus8transmitEP17CAN_HandleTypeDefPht>:

// Transmit data
void CANBus::transmit(CAN_HandleTypeDef* hcan, uint8_t* TxData, uint16_t id) {
 800023a:	b580      	push	{r7, lr}
 800023c:	b084      	sub	sp, #16
 800023e:	af00      	add	r7, sp, #0
 8000240:	60f8      	str	r0, [r7, #12]
 8000242:	60b9      	str	r1, [r7, #8]
 8000244:	607a      	str	r2, [r7, #4]
 8000246:	807b      	strh	r3, [r7, #2]
    if (TxHeader.IDE == CAN_ID_STD){
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	689b      	ldr	r3, [r3, #8]
 800024c:	2b00      	cmp	r3, #0
 800024e:	d103      	bne.n	8000258 <_ZN6CANBus8transmitEP17CAN_HandleTypeDefPht+0x1e>
    	TxHeader.StdId = id;
 8000250:	887a      	ldrh	r2, [r7, #2]
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	601a      	str	r2, [r3, #0]
 8000256:	e002      	b.n	800025e <_ZN6CANBus8transmitEP17CAN_HandleTypeDefPht+0x24>
    }
    else{
    	TxHeader.ExtId = id;
 8000258:	887a      	ldrh	r2, [r7, #2]
 800025a:	68fb      	ldr	r3, [r7, #12]
 800025c:	605a      	str	r2, [r3, #4]
    }
	TxHeader.DLC = 8;
 800025e:	68fb      	ldr	r3, [r7, #12]
 8000260:	2208      	movs	r2, #8
 8000262:	611a      	str	r2, [r3, #16]
//    HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox);
    if (HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK) {
 8000264:	68f9      	ldr	r1, [r7, #12]
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	3318      	adds	r3, #24
 800026a:	687a      	ldr	r2, [r7, #4]
 800026c:	68b8      	ldr	r0, [r7, #8]
 800026e:	f001 fb9e 	bl	80019ae <HAL_CAN_AddTxMessage>
 8000272:	4603      	mov	r3, r0
 8000274:	2b00      	cmp	r3, #0
 8000276:	bf14      	ite	ne
 8000278:	2301      	movne	r3, #1
 800027a:	2300      	moveq	r3, #0
 800027c:	b2db      	uxtb	r3, r3
 800027e:	2b00      	cmp	r3, #0
 8000280:	d001      	beq.n	8000286 <_ZN6CANBus8transmitEP17CAN_HandleTypeDefPht+0x4c>
        // Transmission failed
        Error_Handler();
 8000282:	f000 fcb3 	bl	8000bec <Error_Handler>
    }

}
 8000286:	bf00      	nop
 8000288:	3710      	adds	r7, #16
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}

0800028e <_ZN6CANBus15configureFilterEP17CAN_HandleTypeDeftthh>:

void CANBus::configureFilter(CAN_HandleTypeDef* hcan, uint16_t ID, uint16_t Mask, uint8_t filterBank, uint8_t slaveFilterBank){
 800028e:	b580      	push	{r7, lr}
 8000290:	b08e      	sub	sp, #56	@ 0x38
 8000292:	af00      	add	r7, sp, #0
 8000294:	60f8      	str	r0, [r7, #12]
 8000296:	60b9      	str	r1, [r7, #8]
 8000298:	4611      	mov	r1, r2
 800029a:	461a      	mov	r2, r3
 800029c:	460b      	mov	r3, r1
 800029e:	80fb      	strh	r3, [r7, #6]
 80002a0:	4613      	mov	r3, r2
 80002a2:	80bb      	strh	r3, [r7, #4]

	  CAN_FilterTypeDef canFilterConfig;

	  canFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 80002a4:	2301      	movs	r3, #1
 80002a6:	633b      	str	r3, [r7, #48]	@ 0x30
	  canFilterConfig.FilterBank = filterBank;
 80002a8:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80002ac:	627b      	str	r3, [r7, #36]	@ 0x24
	  canFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80002ae:	2300      	movs	r3, #0
 80002b0:	623b      	str	r3, [r7, #32]
	  canFilterConfig.FilterIdHigh = 0 << 5;
 80002b2:	2300      	movs	r3, #0
 80002b4:	613b      	str	r3, [r7, #16]
	  canFilterConfig.FilterIdLow = 0x0000;
 80002b6:	2300      	movs	r3, #0
 80002b8:	617b      	str	r3, [r7, #20]
	  canFilterConfig.FilterMaskIdHigh = 0 << 5;
 80002ba:	2300      	movs	r3, #0
 80002bc:	61bb      	str	r3, [r7, #24]
	  canFilterConfig.FilterMaskIdLow = 0x0000;
 80002be:	2300      	movs	r3, #0
 80002c0:	61fb      	str	r3, [r7, #28]
	  canFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80002c2:	2300      	movs	r3, #0
 80002c4:	62bb      	str	r3, [r7, #40]	@ 0x28
	  canFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80002c6:	2301      	movs	r3, #1
 80002c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  canFilterConfig.SlaveStartFilterBank = slaveFilterBank;
 80002ca:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80002ce:	637b      	str	r3, [r7, #52]	@ 0x34

	  HAL_CAN_ConfigFilter(hcan, &canFilterConfig);
 80002d0:	f107 0310 	add.w	r3, r7, #16
 80002d4:	4619      	mov	r1, r3
 80002d6:	68b8      	ldr	r0, [r7, #8]
 80002d8:	f001 fa5c 	bl	8001794 <HAL_CAN_ConfigFilter>
}
 80002dc:	bf00      	nop
 80002de:	3738      	adds	r7, #56	@ 0x38
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}

080002e4 <_ZNSt12_Vector_baseImSaImEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80002ec:	6878      	ldr	r0, [r7, #4]
 80002ee:	f000 f819 	bl	8000324 <_ZNSaImEC1Ev>
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	4618      	mov	r0, r3
 80002f6:	f000 f821 	bl	800033c <_ZNSt12_Vector_baseImSaImEE17_Vector_impl_dataC1Ev>
	{ }
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	4618      	mov	r0, r3
 80002fe:	3708      	adds	r7, #8
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}

08000304 <_ZNSt12_Vector_baseIySaIyEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800030c:	6878      	ldr	r0, [r7, #4]
 800030e:	f000 f828 	bl	8000362 <_ZNSaIyEC1Ev>
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	4618      	mov	r0, r3
 8000316:	f000 f830 	bl	800037a <_ZNSt12_Vector_baseIySaIyEE17_Vector_impl_dataC1Ev>
	{ }
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	4618      	mov	r0, r3
 800031e:	3708      	adds	r7, #8
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}

08000324 <_ZNSaImEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 8000324:	b580      	push	{r7, lr}
 8000326:	b082      	sub	sp, #8
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
 800032c:	6878      	ldr	r0, [r7, #4]
 800032e:	f000 f837 	bl	80003a0 <_ZNSt15__new_allocatorImEC1Ev>
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	4618      	mov	r0, r3
 8000336:	3708      	adds	r7, #8
 8000338:	46bd      	mov	sp, r7
 800033a:	bd80      	pop	{r7, pc}

0800033c <_ZNSt12_Vector_baseImSaImEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	2200      	movs	r2, #0
 8000348:	601a      	str	r2, [r3, #0]
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	2200      	movs	r2, #0
 800034e:	605a      	str	r2, [r3, #4]
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	2200      	movs	r2, #0
 8000354:	609a      	str	r2, [r3, #8]
	{ }
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	4618      	mov	r0, r3
 800035a:	370c      	adds	r7, #12
 800035c:	46bd      	mov	sp, r7
 800035e:	bc80      	pop	{r7}
 8000360:	4770      	bx	lr

08000362 <_ZNSaIyEC1Ev>:
 8000362:	b580      	push	{r7, lr}
 8000364:	b082      	sub	sp, #8
 8000366:	af00      	add	r7, sp, #0
 8000368:	6078      	str	r0, [r7, #4]
 800036a:	6878      	ldr	r0, [r7, #4]
 800036c:	f000 f822 	bl	80003b4 <_ZNSt15__new_allocatorIyEC1Ev>
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	4618      	mov	r0, r3
 8000374:	3708      	adds	r7, #8
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}

0800037a <_ZNSt12_Vector_baseIySaIyEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800037a:	b480      	push	{r7}
 800037c:	b083      	sub	sp, #12
 800037e:	af00      	add	r7, sp, #0
 8000380:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	2200      	movs	r2, #0
 8000386:	601a      	str	r2, [r3, #0]
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	2200      	movs	r2, #0
 800038c:	605a      	str	r2, [r3, #4]
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	2200      	movs	r2, #0
 8000392:	609a      	str	r2, [r3, #8]
	{ }
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	4618      	mov	r0, r3
 8000398:	370c      	adds	r7, #12
 800039a:	46bd      	mov	sp, r7
 800039c:	bc80      	pop	{r7}
 800039e:	4770      	bx	lr

080003a0 <_ZNSt15__new_allocatorImEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	4618      	mov	r0, r3
 80003ac:	370c      	adds	r7, #12
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bc80      	pop	{r7}
 80003b2:	4770      	bx	lr

080003b4 <_ZNSt15__new_allocatorIyEC1Ev>:
 80003b4:	b480      	push	{r7}
 80003b6:	b083      	sub	sp, #12
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	4618      	mov	r0, r3
 80003c0:	370c      	adds	r7, #12
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bc80      	pop	{r7}
 80003c6:	4770      	bx	lr

080003c8 <_ZN7EncoderC1EP17TIM_HandleTypeDefS1_mf>:
 
#include "encoder.hpp"
#include "motorControl.hpp"
#include "cmath"

Encoder::Encoder(TIM_HandleTypeDef* enc1, TIM_HandleTypeDef* enc2, uint32_t maxCount, float countsPerRevolution)
 80003c8:	b480      	push	{r7}
 80003ca:	b085      	sub	sp, #20
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	60f8      	str	r0, [r7, #12]
 80003d0:	60b9      	str	r1, [r7, #8]
 80003d2:	607a      	str	r2, [r7, #4]
 80003d4:	603b      	str	r3, [r7, #0]
    : encoder1(enc1), encoder2(enc2), maxEncoderCount(maxCount), countsPerRev(countsPerRevolution) {
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	68ba      	ldr	r2, [r7, #8]
 80003da:	601a      	str	r2, [r3, #0]
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	687a      	ldr	r2, [r7, #4]
 80003e0:	605a      	str	r2, [r3, #4]
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	683a      	ldr	r2, [r7, #0]
 80003e6:	609a      	str	r2, [r3, #8]
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	69ba      	ldr	r2, [r7, #24]
 80003ec:	60da      	str	r2, [r3, #12]
    // Constructor
};
 80003ee:	68fb      	ldr	r3, [r7, #12]
 80003f0:	4618      	mov	r0, r3
 80003f2:	3714      	adds	r7, #20
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bc80      	pop	{r7}
 80003f8:	4770      	bx	lr

080003fa <_Z16check_CAN_errorsP17CAN_HandleTypeDefP14CAN_ErrorFlags>:
	    // Error handling, e.g., reset CAN or log error
	}
}


void check_CAN_errors(CAN_HandleTypeDef *hcan, CAN_ErrorFlags *error_flags) {
 80003fa:	b580      	push	{r7, lr}
 80003fc:	b084      	sub	sp, #16
 80003fe:	af00      	add	r7, sp, #0
 8000400:	6078      	str	r0, [r7, #4]
 8000402:	6039      	str	r1, [r7, #0]
    uint32_t error = HAL_CAN_GetError(hcan);
 8000404:	6878      	ldr	r0, [r7, #4]
 8000406:	f001 fbc6 	bl	8001b96 <HAL_CAN_GetError>
 800040a:	60f8      	str	r0, [r7, #12]

    // Reset all error flags
    error_flags->error_warning_flag = 0;
 800040c:	683b      	ldr	r3, [r7, #0]
 800040e:	2200      	movs	r2, #0
 8000410:	701a      	strb	r2, [r3, #0]
    error_flags->error_passive_flag = 0;
 8000412:	683b      	ldr	r3, [r7, #0]
 8000414:	2200      	movs	r2, #0
 8000416:	705a      	strb	r2, [r3, #1]
    error_flags->bus_off_flag = 0;
 8000418:	683b      	ldr	r3, [r7, #0]
 800041a:	2200      	movs	r2, #0
 800041c:	709a      	strb	r2, [r3, #2]
    error_flags->stuff_error = 0;
 800041e:	683b      	ldr	r3, [r7, #0]
 8000420:	2200      	movs	r2, #0
 8000422:	70da      	strb	r2, [r3, #3]
    error_flags->form_error = 0;
 8000424:	683b      	ldr	r3, [r7, #0]
 8000426:	2200      	movs	r2, #0
 8000428:	711a      	strb	r2, [r3, #4]
    error_flags->acknowledgment_error = 0;
 800042a:	683b      	ldr	r3, [r7, #0]
 800042c:	2200      	movs	r2, #0
 800042e:	715a      	strb	r2, [r3, #5]
    error_flags->bit_recessive_error = 0;
 8000430:	683b      	ldr	r3, [r7, #0]
 8000432:	2200      	movs	r2, #0
 8000434:	719a      	strb	r2, [r3, #6]
    error_flags->bit_dominant_error = 0;
 8000436:	683b      	ldr	r3, [r7, #0]
 8000438:	2200      	movs	r2, #0
 800043a:	71da      	strb	r2, [r3, #7]
    error_flags->crc_error = 0;
 800043c:	683b      	ldr	r3, [r7, #0]
 800043e:	2200      	movs	r2, #0
 8000440:	721a      	strb	r2, [r3, #8]

    if (error != HAL_CAN_ERROR_NONE) {
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	2b00      	cmp	r3, #0
 8000446:	d047      	beq.n	80004d8 <_Z16check_CAN_errorsP17CAN_HandleTypeDefP14CAN_ErrorFlags+0xde>
        if (error & HAL_CAN_ERROR_EWG) {
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	f003 0301 	and.w	r3, r3, #1
 800044e:	2b00      	cmp	r3, #0
 8000450:	d002      	beq.n	8000458 <_Z16check_CAN_errorsP17CAN_HandleTypeDefP14CAN_ErrorFlags+0x5e>
            error_flags->error_warning_flag = 1;
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	2201      	movs	r2, #1
 8000456:	701a      	strb	r2, [r3, #0]
        }
        if (error & HAL_CAN_ERROR_EPV) {
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	f003 0302 	and.w	r3, r3, #2
 800045e:	2b00      	cmp	r3, #0
 8000460:	d002      	beq.n	8000468 <_Z16check_CAN_errorsP17CAN_HandleTypeDefP14CAN_ErrorFlags+0x6e>
            error_flags->error_passive_flag = 1;
 8000462:	683b      	ldr	r3, [r7, #0]
 8000464:	2201      	movs	r2, #1
 8000466:	705a      	strb	r2, [r3, #1]
        }
        if (error & HAL_CAN_ERROR_BOF) {
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	f003 0304 	and.w	r3, r3, #4
 800046e:	2b00      	cmp	r3, #0
 8000470:	d002      	beq.n	8000478 <_Z16check_CAN_errorsP17CAN_HandleTypeDefP14CAN_ErrorFlags+0x7e>
            error_flags->bus_off_flag = 1;
 8000472:	683b      	ldr	r3, [r7, #0]
 8000474:	2201      	movs	r2, #1
 8000476:	709a      	strb	r2, [r3, #2]
        }
        if (error & HAL_CAN_ERROR_STF) {
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	f003 0308 	and.w	r3, r3, #8
 800047e:	2b00      	cmp	r3, #0
 8000480:	d002      	beq.n	8000488 <_Z16check_CAN_errorsP17CAN_HandleTypeDefP14CAN_ErrorFlags+0x8e>
            error_flags->stuff_error = 1;
 8000482:	683b      	ldr	r3, [r7, #0]
 8000484:	2201      	movs	r2, #1
 8000486:	70da      	strb	r2, [r3, #3]
        }
        if (error & HAL_CAN_ERROR_FOR) {
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	f003 0310 	and.w	r3, r3, #16
 800048e:	2b00      	cmp	r3, #0
 8000490:	d002      	beq.n	8000498 <_Z16check_CAN_errorsP17CAN_HandleTypeDefP14CAN_ErrorFlags+0x9e>
            error_flags->form_error = 1;
 8000492:	683b      	ldr	r3, [r7, #0]
 8000494:	2201      	movs	r2, #1
 8000496:	711a      	strb	r2, [r3, #4]
        }
        if (error & HAL_CAN_ERROR_ACK) {
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	f003 0320 	and.w	r3, r3, #32
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d002      	beq.n	80004a8 <_Z16check_CAN_errorsP17CAN_HandleTypeDefP14CAN_ErrorFlags+0xae>
            error_flags->acknowledgment_error = 1;
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	2201      	movs	r2, #1
 80004a6:	715a      	strb	r2, [r3, #5]
        }
        if (error & HAL_CAN_ERROR_BR) {
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d002      	beq.n	80004b8 <_Z16check_CAN_errorsP17CAN_HandleTypeDefP14CAN_ErrorFlags+0xbe>
            error_flags->bit_recessive_error = 1;
 80004b2:	683b      	ldr	r3, [r7, #0]
 80004b4:	2201      	movs	r2, #1
 80004b6:	719a      	strb	r2, [r3, #6]
        }
        if (error & HAL_CAN_ERROR_BD) {
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d002      	beq.n	80004c8 <_Z16check_CAN_errorsP17CAN_HandleTypeDefP14CAN_ErrorFlags+0xce>
            error_flags->bit_dominant_error = 1;
 80004c2:	683b      	ldr	r3, [r7, #0]
 80004c4:	2201      	movs	r2, #1
 80004c6:	71da      	strb	r2, [r3, #7]
        }
        if (error & HAL_CAN_ERROR_CRC) {
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d002      	beq.n	80004d8 <_Z16check_CAN_errorsP17CAN_HandleTypeDefP14CAN_ErrorFlags+0xde>
            error_flags->crc_error = 1;
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	2201      	movs	r2, #1
 80004d6:	721a      	strb	r2, [r3, #8]
        }
    }
}
 80004d8:	bf00      	nop
 80004da:	3710      	adds	r7, #16
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}

080004e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b09e      	sub	sp, #120	@ 0x78
 80004e4:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	CANBus canBus;
 80004e6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80004ea:	4618      	mov	r0, r3
 80004ec:	f7ff fe62 	bl	80001b4 <_ZN6CANBusC1Ev>
	CAN_ErrorFlags error_flags;

	MotorControl motorControl(&htim2, TIM_CHANNEL_3);
 80004f0:	f107 031c 	add.w	r3, r7, #28
 80004f4:	2208      	movs	r2, #8
 80004f6:	492b      	ldr	r1, [pc, #172]	@ (80005a4 <main+0xc4>)
 80004f8:	4618      	mov	r0, r3
 80004fa:	f000 fb85 	bl	8000c08 <_ZN12MotorControlC1EP17TIM_HandleTypeDefm>
	Encoder encoder(&htim2, &htim3, 65535, 1000);
 80004fe:	f107 000c 	add.w	r0, r7, #12
 8000502:	4b29      	ldr	r3, [pc, #164]	@ (80005a8 <main+0xc8>)
 8000504:	9300      	str	r3, [sp, #0]
 8000506:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800050a:	4a28      	ldr	r2, [pc, #160]	@ (80005ac <main+0xcc>)
 800050c:	4925      	ldr	r1, [pc, #148]	@ (80005a4 <main+0xc4>)
 800050e:	f7ff ff5b 	bl	80003c8 <_ZN7EncoderC1EP17TIM_HandleTypeDefS1_mf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000512:	f000 fdad 	bl	8001070 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000516:	f000 f84f 	bl	80005b8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051a:	f000 fae1 	bl	8000ae0 <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 800051e:	f000 f8b5 	bl	800068c <_ZL12MX_ADC1_Initv>
  MX_CAN_Init();
 8000522:	f000 f8fb 	bl	800071c <_ZL11MX_CAN_Initv>
  MX_TIM1_Init();
 8000526:	f000 f933 	bl	8000790 <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 800052a:	f000 f9eb 	bl	8000904 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 800052e:	f000 fa79 	bl	8000a24 <_ZL12MX_TIM3_Initv>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000532:	213c      	movs	r1, #60	@ 0x3c
 8000534:	481b      	ldr	r0, [pc, #108]	@ (80005a4 <main+0xc4>)
 8000536:	f002 fbed 	bl	8002d14 <HAL_TIM_Encoder_Start>
  uint8_t obamna[8] = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08}; // Example data
 800053a:	4a1d      	ldr	r2, [pc, #116]	@ (80005b0 <main+0xd0>)
 800053c:	1d3b      	adds	r3, r7, #4
 800053e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000542:	e883 0003 	stmia.w	r3, {r0, r1}

  //Initializes the steering motor
  motorControl.start();
 8000546:	f107 031c 	add.w	r3, r7, #28
 800054a:	4618      	mov	r0, r3
 800054c:	f000 fb79 	bl	8000c42 <_ZN12MotorControl5startEv>
  //Initializes the CAN-Bus communication
  canBus.start(&hcan, CAN_ID_STD);
 8000550:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000554:	2200      	movs	r2, #0
 8000556:	4917      	ldr	r1, [pc, #92]	@ (80005b4 <main+0xd4>)
 8000558:	4618      	mov	r0, r3
 800055a:	f7ff fe3e 	bl	80001da <_ZN6CANBus5startEP17CAN_HandleTypeDefh>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800055e:	2102      	movs	r1, #2
 8000560:	4814      	ldr	r0, [pc, #80]	@ (80005b4 <main+0xd4>)
 8000562:	f001 faf3 	bl	8001b4c <HAL_CAN_ActivateNotification>


  canBus.configureFilter(&hcan, 0x000, 0x000, 10, 0); // Accept all messages
 8000566:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 800056a:	2300      	movs	r3, #0
 800056c:	9301      	str	r3, [sp, #4]
 800056e:	230a      	movs	r3, #10
 8000570:	9300      	str	r3, [sp, #0]
 8000572:	2300      	movs	r3, #0
 8000574:	2200      	movs	r2, #0
 8000576:	490f      	ldr	r1, [pc, #60]	@ (80005b4 <main+0xd4>)
 8000578:	f7ff fe89 	bl	800028e <_ZN6CANBus15configureFilterEP17CAN_HandleTypeDeftthh>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  float currentAngle = encoder.encoderCompare();
//	  motorControl.steerToAngle(currentAngle, 50);
	  canBus.transmit(&hcan, obamna, 446);
 800057c:	1d3a      	adds	r2, r7, #4
 800057e:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8000582:	f44f 73df 	mov.w	r3, #446	@ 0x1be
 8000586:	490b      	ldr	r1, [pc, #44]	@ (80005b4 <main+0xd4>)
 8000588:	f7ff fe57 	bl	800023a <_ZN6CANBus8transmitEP17CAN_HandleTypeDefPht>
	  HAL_Delay(500);
 800058c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000590:	f000 fdd0 	bl	8001134 <HAL_Delay>
	  check_CAN_errors(&hcan, &error_flags);
 8000594:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000598:	4619      	mov	r1, r3
 800059a:	4806      	ldr	r0, [pc, #24]	@ (80005b4 <main+0xd4>)
 800059c:	f7ff ff2d 	bl	80003fa <_Z16check_CAN_errorsP17CAN_HandleTypeDefP14CAN_ErrorFlags>
	  canBus.transmit(&hcan, obamna, 446);
 80005a0:	bf00      	nop
 80005a2:	e7eb      	b.n	800057c <main+0x9c>
 80005a4:	200000c8 	.word	0x200000c8
 80005a8:	447a0000 	.word	0x447a0000
 80005ac:	20000110 	.word	0x20000110
 80005b0:	08003598 	.word	0x08003598
 80005b4:	20000058 	.word	0x20000058

080005b8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b094      	sub	sp, #80	@ 0x50
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80005c2:	2228      	movs	r2, #40	@ 0x28
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f002 ffad 	bl	8003526 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	f107 0314 	add.w	r3, r7, #20
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	609a      	str	r2, [r3, #8]
 80005e6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e8:	2301      	movs	r3, #1
 80005ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80005f2:	2300      	movs	r3, #0
 80005f4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f6:	2301      	movs	r3, #1
 80005f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fa:	2302      	movs	r3, #2
 80005fc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005fe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000602:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000604:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000608:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800060e:	4618      	mov	r0, r3
 8000610:	f001 fd5e 	bl	80020d0 <HAL_RCC_OscConfig>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	bf14      	ite	ne
 800061a:	2301      	movne	r3, #1
 800061c:	2300      	moveq	r3, #0
 800061e:	b2db      	uxtb	r3, r3
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8000624:	f000 fae2 	bl	8000bec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000628:	230f      	movs	r3, #15
 800062a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062c:	2302      	movs	r3, #2
 800062e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000634:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000638:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800063a:	2300      	movs	r3, #0
 800063c:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800063e:	f107 0314 	add.w	r3, r7, #20
 8000642:	2102      	movs	r1, #2
 8000644:	4618      	mov	r0, r3
 8000646:	f001 ffc5 	bl	80025d4 <HAL_RCC_ClockConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	bf14      	ite	ne
 8000650:	2301      	movne	r3, #1
 8000652:	2300      	moveq	r3, #0
 8000654:	b2db      	uxtb	r3, r3
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 800065a:	f000 fac7 	bl	8000bec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800065e:	2302      	movs	r3, #2
 8000660:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000662:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000666:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	4618      	mov	r0, r3
 800066c:	f002 f90e 	bl	800288c <HAL_RCCEx_PeriphCLKConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	bf14      	ite	ne
 8000676:	2301      	movne	r3, #1
 8000678:	2300      	moveq	r3, #0
 800067a:	b2db      	uxtb	r3, r3
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <_Z18SystemClock_Configv+0xcc>
  {
    Error_Handler();
 8000680:	f000 fab4 	bl	8000bec <Error_Handler>
  }
}
 8000684:	bf00      	nop
 8000686:	3750      	adds	r7, #80	@ 0x50
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}

0800068c <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800069c:	4b1d      	ldr	r3, [pc, #116]	@ (8000714 <_ZL12MX_ADC1_Initv+0x88>)
 800069e:	4a1e      	ldr	r2, [pc, #120]	@ (8000718 <_ZL12MX_ADC1_Initv+0x8c>)
 80006a0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006a2:	4b1c      	ldr	r3, [pc, #112]	@ (8000714 <_ZL12MX_ADC1_Initv+0x88>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000714 <_ZL12MX_ADC1_Initv+0x88>)
 80006aa:	2201      	movs	r2, #1
 80006ac:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006ae:	4b19      	ldr	r3, [pc, #100]	@ (8000714 <_ZL12MX_ADC1_Initv+0x88>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006b4:	4b17      	ldr	r3, [pc, #92]	@ (8000714 <_ZL12MX_ADC1_Initv+0x88>)
 80006b6:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80006ba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006bc:	4b15      	ldr	r3, [pc, #84]	@ (8000714 <_ZL12MX_ADC1_Initv+0x88>)
 80006be:	2200      	movs	r2, #0
 80006c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80006c2:	4b14      	ldr	r3, [pc, #80]	@ (8000714 <_ZL12MX_ADC1_Initv+0x88>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006c8:	4812      	ldr	r0, [pc, #72]	@ (8000714 <_ZL12MX_ADC1_Initv+0x88>)
 80006ca:	f000 fd57 	bl	800117c <HAL_ADC_Init>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	bf14      	ite	ne
 80006d4:	2301      	movne	r3, #1
 80006d6:	2300      	moveq	r3, #0
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <_ZL12MX_ADC1_Initv+0x56>
  {
    Error_Handler();
 80006de:	f000 fa85 	bl	8000bec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80006e2:	2303      	movs	r3, #3
 80006e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006e6:	2301      	movs	r3, #1
 80006e8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80006ea:	2300      	movs	r3, #0
 80006ec:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	4619      	mov	r1, r3
 80006f2:	4808      	ldr	r0, [pc, #32]	@ (8000714 <_ZL12MX_ADC1_Initv+0x88>)
 80006f4:	f000 fe1a 	bl	800132c <HAL_ADC_ConfigChannel>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	bf14      	ite	ne
 80006fe:	2301      	movne	r3, #1
 8000700:	2300      	moveq	r3, #0
 8000702:	b2db      	uxtb	r3, r3
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <_ZL12MX_ADC1_Initv+0x80>
  {
    Error_Handler();
 8000708:	f000 fa70 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800070c:	bf00      	nop
 800070e:	3710      	adds	r7, #16
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	20000028 	.word	0x20000028
 8000718:	40012400 	.word	0x40012400

0800071c <_ZL11MX_CAN_Initv>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000720:	4b19      	ldr	r3, [pc, #100]	@ (8000788 <_ZL11MX_CAN_Initv+0x6c>)
 8000722:	4a1a      	ldr	r2, [pc, #104]	@ (800078c <_ZL11MX_CAN_Initv+0x70>)
 8000724:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000726:	4b18      	ldr	r3, [pc, #96]	@ (8000788 <_ZL11MX_CAN_Initv+0x6c>)
 8000728:	2210      	movs	r2, #16
 800072a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 800072c:	4b16      	ldr	r3, [pc, #88]	@ (8000788 <_ZL11MX_CAN_Initv+0x6c>)
 800072e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000732:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000734:	4b14      	ldr	r3, [pc, #80]	@ (8000788 <_ZL11MX_CAN_Initv+0x6c>)
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 800073a:	4b13      	ldr	r3, [pc, #76]	@ (8000788 <_ZL11MX_CAN_Initv+0x6c>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000740:	4b11      	ldr	r3, [pc, #68]	@ (8000788 <_ZL11MX_CAN_Initv+0x6c>)
 8000742:	2200      	movs	r2, #0
 8000744:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000746:	4b10      	ldr	r3, [pc, #64]	@ (8000788 <_ZL11MX_CAN_Initv+0x6c>)
 8000748:	2200      	movs	r2, #0
 800074a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800074c:	4b0e      	ldr	r3, [pc, #56]	@ (8000788 <_ZL11MX_CAN_Initv+0x6c>)
 800074e:	2200      	movs	r2, #0
 8000750:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000752:	4b0d      	ldr	r3, [pc, #52]	@ (8000788 <_ZL11MX_CAN_Initv+0x6c>)
 8000754:	2200      	movs	r2, #0
 8000756:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000758:	4b0b      	ldr	r3, [pc, #44]	@ (8000788 <_ZL11MX_CAN_Initv+0x6c>)
 800075a:	2200      	movs	r2, #0
 800075c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800075e:	4b0a      	ldr	r3, [pc, #40]	@ (8000788 <_ZL11MX_CAN_Initv+0x6c>)
 8000760:	2200      	movs	r2, #0
 8000762:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000764:	4b08      	ldr	r3, [pc, #32]	@ (8000788 <_ZL11MX_CAN_Initv+0x6c>)
 8000766:	2200      	movs	r2, #0
 8000768:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800076a:	4807      	ldr	r0, [pc, #28]	@ (8000788 <_ZL11MX_CAN_Initv+0x6c>)
 800076c:	f000 ff17 	bl	800159e <HAL_CAN_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	bf14      	ite	ne
 8000776:	2301      	movne	r3, #1
 8000778:	2300      	moveq	r3, #0
 800077a:	b2db      	uxtb	r3, r3
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <_ZL11MX_CAN_Initv+0x68>
  {
    Error_Handler();
 8000780:	f000 fa34 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000784:	bf00      	nop
 8000786:	bd80      	pop	{r7, pc}
 8000788:	20000058 	.word	0x20000058
 800078c:	40006400 	.word	0x40006400

08000790 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b092      	sub	sp, #72	@ 0x48
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000796:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]
 80007b0:	615a      	str	r2, [r3, #20]
 80007b2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007b4:	1d3b      	adds	r3, r7, #4
 80007b6:	2220      	movs	r2, #32
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f002 feb3 	bl	8003526 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007c0:	4b4e      	ldr	r3, [pc, #312]	@ (80008fc <_ZL12MX_TIM1_Initv+0x16c>)
 80007c2:	4a4f      	ldr	r2, [pc, #316]	@ (8000900 <_ZL12MX_TIM1_Initv+0x170>)
 80007c4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80007c6:	4b4d      	ldr	r3, [pc, #308]	@ (80008fc <_ZL12MX_TIM1_Initv+0x16c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007cc:	4b4b      	ldr	r3, [pc, #300]	@ (80008fc <_ZL12MX_TIM1_Initv+0x16c>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80007d2:	4b4a      	ldr	r3, [pc, #296]	@ (80008fc <_ZL12MX_TIM1_Initv+0x16c>)
 80007d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007d8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007da:	4b48      	ldr	r3, [pc, #288]	@ (80008fc <_ZL12MX_TIM1_Initv+0x16c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007e0:	4b46      	ldr	r3, [pc, #280]	@ (80008fc <_ZL12MX_TIM1_Initv+0x16c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e6:	4b45      	ldr	r3, [pc, #276]	@ (80008fc <_ZL12MX_TIM1_Initv+0x16c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007ec:	4843      	ldr	r0, [pc, #268]	@ (80008fc <_ZL12MX_TIM1_Initv+0x16c>)
 80007ee:	f002 f903 	bl	80029f8 <HAL_TIM_PWM_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	bf14      	ite	ne
 80007f8:	2301      	movne	r3, #1
 80007fa:	2300      	moveq	r3, #0
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <_ZL12MX_TIM1_Initv+0x76>
  {
    Error_Handler();
 8000802:	f000 f9f3 	bl	8000bec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000806:	2300      	movs	r3, #0
 8000808:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800080a:	2300      	movs	r3, #0
 800080c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800080e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000812:	4619      	mov	r1, r3
 8000814:	4839      	ldr	r0, [pc, #228]	@ (80008fc <_ZL12MX_TIM1_Initv+0x16c>)
 8000816:	f002 fddd 	bl	80033d4 <HAL_TIMEx_MasterConfigSynchronization>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	bf14      	ite	ne
 8000820:	2301      	movne	r3, #1
 8000822:	2300      	moveq	r3, #0
 8000824:	b2db      	uxtb	r3, r3
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <_ZL12MX_TIM1_Initv+0x9e>
  {
    Error_Handler();
 800082a:	f000 f9df 	bl	8000bec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800082e:	2360      	movs	r3, #96	@ 0x60
 8000830:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000836:	2300      	movs	r3, #0
 8000838:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800083a:	2300      	movs	r3, #0
 800083c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800083e:	2300      	movs	r3, #0
 8000840:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000842:	2300      	movs	r3, #0
 8000844:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000846:	2300      	movs	r3, #0
 8000848:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800084a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800084e:	2200      	movs	r2, #0
 8000850:	4619      	mov	r1, r3
 8000852:	482a      	ldr	r0, [pc, #168]	@ (80008fc <_ZL12MX_TIM1_Initv+0x16c>)
 8000854:	f002 faec 	bl	8002e30 <HAL_TIM_PWM_ConfigChannel>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	bf14      	ite	ne
 800085e:	2301      	movne	r3, #1
 8000860:	2300      	moveq	r3, #0
 8000862:	b2db      	uxtb	r3, r3
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <_ZL12MX_TIM1_Initv+0xdc>
  {
    Error_Handler();
 8000868:	f000 f9c0 	bl	8000bec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800086c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000870:	2208      	movs	r2, #8
 8000872:	4619      	mov	r1, r3
 8000874:	4821      	ldr	r0, [pc, #132]	@ (80008fc <_ZL12MX_TIM1_Initv+0x16c>)
 8000876:	f002 fadb 	bl	8002e30 <HAL_TIM_PWM_ConfigChannel>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	bf14      	ite	ne
 8000880:	2301      	movne	r3, #1
 8000882:	2300      	moveq	r3, #0
 8000884:	b2db      	uxtb	r3, r3
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <_ZL12MX_TIM1_Initv+0xfe>
  {
    Error_Handler();
 800088a:	f000 f9af 	bl	8000bec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800088e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000892:	220c      	movs	r2, #12
 8000894:	4619      	mov	r1, r3
 8000896:	4819      	ldr	r0, [pc, #100]	@ (80008fc <_ZL12MX_TIM1_Initv+0x16c>)
 8000898:	f002 faca 	bl	8002e30 <HAL_TIM_PWM_ConfigChannel>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	bf14      	ite	ne
 80008a2:	2301      	movne	r3, #1
 80008a4:	2300      	moveq	r3, #0
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <_ZL12MX_TIM1_Initv+0x120>
  {
    Error_Handler();
 80008ac:	f000 f99e 	bl	8000bec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008b0:	2300      	movs	r3, #0
 80008b2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008b4:	2300      	movs	r3, #0
 80008b6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008b8:	2300      	movs	r3, #0
 80008ba:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008c0:	2300      	movs	r3, #0
 80008c2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008c8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008ca:	2300      	movs	r3, #0
 80008cc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008ce:	1d3b      	adds	r3, r7, #4
 80008d0:	4619      	mov	r1, r3
 80008d2:	480a      	ldr	r0, [pc, #40]	@ (80008fc <_ZL12MX_TIM1_Initv+0x16c>)
 80008d4:	f002 fdd6 	bl	8003484 <HAL_TIMEx_ConfigBreakDeadTime>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	bf14      	ite	ne
 80008de:	2301      	movne	r3, #1
 80008e0:	2300      	moveq	r3, #0
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <_ZL12MX_TIM1_Initv+0x15c>
  {
    Error_Handler();
 80008e8:	f000 f980 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008ec:	4803      	ldr	r0, [pc, #12]	@ (80008fc <_ZL12MX_TIM1_Initv+0x16c>)
 80008ee:	f000 fb15 	bl	8000f1c <HAL_TIM_MspPostInit>

}
 80008f2:	bf00      	nop
 80008f4:	3748      	adds	r7, #72	@ 0x48
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000080 	.word	0x20000080
 8000900:	40012c00 	.word	0x40012c00

08000904 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b092      	sub	sp, #72	@ 0x48
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800090a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800090e:	2224      	movs	r2, #36	@ 0x24
 8000910:	2100      	movs	r1, #0
 8000912:	4618      	mov	r0, r3
 8000914:	f002 fe07 	bl	8003526 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000918:	f107 031c 	add.w	r3, r7, #28
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000922:	463b      	mov	r3, r7
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	60da      	str	r2, [r3, #12]
 800092e:	611a      	str	r2, [r3, #16]
 8000930:	615a      	str	r2, [r3, #20]
 8000932:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000934:	4b3a      	ldr	r3, [pc, #232]	@ (8000a20 <_ZL12MX_TIM2_Initv+0x11c>)
 8000936:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800093a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800093c:	4b38      	ldr	r3, [pc, #224]	@ (8000a20 <_ZL12MX_TIM2_Initv+0x11c>)
 800093e:	2200      	movs	r2, #0
 8000940:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000942:	4b37      	ldr	r3, [pc, #220]	@ (8000a20 <_ZL12MX_TIM2_Initv+0x11c>)
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 6553;
 8000948:	4b35      	ldr	r3, [pc, #212]	@ (8000a20 <_ZL12MX_TIM2_Initv+0x11c>)
 800094a:	f641 1299 	movw	r2, #6553	@ 0x1999
 800094e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000950:	4b33      	ldr	r3, [pc, #204]	@ (8000a20 <_ZL12MX_TIM2_Initv+0x11c>)
 8000952:	2200      	movs	r2, #0
 8000954:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000956:	4b32      	ldr	r3, [pc, #200]	@ (8000a20 <_ZL12MX_TIM2_Initv+0x11c>)
 8000958:	2280      	movs	r2, #128	@ 0x80
 800095a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800095c:	4830      	ldr	r0, [pc, #192]	@ (8000a20 <_ZL12MX_TIM2_Initv+0x11c>)
 800095e:	f002 f84b 	bl	80029f8 <HAL_TIM_PWM_Init>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	bf14      	ite	ne
 8000968:	2301      	movne	r3, #1
 800096a:	2300      	moveq	r3, #0
 800096c:	b2db      	uxtb	r3, r3
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <_ZL12MX_TIM2_Initv+0x72>
  {
    Error_Handler();
 8000972:	f000 f93b 	bl	8000bec <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000976:	2303      	movs	r3, #3
 8000978:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800097a:	2300      	movs	r3, #0
 800097c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800097e:	2301      	movs	r3, #1
 8000980:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000982:	2300      	movs	r3, #0
 8000984:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfig.IC1Filter = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800098a:	2300      	movs	r3, #0
 800098c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800098e:	2301      	movs	r3, #1
 8000990:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000992:	2300      	movs	r3, #0
 8000994:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.IC2Filter = 0;
 8000996:	2300      	movs	r3, #0
 8000998:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800099a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800099e:	4619      	mov	r1, r3
 80009a0:	481f      	ldr	r0, [pc, #124]	@ (8000a20 <_ZL12MX_TIM2_Initv+0x11c>)
 80009a2:	f002 f915 	bl	8002bd0 <HAL_TIM_Encoder_Init>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	bf14      	ite	ne
 80009ac:	2301      	movne	r3, #1
 80009ae:	2300      	moveq	r3, #0
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <_ZL12MX_TIM2_Initv+0xb6>
  {
    Error_Handler();
 80009b6:	f000 f919 	bl	8000bec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009be:	2300      	movs	r3, #0
 80009c0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009c2:	f107 031c 	add.w	r3, r7, #28
 80009c6:	4619      	mov	r1, r3
 80009c8:	4815      	ldr	r0, [pc, #84]	@ (8000a20 <_ZL12MX_TIM2_Initv+0x11c>)
 80009ca:	f002 fd03 	bl	80033d4 <HAL_TIMEx_MasterConfigSynchronization>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	bf14      	ite	ne
 80009d4:	2301      	movne	r3, #1
 80009d6:	2300      	moveq	r3, #0
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <_ZL12MX_TIM2_Initv+0xde>
  {
    Error_Handler();
 80009de:	f000 f905 	bl	8000bec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009e2:	2360      	movs	r3, #96	@ 0x60
 80009e4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80009e6:	2300      	movs	r3, #0
 80009e8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009ea:	2300      	movs	r3, #0
 80009ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009ee:	2300      	movs	r3, #0
 80009f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009f2:	463b      	mov	r3, r7
 80009f4:	2208      	movs	r2, #8
 80009f6:	4619      	mov	r1, r3
 80009f8:	4809      	ldr	r0, [pc, #36]	@ (8000a20 <_ZL12MX_TIM2_Initv+0x11c>)
 80009fa:	f002 fa19 	bl	8002e30 <HAL_TIM_PWM_ConfigChannel>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	bf14      	ite	ne
 8000a04:	2301      	movne	r3, #1
 8000a06:	2300      	moveq	r3, #0
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <_ZL12MX_TIM2_Initv+0x10e>
  {
    Error_Handler();
 8000a0e:	f000 f8ed 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a12:	4803      	ldr	r0, [pc, #12]	@ (8000a20 <_ZL12MX_TIM2_Initv+0x11c>)
 8000a14:	f000 fa82 	bl	8000f1c <HAL_TIM_MspPostInit>

}
 8000a18:	bf00      	nop
 8000a1a:	3748      	adds	r7, #72	@ 0x48
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	200000c8 	.word	0x200000c8

08000a24 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08c      	sub	sp, #48	@ 0x30
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a2a:	f107 030c 	add.w	r3, r7, #12
 8000a2e:	2224      	movs	r2, #36	@ 0x24
 8000a30:	2100      	movs	r1, #0
 8000a32:	4618      	mov	r0, r3
 8000a34:	f002 fd77 	bl	8003526 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a38:	1d3b      	adds	r3, r7, #4
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a40:	4b25      	ldr	r3, [pc, #148]	@ (8000ad8 <_ZL12MX_TIM3_Initv+0xb4>)
 8000a42:	4a26      	ldr	r2, [pc, #152]	@ (8000adc <_ZL12MX_TIM3_Initv+0xb8>)
 8000a44:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000a46:	4b24      	ldr	r3, [pc, #144]	@ (8000ad8 <_ZL12MX_TIM3_Initv+0xb4>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a4c:	4b22      	ldr	r3, [pc, #136]	@ (8000ad8 <_ZL12MX_TIM3_Initv+0xb4>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000a52:	4b21      	ldr	r3, [pc, #132]	@ (8000ad8 <_ZL12MX_TIM3_Initv+0xb4>)
 8000a54:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a58:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a5a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ad8 <_ZL12MX_TIM3_Initv+0xb4>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a60:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad8 <_ZL12MX_TIM3_Initv+0xb4>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000a66:	2301      	movs	r3, #1
 8000a68:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a72:	2300      	movs	r3, #0
 8000a74:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a82:	2300      	movs	r3, #0
 8000a84:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000a8a:	f107 030c 	add.w	r3, r7, #12
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4811      	ldr	r0, [pc, #68]	@ (8000ad8 <_ZL12MX_TIM3_Initv+0xb4>)
 8000a92:	f002 f89d 	bl	8002bd0 <HAL_TIM_Encoder_Init>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	bf14      	ite	ne
 8000a9c:	2301      	movne	r3, #1
 8000a9e:	2300      	moveq	r3, #0
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <_ZL12MX_TIM3_Initv+0x86>
  {
    Error_Handler();
 8000aa6:	f000 f8a1 	bl	8000bec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ab2:	1d3b      	adds	r3, r7, #4
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4808      	ldr	r0, [pc, #32]	@ (8000ad8 <_ZL12MX_TIM3_Initv+0xb4>)
 8000ab8:	f002 fc8c 	bl	80033d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	bf14      	ite	ne
 8000ac2:	2301      	movne	r3, #1
 8000ac4:	2300      	moveq	r3, #0
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <_ZL12MX_TIM3_Initv+0xac>
  {
    Error_Handler();
 8000acc:	f000 f88e 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ad0:	bf00      	nop
 8000ad2:	3730      	adds	r7, #48	@ 0x30
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20000110 	.word	0x20000110
 8000adc:	40000400 	.word	0x40000400

08000ae0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b088      	sub	sp, #32
 8000ae4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae6:	f107 0310 	add.w	r3, r7, #16
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	605a      	str	r2, [r3, #4]
 8000af0:	609a      	str	r2, [r3, #8]
 8000af2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000af4:	4b39      	ldr	r3, [pc, #228]	@ (8000bdc <_ZL12MX_GPIO_Initv+0xfc>)
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	4a38      	ldr	r2, [pc, #224]	@ (8000bdc <_ZL12MX_GPIO_Initv+0xfc>)
 8000afa:	f043 0310 	orr.w	r3, r3, #16
 8000afe:	6193      	str	r3, [r2, #24]
 8000b00:	4b36      	ldr	r3, [pc, #216]	@ (8000bdc <_ZL12MX_GPIO_Initv+0xfc>)
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	f003 0310 	and.w	r3, r3, #16
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b0c:	4b33      	ldr	r3, [pc, #204]	@ (8000bdc <_ZL12MX_GPIO_Initv+0xfc>)
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	4a32      	ldr	r2, [pc, #200]	@ (8000bdc <_ZL12MX_GPIO_Initv+0xfc>)
 8000b12:	f043 0320 	orr.w	r3, r3, #32
 8000b16:	6193      	str	r3, [r2, #24]
 8000b18:	4b30      	ldr	r3, [pc, #192]	@ (8000bdc <_ZL12MX_GPIO_Initv+0xfc>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	f003 0320 	and.w	r3, r3, #32
 8000b20:	60bb      	str	r3, [r7, #8]
 8000b22:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b24:	4b2d      	ldr	r3, [pc, #180]	@ (8000bdc <_ZL12MX_GPIO_Initv+0xfc>)
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	4a2c      	ldr	r2, [pc, #176]	@ (8000bdc <_ZL12MX_GPIO_Initv+0xfc>)
 8000b2a:	f043 0304 	orr.w	r3, r3, #4
 8000b2e:	6193      	str	r3, [r2, #24]
 8000b30:	4b2a      	ldr	r3, [pc, #168]	@ (8000bdc <_ZL12MX_GPIO_Initv+0xfc>)
 8000b32:	699b      	ldr	r3, [r3, #24]
 8000b34:	f003 0304 	and.w	r3, r3, #4
 8000b38:	607b      	str	r3, [r7, #4]
 8000b3a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3c:	4b27      	ldr	r3, [pc, #156]	@ (8000bdc <_ZL12MX_GPIO_Initv+0xfc>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	4a26      	ldr	r2, [pc, #152]	@ (8000bdc <_ZL12MX_GPIO_Initv+0xfc>)
 8000b42:	f043 0308 	orr.w	r3, r3, #8
 8000b46:	6193      	str	r3, [r2, #24]
 8000b48:	4b24      	ldr	r3, [pc, #144]	@ (8000bdc <_ZL12MX_GPIO_Initv+0xfc>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	f003 0308 	and.w	r3, r3, #8
 8000b50:	603b      	str	r3, [r7, #0]
 8000b52:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000b54:	2200      	movs	r2, #0
 8000b56:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b5a:	4821      	ldr	r0, [pc, #132]	@ (8000be0 <_ZL12MX_GPIO_Initv+0x100>)
 8000b5c:	f001 fa86 	bl	800206c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000b60:	2200      	movs	r2, #0
 8000b62:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b66:	481f      	ldr	r0, [pc, #124]	@ (8000be4 <_ZL12MX_GPIO_Initv+0x104>)
 8000b68:	f001 fa80 	bl	800206c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b72:	481d      	ldr	r0, [pc, #116]	@ (8000be8 <_ZL12MX_GPIO_Initv+0x108>)
 8000b74:	f001 fa7a 	bl	800206c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b78:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b86:	2302      	movs	r3, #2
 8000b88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b8a:	f107 0310 	add.w	r3, r7, #16
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4813      	ldr	r0, [pc, #76]	@ (8000be0 <_ZL12MX_GPIO_Initv+0x100>)
 8000b92:	f001 f8ef 	bl	8001d74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000b96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba8:	f107 0310 	add.w	r3, r7, #16
 8000bac:	4619      	mov	r1, r3
 8000bae:	480d      	ldr	r0, [pc, #52]	@ (8000be4 <_ZL12MX_GPIO_Initv+0x104>)
 8000bb0:	f001 f8e0 	bl	8001d74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000bb4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000bb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc6:	f107 0310 	add.w	r3, r7, #16
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4806      	ldr	r0, [pc, #24]	@ (8000be8 <_ZL12MX_GPIO_Initv+0x108>)
 8000bce:	f001 f8d1 	bl	8001d74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bd2:	bf00      	nop
 8000bd4:	3720      	adds	r7, #32
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	40011000 	.word	0x40011000
 8000be4:	40010c00 	.word	0x40010c00
 8000be8:	40010800 	.word	0x40010800

08000bec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000bf0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bf4:	4803      	ldr	r0, [pc, #12]	@ (8000c04 <Error_Handler+0x18>)
 8000bf6:	f001 fa51 	bl	800209c <HAL_GPIO_TogglePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bfa:	b672      	cpsid	i
}
 8000bfc:	bf00      	nop

  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bfe:	bf00      	nop
 8000c00:	e7fd      	b.n	8000bfe <Error_Handler+0x12>
 8000c02:	bf00      	nop
 8000c04:	40011000 	.word	0x40011000

08000c08 <_ZN12MotorControlC1EP17TIM_HandleTypeDefm>:

#include "motorControl.hpp"
#include <cmath>

// Constructor
MotorControl::MotorControl(TIM_HandleTypeDef* timer, uint32_t channel)
 8000c08:	b480      	push	{r7}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	60b9      	str	r1, [r7, #8]
 8000c12:	607a      	str	r2, [r7, #4]
    : htim(timer), channel(channel), lastDirection(GPIO_PIN_SET),
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	68ba      	ldr	r2, [r7, #8]
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	687a      	ldr	r2, [r7, #4]
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	2201      	movs	r2, #1
 8000c24:	721a      	strb	r2, [r3, #8]
      integral(0.0f), previousError(0.0f) {}
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	f04f 0200 	mov.w	r2, #0
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	f04f 0200 	mov.w	r2, #0
 8000c34:	611a      	str	r2, [r3, #16]
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3714      	adds	r7, #20
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bc80      	pop	{r7}
 8000c40:	4770      	bx	lr

08000c42 <_ZN12MotorControl5startEv>:

// Starts PWM
void MotorControl::start() {
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b082      	sub	sp, #8
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Start(htim, channel);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	4619      	mov	r1, r3
 8000c54:	4610      	mov	r0, r2
 8000c56:	f001 ff1f 	bl	8002a98 <HAL_TIM_PWM_Start>
}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c6a:	4b15      	ldr	r3, [pc, #84]	@ (8000cc0 <HAL_MspInit+0x5c>)
 8000c6c:	699b      	ldr	r3, [r3, #24]
 8000c6e:	4a14      	ldr	r2, [pc, #80]	@ (8000cc0 <HAL_MspInit+0x5c>)
 8000c70:	f043 0301 	orr.w	r3, r3, #1
 8000c74:	6193      	str	r3, [r2, #24]
 8000c76:	4b12      	ldr	r3, [pc, #72]	@ (8000cc0 <HAL_MspInit+0x5c>)
 8000c78:	699b      	ldr	r3, [r3, #24]
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	60bb      	str	r3, [r7, #8]
 8000c80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c82:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc0 <HAL_MspInit+0x5c>)
 8000c84:	69db      	ldr	r3, [r3, #28]
 8000c86:	4a0e      	ldr	r2, [pc, #56]	@ (8000cc0 <HAL_MspInit+0x5c>)
 8000c88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c8c:	61d3      	str	r3, [r2, #28]
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc0 <HAL_MspInit+0x5c>)
 8000c90:	69db      	ldr	r3, [r3, #28]
 8000c92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc4 <HAL_MspInit+0x60>)
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	4a04      	ldr	r2, [pc, #16]	@ (8000cc4 <HAL_MspInit+0x60>)
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	3714      	adds	r7, #20
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bc80      	pop	{r7}
 8000cbe:	4770      	bx	lr
 8000cc0:	40021000 	.word	0x40021000
 8000cc4:	40010000 	.word	0x40010000

08000cc8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b088      	sub	sp, #32
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd0:	f107 0310 	add.w	r3, r7, #16
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a14      	ldr	r2, [pc, #80]	@ (8000d34 <HAL_ADC_MspInit+0x6c>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d121      	bne.n	8000d2c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ce8:	4b13      	ldr	r3, [pc, #76]	@ (8000d38 <HAL_ADC_MspInit+0x70>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	4a12      	ldr	r2, [pc, #72]	@ (8000d38 <HAL_ADC_MspInit+0x70>)
 8000cee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cf2:	6193      	str	r3, [r2, #24]
 8000cf4:	4b10      	ldr	r3, [pc, #64]	@ (8000d38 <HAL_ADC_MspInit+0x70>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d00:	4b0d      	ldr	r3, [pc, #52]	@ (8000d38 <HAL_ADC_MspInit+0x70>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	4a0c      	ldr	r2, [pc, #48]	@ (8000d38 <HAL_ADC_MspInit+0x70>)
 8000d06:	f043 0304 	orr.w	r3, r3, #4
 8000d0a:	6193      	str	r3, [r2, #24]
 8000d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d38 <HAL_ADC_MspInit+0x70>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	f003 0304 	and.w	r3, r3, #4
 8000d14:	60bb      	str	r3, [r7, #8]
 8000d16:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000d18:	2318      	movs	r3, #24
 8000d1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d20:	f107 0310 	add.w	r3, r7, #16
 8000d24:	4619      	mov	r1, r3
 8000d26:	4805      	ldr	r0, [pc, #20]	@ (8000d3c <HAL_ADC_MspInit+0x74>)
 8000d28:	f001 f824 	bl	8001d74 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000d2c:	bf00      	nop
 8000d2e:	3720      	adds	r7, #32
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40012400 	.word	0x40012400
 8000d38:	40021000 	.word	0x40021000
 8000d3c:	40010800 	.word	0x40010800

08000d40 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08a      	sub	sp, #40	@ 0x28
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d48:	f107 0314 	add.w	r3, r7, #20
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a25      	ldr	r2, [pc, #148]	@ (8000df0 <HAL_CAN_MspInit+0xb0>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d143      	bne.n	8000de8 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000d60:	4b24      	ldr	r3, [pc, #144]	@ (8000df4 <HAL_CAN_MspInit+0xb4>)
 8000d62:	69db      	ldr	r3, [r3, #28]
 8000d64:	4a23      	ldr	r2, [pc, #140]	@ (8000df4 <HAL_CAN_MspInit+0xb4>)
 8000d66:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d6a:	61d3      	str	r3, [r2, #28]
 8000d6c:	4b21      	ldr	r3, [pc, #132]	@ (8000df4 <HAL_CAN_MspInit+0xb4>)
 8000d6e:	69db      	ldr	r3, [r3, #28]
 8000d70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d74:	613b      	str	r3, [r7, #16]
 8000d76:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d78:	4b1e      	ldr	r3, [pc, #120]	@ (8000df4 <HAL_CAN_MspInit+0xb4>)
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	4a1d      	ldr	r2, [pc, #116]	@ (8000df4 <HAL_CAN_MspInit+0xb4>)
 8000d7e:	f043 0308 	orr.w	r3, r3, #8
 8000d82:	6193      	str	r3, [r2, #24]
 8000d84:	4b1b      	ldr	r3, [pc, #108]	@ (8000df4 <HAL_CAN_MspInit+0xb4>)
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	f003 0308 	and.w	r3, r3, #8
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d90:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d96:	2300      	movs	r3, #0
 8000d98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d9e:	f107 0314 	add.w	r3, r7, #20
 8000da2:	4619      	mov	r1, r3
 8000da4:	4814      	ldr	r0, [pc, #80]	@ (8000df8 <HAL_CAN_MspInit+0xb8>)
 8000da6:	f000 ffe5 	bl	8001d74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000daa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000dae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db0:	2302      	movs	r3, #2
 8000db2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000db4:	2303      	movs	r3, #3
 8000db6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db8:	f107 0314 	add.w	r3, r7, #20
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	480e      	ldr	r0, [pc, #56]	@ (8000df8 <HAL_CAN_MspInit+0xb8>)
 8000dc0:	f000 ffd8 	bl	8001d74 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000dc4:	4b0d      	ldr	r3, [pc, #52]	@ (8000dfc <HAL_CAN_MspInit+0xbc>)
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dcc:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8000dd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8000dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dd4:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000dd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ddc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000de0:	627b      	str	r3, [r7, #36]	@ 0x24
 8000de2:	4a06      	ldr	r2, [pc, #24]	@ (8000dfc <HAL_CAN_MspInit+0xbc>)
 8000de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000de6:	6053      	str	r3, [r2, #4]

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000de8:	bf00      	nop
 8000dea:	3728      	adds	r7, #40	@ 0x28
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40006400 	.word	0x40006400
 8000df4:	40021000 	.word	0x40021000
 8000df8:	40010c00 	.word	0x40010c00
 8000dfc:	40010000 	.word	0x40010000

08000e00 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08a      	sub	sp, #40	@ 0x28
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e08:	f107 0318 	add.w	r3, r7, #24
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
  if(htim_pwm->Instance==TIM1)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a1e      	ldr	r2, [pc, #120]	@ (8000e94 <HAL_TIM_PWM_MspInit+0x94>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d10c      	bne.n	8000e3a <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e20:	4b1d      	ldr	r3, [pc, #116]	@ (8000e98 <HAL_TIM_PWM_MspInit+0x98>)
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	4a1c      	ldr	r2, [pc, #112]	@ (8000e98 <HAL_TIM_PWM_MspInit+0x98>)
 8000e26:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000e2a:	6193      	str	r3, [r2, #24]
 8000e2c:	4b1a      	ldr	r3, [pc, #104]	@ (8000e98 <HAL_TIM_PWM_MspInit+0x98>)
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000e34:	617b      	str	r3, [r7, #20]
 8000e36:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e38:	e028      	b.n	8000e8c <HAL_TIM_PWM_MspInit+0x8c>
  else if(htim_pwm->Instance==TIM2)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e42:	d123      	bne.n	8000e8c <HAL_TIM_PWM_MspInit+0x8c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e44:	4b14      	ldr	r3, [pc, #80]	@ (8000e98 <HAL_TIM_PWM_MspInit+0x98>)
 8000e46:	69db      	ldr	r3, [r3, #28]
 8000e48:	4a13      	ldr	r2, [pc, #76]	@ (8000e98 <HAL_TIM_PWM_MspInit+0x98>)
 8000e4a:	f043 0301 	orr.w	r3, r3, #1
 8000e4e:	61d3      	str	r3, [r2, #28]
 8000e50:	4b11      	ldr	r3, [pc, #68]	@ (8000e98 <HAL_TIM_PWM_MspInit+0x98>)
 8000e52:	69db      	ldr	r3, [r3, #28]
 8000e54:	f003 0301 	and.w	r3, r3, #1
 8000e58:	613b      	str	r3, [r7, #16]
 8000e5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000e98 <HAL_TIM_PWM_MspInit+0x98>)
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	4a0d      	ldr	r2, [pc, #52]	@ (8000e98 <HAL_TIM_PWM_MspInit+0x98>)
 8000e62:	f043 0304 	orr.w	r3, r3, #4
 8000e66:	6193      	str	r3, [r2, #24]
 8000e68:	4b0b      	ldr	r3, [pc, #44]	@ (8000e98 <HAL_TIM_PWM_MspInit+0x98>)
 8000e6a:	699b      	ldr	r3, [r3, #24]
 8000e6c:	f003 0304 	and.w	r3, r3, #4
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e74:	2303      	movs	r3, #3
 8000e76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e80:	f107 0318 	add.w	r3, r7, #24
 8000e84:	4619      	mov	r1, r3
 8000e86:	4805      	ldr	r0, [pc, #20]	@ (8000e9c <HAL_TIM_PWM_MspInit+0x9c>)
 8000e88:	f000 ff74 	bl	8001d74 <HAL_GPIO_Init>
}
 8000e8c:	bf00      	nop
 8000e8e:	3728      	adds	r7, #40	@ 0x28
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40012c00 	.word	0x40012c00
 8000e98:	40021000 	.word	0x40021000
 8000e9c:	40010800 	.word	0x40010800

08000ea0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b088      	sub	sp, #32
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea8:	f107 0310 	add.w	r3, r7, #16
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a15      	ldr	r2, [pc, #84]	@ (8000f10 <HAL_TIM_Encoder_MspInit+0x70>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d123      	bne.n	8000f08 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ec0:	4b14      	ldr	r3, [pc, #80]	@ (8000f14 <HAL_TIM_Encoder_MspInit+0x74>)
 8000ec2:	69db      	ldr	r3, [r3, #28]
 8000ec4:	4a13      	ldr	r2, [pc, #76]	@ (8000f14 <HAL_TIM_Encoder_MspInit+0x74>)
 8000ec6:	f043 0302 	orr.w	r3, r3, #2
 8000eca:	61d3      	str	r3, [r2, #28]
 8000ecc:	4b11      	ldr	r3, [pc, #68]	@ (8000f14 <HAL_TIM_Encoder_MspInit+0x74>)
 8000ece:	69db      	ldr	r3, [r3, #28]
 8000ed0:	f003 0302 	and.w	r3, r3, #2
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed8:	4b0e      	ldr	r3, [pc, #56]	@ (8000f14 <HAL_TIM_Encoder_MspInit+0x74>)
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	4a0d      	ldr	r2, [pc, #52]	@ (8000f14 <HAL_TIM_Encoder_MspInit+0x74>)
 8000ede:	f043 0304 	orr.w	r3, r3, #4
 8000ee2:	6193      	str	r3, [r2, #24]
 8000ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8000f14 <HAL_TIM_Encoder_MspInit+0x74>)
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	f003 0304 	and.w	r3, r3, #4
 8000eec:	60bb      	str	r3, [r7, #8]
 8000eee:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ef0:	23c0      	movs	r3, #192	@ 0xc0
 8000ef2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efc:	f107 0310 	add.w	r3, r7, #16
 8000f00:	4619      	mov	r1, r3
 8000f02:	4805      	ldr	r0, [pc, #20]	@ (8000f18 <HAL_TIM_Encoder_MspInit+0x78>)
 8000f04:	f000 ff36 	bl	8001d74 <HAL_GPIO_Init>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000f08:	bf00      	nop
 8000f0a:	3720      	adds	r7, #32
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40000400 	.word	0x40000400
 8000f14:	40021000 	.word	0x40021000
 8000f18:	40010800 	.word	0x40010800

08000f1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b088      	sub	sp, #32
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f24:	f107 0310 	add.w	r3, r7, #16
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a1f      	ldr	r2, [pc, #124]	@ (8000fb4 <HAL_TIM_MspPostInit+0x98>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d119      	bne.n	8000f70 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3c:	4b1e      	ldr	r3, [pc, #120]	@ (8000fb8 <HAL_TIM_MspPostInit+0x9c>)
 8000f3e:	699b      	ldr	r3, [r3, #24]
 8000f40:	4a1d      	ldr	r2, [pc, #116]	@ (8000fb8 <HAL_TIM_MspPostInit+0x9c>)
 8000f42:	f043 0304 	orr.w	r3, r3, #4
 8000f46:	6193      	str	r3, [r2, #24]
 8000f48:	4b1b      	ldr	r3, [pc, #108]	@ (8000fb8 <HAL_TIM_MspPostInit+0x9c>)
 8000f4a:	699b      	ldr	r3, [r3, #24]
 8000f4c:	f003 0304 	and.w	r3, r3, #4
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11;
 8000f54:	f44f 6350 	mov.w	r3, #3328	@ 0xd00
 8000f58:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f62:	f107 0310 	add.w	r3, r7, #16
 8000f66:	4619      	mov	r1, r3
 8000f68:	4814      	ldr	r0, [pc, #80]	@ (8000fbc <HAL_TIM_MspPostInit+0xa0>)
 8000f6a:	f000 ff03 	bl	8001d74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000f6e:	e01c      	b.n	8000faa <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM2)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f78:	d117      	bne.n	8000faa <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb8 <HAL_TIM_MspPostInit+0x9c>)
 8000f7c:	699b      	ldr	r3, [r3, #24]
 8000f7e:	4a0e      	ldr	r2, [pc, #56]	@ (8000fb8 <HAL_TIM_MspPostInit+0x9c>)
 8000f80:	f043 0304 	orr.w	r3, r3, #4
 8000f84:	6193      	str	r3, [r2, #24]
 8000f86:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb8 <HAL_TIM_MspPostInit+0x9c>)
 8000f88:	699b      	ldr	r3, [r3, #24]
 8000f8a:	f003 0304 	and.w	r3, r3, #4
 8000f8e:	60bb      	str	r3, [r7, #8]
 8000f90:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f92:	2304      	movs	r3, #4
 8000f94:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f96:	2302      	movs	r3, #2
 8000f98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9e:	f107 0310 	add.w	r3, r7, #16
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4805      	ldr	r0, [pc, #20]	@ (8000fbc <HAL_TIM_MspPostInit+0xa0>)
 8000fa6:	f000 fee5 	bl	8001d74 <HAL_GPIO_Init>
}
 8000faa:	bf00      	nop
 8000fac:	3720      	adds	r7, #32
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40012c00 	.word	0x40012c00
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	40010800 	.word	0x40010800

08000fc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fc4:	bf00      	nop
 8000fc6:	e7fd      	b.n	8000fc4 <NMI_Handler+0x4>

08000fc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fcc:	bf00      	nop
 8000fce:	e7fd      	b.n	8000fcc <HardFault_Handler+0x4>

08000fd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd4:	bf00      	nop
 8000fd6:	e7fd      	b.n	8000fd4 <MemManage_Handler+0x4>

08000fd8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fdc:	bf00      	nop
 8000fde:	e7fd      	b.n	8000fdc <BusFault_Handler+0x4>

08000fe0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe4:	bf00      	nop
 8000fe6:	e7fd      	b.n	8000fe4 <UsageFault_Handler+0x4>

08000fe8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr

08000ff4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bc80      	pop	{r7}
 8000ffe:	4770      	bx	lr

08001000 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	bc80      	pop	{r7}
 800100a:	4770      	bx	lr

0800100c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001010:	f000 f874 	bl	80010fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}

08001018 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr

08001024 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001024:	f7ff fff8 	bl	8001018 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001028:	480b      	ldr	r0, [pc, #44]	@ (8001058 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800102a:	490c      	ldr	r1, [pc, #48]	@ (800105c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800102c:	4a0c      	ldr	r2, [pc, #48]	@ (8001060 <LoopFillZerobss+0x16>)
  movs r3, #0
 800102e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001030:	e002      	b.n	8001038 <LoopCopyDataInit>

08001032 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001032:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001034:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001036:	3304      	adds	r3, #4

08001038 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001038:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800103a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800103c:	d3f9      	bcc.n	8001032 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800103e:	4a09      	ldr	r2, [pc, #36]	@ (8001064 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001040:	4c09      	ldr	r4, [pc, #36]	@ (8001068 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001042:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001044:	e001      	b.n	800104a <LoopFillZerobss>

08001046 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001046:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001048:	3204      	adds	r2, #4

0800104a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800104a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800104c:	d3fb      	bcc.n	8001046 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800104e:	f002 fa73 	bl	8003538 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001052:	f7ff fa45 	bl	80004e0 <main>
  bx lr
 8001056:	4770      	bx	lr
  ldr r0, =_sdata
 8001058:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800105c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001060:	080035cc 	.word	0x080035cc
  ldr r2, =_sbss
 8001064:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001068:	2000015c 	.word	0x2000015c

0800106c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800106c:	e7fe      	b.n	800106c <ADC1_2_IRQHandler>
	...

08001070 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001074:	4b08      	ldr	r3, [pc, #32]	@ (8001098 <HAL_Init+0x28>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a07      	ldr	r2, [pc, #28]	@ (8001098 <HAL_Init+0x28>)
 800107a:	f043 0310 	orr.w	r3, r3, #16
 800107e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001080:	2003      	movs	r0, #3
 8001082:	f000 fe43 	bl	8001d0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001086:	200f      	movs	r0, #15
 8001088:	f000 f808 	bl	800109c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800108c:	f7ff fdea 	bl	8000c64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40022000 	.word	0x40022000

0800109c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010a4:	4b12      	ldr	r3, [pc, #72]	@ (80010f0 <HAL_InitTick+0x54>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	4b12      	ldr	r3, [pc, #72]	@ (80010f4 <HAL_InitTick+0x58>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	4619      	mov	r1, r3
 80010ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ba:	4618      	mov	r0, r3
 80010bc:	f000 fe4d 	bl	8001d5a <HAL_SYSTICK_Config>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e00e      	b.n	80010e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2b0f      	cmp	r3, #15
 80010ce:	d80a      	bhi.n	80010e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010d0:	2200      	movs	r2, #0
 80010d2:	6879      	ldr	r1, [r7, #4]
 80010d4:	f04f 30ff 	mov.w	r0, #4294967295
 80010d8:	f000 fe23 	bl	8001d22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010dc:	4a06      	ldr	r2, [pc, #24]	@ (80010f8 <HAL_InitTick+0x5c>)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010e2:	2300      	movs	r3, #0
 80010e4:	e000      	b.n	80010e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20000000 	.word	0x20000000
 80010f4:	20000008 	.word	0x20000008
 80010f8:	20000004 	.word	0x20000004

080010fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001100:	4b05      	ldr	r3, [pc, #20]	@ (8001118 <HAL_IncTick+0x1c>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	461a      	mov	r2, r3
 8001106:	4b05      	ldr	r3, [pc, #20]	@ (800111c <HAL_IncTick+0x20>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4413      	add	r3, r2
 800110c:	4a03      	ldr	r2, [pc, #12]	@ (800111c <HAL_IncTick+0x20>)
 800110e:	6013      	str	r3, [r2, #0]
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	bc80      	pop	{r7}
 8001116:	4770      	bx	lr
 8001118:	20000008 	.word	0x20000008
 800111c:	20000158 	.word	0x20000158

08001120 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  return uwTick;
 8001124:	4b02      	ldr	r3, [pc, #8]	@ (8001130 <HAL_GetTick+0x10>)
 8001126:	681b      	ldr	r3, [r3, #0]
}
 8001128:	4618      	mov	r0, r3
 800112a:	46bd      	mov	sp, r7
 800112c:	bc80      	pop	{r7}
 800112e:	4770      	bx	lr
 8001130:	20000158 	.word	0x20000158

08001134 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800113c:	f7ff fff0 	bl	8001120 <HAL_GetTick>
 8001140:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800114c:	d005      	beq.n	800115a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800114e:	4b0a      	ldr	r3, [pc, #40]	@ (8001178 <HAL_Delay+0x44>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	461a      	mov	r2, r3
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	4413      	add	r3, r2
 8001158:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800115a:	bf00      	nop
 800115c:	f7ff ffe0 	bl	8001120 <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	68fa      	ldr	r2, [r7, #12]
 8001168:	429a      	cmp	r2, r3
 800116a:	d8f7      	bhi.n	800115c <HAL_Delay+0x28>
  {
  }
}
 800116c:	bf00      	nop
 800116e:	bf00      	nop
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000008 	.word	0x20000008

0800117c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001184:	2300      	movs	r3, #0
 8001186:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001188:	2300      	movs	r3, #0
 800118a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800118c:	2300      	movs	r3, #0
 800118e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001190:	2300      	movs	r3, #0
 8001192:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d101      	bne.n	800119e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e0be      	b.n	800131c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d109      	bne.n	80011c0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2200      	movs	r2, #0
 80011b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f7ff fd84 	bl	8000cc8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f000 f9ab 	bl	800151c <ADC_ConversionStop_Disable>
 80011c6:	4603      	mov	r3, r0
 80011c8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011ce:	f003 0310 	and.w	r3, r3, #16
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	f040 8099 	bne.w	800130a <HAL_ADC_Init+0x18e>
 80011d8:	7dfb      	ldrb	r3, [r7, #23]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	f040 8095 	bne.w	800130a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011e4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80011e8:	f023 0302 	bic.w	r3, r3, #2
 80011ec:	f043 0202 	orr.w	r2, r3, #2
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80011fc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	7b1b      	ldrb	r3, [r3, #12]
 8001202:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001204:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001206:	68ba      	ldr	r2, [r7, #8]
 8001208:	4313      	orrs	r3, r2
 800120a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001214:	d003      	beq.n	800121e <HAL_ADC_Init+0xa2>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	2b01      	cmp	r3, #1
 800121c:	d102      	bne.n	8001224 <HAL_ADC_Init+0xa8>
 800121e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001222:	e000      	b.n	8001226 <HAL_ADC_Init+0xaa>
 8001224:	2300      	movs	r3, #0
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	4313      	orrs	r3, r2
 800122a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	7d1b      	ldrb	r3, [r3, #20]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d119      	bne.n	8001268 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	7b1b      	ldrb	r3, [r3, #12]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d109      	bne.n	8001250 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	3b01      	subs	r3, #1
 8001242:	035a      	lsls	r2, r3, #13
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	4313      	orrs	r3, r2
 8001248:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800124c:	613b      	str	r3, [r7, #16]
 800124e:	e00b      	b.n	8001268 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001254:	f043 0220 	orr.w	r2, r3, #32
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001260:	f043 0201 	orr.w	r2, r3, #1
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	430a      	orrs	r2, r1
 800127a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	689a      	ldr	r2, [r3, #8]
 8001282:	4b28      	ldr	r3, [pc, #160]	@ (8001324 <HAL_ADC_Init+0x1a8>)
 8001284:	4013      	ands	r3, r2
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	6812      	ldr	r2, [r2, #0]
 800128a:	68b9      	ldr	r1, [r7, #8]
 800128c:	430b      	orrs	r3, r1
 800128e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001298:	d003      	beq.n	80012a2 <HAL_ADC_Init+0x126>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d104      	bne.n	80012ac <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	691b      	ldr	r3, [r3, #16]
 80012a6:	3b01      	subs	r3, #1
 80012a8:	051b      	lsls	r3, r3, #20
 80012aa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012b2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	68fa      	ldr	r2, [r7, #12]
 80012bc:	430a      	orrs	r2, r1
 80012be:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	689a      	ldr	r2, [r3, #8]
 80012c6:	4b18      	ldr	r3, [pc, #96]	@ (8001328 <HAL_ADC_Init+0x1ac>)
 80012c8:	4013      	ands	r3, r2
 80012ca:	68ba      	ldr	r2, [r7, #8]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d10b      	bne.n	80012e8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2200      	movs	r2, #0
 80012d4:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012da:	f023 0303 	bic.w	r3, r3, #3
 80012de:	f043 0201 	orr.w	r2, r3, #1
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80012e6:	e018      	b.n	800131a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012ec:	f023 0312 	bic.w	r3, r3, #18
 80012f0:	f043 0210 	orr.w	r2, r3, #16
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012fc:	f043 0201 	orr.w	r2, r3, #1
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001308:	e007      	b.n	800131a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800130e:	f043 0210 	orr.w	r2, r3, #16
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800131a:	7dfb      	ldrb	r3, [r7, #23]
}
 800131c:	4618      	mov	r0, r3
 800131e:	3718      	adds	r7, #24
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	ffe1f7fd 	.word	0xffe1f7fd
 8001328:	ff1f0efe 	.word	0xff1f0efe

0800132c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001336:	2300      	movs	r3, #0
 8001338:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800133a:	2300      	movs	r3, #0
 800133c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001344:	2b01      	cmp	r3, #1
 8001346:	d101      	bne.n	800134c <HAL_ADC_ConfigChannel+0x20>
 8001348:	2302      	movs	r3, #2
 800134a:	e0dc      	b.n	8001506 <HAL_ADC_ConfigChannel+0x1da>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2201      	movs	r2, #1
 8001350:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	2b06      	cmp	r3, #6
 800135a:	d81c      	bhi.n	8001396 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685a      	ldr	r2, [r3, #4]
 8001366:	4613      	mov	r3, r2
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	4413      	add	r3, r2
 800136c:	3b05      	subs	r3, #5
 800136e:	221f      	movs	r2, #31
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	43db      	mvns	r3, r3
 8001376:	4019      	ands	r1, r3
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	6818      	ldr	r0, [r3, #0]
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685a      	ldr	r2, [r3, #4]
 8001380:	4613      	mov	r3, r2
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	4413      	add	r3, r2
 8001386:	3b05      	subs	r3, #5
 8001388:	fa00 f203 	lsl.w	r2, r0, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	430a      	orrs	r2, r1
 8001392:	635a      	str	r2, [r3, #52]	@ 0x34
 8001394:	e03c      	b.n	8001410 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	2b0c      	cmp	r3, #12
 800139c:	d81c      	bhi.n	80013d8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685a      	ldr	r2, [r3, #4]
 80013a8:	4613      	mov	r3, r2
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	4413      	add	r3, r2
 80013ae:	3b23      	subs	r3, #35	@ 0x23
 80013b0:	221f      	movs	r2, #31
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	43db      	mvns	r3, r3
 80013b8:	4019      	ands	r1, r3
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	6818      	ldr	r0, [r3, #0]
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685a      	ldr	r2, [r3, #4]
 80013c2:	4613      	mov	r3, r2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	4413      	add	r3, r2
 80013c8:	3b23      	subs	r3, #35	@ 0x23
 80013ca:	fa00 f203 	lsl.w	r2, r0, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	430a      	orrs	r2, r1
 80013d4:	631a      	str	r2, [r3, #48]	@ 0x30
 80013d6:	e01b      	b.n	8001410 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685a      	ldr	r2, [r3, #4]
 80013e2:	4613      	mov	r3, r2
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	4413      	add	r3, r2
 80013e8:	3b41      	subs	r3, #65	@ 0x41
 80013ea:	221f      	movs	r2, #31
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	43db      	mvns	r3, r3
 80013f2:	4019      	ands	r1, r3
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	6818      	ldr	r0, [r3, #0]
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685a      	ldr	r2, [r3, #4]
 80013fc:	4613      	mov	r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	4413      	add	r3, r2
 8001402:	3b41      	subs	r3, #65	@ 0x41
 8001404:	fa00 f203 	lsl.w	r2, r0, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	430a      	orrs	r2, r1
 800140e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2b09      	cmp	r3, #9
 8001416:	d91c      	bls.n	8001452 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	68d9      	ldr	r1, [r3, #12]
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	4613      	mov	r3, r2
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	4413      	add	r3, r2
 8001428:	3b1e      	subs	r3, #30
 800142a:	2207      	movs	r2, #7
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	43db      	mvns	r3, r3
 8001432:	4019      	ands	r1, r3
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	6898      	ldr	r0, [r3, #8]
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	4613      	mov	r3, r2
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	4413      	add	r3, r2
 8001442:	3b1e      	subs	r3, #30
 8001444:	fa00 f203 	lsl.w	r2, r0, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	430a      	orrs	r2, r1
 800144e:	60da      	str	r2, [r3, #12]
 8001450:	e019      	b.n	8001486 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	6919      	ldr	r1, [r3, #16]
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	4613      	mov	r3, r2
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	4413      	add	r3, r2
 8001462:	2207      	movs	r2, #7
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	43db      	mvns	r3, r3
 800146a:	4019      	ands	r1, r3
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	6898      	ldr	r0, [r3, #8]
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	4613      	mov	r3, r2
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	4413      	add	r3, r2
 800147a:	fa00 f203 	lsl.w	r2, r0, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	430a      	orrs	r2, r1
 8001484:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2b10      	cmp	r3, #16
 800148c:	d003      	beq.n	8001496 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001492:	2b11      	cmp	r3, #17
 8001494:	d132      	bne.n	80014fc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a1d      	ldr	r2, [pc, #116]	@ (8001510 <HAL_ADC_ConfigChannel+0x1e4>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d125      	bne.n	80014ec <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d126      	bne.n	80014fc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	689a      	ldr	r2, [r3, #8]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80014bc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	2b10      	cmp	r3, #16
 80014c4:	d11a      	bne.n	80014fc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014c6:	4b13      	ldr	r3, [pc, #76]	@ (8001514 <HAL_ADC_ConfigChannel+0x1e8>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a13      	ldr	r2, [pc, #76]	@ (8001518 <HAL_ADC_ConfigChannel+0x1ec>)
 80014cc:	fba2 2303 	umull	r2, r3, r2, r3
 80014d0:	0c9a      	lsrs	r2, r3, #18
 80014d2:	4613      	mov	r3, r2
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	4413      	add	r3, r2
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80014dc:	e002      	b.n	80014e4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	3b01      	subs	r3, #1
 80014e2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d1f9      	bne.n	80014de <HAL_ADC_ConfigChannel+0x1b2>
 80014ea:	e007      	b.n	80014fc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014f0:	f043 0220 	orr.w	r2, r3, #32
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2200      	movs	r2, #0
 8001500:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001504:	7bfb      	ldrb	r3, [r7, #15]
}
 8001506:	4618      	mov	r0, r3
 8001508:	3714      	adds	r7, #20
 800150a:	46bd      	mov	sp, r7
 800150c:	bc80      	pop	{r7}
 800150e:	4770      	bx	lr
 8001510:	40012400 	.word	0x40012400
 8001514:	20000000 	.word	0x20000000
 8001518:	431bde83 	.word	0x431bde83

0800151c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001524:	2300      	movs	r3, #0
 8001526:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	2b01      	cmp	r3, #1
 8001534:	d12e      	bne.n	8001594 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	689a      	ldr	r2, [r3, #8]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f022 0201 	bic.w	r2, r2, #1
 8001544:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001546:	f7ff fdeb 	bl	8001120 <HAL_GetTick>
 800154a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800154c:	e01b      	b.n	8001586 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800154e:	f7ff fde7 	bl	8001120 <HAL_GetTick>
 8001552:	4602      	mov	r2, r0
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	2b02      	cmp	r3, #2
 800155a:	d914      	bls.n	8001586 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	2b01      	cmp	r3, #1
 8001568:	d10d      	bne.n	8001586 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800156e:	f043 0210 	orr.w	r2, r3, #16
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800157a:	f043 0201 	orr.w	r2, r3, #1
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e007      	b.n	8001596 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	f003 0301 	and.w	r3, r3, #1
 8001590:	2b01      	cmp	r3, #1
 8001592:	d0dc      	beq.n	800154e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b084      	sub	sp, #16
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d101      	bne.n	80015b0 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e0ed      	b.n	800178c <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d102      	bne.n	80015c2 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f7ff fbbf 	bl	8000d40 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f042 0201 	orr.w	r2, r2, #1
 80015d0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015d2:	f7ff fda5 	bl	8001120 <HAL_GetTick>
 80015d6:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015d8:	e012      	b.n	8001600 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015da:	f7ff fda1 	bl	8001120 <HAL_GetTick>
 80015de:	4602      	mov	r2, r0
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	2b0a      	cmp	r3, #10
 80015e6:	d90b      	bls.n	8001600 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ec:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2205      	movs	r2, #5
 80015f8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e0c5      	b.n	800178c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	2b00      	cmp	r3, #0
 800160c:	d0e5      	beq.n	80015da <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f022 0202 	bic.w	r2, r2, #2
 800161c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800161e:	f7ff fd7f 	bl	8001120 <HAL_GetTick>
 8001622:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001624:	e012      	b.n	800164c <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001626:	f7ff fd7b 	bl	8001120 <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	2b0a      	cmp	r3, #10
 8001632:	d90b      	bls.n	800164c <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001638:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2205      	movs	r2, #5
 8001644:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e09f      	b.n	800178c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d1e5      	bne.n	8001626 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	7e1b      	ldrb	r3, [r3, #24]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d108      	bne.n	8001674 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	e007      	b.n	8001684 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001682:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	7e5b      	ldrb	r3, [r3, #25]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d108      	bne.n	800169e <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	e007      	b.n	80016ae <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80016ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	7e9b      	ldrb	r3, [r3, #26]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d108      	bne.n	80016c8 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f042 0220 	orr.w	r2, r2, #32
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	e007      	b.n	80016d8 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f022 0220 	bic.w	r2, r2, #32
 80016d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	7edb      	ldrb	r3, [r3, #27]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d108      	bne.n	80016f2 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f022 0210 	bic.w	r2, r2, #16
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	e007      	b.n	8001702 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f042 0210 	orr.w	r2, r2, #16
 8001700:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	7f1b      	ldrb	r3, [r3, #28]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d108      	bne.n	800171c <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f042 0208 	orr.w	r2, r2, #8
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	e007      	b.n	800172c <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f022 0208 	bic.w	r2, r2, #8
 800172a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	7f5b      	ldrb	r3, [r3, #29]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d108      	bne.n	8001746 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f042 0204 	orr.w	r2, r2, #4
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	e007      	b.n	8001756 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f022 0204 	bic.w	r2, r2, #4
 8001754:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	689a      	ldr	r2, [r3, #8]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	431a      	orrs	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	691b      	ldr	r3, [r3, #16]
 8001764:	431a      	orrs	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	695b      	ldr	r3, [r3, #20]
 800176a:	ea42 0103 	orr.w	r1, r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	1e5a      	subs	r2, r3, #1
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	430a      	orrs	r2, r1
 800177a:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2201      	movs	r2, #1
 8001786:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800178a:	2300      	movs	r3, #0
}
 800178c:	4618      	mov	r0, r3
 800178e:	3710      	adds	r7, #16
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001794:	b480      	push	{r7}
 8001796:	b087      	sub	sp, #28
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017aa:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80017ac:	7cfb      	ldrb	r3, [r7, #19]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d003      	beq.n	80017ba <HAL_CAN_ConfigFilter+0x26>
 80017b2:	7cfb      	ldrb	r3, [r7, #19]
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	f040 80aa 	bne.w	800190e <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80017c0:	f043 0201 	orr.w	r2, r3, #1
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	695b      	ldr	r3, [r3, #20]
 80017ce:	f003 031f 	and.w	r3, r3, #31
 80017d2:	2201      	movs	r2, #1
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	43db      	mvns	r3, r3
 80017e4:	401a      	ands	r2, r3
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	69db      	ldr	r3, [r3, #28]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d123      	bne.n	800183c <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	43db      	mvns	r3, r3
 80017fe:	401a      	ands	r2, r3
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001812:	683a      	ldr	r2, [r7, #0]
 8001814:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001816:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	3248      	adds	r2, #72	@ 0x48
 800181c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001830:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001832:	6979      	ldr	r1, [r7, #20]
 8001834:	3348      	adds	r3, #72	@ 0x48
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	440b      	add	r3, r1
 800183a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	69db      	ldr	r3, [r3, #28]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d122      	bne.n	800188a <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	431a      	orrs	r2, r3
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001860:	683a      	ldr	r2, [r7, #0]
 8001862:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001864:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	3248      	adds	r2, #72	@ 0x48
 800186a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800187e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001880:	6979      	ldr	r1, [r7, #20]
 8001882:	3348      	adds	r3, #72	@ 0x48
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	440b      	add	r3, r1
 8001888:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	699b      	ldr	r3, [r3, #24]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d109      	bne.n	80018a6 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	43db      	mvns	r3, r3
 800189c:	401a      	ands	r2, r3
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80018a4:	e007      	b.n	80018b6 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	431a      	orrs	r2, r3
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	691b      	ldr	r3, [r3, #16]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d109      	bne.n	80018d2 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	43db      	mvns	r3, r3
 80018c8:	401a      	ands	r2, r3
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80018d0:	e007      	b.n	80018e2 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	431a      	orrs	r2, r3
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	6a1b      	ldr	r3, [r3, #32]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d107      	bne.n	80018fa <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	431a      	orrs	r2, r3
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001900:	f023 0201 	bic.w	r2, r3, #1
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800190a:	2300      	movs	r3, #0
 800190c:	e006      	b.n	800191c <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001912:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
  }
}
 800191c:	4618      	mov	r0, r3
 800191e:	371c      	adds	r7, #28
 8001920:	46bd      	mov	sp, r7
 8001922:	bc80      	pop	{r7}
 8001924:	4770      	bx	lr

08001926 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	b084      	sub	sp, #16
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001934:	b2db      	uxtb	r3, r3
 8001936:	2b01      	cmp	r3, #1
 8001938:	d12e      	bne.n	8001998 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2202      	movs	r2, #2
 800193e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f022 0201 	bic.w	r2, r2, #1
 8001950:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001952:	f7ff fbe5 	bl	8001120 <HAL_GetTick>
 8001956:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001958:	e012      	b.n	8001980 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800195a:	f7ff fbe1 	bl	8001120 <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	2b0a      	cmp	r3, #10
 8001966:	d90b      	bls.n	8001980 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800196c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2205      	movs	r2, #5
 8001978:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e012      	b.n	80019a6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	2b00      	cmp	r3, #0
 800198c:	d1e5      	bne.n	800195a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2200      	movs	r2, #0
 8001992:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001994:	2300      	movs	r3, #0
 8001996:	e006      	b.n	80019a6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800199c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
  }
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80019ae:	b480      	push	{r7}
 80019b0:	b089      	sub	sp, #36	@ 0x24
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	60f8      	str	r0, [r7, #12]
 80019b6:	60b9      	str	r1, [r7, #8]
 80019b8:	607a      	str	r2, [r7, #4]
 80019ba:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80019cc:	7ffb      	ldrb	r3, [r7, #31]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d003      	beq.n	80019da <HAL_CAN_AddTxMessage+0x2c>
 80019d2:	7ffb      	ldrb	r3, [r7, #31]
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	f040 80ad 	bne.w	8001b34 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d10a      	bne.n	80019fa <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d105      	bne.n	80019fa <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f000 8095 	beq.w	8001b24 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	0e1b      	lsrs	r3, r3, #24
 80019fe:	f003 0303 	and.w	r3, r3, #3
 8001a02:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001a04:	2201      	movs	r2, #1
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	409a      	lsls	r2, r3
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d10d      	bne.n	8001a32 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001a20:	68f9      	ldr	r1, [r7, #12]
 8001a22:	6809      	ldr	r1, [r1, #0]
 8001a24:	431a      	orrs	r2, r3
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	3318      	adds	r3, #24
 8001a2a:	011b      	lsls	r3, r3, #4
 8001a2c:	440b      	add	r3, r1
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	e00f      	b.n	8001a52 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a3c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a42:	68f9      	ldr	r1, [r7, #12]
 8001a44:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001a46:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	3318      	adds	r3, #24
 8001a4c:	011b      	lsls	r3, r3, #4
 8001a4e:	440b      	add	r3, r1
 8001a50:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	6819      	ldr	r1, [r3, #0]
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	691a      	ldr	r2, [r3, #16]
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	3318      	adds	r3, #24
 8001a5e:	011b      	lsls	r3, r3, #4
 8001a60:	440b      	add	r3, r1
 8001a62:	3304      	adds	r3, #4
 8001a64:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	7d1b      	ldrb	r3, [r3, #20]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d111      	bne.n	8001a92 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	3318      	adds	r3, #24
 8001a76:	011b      	lsls	r3, r3, #4
 8001a78:	4413      	add	r3, r2
 8001a7a:	3304      	adds	r3, #4
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	6811      	ldr	r1, [r2, #0]
 8001a82:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	3318      	adds	r3, #24
 8001a8a:	011b      	lsls	r3, r3, #4
 8001a8c:	440b      	add	r3, r1
 8001a8e:	3304      	adds	r3, #4
 8001a90:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	3307      	adds	r3, #7
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	061a      	lsls	r2, r3, #24
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	3306      	adds	r3, #6
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	041b      	lsls	r3, r3, #16
 8001aa2:	431a      	orrs	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3305      	adds	r3, #5
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	021b      	lsls	r3, r3, #8
 8001aac:	4313      	orrs	r3, r2
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	3204      	adds	r2, #4
 8001ab2:	7812      	ldrb	r2, [r2, #0]
 8001ab4:	4610      	mov	r0, r2
 8001ab6:	68fa      	ldr	r2, [r7, #12]
 8001ab8:	6811      	ldr	r1, [r2, #0]
 8001aba:	ea43 0200 	orr.w	r2, r3, r0
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	011b      	lsls	r3, r3, #4
 8001ac2:	440b      	add	r3, r1
 8001ac4:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001ac8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	3303      	adds	r3, #3
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	061a      	lsls	r2, r3, #24
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	3302      	adds	r3, #2
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	041b      	lsls	r3, r3, #16
 8001ada:	431a      	orrs	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	021b      	lsls	r3, r3, #8
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	7812      	ldrb	r2, [r2, #0]
 8001aea:	4610      	mov	r0, r2
 8001aec:	68fa      	ldr	r2, [r7, #12]
 8001aee:	6811      	ldr	r1, [r2, #0]
 8001af0:	ea43 0200 	orr.w	r2, r3, r0
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	011b      	lsls	r3, r3, #4
 8001af8:	440b      	add	r3, r1
 8001afa:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001afe:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	3318      	adds	r3, #24
 8001b08:	011b      	lsls	r3, r3, #4
 8001b0a:	4413      	add	r3, r2
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	6811      	ldr	r1, [r2, #0]
 8001b12:	f043 0201 	orr.w	r2, r3, #1
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	3318      	adds	r3, #24
 8001b1a:	011b      	lsls	r3, r3, #4
 8001b1c:	440b      	add	r3, r1
 8001b1e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001b20:	2300      	movs	r3, #0
 8001b22:	e00e      	b.n	8001b42 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b28:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e006      	b.n	8001b42 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b38:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
  }
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3724      	adds	r7, #36	@ 0x24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bc80      	pop	{r7}
 8001b4a:	4770      	bx	lr

08001b4c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b5c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b5e:	7bfb      	ldrb	r3, [r7, #15]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d002      	beq.n	8001b6a <HAL_CAN_ActivateNotification+0x1e>
 8001b64:	7bfb      	ldrb	r3, [r7, #15]
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d109      	bne.n	8001b7e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	6959      	ldr	r1, [r3, #20]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	683a      	ldr	r2, [r7, #0]
 8001b76:	430a      	orrs	r2, r1
 8001b78:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	e006      	b.n	8001b8c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b82:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
  }
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3714      	adds	r7, #20
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bc80      	pop	{r7}
 8001b94:	4770      	bx	lr

08001b96 <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
{
 8001b96:	b480      	push	{r7}
 8001b98:	b083      	sub	sp, #12
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bc80      	pop	{r7}
 8001baa:	4770      	bx	lr

08001bac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bc2:	68ba      	ldr	r2, [r7, #8]
 8001bc4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bc8:	4013      	ands	r3, r2
 8001bca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bd4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001bd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bde:	4a04      	ldr	r2, [pc, #16]	@ (8001bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	60d3      	str	r3, [r2, #12]
}
 8001be4:	bf00      	nop
 8001be6:	3714      	adds	r7, #20
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bc80      	pop	{r7}
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bf8:	4b04      	ldr	r3, [pc, #16]	@ (8001c0c <__NVIC_GetPriorityGrouping+0x18>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	0a1b      	lsrs	r3, r3, #8
 8001bfe:	f003 0307 	and.w	r3, r3, #7
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bc80      	pop	{r7}
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	e000ed00 	.word	0xe000ed00

08001c10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	6039      	str	r1, [r7, #0]
 8001c1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	db0a      	blt.n	8001c3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	b2da      	uxtb	r2, r3
 8001c28:	490c      	ldr	r1, [pc, #48]	@ (8001c5c <__NVIC_SetPriority+0x4c>)
 8001c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2e:	0112      	lsls	r2, r2, #4
 8001c30:	b2d2      	uxtb	r2, r2
 8001c32:	440b      	add	r3, r1
 8001c34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c38:	e00a      	b.n	8001c50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	b2da      	uxtb	r2, r3
 8001c3e:	4908      	ldr	r1, [pc, #32]	@ (8001c60 <__NVIC_SetPriority+0x50>)
 8001c40:	79fb      	ldrb	r3, [r7, #7]
 8001c42:	f003 030f 	and.w	r3, r3, #15
 8001c46:	3b04      	subs	r3, #4
 8001c48:	0112      	lsls	r2, r2, #4
 8001c4a:	b2d2      	uxtb	r2, r2
 8001c4c:	440b      	add	r3, r1
 8001c4e:	761a      	strb	r2, [r3, #24]
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bc80      	pop	{r7}
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	e000e100 	.word	0xe000e100
 8001c60:	e000ed00 	.word	0xe000ed00

08001c64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b089      	sub	sp, #36	@ 0x24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	f1c3 0307 	rsb	r3, r3, #7
 8001c7e:	2b04      	cmp	r3, #4
 8001c80:	bf28      	it	cs
 8001c82:	2304      	movcs	r3, #4
 8001c84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	3304      	adds	r3, #4
 8001c8a:	2b06      	cmp	r3, #6
 8001c8c:	d902      	bls.n	8001c94 <NVIC_EncodePriority+0x30>
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	3b03      	subs	r3, #3
 8001c92:	e000      	b.n	8001c96 <NVIC_EncodePriority+0x32>
 8001c94:	2300      	movs	r3, #0
 8001c96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c98:	f04f 32ff 	mov.w	r2, #4294967295
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	43da      	mvns	r2, r3
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	401a      	ands	r2, r3
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cac:	f04f 31ff 	mov.w	r1, #4294967295
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb6:	43d9      	mvns	r1, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cbc:	4313      	orrs	r3, r2
         );
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3724      	adds	r7, #36	@ 0x24
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bc80      	pop	{r7}
 8001cc6:	4770      	bx	lr

08001cc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cd8:	d301      	bcc.n	8001cde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e00f      	b.n	8001cfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cde:	4a0a      	ldr	r2, [pc, #40]	@ (8001d08 <SysTick_Config+0x40>)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ce6:	210f      	movs	r1, #15
 8001ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cec:	f7ff ff90 	bl	8001c10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cf0:	4b05      	ldr	r3, [pc, #20]	@ (8001d08 <SysTick_Config+0x40>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cf6:	4b04      	ldr	r3, [pc, #16]	@ (8001d08 <SysTick_Config+0x40>)
 8001cf8:	2207      	movs	r2, #7
 8001cfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	e000e010 	.word	0xe000e010

08001d0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f7ff ff49 	bl	8001bac <__NVIC_SetPriorityGrouping>
}
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b086      	sub	sp, #24
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	4603      	mov	r3, r0
 8001d2a:	60b9      	str	r1, [r7, #8]
 8001d2c:	607a      	str	r2, [r7, #4]
 8001d2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d30:	2300      	movs	r3, #0
 8001d32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d34:	f7ff ff5e 	bl	8001bf4 <__NVIC_GetPriorityGrouping>
 8001d38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	68b9      	ldr	r1, [r7, #8]
 8001d3e:	6978      	ldr	r0, [r7, #20]
 8001d40:	f7ff ff90 	bl	8001c64 <NVIC_EncodePriority>
 8001d44:	4602      	mov	r2, r0
 8001d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d4a:	4611      	mov	r1, r2
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff ff5f 	bl	8001c10 <__NVIC_SetPriority>
}
 8001d52:	bf00      	nop
 8001d54:	3718      	adds	r7, #24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b082      	sub	sp, #8
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f7ff ffb0 	bl	8001cc8 <SysTick_Config>
 8001d68:	4603      	mov	r3, r0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
	...

08001d74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b08b      	sub	sp, #44	@ 0x2c
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d82:	2300      	movs	r3, #0
 8001d84:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d86:	e161      	b.n	800204c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d88:	2201      	movs	r2, #1
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	69fa      	ldr	r2, [r7, #28]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	f040 8150 	bne.w	8002046 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	4a97      	ldr	r2, [pc, #604]	@ (8002008 <HAL_GPIO_Init+0x294>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d05e      	beq.n	8001e6e <HAL_GPIO_Init+0xfa>
 8001db0:	4a95      	ldr	r2, [pc, #596]	@ (8002008 <HAL_GPIO_Init+0x294>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d875      	bhi.n	8001ea2 <HAL_GPIO_Init+0x12e>
 8001db6:	4a95      	ldr	r2, [pc, #596]	@ (800200c <HAL_GPIO_Init+0x298>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d058      	beq.n	8001e6e <HAL_GPIO_Init+0xfa>
 8001dbc:	4a93      	ldr	r2, [pc, #588]	@ (800200c <HAL_GPIO_Init+0x298>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d86f      	bhi.n	8001ea2 <HAL_GPIO_Init+0x12e>
 8001dc2:	4a93      	ldr	r2, [pc, #588]	@ (8002010 <HAL_GPIO_Init+0x29c>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d052      	beq.n	8001e6e <HAL_GPIO_Init+0xfa>
 8001dc8:	4a91      	ldr	r2, [pc, #580]	@ (8002010 <HAL_GPIO_Init+0x29c>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d869      	bhi.n	8001ea2 <HAL_GPIO_Init+0x12e>
 8001dce:	4a91      	ldr	r2, [pc, #580]	@ (8002014 <HAL_GPIO_Init+0x2a0>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d04c      	beq.n	8001e6e <HAL_GPIO_Init+0xfa>
 8001dd4:	4a8f      	ldr	r2, [pc, #572]	@ (8002014 <HAL_GPIO_Init+0x2a0>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d863      	bhi.n	8001ea2 <HAL_GPIO_Init+0x12e>
 8001dda:	4a8f      	ldr	r2, [pc, #572]	@ (8002018 <HAL_GPIO_Init+0x2a4>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d046      	beq.n	8001e6e <HAL_GPIO_Init+0xfa>
 8001de0:	4a8d      	ldr	r2, [pc, #564]	@ (8002018 <HAL_GPIO_Init+0x2a4>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d85d      	bhi.n	8001ea2 <HAL_GPIO_Init+0x12e>
 8001de6:	2b12      	cmp	r3, #18
 8001de8:	d82a      	bhi.n	8001e40 <HAL_GPIO_Init+0xcc>
 8001dea:	2b12      	cmp	r3, #18
 8001dec:	d859      	bhi.n	8001ea2 <HAL_GPIO_Init+0x12e>
 8001dee:	a201      	add	r2, pc, #4	@ (adr r2, 8001df4 <HAL_GPIO_Init+0x80>)
 8001df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001df4:	08001e6f 	.word	0x08001e6f
 8001df8:	08001e49 	.word	0x08001e49
 8001dfc:	08001e5b 	.word	0x08001e5b
 8001e00:	08001e9d 	.word	0x08001e9d
 8001e04:	08001ea3 	.word	0x08001ea3
 8001e08:	08001ea3 	.word	0x08001ea3
 8001e0c:	08001ea3 	.word	0x08001ea3
 8001e10:	08001ea3 	.word	0x08001ea3
 8001e14:	08001ea3 	.word	0x08001ea3
 8001e18:	08001ea3 	.word	0x08001ea3
 8001e1c:	08001ea3 	.word	0x08001ea3
 8001e20:	08001ea3 	.word	0x08001ea3
 8001e24:	08001ea3 	.word	0x08001ea3
 8001e28:	08001ea3 	.word	0x08001ea3
 8001e2c:	08001ea3 	.word	0x08001ea3
 8001e30:	08001ea3 	.word	0x08001ea3
 8001e34:	08001ea3 	.word	0x08001ea3
 8001e38:	08001e51 	.word	0x08001e51
 8001e3c:	08001e65 	.word	0x08001e65
 8001e40:	4a76      	ldr	r2, [pc, #472]	@ (800201c <HAL_GPIO_Init+0x2a8>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d013      	beq.n	8001e6e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e46:	e02c      	b.n	8001ea2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	623b      	str	r3, [r7, #32]
          break;
 8001e4e:	e029      	b.n	8001ea4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	3304      	adds	r3, #4
 8001e56:	623b      	str	r3, [r7, #32]
          break;
 8001e58:	e024      	b.n	8001ea4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	3308      	adds	r3, #8
 8001e60:	623b      	str	r3, [r7, #32]
          break;
 8001e62:	e01f      	b.n	8001ea4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	330c      	adds	r3, #12
 8001e6a:	623b      	str	r3, [r7, #32]
          break;
 8001e6c:	e01a      	b.n	8001ea4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d102      	bne.n	8001e7c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e76:	2304      	movs	r3, #4
 8001e78:	623b      	str	r3, [r7, #32]
          break;
 8001e7a:	e013      	b.n	8001ea4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d105      	bne.n	8001e90 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e84:	2308      	movs	r3, #8
 8001e86:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	69fa      	ldr	r2, [r7, #28]
 8001e8c:	611a      	str	r2, [r3, #16]
          break;
 8001e8e:	e009      	b.n	8001ea4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e90:	2308      	movs	r3, #8
 8001e92:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	69fa      	ldr	r2, [r7, #28]
 8001e98:	615a      	str	r2, [r3, #20]
          break;
 8001e9a:	e003      	b.n	8001ea4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	623b      	str	r3, [r7, #32]
          break;
 8001ea0:	e000      	b.n	8001ea4 <HAL_GPIO_Init+0x130>
          break;
 8001ea2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	2bff      	cmp	r3, #255	@ 0xff
 8001ea8:	d801      	bhi.n	8001eae <HAL_GPIO_Init+0x13a>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	e001      	b.n	8001eb2 <HAL_GPIO_Init+0x13e>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	3304      	adds	r3, #4
 8001eb2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	2bff      	cmp	r3, #255	@ 0xff
 8001eb8:	d802      	bhi.n	8001ec0 <HAL_GPIO_Init+0x14c>
 8001eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	e002      	b.n	8001ec6 <HAL_GPIO_Init+0x152>
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec2:	3b08      	subs	r3, #8
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	210f      	movs	r1, #15
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	401a      	ands	r2, r3
 8001ed8:	6a39      	ldr	r1, [r7, #32]
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee0:	431a      	orrs	r2, r3
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f000 80a9 	beq.w	8002046 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ef4:	4b4a      	ldr	r3, [pc, #296]	@ (8002020 <HAL_GPIO_Init+0x2ac>)
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	4a49      	ldr	r2, [pc, #292]	@ (8002020 <HAL_GPIO_Init+0x2ac>)
 8001efa:	f043 0301 	orr.w	r3, r3, #1
 8001efe:	6193      	str	r3, [r2, #24]
 8001f00:	4b47      	ldr	r3, [pc, #284]	@ (8002020 <HAL_GPIO_Init+0x2ac>)
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	60bb      	str	r3, [r7, #8]
 8001f0a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f0c:	4a45      	ldr	r2, [pc, #276]	@ (8002024 <HAL_GPIO_Init+0x2b0>)
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f10:	089b      	lsrs	r3, r3, #2
 8001f12:	3302      	adds	r3, #2
 8001f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f18:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1c:	f003 0303 	and.w	r3, r3, #3
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	220f      	movs	r2, #15
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a3d      	ldr	r2, [pc, #244]	@ (8002028 <HAL_GPIO_Init+0x2b4>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d00d      	beq.n	8001f54 <HAL_GPIO_Init+0x1e0>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a3c      	ldr	r2, [pc, #240]	@ (800202c <HAL_GPIO_Init+0x2b8>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d007      	beq.n	8001f50 <HAL_GPIO_Init+0x1dc>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a3b      	ldr	r2, [pc, #236]	@ (8002030 <HAL_GPIO_Init+0x2bc>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d101      	bne.n	8001f4c <HAL_GPIO_Init+0x1d8>
 8001f48:	2302      	movs	r3, #2
 8001f4a:	e004      	b.n	8001f56 <HAL_GPIO_Init+0x1e2>
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e002      	b.n	8001f56 <HAL_GPIO_Init+0x1e2>
 8001f50:	2301      	movs	r3, #1
 8001f52:	e000      	b.n	8001f56 <HAL_GPIO_Init+0x1e2>
 8001f54:	2300      	movs	r3, #0
 8001f56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f58:	f002 0203 	and.w	r2, r2, #3
 8001f5c:	0092      	lsls	r2, r2, #2
 8001f5e:	4093      	lsls	r3, r2
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f66:	492f      	ldr	r1, [pc, #188]	@ (8002024 <HAL_GPIO_Init+0x2b0>)
 8001f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f6a:	089b      	lsrs	r3, r3, #2
 8001f6c:	3302      	adds	r3, #2
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d006      	beq.n	8001f8e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f80:	4b2c      	ldr	r3, [pc, #176]	@ (8002034 <HAL_GPIO_Init+0x2c0>)
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	492b      	ldr	r1, [pc, #172]	@ (8002034 <HAL_GPIO_Init+0x2c0>)
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	608b      	str	r3, [r1, #8]
 8001f8c:	e006      	b.n	8001f9c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f8e:	4b29      	ldr	r3, [pc, #164]	@ (8002034 <HAL_GPIO_Init+0x2c0>)
 8001f90:	689a      	ldr	r2, [r3, #8]
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	43db      	mvns	r3, r3
 8001f96:	4927      	ldr	r1, [pc, #156]	@ (8002034 <HAL_GPIO_Init+0x2c0>)
 8001f98:	4013      	ands	r3, r2
 8001f9a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d006      	beq.n	8001fb6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fa8:	4b22      	ldr	r3, [pc, #136]	@ (8002034 <HAL_GPIO_Init+0x2c0>)
 8001faa:	68da      	ldr	r2, [r3, #12]
 8001fac:	4921      	ldr	r1, [pc, #132]	@ (8002034 <HAL_GPIO_Init+0x2c0>)
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	60cb      	str	r3, [r1, #12]
 8001fb4:	e006      	b.n	8001fc4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fb6:	4b1f      	ldr	r3, [pc, #124]	@ (8002034 <HAL_GPIO_Init+0x2c0>)
 8001fb8:	68da      	ldr	r2, [r3, #12]
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	491d      	ldr	r1, [pc, #116]	@ (8002034 <HAL_GPIO_Init+0x2c0>)
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d006      	beq.n	8001fde <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fd0:	4b18      	ldr	r3, [pc, #96]	@ (8002034 <HAL_GPIO_Init+0x2c0>)
 8001fd2:	685a      	ldr	r2, [r3, #4]
 8001fd4:	4917      	ldr	r1, [pc, #92]	@ (8002034 <HAL_GPIO_Init+0x2c0>)
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	604b      	str	r3, [r1, #4]
 8001fdc:	e006      	b.n	8001fec <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fde:	4b15      	ldr	r3, [pc, #84]	@ (8002034 <HAL_GPIO_Init+0x2c0>)
 8001fe0:	685a      	ldr	r2, [r3, #4]
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	4913      	ldr	r1, [pc, #76]	@ (8002034 <HAL_GPIO_Init+0x2c0>)
 8001fe8:	4013      	ands	r3, r2
 8001fea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d01f      	beq.n	8002038 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ff8:	4b0e      	ldr	r3, [pc, #56]	@ (8002034 <HAL_GPIO_Init+0x2c0>)
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	490d      	ldr	r1, [pc, #52]	@ (8002034 <HAL_GPIO_Init+0x2c0>)
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	4313      	orrs	r3, r2
 8002002:	600b      	str	r3, [r1, #0]
 8002004:	e01f      	b.n	8002046 <HAL_GPIO_Init+0x2d2>
 8002006:	bf00      	nop
 8002008:	10320000 	.word	0x10320000
 800200c:	10310000 	.word	0x10310000
 8002010:	10220000 	.word	0x10220000
 8002014:	10210000 	.word	0x10210000
 8002018:	10120000 	.word	0x10120000
 800201c:	10110000 	.word	0x10110000
 8002020:	40021000 	.word	0x40021000
 8002024:	40010000 	.word	0x40010000
 8002028:	40010800 	.word	0x40010800
 800202c:	40010c00 	.word	0x40010c00
 8002030:	40011000 	.word	0x40011000
 8002034:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002038:	4b0b      	ldr	r3, [pc, #44]	@ (8002068 <HAL_GPIO_Init+0x2f4>)
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	43db      	mvns	r3, r3
 8002040:	4909      	ldr	r1, [pc, #36]	@ (8002068 <HAL_GPIO_Init+0x2f4>)
 8002042:	4013      	ands	r3, r2
 8002044:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002048:	3301      	adds	r3, #1
 800204a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002052:	fa22 f303 	lsr.w	r3, r2, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	f47f ae96 	bne.w	8001d88 <HAL_GPIO_Init+0x14>
  }
}
 800205c:	bf00      	nop
 800205e:	bf00      	nop
 8002060:	372c      	adds	r7, #44	@ 0x2c
 8002062:	46bd      	mov	sp, r7
 8002064:	bc80      	pop	{r7}
 8002066:	4770      	bx	lr
 8002068:	40010400 	.word	0x40010400

0800206c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	460b      	mov	r3, r1
 8002076:	807b      	strh	r3, [r7, #2]
 8002078:	4613      	mov	r3, r2
 800207a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800207c:	787b      	ldrb	r3, [r7, #1]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d003      	beq.n	800208a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002082:	887a      	ldrh	r2, [r7, #2]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002088:	e003      	b.n	8002092 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800208a:	887b      	ldrh	r3, [r7, #2]
 800208c:	041a      	lsls	r2, r3, #16
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	611a      	str	r2, [r3, #16]
}
 8002092:	bf00      	nop
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	bc80      	pop	{r7}
 800209a:	4770      	bx	lr

0800209c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	460b      	mov	r3, r1
 80020a6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020ae:	887a      	ldrh	r2, [r7, #2]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	4013      	ands	r3, r2
 80020b4:	041a      	lsls	r2, r3, #16
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	43d9      	mvns	r1, r3
 80020ba:	887b      	ldrh	r3, [r7, #2]
 80020bc:	400b      	ands	r3, r1
 80020be:	431a      	orrs	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	611a      	str	r2, [r3, #16]
}
 80020c4:	bf00      	nop
 80020c6:	3714      	adds	r7, #20
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bc80      	pop	{r7}
 80020cc:	4770      	bx	lr
	...

080020d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e272      	b.n	80025c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	f000 8087 	beq.w	80021fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020f0:	4b92      	ldr	r3, [pc, #584]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f003 030c 	and.w	r3, r3, #12
 80020f8:	2b04      	cmp	r3, #4
 80020fa:	d00c      	beq.n	8002116 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020fc:	4b8f      	ldr	r3, [pc, #572]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f003 030c 	and.w	r3, r3, #12
 8002104:	2b08      	cmp	r3, #8
 8002106:	d112      	bne.n	800212e <HAL_RCC_OscConfig+0x5e>
 8002108:	4b8c      	ldr	r3, [pc, #560]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002110:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002114:	d10b      	bne.n	800212e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002116:	4b89      	ldr	r3, [pc, #548]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d06c      	beq.n	80021fc <HAL_RCC_OscConfig+0x12c>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d168      	bne.n	80021fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e24c      	b.n	80025c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002136:	d106      	bne.n	8002146 <HAL_RCC_OscConfig+0x76>
 8002138:	4b80      	ldr	r3, [pc, #512]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a7f      	ldr	r2, [pc, #508]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 800213e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002142:	6013      	str	r3, [r2, #0]
 8002144:	e02e      	b.n	80021a4 <HAL_RCC_OscConfig+0xd4>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d10c      	bne.n	8002168 <HAL_RCC_OscConfig+0x98>
 800214e:	4b7b      	ldr	r3, [pc, #492]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a7a      	ldr	r2, [pc, #488]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 8002154:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002158:	6013      	str	r3, [r2, #0]
 800215a:	4b78      	ldr	r3, [pc, #480]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a77      	ldr	r2, [pc, #476]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 8002160:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002164:	6013      	str	r3, [r2, #0]
 8002166:	e01d      	b.n	80021a4 <HAL_RCC_OscConfig+0xd4>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002170:	d10c      	bne.n	800218c <HAL_RCC_OscConfig+0xbc>
 8002172:	4b72      	ldr	r3, [pc, #456]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a71      	ldr	r2, [pc, #452]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 8002178:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800217c:	6013      	str	r3, [r2, #0]
 800217e:	4b6f      	ldr	r3, [pc, #444]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a6e      	ldr	r2, [pc, #440]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 8002184:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002188:	6013      	str	r3, [r2, #0]
 800218a:	e00b      	b.n	80021a4 <HAL_RCC_OscConfig+0xd4>
 800218c:	4b6b      	ldr	r3, [pc, #428]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a6a      	ldr	r2, [pc, #424]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 8002192:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002196:	6013      	str	r3, [r2, #0]
 8002198:	4b68      	ldr	r3, [pc, #416]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a67      	ldr	r2, [pc, #412]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 800219e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d013      	beq.n	80021d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ac:	f7fe ffb8 	bl	8001120 <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021b4:	f7fe ffb4 	bl	8001120 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b64      	cmp	r3, #100	@ 0x64
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e200      	b.n	80025c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021c6:	4b5d      	ldr	r3, [pc, #372]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d0f0      	beq.n	80021b4 <HAL_RCC_OscConfig+0xe4>
 80021d2:	e014      	b.n	80021fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d4:	f7fe ffa4 	bl	8001120 <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021dc:	f7fe ffa0 	bl	8001120 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b64      	cmp	r3, #100	@ 0x64
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e1ec      	b.n	80025c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ee:	4b53      	ldr	r3, [pc, #332]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1f0      	bne.n	80021dc <HAL_RCC_OscConfig+0x10c>
 80021fa:	e000      	b.n	80021fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d063      	beq.n	80022d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800220a:	4b4c      	ldr	r3, [pc, #304]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f003 030c 	and.w	r3, r3, #12
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00b      	beq.n	800222e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002216:	4b49      	ldr	r3, [pc, #292]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f003 030c 	and.w	r3, r3, #12
 800221e:	2b08      	cmp	r3, #8
 8002220:	d11c      	bne.n	800225c <HAL_RCC_OscConfig+0x18c>
 8002222:	4b46      	ldr	r3, [pc, #280]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d116      	bne.n	800225c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800222e:	4b43      	ldr	r3, [pc, #268]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d005      	beq.n	8002246 <HAL_RCC_OscConfig+0x176>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d001      	beq.n	8002246 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e1c0      	b.n	80025c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002246:	4b3d      	ldr	r3, [pc, #244]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	4939      	ldr	r1, [pc, #228]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 8002256:	4313      	orrs	r3, r2
 8002258:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800225a:	e03a      	b.n	80022d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d020      	beq.n	80022a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002264:	4b36      	ldr	r3, [pc, #216]	@ (8002340 <HAL_RCC_OscConfig+0x270>)
 8002266:	2201      	movs	r2, #1
 8002268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226a:	f7fe ff59 	bl	8001120 <HAL_GetTick>
 800226e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002270:	e008      	b.n	8002284 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002272:	f7fe ff55 	bl	8001120 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d901      	bls.n	8002284 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e1a1      	b.n	80025c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002284:	4b2d      	ldr	r3, [pc, #180]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d0f0      	beq.n	8002272 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002290:	4b2a      	ldr	r3, [pc, #168]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	695b      	ldr	r3, [r3, #20]
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	4927      	ldr	r1, [pc, #156]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	600b      	str	r3, [r1, #0]
 80022a4:	e015      	b.n	80022d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022a6:	4b26      	ldr	r3, [pc, #152]	@ (8002340 <HAL_RCC_OscConfig+0x270>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ac:	f7fe ff38 	bl	8001120 <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022b4:	f7fe ff34 	bl	8001120 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e180      	b.n	80025c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022c6:	4b1d      	ldr	r3, [pc, #116]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1f0      	bne.n	80022b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0308 	and.w	r3, r3, #8
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d03a      	beq.n	8002354 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d019      	beq.n	800231a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022e6:	4b17      	ldr	r3, [pc, #92]	@ (8002344 <HAL_RCC_OscConfig+0x274>)
 80022e8:	2201      	movs	r2, #1
 80022ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ec:	f7fe ff18 	bl	8001120 <HAL_GetTick>
 80022f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022f2:	e008      	b.n	8002306 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022f4:	f7fe ff14 	bl	8001120 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e160      	b.n	80025c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002306:	4b0d      	ldr	r3, [pc, #52]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 8002308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d0f0      	beq.n	80022f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002312:	2001      	movs	r0, #1
 8002314:	f000 fa9c 	bl	8002850 <RCC_Delay>
 8002318:	e01c      	b.n	8002354 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800231a:	4b0a      	ldr	r3, [pc, #40]	@ (8002344 <HAL_RCC_OscConfig+0x274>)
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002320:	f7fe fefe 	bl	8001120 <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002326:	e00f      	b.n	8002348 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002328:	f7fe fefa 	bl	8001120 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d908      	bls.n	8002348 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e146      	b.n	80025c8 <HAL_RCC_OscConfig+0x4f8>
 800233a:	bf00      	nop
 800233c:	40021000 	.word	0x40021000
 8002340:	42420000 	.word	0x42420000
 8002344:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002348:	4b92      	ldr	r3, [pc, #584]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 800234a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	2b00      	cmp	r3, #0
 8002352:	d1e9      	bne.n	8002328 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0304 	and.w	r3, r3, #4
 800235c:	2b00      	cmp	r3, #0
 800235e:	f000 80a6 	beq.w	80024ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002362:	2300      	movs	r3, #0
 8002364:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002366:	4b8b      	ldr	r3, [pc, #556]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 8002368:	69db      	ldr	r3, [r3, #28]
 800236a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d10d      	bne.n	800238e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002372:	4b88      	ldr	r3, [pc, #544]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 8002374:	69db      	ldr	r3, [r3, #28]
 8002376:	4a87      	ldr	r2, [pc, #540]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 8002378:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800237c:	61d3      	str	r3, [r2, #28]
 800237e:	4b85      	ldr	r3, [pc, #532]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 8002380:	69db      	ldr	r3, [r3, #28]
 8002382:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002386:	60bb      	str	r3, [r7, #8]
 8002388:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800238a:	2301      	movs	r3, #1
 800238c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800238e:	4b82      	ldr	r3, [pc, #520]	@ (8002598 <HAL_RCC_OscConfig+0x4c8>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002396:	2b00      	cmp	r3, #0
 8002398:	d118      	bne.n	80023cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800239a:	4b7f      	ldr	r3, [pc, #508]	@ (8002598 <HAL_RCC_OscConfig+0x4c8>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a7e      	ldr	r2, [pc, #504]	@ (8002598 <HAL_RCC_OscConfig+0x4c8>)
 80023a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023a6:	f7fe febb 	bl	8001120 <HAL_GetTick>
 80023aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ac:	e008      	b.n	80023c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ae:	f7fe feb7 	bl	8001120 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b64      	cmp	r3, #100	@ 0x64
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e103      	b.n	80025c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c0:	4b75      	ldr	r3, [pc, #468]	@ (8002598 <HAL_RCC_OscConfig+0x4c8>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d0f0      	beq.n	80023ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d106      	bne.n	80023e2 <HAL_RCC_OscConfig+0x312>
 80023d4:	4b6f      	ldr	r3, [pc, #444]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 80023d6:	6a1b      	ldr	r3, [r3, #32]
 80023d8:	4a6e      	ldr	r2, [pc, #440]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 80023da:	f043 0301 	orr.w	r3, r3, #1
 80023de:	6213      	str	r3, [r2, #32]
 80023e0:	e02d      	b.n	800243e <HAL_RCC_OscConfig+0x36e>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10c      	bne.n	8002404 <HAL_RCC_OscConfig+0x334>
 80023ea:	4b6a      	ldr	r3, [pc, #424]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 80023ec:	6a1b      	ldr	r3, [r3, #32]
 80023ee:	4a69      	ldr	r2, [pc, #420]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 80023f0:	f023 0301 	bic.w	r3, r3, #1
 80023f4:	6213      	str	r3, [r2, #32]
 80023f6:	4b67      	ldr	r3, [pc, #412]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 80023f8:	6a1b      	ldr	r3, [r3, #32]
 80023fa:	4a66      	ldr	r2, [pc, #408]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 80023fc:	f023 0304 	bic.w	r3, r3, #4
 8002400:	6213      	str	r3, [r2, #32]
 8002402:	e01c      	b.n	800243e <HAL_RCC_OscConfig+0x36e>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	2b05      	cmp	r3, #5
 800240a:	d10c      	bne.n	8002426 <HAL_RCC_OscConfig+0x356>
 800240c:	4b61      	ldr	r3, [pc, #388]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	4a60      	ldr	r2, [pc, #384]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 8002412:	f043 0304 	orr.w	r3, r3, #4
 8002416:	6213      	str	r3, [r2, #32]
 8002418:	4b5e      	ldr	r3, [pc, #376]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	4a5d      	ldr	r2, [pc, #372]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 800241e:	f043 0301 	orr.w	r3, r3, #1
 8002422:	6213      	str	r3, [r2, #32]
 8002424:	e00b      	b.n	800243e <HAL_RCC_OscConfig+0x36e>
 8002426:	4b5b      	ldr	r3, [pc, #364]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	4a5a      	ldr	r2, [pc, #360]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 800242c:	f023 0301 	bic.w	r3, r3, #1
 8002430:	6213      	str	r3, [r2, #32]
 8002432:	4b58      	ldr	r3, [pc, #352]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	4a57      	ldr	r2, [pc, #348]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 8002438:	f023 0304 	bic.w	r3, r3, #4
 800243c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d015      	beq.n	8002472 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002446:	f7fe fe6b 	bl	8001120 <HAL_GetTick>
 800244a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800244c:	e00a      	b.n	8002464 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800244e:	f7fe fe67 	bl	8001120 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	f241 3288 	movw	r2, #5000	@ 0x1388
 800245c:	4293      	cmp	r3, r2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e0b1      	b.n	80025c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002464:	4b4b      	ldr	r3, [pc, #300]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 8002466:	6a1b      	ldr	r3, [r3, #32]
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d0ee      	beq.n	800244e <HAL_RCC_OscConfig+0x37e>
 8002470:	e014      	b.n	800249c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002472:	f7fe fe55 	bl	8001120 <HAL_GetTick>
 8002476:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002478:	e00a      	b.n	8002490 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800247a:	f7fe fe51 	bl	8001120 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002488:	4293      	cmp	r3, r2
 800248a:	d901      	bls.n	8002490 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e09b      	b.n	80025c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002490:	4b40      	ldr	r3, [pc, #256]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d1ee      	bne.n	800247a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800249c:	7dfb      	ldrb	r3, [r7, #23]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d105      	bne.n	80024ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024a2:	4b3c      	ldr	r3, [pc, #240]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	4a3b      	ldr	r2, [pc, #236]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 80024a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	69db      	ldr	r3, [r3, #28]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f000 8087 	beq.w	80025c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024b8:	4b36      	ldr	r3, [pc, #216]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f003 030c 	and.w	r3, r3, #12
 80024c0:	2b08      	cmp	r3, #8
 80024c2:	d061      	beq.n	8002588 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	69db      	ldr	r3, [r3, #28]
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d146      	bne.n	800255a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024cc:	4b33      	ldr	r3, [pc, #204]	@ (800259c <HAL_RCC_OscConfig+0x4cc>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d2:	f7fe fe25 	bl	8001120 <HAL_GetTick>
 80024d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024d8:	e008      	b.n	80024ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024da:	f7fe fe21 	bl	8001120 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e06d      	b.n	80025c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024ec:	4b29      	ldr	r3, [pc, #164]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1f0      	bne.n	80024da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a1b      	ldr	r3, [r3, #32]
 80024fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002500:	d108      	bne.n	8002514 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002502:	4b24      	ldr	r3, [pc, #144]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	4921      	ldr	r1, [pc, #132]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 8002510:	4313      	orrs	r3, r2
 8002512:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002514:	4b1f      	ldr	r3, [pc, #124]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a19      	ldr	r1, [r3, #32]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002524:	430b      	orrs	r3, r1
 8002526:	491b      	ldr	r1, [pc, #108]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 8002528:	4313      	orrs	r3, r2
 800252a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800252c:	4b1b      	ldr	r3, [pc, #108]	@ (800259c <HAL_RCC_OscConfig+0x4cc>)
 800252e:	2201      	movs	r2, #1
 8002530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002532:	f7fe fdf5 	bl	8001120 <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002538:	e008      	b.n	800254c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800253a:	f7fe fdf1 	bl	8001120 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d901      	bls.n	800254c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e03d      	b.n	80025c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800254c:	4b11      	ldr	r3, [pc, #68]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d0f0      	beq.n	800253a <HAL_RCC_OscConfig+0x46a>
 8002558:	e035      	b.n	80025c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800255a:	4b10      	ldr	r3, [pc, #64]	@ (800259c <HAL_RCC_OscConfig+0x4cc>)
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002560:	f7fe fdde 	bl	8001120 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002568:	f7fe fdda 	bl	8001120 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e026      	b.n	80025c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800257a:	4b06      	ldr	r3, [pc, #24]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1f0      	bne.n	8002568 <HAL_RCC_OscConfig+0x498>
 8002586:	e01e      	b.n	80025c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	69db      	ldr	r3, [r3, #28]
 800258c:	2b01      	cmp	r3, #1
 800258e:	d107      	bne.n	80025a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e019      	b.n	80025c8 <HAL_RCC_OscConfig+0x4f8>
 8002594:	40021000 	.word	0x40021000
 8002598:	40007000 	.word	0x40007000
 800259c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025a0:	4b0b      	ldr	r3, [pc, #44]	@ (80025d0 <HAL_RCC_OscConfig+0x500>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a1b      	ldr	r3, [r3, #32]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d106      	bne.n	80025c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025be:	429a      	cmp	r2, r3
 80025c0:	d001      	beq.n	80025c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e000      	b.n	80025c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3718      	adds	r7, #24
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40021000 	.word	0x40021000

080025d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d101      	bne.n	80025e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e0d0      	b.n	800278a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025e8:	4b6a      	ldr	r3, [pc, #424]	@ (8002794 <HAL_RCC_ClockConfig+0x1c0>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0307 	and.w	r3, r3, #7
 80025f0:	683a      	ldr	r2, [r7, #0]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d910      	bls.n	8002618 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f6:	4b67      	ldr	r3, [pc, #412]	@ (8002794 <HAL_RCC_ClockConfig+0x1c0>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f023 0207 	bic.w	r2, r3, #7
 80025fe:	4965      	ldr	r1, [pc, #404]	@ (8002794 <HAL_RCC_ClockConfig+0x1c0>)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	4313      	orrs	r3, r2
 8002604:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002606:	4b63      	ldr	r3, [pc, #396]	@ (8002794 <HAL_RCC_ClockConfig+0x1c0>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	429a      	cmp	r2, r3
 8002612:	d001      	beq.n	8002618 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e0b8      	b.n	800278a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d020      	beq.n	8002666 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0304 	and.w	r3, r3, #4
 800262c:	2b00      	cmp	r3, #0
 800262e:	d005      	beq.n	800263c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002630:	4b59      	ldr	r3, [pc, #356]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	4a58      	ldr	r2, [pc, #352]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 8002636:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800263a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0308 	and.w	r3, r3, #8
 8002644:	2b00      	cmp	r3, #0
 8002646:	d005      	beq.n	8002654 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002648:	4b53      	ldr	r3, [pc, #332]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	4a52      	ldr	r2, [pc, #328]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 800264e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002652:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002654:	4b50      	ldr	r3, [pc, #320]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	494d      	ldr	r1, [pc, #308]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 8002662:	4313      	orrs	r3, r2
 8002664:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b00      	cmp	r3, #0
 8002670:	d040      	beq.n	80026f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d107      	bne.n	800268a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800267a:	4b47      	ldr	r3, [pc, #284]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d115      	bne.n	80026b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e07f      	b.n	800278a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	2b02      	cmp	r3, #2
 8002690:	d107      	bne.n	80026a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002692:	4b41      	ldr	r3, [pc, #260]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d109      	bne.n	80026b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e073      	b.n	800278a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026a2:	4b3d      	ldr	r3, [pc, #244]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e06b      	b.n	800278a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026b2:	4b39      	ldr	r3, [pc, #228]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f023 0203 	bic.w	r2, r3, #3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	4936      	ldr	r1, [pc, #216]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026c4:	f7fe fd2c 	bl	8001120 <HAL_GetTick>
 80026c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ca:	e00a      	b.n	80026e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026cc:	f7fe fd28 	bl	8001120 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026da:	4293      	cmp	r3, r2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e053      	b.n	800278a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026e2:	4b2d      	ldr	r3, [pc, #180]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f003 020c 	and.w	r2, r3, #12
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d1eb      	bne.n	80026cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026f4:	4b27      	ldr	r3, [pc, #156]	@ (8002794 <HAL_RCC_ClockConfig+0x1c0>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0307 	and.w	r3, r3, #7
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d210      	bcs.n	8002724 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002702:	4b24      	ldr	r3, [pc, #144]	@ (8002794 <HAL_RCC_ClockConfig+0x1c0>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f023 0207 	bic.w	r2, r3, #7
 800270a:	4922      	ldr	r1, [pc, #136]	@ (8002794 <HAL_RCC_ClockConfig+0x1c0>)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	4313      	orrs	r3, r2
 8002710:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002712:	4b20      	ldr	r3, [pc, #128]	@ (8002794 <HAL_RCC_ClockConfig+0x1c0>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0307 	and.w	r3, r3, #7
 800271a:	683a      	ldr	r2, [r7, #0]
 800271c:	429a      	cmp	r2, r3
 800271e:	d001      	beq.n	8002724 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e032      	b.n	800278a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0304 	and.w	r3, r3, #4
 800272c:	2b00      	cmp	r3, #0
 800272e:	d008      	beq.n	8002742 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002730:	4b19      	ldr	r3, [pc, #100]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	4916      	ldr	r1, [pc, #88]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 800273e:	4313      	orrs	r3, r2
 8002740:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0308 	and.w	r3, r3, #8
 800274a:	2b00      	cmp	r3, #0
 800274c:	d009      	beq.n	8002762 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800274e:	4b12      	ldr	r3, [pc, #72]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	490e      	ldr	r1, [pc, #56]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 800275e:	4313      	orrs	r3, r2
 8002760:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002762:	f000 f821 	bl	80027a8 <HAL_RCC_GetSysClockFreq>
 8002766:	4602      	mov	r2, r0
 8002768:	4b0b      	ldr	r3, [pc, #44]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	091b      	lsrs	r3, r3, #4
 800276e:	f003 030f 	and.w	r3, r3, #15
 8002772:	490a      	ldr	r1, [pc, #40]	@ (800279c <HAL_RCC_ClockConfig+0x1c8>)
 8002774:	5ccb      	ldrb	r3, [r1, r3]
 8002776:	fa22 f303 	lsr.w	r3, r2, r3
 800277a:	4a09      	ldr	r2, [pc, #36]	@ (80027a0 <HAL_RCC_ClockConfig+0x1cc>)
 800277c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800277e:	4b09      	ldr	r3, [pc, #36]	@ (80027a4 <HAL_RCC_ClockConfig+0x1d0>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4618      	mov	r0, r3
 8002784:	f7fe fc8a 	bl	800109c <HAL_InitTick>

  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	40022000 	.word	0x40022000
 8002798:	40021000 	.word	0x40021000
 800279c:	080035a0 	.word	0x080035a0
 80027a0:	20000000 	.word	0x20000000
 80027a4:	20000004 	.word	0x20000004

080027a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b087      	sub	sp, #28
 80027ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027ae:	2300      	movs	r3, #0
 80027b0:	60fb      	str	r3, [r7, #12]
 80027b2:	2300      	movs	r3, #0
 80027b4:	60bb      	str	r3, [r7, #8]
 80027b6:	2300      	movs	r3, #0
 80027b8:	617b      	str	r3, [r7, #20]
 80027ba:	2300      	movs	r3, #0
 80027bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80027be:	2300      	movs	r3, #0
 80027c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027c2:	4b1e      	ldr	r3, [pc, #120]	@ (800283c <HAL_RCC_GetSysClockFreq+0x94>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f003 030c 	and.w	r3, r3, #12
 80027ce:	2b04      	cmp	r3, #4
 80027d0:	d002      	beq.n	80027d8 <HAL_RCC_GetSysClockFreq+0x30>
 80027d2:	2b08      	cmp	r3, #8
 80027d4:	d003      	beq.n	80027de <HAL_RCC_GetSysClockFreq+0x36>
 80027d6:	e027      	b.n	8002828 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027d8:	4b19      	ldr	r3, [pc, #100]	@ (8002840 <HAL_RCC_GetSysClockFreq+0x98>)
 80027da:	613b      	str	r3, [r7, #16]
      break;
 80027dc:	e027      	b.n	800282e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	0c9b      	lsrs	r3, r3, #18
 80027e2:	f003 030f 	and.w	r3, r3, #15
 80027e6:	4a17      	ldr	r2, [pc, #92]	@ (8002844 <HAL_RCC_GetSysClockFreq+0x9c>)
 80027e8:	5cd3      	ldrb	r3, [r2, r3]
 80027ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d010      	beq.n	8002818 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027f6:	4b11      	ldr	r3, [pc, #68]	@ (800283c <HAL_RCC_GetSysClockFreq+0x94>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	0c5b      	lsrs	r3, r3, #17
 80027fc:	f003 0301 	and.w	r3, r3, #1
 8002800:	4a11      	ldr	r2, [pc, #68]	@ (8002848 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002802:	5cd3      	ldrb	r3, [r2, r3]
 8002804:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a0d      	ldr	r2, [pc, #52]	@ (8002840 <HAL_RCC_GetSysClockFreq+0x98>)
 800280a:	fb03 f202 	mul.w	r2, r3, r2
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	fbb2 f3f3 	udiv	r3, r2, r3
 8002814:	617b      	str	r3, [r7, #20]
 8002816:	e004      	b.n	8002822 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a0c      	ldr	r2, [pc, #48]	@ (800284c <HAL_RCC_GetSysClockFreq+0xa4>)
 800281c:	fb02 f303 	mul.w	r3, r2, r3
 8002820:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	613b      	str	r3, [r7, #16]
      break;
 8002826:	e002      	b.n	800282e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002828:	4b05      	ldr	r3, [pc, #20]	@ (8002840 <HAL_RCC_GetSysClockFreq+0x98>)
 800282a:	613b      	str	r3, [r7, #16]
      break;
 800282c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800282e:	693b      	ldr	r3, [r7, #16]
}
 8002830:	4618      	mov	r0, r3
 8002832:	371c      	adds	r7, #28
 8002834:	46bd      	mov	sp, r7
 8002836:	bc80      	pop	{r7}
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	40021000 	.word	0x40021000
 8002840:	007a1200 	.word	0x007a1200
 8002844:	080035b0 	.word	0x080035b0
 8002848:	080035c0 	.word	0x080035c0
 800284c:	003d0900 	.word	0x003d0900

08002850 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002858:	4b0a      	ldr	r3, [pc, #40]	@ (8002884 <RCC_Delay+0x34>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a0a      	ldr	r2, [pc, #40]	@ (8002888 <RCC_Delay+0x38>)
 800285e:	fba2 2303 	umull	r2, r3, r2, r3
 8002862:	0a5b      	lsrs	r3, r3, #9
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	fb02 f303 	mul.w	r3, r2, r3
 800286a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800286c:	bf00      	nop
  }
  while (Delay --);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	1e5a      	subs	r2, r3, #1
 8002872:	60fa      	str	r2, [r7, #12]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d1f9      	bne.n	800286c <RCC_Delay+0x1c>
}
 8002878:	bf00      	nop
 800287a:	bf00      	nop
 800287c:	3714      	adds	r7, #20
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr
 8002884:	20000000 	.word	0x20000000
 8002888:	10624dd3 	.word	0x10624dd3

0800288c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002894:	2300      	movs	r3, #0
 8002896:	613b      	str	r3, [r7, #16]
 8002898:	2300      	movs	r3, #0
 800289a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0301 	and.w	r3, r3, #1
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d07d      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80028a8:	2300      	movs	r3, #0
 80028aa:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ac:	4b4f      	ldr	r3, [pc, #316]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ae:	69db      	ldr	r3, [r3, #28]
 80028b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d10d      	bne.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028b8:	4b4c      	ldr	r3, [pc, #304]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ba:	69db      	ldr	r3, [r3, #28]
 80028bc:	4a4b      	ldr	r2, [pc, #300]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028c2:	61d3      	str	r3, [r2, #28]
 80028c4:	4b49      	ldr	r3, [pc, #292]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028c6:	69db      	ldr	r3, [r3, #28]
 80028c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028cc:	60bb      	str	r3, [r7, #8]
 80028ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028d0:	2301      	movs	r3, #1
 80028d2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d4:	4b46      	ldr	r3, [pc, #280]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d118      	bne.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028e0:	4b43      	ldr	r3, [pc, #268]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a42      	ldr	r2, [pc, #264]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ec:	f7fe fc18 	bl	8001120 <HAL_GetTick>
 80028f0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f2:	e008      	b.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028f4:	f7fe fc14 	bl	8001120 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b64      	cmp	r3, #100	@ 0x64
 8002900:	d901      	bls.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e06d      	b.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002906:	4b3a      	ldr	r3, [pc, #232]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800290e:	2b00      	cmp	r3, #0
 8002910:	d0f0      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002912:	4b36      	ldr	r3, [pc, #216]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002914:	6a1b      	ldr	r3, [r3, #32]
 8002916:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800291a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d02e      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	429a      	cmp	r2, r3
 800292e:	d027      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002930:	4b2e      	ldr	r3, [pc, #184]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002932:	6a1b      	ldr	r3, [r3, #32]
 8002934:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002938:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800293a:	4b2e      	ldr	r3, [pc, #184]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800293c:	2201      	movs	r2, #1
 800293e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002940:	4b2c      	ldr	r3, [pc, #176]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002942:	2200      	movs	r2, #0
 8002944:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002946:	4a29      	ldr	r2, [pc, #164]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	2b00      	cmp	r3, #0
 8002954:	d014      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002956:	f7fe fbe3 	bl	8001120 <HAL_GetTick>
 800295a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800295c:	e00a      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800295e:	f7fe fbdf 	bl	8001120 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	f241 3288 	movw	r2, #5000	@ 0x1388
 800296c:	4293      	cmp	r3, r2
 800296e:	d901      	bls.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e036      	b.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002974:	4b1d      	ldr	r3, [pc, #116]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002976:	6a1b      	ldr	r3, [r3, #32]
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d0ee      	beq.n	800295e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002980:	4b1a      	ldr	r3, [pc, #104]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	4917      	ldr	r1, [pc, #92]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800298e:	4313      	orrs	r3, r2
 8002990:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002992:	7dfb      	ldrb	r3, [r7, #23]
 8002994:	2b01      	cmp	r3, #1
 8002996:	d105      	bne.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002998:	4b14      	ldr	r3, [pc, #80]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800299a:	69db      	ldr	r3, [r3, #28]
 800299c:	4a13      	ldr	r2, [pc, #76]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800299e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029a2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d008      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029b0:	4b0e      	ldr	r3, [pc, #56]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	490b      	ldr	r1, [pc, #44]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0310 	and.w	r3, r3, #16
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d008      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029ce:	4b07      	ldr	r3, [pc, #28]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	4904      	ldr	r1, [pc, #16]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3718      	adds	r7, #24
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	40021000 	.word	0x40021000
 80029f0:	40007000 	.word	0x40007000
 80029f4:	42420440 	.word	0x42420440

080029f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e041      	b.n	8002a8e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d106      	bne.n	8002a24 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f7fe f9ee 	bl	8000e00 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2202      	movs	r2, #2
 8002a28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	3304      	adds	r3, #4
 8002a34:	4619      	mov	r1, r3
 8002a36:	4610      	mov	r0, r2
 8002a38:	f000 fabc 	bl	8002fb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
	...

08002a98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d109      	bne.n	8002abc <HAL_TIM_PWM_Start+0x24>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	bf14      	ite	ne
 8002ab4:	2301      	movne	r3, #1
 8002ab6:	2300      	moveq	r3, #0
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	e022      	b.n	8002b02 <HAL_TIM_PWM_Start+0x6a>
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	2b04      	cmp	r3, #4
 8002ac0:	d109      	bne.n	8002ad6 <HAL_TIM_PWM_Start+0x3e>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	bf14      	ite	ne
 8002ace:	2301      	movne	r3, #1
 8002ad0:	2300      	moveq	r3, #0
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	e015      	b.n	8002b02 <HAL_TIM_PWM_Start+0x6a>
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	2b08      	cmp	r3, #8
 8002ada:	d109      	bne.n	8002af0 <HAL_TIM_PWM_Start+0x58>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	bf14      	ite	ne
 8002ae8:	2301      	movne	r3, #1
 8002aea:	2300      	moveq	r3, #0
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	e008      	b.n	8002b02 <HAL_TIM_PWM_Start+0x6a>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	bf14      	ite	ne
 8002afc:	2301      	movne	r3, #1
 8002afe:	2300      	moveq	r3, #0
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e059      	b.n	8002bbe <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d104      	bne.n	8002b1a <HAL_TIM_PWM_Start+0x82>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2202      	movs	r2, #2
 8002b14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b18:	e013      	b.n	8002b42 <HAL_TIM_PWM_Start+0xaa>
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	2b04      	cmp	r3, #4
 8002b1e:	d104      	bne.n	8002b2a <HAL_TIM_PWM_Start+0x92>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2202      	movs	r2, #2
 8002b24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b28:	e00b      	b.n	8002b42 <HAL_TIM_PWM_Start+0xaa>
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	2b08      	cmp	r3, #8
 8002b2e:	d104      	bne.n	8002b3a <HAL_TIM_PWM_Start+0xa2>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2202      	movs	r2, #2
 8002b34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b38:	e003      	b.n	8002b42 <HAL_TIM_PWM_Start+0xaa>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2202      	movs	r2, #2
 8002b3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2201      	movs	r2, #1
 8002b48:	6839      	ldr	r1, [r7, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f000 fc1e 	bl	800338c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a1c      	ldr	r2, [pc, #112]	@ (8002bc8 <HAL_TIM_PWM_Start+0x130>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d107      	bne.n	8002b6a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b68:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a16      	ldr	r2, [pc, #88]	@ (8002bc8 <HAL_TIM_PWM_Start+0x130>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d009      	beq.n	8002b88 <HAL_TIM_PWM_Start+0xf0>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b7c:	d004      	beq.n	8002b88 <HAL_TIM_PWM_Start+0xf0>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a12      	ldr	r2, [pc, #72]	@ (8002bcc <HAL_TIM_PWM_Start+0x134>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d111      	bne.n	8002bac <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f003 0307 	and.w	r3, r3, #7
 8002b92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2b06      	cmp	r3, #6
 8002b98:	d010      	beq.n	8002bbc <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f042 0201 	orr.w	r2, r2, #1
 8002ba8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002baa:	e007      	b.n	8002bbc <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f042 0201 	orr.w	r2, r2, #1
 8002bba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40012c00 	.word	0x40012c00
 8002bcc:	40000400 	.word	0x40000400

08002bd0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d101      	bne.n	8002be4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e093      	b.n	8002d0c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d106      	bne.n	8002bfe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f7fe f951 	bl	8000ea0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2202      	movs	r2, #2
 8002c02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	6812      	ldr	r2, [r2, #0]
 8002c10:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002c14:	f023 0307 	bic.w	r3, r3, #7
 8002c18:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	3304      	adds	r3, #4
 8002c22:	4619      	mov	r1, r3
 8002c24:	4610      	mov	r0, r2
 8002c26:	f000 f9c5 	bl	8002fb4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	6a1b      	ldr	r3, [r3, #32]
 8002c40:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c52:	f023 0303 	bic.w	r3, r3, #3
 8002c56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	689a      	ldr	r2, [r3, #8]
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	021b      	lsls	r3, r3, #8
 8002c62:	4313      	orrs	r3, r2
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002c70:	f023 030c 	bic.w	r3, r3, #12
 8002c74:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002c7c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002c80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	68da      	ldr	r2, [r3, #12]
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	021b      	lsls	r3, r3, #8
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	011a      	lsls	r2, r3, #4
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	031b      	lsls	r3, r3, #12
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002cae:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685a      	ldr	r2, [r3, #4]
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	695b      	ldr	r3, [r3, #20]
 8002cb8:	011b      	lsls	r3, r3, #4
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2201      	movs	r2, #1
 8002cee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2201      	movs	r2, #1
 8002d06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3718      	adds	r7, #24
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002d24:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002d2c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002d34:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002d3c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d110      	bne.n	8002d66 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d44:	7bfb      	ldrb	r3, [r7, #15]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d102      	bne.n	8002d50 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002d4a:	7b7b      	ldrb	r3, [r7, #13]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d001      	beq.n	8002d54 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e069      	b.n	8002e28 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2202      	movs	r2, #2
 8002d58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2202      	movs	r2, #2
 8002d60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d64:	e031      	b.n	8002dca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	2b04      	cmp	r3, #4
 8002d6a:	d110      	bne.n	8002d8e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d6c:	7bbb      	ldrb	r3, [r7, #14]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d102      	bne.n	8002d78 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002d72:	7b3b      	ldrb	r3, [r7, #12]
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d001      	beq.n	8002d7c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e055      	b.n	8002e28 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2202      	movs	r2, #2
 8002d80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2202      	movs	r2, #2
 8002d88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d8c:	e01d      	b.n	8002dca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d8e:	7bfb      	ldrb	r3, [r7, #15]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d108      	bne.n	8002da6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d94:	7bbb      	ldrb	r3, [r7, #14]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d105      	bne.n	8002da6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d9a:	7b7b      	ldrb	r3, [r7, #13]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d102      	bne.n	8002da6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002da0:	7b3b      	ldrb	r3, [r7, #12]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d001      	beq.n	8002daa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e03e      	b.n	8002e28 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2202      	movs	r2, #2
 8002dae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2202      	movs	r2, #2
 8002db6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2202      	movs	r2, #2
 8002dbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2202      	movs	r2, #2
 8002dc6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d003      	beq.n	8002dd8 <HAL_TIM_Encoder_Start+0xc4>
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	2b04      	cmp	r3, #4
 8002dd4:	d008      	beq.n	8002de8 <HAL_TIM_Encoder_Start+0xd4>
 8002dd6:	e00f      	b.n	8002df8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	2100      	movs	r1, #0
 8002de0:	4618      	mov	r0, r3
 8002de2:	f000 fad3 	bl	800338c <TIM_CCxChannelCmd>
      break;
 8002de6:	e016      	b.n	8002e16 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2201      	movs	r2, #1
 8002dee:	2104      	movs	r1, #4
 8002df0:	4618      	mov	r0, r3
 8002df2:	f000 facb 	bl	800338c <TIM_CCxChannelCmd>
      break;
 8002df6:	e00e      	b.n	8002e16 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	2100      	movs	r1, #0
 8002e00:	4618      	mov	r0, r3
 8002e02:	f000 fac3 	bl	800338c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	2104      	movs	r1, #4
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f000 fabc 	bl	800338c <TIM_CCxChannelCmd>
      break;
 8002e14:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f042 0201 	orr.w	r2, r2, #1
 8002e24:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3710      	adds	r7, #16
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d101      	bne.n	8002e4e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002e4a:	2302      	movs	r3, #2
 8002e4c:	e0ae      	b.n	8002fac <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2201      	movs	r2, #1
 8002e52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2b0c      	cmp	r3, #12
 8002e5a:	f200 809f 	bhi.w	8002f9c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002e5e:	a201      	add	r2, pc, #4	@ (adr r2, 8002e64 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e64:	08002e99 	.word	0x08002e99
 8002e68:	08002f9d 	.word	0x08002f9d
 8002e6c:	08002f9d 	.word	0x08002f9d
 8002e70:	08002f9d 	.word	0x08002f9d
 8002e74:	08002ed9 	.word	0x08002ed9
 8002e78:	08002f9d 	.word	0x08002f9d
 8002e7c:	08002f9d 	.word	0x08002f9d
 8002e80:	08002f9d 	.word	0x08002f9d
 8002e84:	08002f1b 	.word	0x08002f1b
 8002e88:	08002f9d 	.word	0x08002f9d
 8002e8c:	08002f9d 	.word	0x08002f9d
 8002e90:	08002f9d 	.word	0x08002f9d
 8002e94:	08002f5b 	.word	0x08002f5b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68b9      	ldr	r1, [r7, #8]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f000 f8ec 	bl	800307c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	699a      	ldr	r2, [r3, #24]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f042 0208 	orr.w	r2, r2, #8
 8002eb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	699a      	ldr	r2, [r3, #24]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f022 0204 	bic.w	r2, r2, #4
 8002ec2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	6999      	ldr	r1, [r3, #24]
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	691a      	ldr	r2, [r3, #16]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	619a      	str	r2, [r3, #24]
      break;
 8002ed6:	e064      	b.n	8002fa2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68b9      	ldr	r1, [r7, #8]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f000 f932 	bl	8003148 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	699a      	ldr	r2, [r3, #24]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ef2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	699a      	ldr	r2, [r3, #24]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	6999      	ldr	r1, [r3, #24]
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	021a      	lsls	r2, r3, #8
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	430a      	orrs	r2, r1
 8002f16:	619a      	str	r2, [r3, #24]
      break;
 8002f18:	e043      	b.n	8002fa2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68b9      	ldr	r1, [r7, #8]
 8002f20:	4618      	mov	r0, r3
 8002f22:	f000 f97b 	bl	800321c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	69da      	ldr	r2, [r3, #28]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f042 0208 	orr.w	r2, r2, #8
 8002f34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	69da      	ldr	r2, [r3, #28]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f022 0204 	bic.w	r2, r2, #4
 8002f44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	69d9      	ldr	r1, [r3, #28]
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	691a      	ldr	r2, [r3, #16]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	430a      	orrs	r2, r1
 8002f56:	61da      	str	r2, [r3, #28]
      break;
 8002f58:	e023      	b.n	8002fa2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68b9      	ldr	r1, [r7, #8]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f000 f9c5 	bl	80032f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	69da      	ldr	r2, [r3, #28]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	69da      	ldr	r2, [r3, #28]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	69d9      	ldr	r1, [r3, #28]
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	021a      	lsls	r2, r3, #8
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	430a      	orrs	r2, r1
 8002f98:	61da      	str	r2, [r3, #28]
      break;
 8002f9a:	e002      	b.n	8002fa2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	75fb      	strb	r3, [r7, #23]
      break;
 8002fa0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002faa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3718      	adds	r7, #24
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a2b      	ldr	r2, [pc, #172]	@ (8003074 <TIM_Base_SetConfig+0xc0>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d007      	beq.n	8002fdc <TIM_Base_SetConfig+0x28>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fd2:	d003      	beq.n	8002fdc <TIM_Base_SetConfig+0x28>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4a28      	ldr	r2, [pc, #160]	@ (8003078 <TIM_Base_SetConfig+0xc4>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d108      	bne.n	8002fee <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fe2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a20      	ldr	r2, [pc, #128]	@ (8003074 <TIM_Base_SetConfig+0xc0>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d007      	beq.n	8003006 <TIM_Base_SetConfig+0x52>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ffc:	d003      	beq.n	8003006 <TIM_Base_SetConfig+0x52>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a1d      	ldr	r2, [pc, #116]	@ (8003078 <TIM_Base_SetConfig+0xc4>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d108      	bne.n	8003018 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800300c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	4313      	orrs	r3, r2
 8003016:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	4313      	orrs	r3, r2
 8003024:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a0d      	ldr	r2, [pc, #52]	@ (8003074 <TIM_Base_SetConfig+0xc0>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d103      	bne.n	800304c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	691a      	ldr	r2, [r3, #16]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b00      	cmp	r3, #0
 800305c:	d005      	beq.n	800306a <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	f023 0201 	bic.w	r2, r3, #1
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	611a      	str	r2, [r3, #16]
  }
}
 800306a:	bf00      	nop
 800306c:	3714      	adds	r7, #20
 800306e:	46bd      	mov	sp, r7
 8003070:	bc80      	pop	{r7}
 8003072:	4770      	bx	lr
 8003074:	40012c00 	.word	0x40012c00
 8003078:	40000400 	.word	0x40000400

0800307c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800307c:	b480      	push	{r7}
 800307e:	b087      	sub	sp, #28
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a1b      	ldr	r3, [r3, #32]
 8003090:	f023 0201 	bic.w	r2, r3, #1
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f023 0303 	bic.w	r3, r3, #3
 80030b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	f023 0302 	bic.w	r3, r3, #2
 80030c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a1c      	ldr	r2, [pc, #112]	@ (8003144 <TIM_OC1_SetConfig+0xc8>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d10c      	bne.n	80030f2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	f023 0308 	bic.w	r3, r3, #8
 80030de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	697a      	ldr	r2, [r7, #20]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	f023 0304 	bic.w	r3, r3, #4
 80030f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a13      	ldr	r2, [pc, #76]	@ (8003144 <TIM_OC1_SetConfig+0xc8>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d111      	bne.n	800311e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003100:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003108:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	4313      	orrs	r3, r2
 8003112:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	4313      	orrs	r3, r2
 800311c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	693a      	ldr	r2, [r7, #16]
 8003122:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685a      	ldr	r2, [r3, #4]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	697a      	ldr	r2, [r7, #20]
 8003136:	621a      	str	r2, [r3, #32]
}
 8003138:	bf00      	nop
 800313a:	371c      	adds	r7, #28
 800313c:	46bd      	mov	sp, r7
 800313e:	bc80      	pop	{r7}
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	40012c00 	.word	0x40012c00

08003148 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003148:	b480      	push	{r7}
 800314a:	b087      	sub	sp, #28
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a1b      	ldr	r3, [r3, #32]
 8003156:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a1b      	ldr	r3, [r3, #32]
 800315c:	f023 0210 	bic.w	r2, r3, #16
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003176:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800317e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	021b      	lsls	r3, r3, #8
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	4313      	orrs	r3, r2
 800318a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	f023 0320 	bic.w	r3, r3, #32
 8003192:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	011b      	lsls	r3, r3, #4
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	4313      	orrs	r3, r2
 800319e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a1d      	ldr	r2, [pc, #116]	@ (8003218 <TIM_OC2_SetConfig+0xd0>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d10d      	bne.n	80031c4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80031ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	011b      	lsls	r3, r3, #4
 80031b6:	697a      	ldr	r2, [r7, #20]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80031c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a14      	ldr	r2, [pc, #80]	@ (8003218 <TIM_OC2_SetConfig+0xd0>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d113      	bne.n	80031f4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80031d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80031da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	693a      	ldr	r2, [r7, #16]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685a      	ldr	r2, [r3, #4]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	697a      	ldr	r2, [r7, #20]
 800320c:	621a      	str	r2, [r3, #32]
}
 800320e:	bf00      	nop
 8003210:	371c      	adds	r7, #28
 8003212:	46bd      	mov	sp, r7
 8003214:	bc80      	pop	{r7}
 8003216:	4770      	bx	lr
 8003218:	40012c00 	.word	0x40012c00

0800321c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800321c:	b480      	push	{r7}
 800321e:	b087      	sub	sp, #28
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a1b      	ldr	r3, [r3, #32]
 800322a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a1b      	ldr	r3, [r3, #32]
 8003230:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	69db      	ldr	r3, [r3, #28]
 8003242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800324a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f023 0303 	bic.w	r3, r3, #3
 8003252:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	4313      	orrs	r3, r2
 800325c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003264:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	021b      	lsls	r3, r3, #8
 800326c:	697a      	ldr	r2, [r7, #20]
 800326e:	4313      	orrs	r3, r2
 8003270:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a1d      	ldr	r2, [pc, #116]	@ (80032ec <TIM_OC3_SetConfig+0xd0>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d10d      	bne.n	8003296 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003280:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	021b      	lsls	r3, r3, #8
 8003288:	697a      	ldr	r2, [r7, #20]
 800328a:	4313      	orrs	r3, r2
 800328c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003294:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a14      	ldr	r2, [pc, #80]	@ (80032ec <TIM_OC3_SetConfig+0xd0>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d113      	bne.n	80032c6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80032a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80032ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	011b      	lsls	r3, r3, #4
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	011b      	lsls	r3, r3, #4
 80032c0:	693a      	ldr	r2, [r7, #16]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	68fa      	ldr	r2, [r7, #12]
 80032d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	685a      	ldr	r2, [r3, #4]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	697a      	ldr	r2, [r7, #20]
 80032de:	621a      	str	r2, [r3, #32]
}
 80032e0:	bf00      	nop
 80032e2:	371c      	adds	r7, #28
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bc80      	pop	{r7}
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	40012c00 	.word	0x40012c00

080032f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b087      	sub	sp, #28
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a1b      	ldr	r3, [r3, #32]
 80032fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a1b      	ldr	r3, [r3, #32]
 8003304:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800331e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003326:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	021b      	lsls	r3, r3, #8
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	4313      	orrs	r3, r2
 8003332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800333a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	031b      	lsls	r3, r3, #12
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	4313      	orrs	r3, r2
 8003346:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a0f      	ldr	r2, [pc, #60]	@ (8003388 <TIM_OC4_SetConfig+0x98>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d109      	bne.n	8003364 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003356:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	695b      	ldr	r3, [r3, #20]
 800335c:	019b      	lsls	r3, r3, #6
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	4313      	orrs	r3, r2
 8003362:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	697a      	ldr	r2, [r7, #20]
 8003368:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	693a      	ldr	r2, [r7, #16]
 800337c:	621a      	str	r2, [r3, #32]
}
 800337e:	bf00      	nop
 8003380:	371c      	adds	r7, #28
 8003382:	46bd      	mov	sp, r7
 8003384:	bc80      	pop	{r7}
 8003386:	4770      	bx	lr
 8003388:	40012c00 	.word	0x40012c00

0800338c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800338c:	b480      	push	{r7}
 800338e:	b087      	sub	sp, #28
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	f003 031f 	and.w	r3, r3, #31
 800339e:	2201      	movs	r2, #1
 80033a0:	fa02 f303 	lsl.w	r3, r2, r3
 80033a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6a1a      	ldr	r2, [r3, #32]
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	43db      	mvns	r3, r3
 80033ae:	401a      	ands	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6a1a      	ldr	r2, [r3, #32]
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	f003 031f 	and.w	r3, r3, #31
 80033be:	6879      	ldr	r1, [r7, #4]
 80033c0:	fa01 f303 	lsl.w	r3, r1, r3
 80033c4:	431a      	orrs	r2, r3
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	621a      	str	r2, [r3, #32]
}
 80033ca:	bf00      	nop
 80033cc:	371c      	adds	r7, #28
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bc80      	pop	{r7}
 80033d2:	4770      	bx	lr

080033d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d101      	bne.n	80033ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033e8:	2302      	movs	r3, #2
 80033ea:	e041      	b.n	8003470 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2202      	movs	r2, #2
 80033f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003412:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	4313      	orrs	r3, r2
 800341c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a14      	ldr	r2, [pc, #80]	@ (800347c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d009      	beq.n	8003444 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003438:	d004      	beq.n	8003444 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a10      	ldr	r2, [pc, #64]	@ (8003480 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d10c      	bne.n	800345e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800344a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	68ba      	ldr	r2, [r7, #8]
 8003452:	4313      	orrs	r3, r2
 8003454:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68ba      	ldr	r2, [r7, #8]
 800345c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3714      	adds	r7, #20
 8003474:	46bd      	mov	sp, r7
 8003476:	bc80      	pop	{r7}
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	40012c00 	.word	0x40012c00
 8003480:	40000400 	.word	0x40000400

08003484 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800348e:	2300      	movs	r3, #0
 8003490:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003498:	2b01      	cmp	r3, #1
 800349a:	d101      	bne.n	80034a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800349c:	2302      	movs	r3, #2
 800349e:	e03d      	b.n	800351c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4313      	orrs	r3, r2
 80034de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	695b      	ldr	r3, [r3, #20]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	69db      	ldr	r3, [r3, #28]
 8003506:	4313      	orrs	r3, r2
 8003508:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68fa      	ldr	r2, [r7, #12]
 8003510:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3714      	adds	r7, #20
 8003520:	46bd      	mov	sp, r7
 8003522:	bc80      	pop	{r7}
 8003524:	4770      	bx	lr

08003526 <memset>:
 8003526:	4603      	mov	r3, r0
 8003528:	4402      	add	r2, r0
 800352a:	4293      	cmp	r3, r2
 800352c:	d100      	bne.n	8003530 <memset+0xa>
 800352e:	4770      	bx	lr
 8003530:	f803 1b01 	strb.w	r1, [r3], #1
 8003534:	e7f9      	b.n	800352a <memset+0x4>
	...

08003538 <__libc_init_array>:
 8003538:	b570      	push	{r4, r5, r6, lr}
 800353a:	2600      	movs	r6, #0
 800353c:	4d0c      	ldr	r5, [pc, #48]	@ (8003570 <__libc_init_array+0x38>)
 800353e:	4c0d      	ldr	r4, [pc, #52]	@ (8003574 <__libc_init_array+0x3c>)
 8003540:	1b64      	subs	r4, r4, r5
 8003542:	10a4      	asrs	r4, r4, #2
 8003544:	42a6      	cmp	r6, r4
 8003546:	d109      	bne.n	800355c <__libc_init_array+0x24>
 8003548:	f000 f81a 	bl	8003580 <_init>
 800354c:	2600      	movs	r6, #0
 800354e:	4d0a      	ldr	r5, [pc, #40]	@ (8003578 <__libc_init_array+0x40>)
 8003550:	4c0a      	ldr	r4, [pc, #40]	@ (800357c <__libc_init_array+0x44>)
 8003552:	1b64      	subs	r4, r4, r5
 8003554:	10a4      	asrs	r4, r4, #2
 8003556:	42a6      	cmp	r6, r4
 8003558:	d105      	bne.n	8003566 <__libc_init_array+0x2e>
 800355a:	bd70      	pop	{r4, r5, r6, pc}
 800355c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003560:	4798      	blx	r3
 8003562:	3601      	adds	r6, #1
 8003564:	e7ee      	b.n	8003544 <__libc_init_array+0xc>
 8003566:	f855 3b04 	ldr.w	r3, [r5], #4
 800356a:	4798      	blx	r3
 800356c:	3601      	adds	r6, #1
 800356e:	e7f2      	b.n	8003556 <__libc_init_array+0x1e>
 8003570:	080035c4 	.word	0x080035c4
 8003574:	080035c4 	.word	0x080035c4
 8003578:	080035c4 	.word	0x080035c4
 800357c:	080035c8 	.word	0x080035c8

08003580 <_init>:
 8003580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003582:	bf00      	nop
 8003584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003586:	bc08      	pop	{r3}
 8003588:	469e      	mov	lr, r3
 800358a:	4770      	bx	lr

0800358c <_fini>:
 800358c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800358e:	bf00      	nop
 8003590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003592:	bc08      	pop	{r3}
 8003594:	469e      	mov	lr, r3
 8003596:	4770      	bx	lr
